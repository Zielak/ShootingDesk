{
"version":3,
"file":"luxe_empty.js",
"sourceRoot":"file:///",
"sources":["/usr/lib/haxe/lib/luxe/git/luxe/Emitter.hx","/usr/lib/haxe/lib/luxe/git/luxe/Objects.hx","/usr/lib/haxe/lib/luxe/git/luxe/Entity.hx","/usr/lib/haxe/lib/luxe/git/luxe/Log.hx","/usr/lib/haxe/lib/luxe/git/luxe/structural/OrderedMap.hx","/usr/lib/haxe/lib/luxe/git/luxe/Visual.hx","/usr/lib/haxe/lib/luxe/git/luxe/macros/EntityRules.hx","/home/zielak/dev/games/ShootingDesk/src/Actor.hx","/usr/lib/haxe/std/js/_std/EReg.hx","/usr/lib/haxe/lib/luxe/git/luxe/States.hx","/home/zielak/dev/games/ShootingDesk/src/Game.hx","/home/zielak/dev/games/ShootingDesk/src/Hud.hx","/usr/lib/haxe/std/js/_std/HxOverrides.hx","/usr/lib/haxe/std/Lambda.hx","/usr/lib/haxe/std/List.hx","/usr/lib/haxe/lib/luxe/git/Luxe.hx","/home/zielak/dev/games/ShootingDesk/bin/web.build/haxe/LuxeApp.hx","/usr/lib/haxe/lib/luxe/git/luxe/Game.hx","/home/zielak/dev/games/ShootingDesk/src/Main.hx","/usr/lib/haxe/std/js/_std/Reflect.hx","/usr/lib/haxe/std/js/_std/Std.hx","/usr/lib/haxe/std/StringBuf.hx","/usr/lib/haxe/std/StringTools.hx","/usr/lib/haxe/std/js/_std/Type.hx","/usr/lib/haxe/std/UInt.hx","/usr/lib/haxe/std/haxe/CallStack.hx","/usr/lib/haxe/std/haxe/Int64.hx","/usr/lib/haxe/std/haxe/Log.hx","/usr/lib/haxe/std/haxe/Resource.hx","/usr/lib/haxe/std/haxe/Serializer.hx","/usr/lib/haxe/std/haxe/Timer.hx","/usr/lib/haxe/std/haxe/Unserializer.hx","/usr/lib/haxe/std/haxe/Utf8.hx","/usr/lib/haxe/std/js/_std/haxe/io/Bytes.hx","/usr/lib/haxe/std/haxe/crypto/Base64.hx","/usr/lib/haxe/std/haxe/crypto/BaseCode.hx","/usr/lib/haxe/std/haxe/crypto/Md5.hx","/usr/lib/haxe/std/js/_std/haxe/ds/IntMap.hx","/usr/lib/haxe/std/js/_std/haxe/ds/ObjectMap.hx","/usr/lib/haxe/std/js/_std/haxe/ds/StringMap.hx","/usr/lib/haxe/std/haxe/io/FPHelper.hx","/usr/lib/haxe/std/haxe/io/Path.hx","/usr/lib/haxe/std/js/Boot.hx","/usr/lib/haxe/std/js/html/CanvasElement.hx","/usr/lib/haxe/std/js/html/compat/ArrayBuffer.hx","/usr/lib/haxe/std/js/html/compat/DataView.hx","/usr/lib/haxe/std/js/html/compat/Uint8Array.hx","/usr/lib/haxe/lib/luxe/git/luxe/Audio.hx","/usr/lib/haxe/lib/luxe/git/luxe/Camera.hx","/usr/lib/haxe/lib/luxe/git/luxe/Component.hx","/usr/lib/haxe/lib/snow/git/snow/App.hx","/usr/lib/haxe/lib/luxe/git/luxe/Core.hx","/usr/lib/haxe/lib/luxe/git/luxe/Debug.hx","/usr/lib/haxe/lib/luxe/git/luxe/Draw.hx","/usr/lib/haxe/lib/luxe/git/luxe/Events.hx","/usr/lib/haxe/lib/luxe/git/luxe/IO.hx","/usr/lib/haxe/lib/luxe/git/luxe/Input.hx","/usr/lib/haxe/lib/luxe/git/luxe/NineSlice.hx","/usr/lib/haxe/lib/luxe/git/luxe/Parcel.hx","/usr/lib/haxe/lib/luxe/git/luxe/ParcelProgress.hx","/usr/lib/haxe/lib/luxe/git/luxe/Physics.hx","/usr/lib/haxe/lib/luxe/git/luxe/Resources.hx","/usr/lib/haxe/lib/luxe/git/luxe/Scene.hx","/usr/lib/haxe/lib/luxe/git/luxe/Screen.hx","/usr/lib/haxe/lib/luxe/git/luxe/Sprite.hx","/usr/lib/haxe/lib/luxe/git/luxe/Text.hx","/usr/lib/haxe/lib/luxe/git/luxe/Timer.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/ShapeDrawer.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Color.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/ShapeDrawerLuxe.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/data/RayCollision.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/data/RayIntersection.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/data/ShapeCollision.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/sat/Common.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/sat/SAT2D.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/shapes/Shape.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/shapes/Circle.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/shapes/Polygon.hx","/usr/lib/haxe/lib/luxe/git/luxe/collision/shapes/Ray.hx","/usr/lib/haxe/lib/luxe/git/luxe/components/Components.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/DebugView.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/BatcherDebugView.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/Inspector.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/ProfilerDebugView.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/SceneDebugView.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/StatsDebugView.hx","/usr/lib/haxe/lib/luxe/git/luxe/debug/TraceDebugView.hx","/usr/lib/haxe/lib/luxe/git/luxe/importers/bitmapfont/BitmapFontParser.hx","/usr/lib/haxe/lib/luxe/git/luxe/macros/BuildVersion.hx","/usr/lib/haxe/lib/luxe/git/luxe/resource/Resource.hx","/usr/lib/haxe/lib/luxe/git/luxe/structural/BalancedBST.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/actuators/GenericActuator.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/actuators/SimpleActuator.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/easing/Quad.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/Actuate.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/MotionPath.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/actuators/MethodActuator.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/actuators/MotionPathActuator.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/actuators/PropertyDetails.hx","/usr/lib/haxe/lib/luxe/git/luxe/tween/easing/Linear.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/GeometryUtils.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/Maths.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/Random.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/Utils.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/CodePoint.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/CodePointIter.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/InternalEncoding.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/Utf16.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/InternalEncodingIter.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/Unicode.hx","/usr/lib/haxe/lib/luxe/git/luxe/utils/unifill/Unifill.hx","/usr/lib/haxe/lib/luxe/git/phoenix/BatchState.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Batcher.hx","/usr/lib/haxe/lib/snow/git/snow/api/buffers/Float32Array.hx","/usr/lib/haxe/lib/luxe/git/phoenix/BitmapFont.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Camera.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Circle.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Matrix.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Quaternion.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Ray.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Rectangle.hx","/usr/lib/haxe/lib/luxe/git/phoenix/RenderPath.hx","/usr/lib/haxe/lib/luxe/git/phoenix/RenderState.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Texture.hx","/usr/lib/haxe/lib/luxe/git/phoenix/RenderTexture.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Renderer.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Shader.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Transform.hx","/usr/lib/haxe/lib/luxe/git/phoenix/Vector.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/Geometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/CircleGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/RingGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/ArcGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/GeometryState.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/LineGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/PlaneGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/QuadGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/QuadPackGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/RectangleGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/TextGeometry.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/TextureCoord.hx","/usr/lib/haxe/lib/luxe/git/phoenix/geometry/Vertex.hx","/usr/lib/haxe/lib/luxe/git/phoenix/utils/Rendering.hx","/usr/lib/haxe/lib/snow/git/snow/Snow.hx","/usr/lib/haxe/lib/snow/git/snow/api/Debug.hx","/usr/lib/haxe/lib/snow/git/snow/api/Libs.hx","/usr/lib/haxe/lib/snow/git/snow/api/Promise.hx","/usr/lib/haxe/lib/snow/git/snow/api/Timer.hx","/usr/lib/haxe/lib/snow/git/snow/api/buffers/Int32Array.hx","/usr/lib/haxe/lib/snow/git/snow/api/buffers/Uint8Array.hx","/usr/lib/haxe/lib/snow/git/snow/core/web/Core.hx","/usr/lib/haxe/lib/snow/git/snow/core/web/assets/Assets.hx","/usr/lib/haxe/lib/snow/git/snow/core/web/input/DOMKeys.hx","/usr/lib/haxe/lib/snow/git/snow/system/input/Keycodes.hx","/usr/lib/haxe/lib/snow/git/snow/core/web/input/Input.hx","/usr/lib/haxe/lib/snow/git/snow/core/web/io/IO.hx","/usr/lib/haxe/lib/snow/git/snow/core/web/window/Windowing.hx","/usr/lib/haxe/lib/snow/git/snow/modules/howlerjs/Audio.hx","/usr/lib/haxe/lib/snow/git/snow/system/audio/Sound.hx","/usr/lib/haxe/lib/snow/git/snow/modules/howlerjs/sound/Sound.hx","/usr/lib/haxe/lib/snow/git/snow/modules/opengl/web/GL.hx","/usr/lib/haxe/lib/snow/git/snow/system/assets/Asset.hx","/usr/lib/haxe/lib/snow/git/snow/system/assets/Assets.hx","/usr/lib/haxe/lib/snow/git/snow/system/audio/Audio.hx","/usr/lib/haxe/lib/snow/git/snow/system/input/Input.hx","/usr/lib/haxe/lib/snow/git/snow/system/io/IO.hx","/usr/lib/haxe/lib/snow/git/snow/system/window/Window.hx","/usr/lib/haxe/lib/snow/git/snow/system/window/Windowing.hx","/usr/lib/haxe/lib/snow/git/snow/types/Types.hx","/home/zielak/dev/games/ShootingDesk/src/utils/VectorUtil.hx","/usr/lib/haxe/std/js/_std/Math.hx"],
"sourcesContent":["package luxe;\n\nimport haxe.ds.IntMap;\nimport luxe.Log._debug;\nimport luxe.Log._verbose;\nimport luxe.Log._verboser;\nimport luxe.Log.log;\n\n\n@:noCompletion typedef EmitHandler = Dynamic->Void;\n@:noCompletion typedef HandlerList = Array<EmitHandler>;\n\n@:noCompletion private typedef EmitNode<T> = { event : T, handler:EmitHandler #if debug, ?pos:haxe.PosInfos #end }\n\n\n/** A simple event emitter, used as a base class for systems that want to handle direct connections to named events */\n\n// @:generic\nclass Emitter<ET:Int> {\n\n    @:noCompletion public var bindings : IntMap<HandlerList>;\n\n        //store connections loosely, to find connected locations\n    var connected : List< EmitNode<ET> >;\n        //store the items to remove\n    var _to_remove : List< EmitNode<ET> >;\n\n        /** create a new emitter instance, for binding functions easily to named events. similar to `Events` */\n    public function new() {\n\n        _to_remove = new List();\n        connected = new List();\n\n        bindings = new IntMap<HandlerList>();\n\n    } //new\n\n        /** Emit a named event */\n    @:noCompletion public function emit<T>( event:ET, ?data:T #if debug, ?pos:haxe.PosInfos #end ) {\n\n        _check();\n\n        var list = bindings.get(event);\n        if(list != null && list.length > 0) {\n            for(handler in list) {\n                #if debug _verboser('emit / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\n                handler(data);\n            }\n        }\n\n            //needed because handlers\n            //might disconnect listeners\n        _check();\n\n    } //emit\n\n        /** connect a named event to a handler */\n    @:noCompletion public function on<T>(event:ET, handler: T->Void #if debug, ?pos:haxe.PosInfos #end ) {\n\n        _check();\n\n        #if debug _verbose('on / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\n\n        if(!bindings.exists(event)) {\n\n            bindings.set(event, [handler]);\n            connected.push({ handler:handler, event:event #if debug, pos:pos #end });\n\n        } else {\n            var list = bindings.get(event);\n            if(list.indexOf(handler) == -1) {\n                list.push(handler);\n                connected.push({ handler:handler, event:event #if debug, pos:pos #end });\n            }\n        }\n\n    } //on\n\n        /** disconnect a named event and handler. returns true on success, or false if event or handler not found */\n    @:noCompletion public function off<T>(event:ET, handler: T->Void #if debug, ?pos:haxe.PosInfos #end ) : Bool {\n\n        _check();\n\n        var success = false;\n\n        if(bindings.exists(event)) {\n\n            #if debug _verbose('off / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\n\n            _to_remove.push({ event:event, handler:handler });\n\n            for(_info in connected) {\n                if(_info.event == event && _info.handler == handler) {\n                    connected.remove(_info);\n                }\n            }\n\n                //debateable :p\n            success = true;\n\n        } //if exists\n\n        return success;\n\n    } //off\n\n    @:noCompletion public function connections( handler:EmitHandler ) {\n\n        var list : Array<EmitNode<ET>> = [];\n\n        for(_info in connected) {\n            if(_info.handler == handler) {\n                list.push(_info);\n            }\n        }\n\n        return list;\n\n    } //connections\n\n    var _checking = false;\n\n    function _check() {\n\n        if(_checking) {\n            return;\n        }\n\n        _checking = true;\n\n        if(_to_remove.length > 0) {\n\n            for(_node in _to_remove) {\n\n                var list = bindings.get(_node.event);\n                list.remove( _node.handler );\n\n                    //clear the event list if there are no bindings\n                if(list.length == 0) {\n                    bindings.remove(_node.event);\n                }\n\n            } //each node\n\n            _to_remove = null;\n            _to_remove = new List();\n\n        } //_to_remove length > 0\n\n        _checking = false;\n\n    } //_check\n\n} //Emitter\n","package luxe;\n\nclass ID {\n\n        /** the id */\n    public var id : String;\n        /** the name */\n    public var name : String = '';\n\n    @:noCompletion public function new(?_name:String='', _id:String='') {\n\n        name = _name;\n        id = _id == '' ? Luxe.utils.uniqueid() : _id;\n\n    } //new\n\n} //ID\n\n\n/** A simple base object, event emitter, and ID. */\nclass Objects extends Emitter<Int> {\n\n        /** the id */\n    @:isVar public var id (get,set) : String = '';\n        /** the name */\n    @:isVar public var name (get,set) : String = '';\n\n    @:noCompletion public function new(?_name:String='', _id:String='') {\n\n        super();\n        name = _name;\n        id = _id == '' ? Luxe.utils.uniqueid() : _id;\n\n    } //new\n\n//These can't be inlined because they are intended to be overridden in subclasses\n\n    function set_name(_name:String) : String    return name = _name;\n    function set_id(_id:String) : String        return id = _id;\n    function get_name() : String                return name;\n    function get_id() : String                  return id;\n\n\n} //Objects","package luxe;\n\nimport Luxe.Ev;\nimport luxe.Quaternion;\nimport luxe.Transform;\nimport luxe.Matrix;\n\nimport luxe.Input;\nimport luxe.Screen;\nimport luxe.Vector;\nimport luxe.Scene;\nimport luxe.components.Components;\nimport luxe.Component;\nimport luxe.Emitter;\nimport luxe.structural.OrderedMap;\n\nimport luxe.options.EntityOptions;\n\nimport luxe.Log.*;\n\n@:autoBuild(luxe.macros.EntityRules.apply())\nclass Entity extends Objects {\n\n        /** The map of attached components, by name. use .get to find components in children and from other components instead of accessing this unless you need to */\n    public var components (get,never) : OrderedMap<String, Component>;\n        /** A local event system for sending and receiving named events through the entity. Helps communicate between components, and more. */\n    public var events : luxe.Events;\n        /** The list of children this entity is parenting. Use `child.parent = null;` to remove, or `child.parent = entity;` to assign. */\n    public var children : Array<Entity>;\n\n        /** whether or not this entity has been destroyed */\n    public var destroyed : Bool = false;\n        /** whether or not this entity has been inited yet */\n    public var inited : Bool = false;\n        /** whether or not this entity has been started/reset by the scene */\n    public var started : Bool = false;\n\n        /** per entity fixed rate timer, if any. if 0 (default) no fixed update is called on this entity. */\n    @:isVar public var fixed_rate       (get,set) : Float = 0;\n        /** The parent entity if any, set to null for no parent */\n    @:isVar public var parent           (get,set) : Entity;\n        /** if the entity is in a scene, this is not null */\n    @:isVar public var scene            (get,set) : Scene;\n        /** if the entity is active in the scene or not. set to inactive to stop scene events propogating into this entity and it's components and children */\n    @:isVar public var active           (get,set) : Bool = true;\n\n        /** The spatial transform of the entity. */\n    @:isVar public var transform        (get,set) : Transform;\n        /** The local position of the spatial transform */\n    public var pos              (get,set) : Vector;\n        /** The local rotation of the spatial transform */\n    public var rotation         (get,set) : Quaternion;\n        /** The local scale of the spatial transform */\n    public var scale            (get,set) : Vector;\n        /** The local origin of the spatial transform */\n    public var origin           (get,set) : Vector;\n\n        /** the system for the entity */\n    var _components : Components;\n        /** the timer for the fixed update */\n    var fixed_rate_timer : snow.api.Timer;\n        /** the options passed in for giving to the init function */\n    var options : Dynamic;\n\n\n        /** called when the scene is initiated. **use this instead of new** for state setup. it respects the order of creations, children, and component ordering. */\n    public function init() {}\n        /** called once per frame, passing the delta time */\n    public function update(dt:Float) {}\n        /** called once per fixed rate, only if fixed_rate != 0 */\n    public function onfixedupdate(rate:Float) {}\n\n        /** called when the scene starts or is reset. use this to reset state. */\n    @:noCompletion public function onreset() {}\n        /** called when the scene, parent or entity is destroyed. use this to clean up state. */\n    @:noCompletion public function ondestroy() {}\n\n        /** override this to get notified when a key is released. only called if overridden. */\n    @:noCompletion public function onkeyup( event:KeyEvent ) {}\n        /** override this to get notified when a key is pressed. only called if overridden. */\n    @:noCompletion public function onkeydown( event:KeyEvent ) {}\n        /** override this to get notified when a text input event happens. only called if overridden. */\n    @:noCompletion public function ontextinput( event:TextEvent ) {}\n\n        /** override this to get notified when a named input event happens. only called if overridden. */\n    @:noCompletion public function oninputdown( name:String, event:InputEvent ) {}\n        /** override this to get notified when a named input event happens. only called if overridden. */\n    @:noCompletion public function oninputup( name:String, event:InputEvent ) {}\n\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\n    @:noCompletion public function onmousedown( event:MouseEvent ) {}\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\n    @:noCompletion public function onmouseup( event:MouseEvent ) {}\n        /** override this to get notified when a mouse is moved. only called if overridden. */\n    @:noCompletion public function onmousemove( event:MouseEvent ) {}\n        /** override this to get notified when the mouse wheel/trackpad is scrolled. only called if overridden. */\n    @:noCompletion public function onmousewheel( event:MouseEvent ) {}\n\n        /** override this to get notified when a touch begins. only called if overridden. */\n    @:noCompletion public function ontouchdown( event:TouchEvent ) {}\n        /** override this to get notified when a touch ends. only called if overridden. */\n    @:noCompletion public function ontouchup( event:TouchEvent ) {}\n        /** override this to get notified when a touch moves. only called if overridden. */\n    @:noCompletion public function ontouchmove( event:TouchEvent ) {}\n\n        /** override this to get notified when a gamepad button is released. only called if overridden. */\n    @:noCompletion public function ongamepadup( event:GamepadEvent ) {}\n        /** override this to get notified when a gamepad button is pressed. only called if overridden. */\n    @:noCompletion public function ongamepaddown( event:GamepadEvent ) {}\n        /** override this to get notified when a gamepad axis changes. only called if overridden. */\n    @:noCompletion public function ongamepadaxis( event:GamepadEvent ) {}\n        /** override this to get notified when a gamepad device event happens. only called if overridden. */\n    @:noCompletion public function ongamepaddevice( event:GamepadEvent ) {}\n\n       /** override this to get notified when a window is moved, with the data containing the new x/y position */\n   @:noCompletion public function onwindowmoved( event:WindowEvent ) {}\n       /** override this to get notified when a window is resized by the user, with the data containing the new x/y size */\n   @:noCompletion public function onwindowresized( event:WindowEvent ) {}\n       /** override this to get notified when a window is resized by the system or code or the user, with the data containing the new x/y size */\n   @:noCompletion public function onwindowsized( event:WindowEvent ) {}\n       /** override this to get notified when a window is minimized. */\n   @:noCompletion public function onwindowminimized( event:WindowEvent ) {}\n       /** override this to get notified when a window is restored. */\n   @:noCompletion public function onwindowrestored( event:WindowEvent ) {}\n\n\n        /** Create a new entity with the given options */\n    public function new( ?_options:EntityOptions #if debug, ?_pos_info:haxe.PosInfos #end ) {\n\n        super('entity');\n\n            //default to name.id\n        name += '.$id';\n\n        options = _options;\n\n        _verbose('create new entity with options ' + options);\n\n        _components = new Components( this );\n        children = new Array<Entity>();\n        events = new luxe.Events();\n\n        if(options != null && options.transform != null) {\n            transform = options.transform;\n        } else {\n            transform = new Transform();\n        }\n\n            //listen for transform changes\n        transform.listen_pos(set_pos_from_transform);\n        transform.listen_scale(set_scale_from_transform);\n        transform.listen_origin(set_origin_from_transform);\n        transform.listen_parent(set_parent_from_transform);\n        transform.listen_rotation(set_rotation_from_transform);\n\n        if(options != null) {\n\n    //name\n                //default to non-unique name\n            def(options.name_unique, false);\n\n            if(options.name != null) {\n                name = options.name;\n                if(options.name_unique) {\n                    name += '.$id';\n                }\n            }\n\n    //position\n            if(options.pos != null) {\n                var _op : Vector = options.pos;\n                pos = _op.clone();\n            }\n    //scale\n            if(options.scale != null) {\n                var _os : Vector = options.scale;\n                scale = _os.clone();\n            }\n\n    //scene\n            _verbose('\\tnon null options, checking for scene placement no_scene:' + options.no_scene + ' scene:' + options.scene);\n                //if they haven't explicitly said \"no scene management\"\n                //we add to the scene they requested, or the default scene otherwise\n            var _should_add:Bool = true;\n\n            if(options.no_scene != null) {\n                if(options.no_scene == true) {\n                    _should_add = false;\n                    _verbose(\" \\tno_scene flag requested\");\n                }\n            }\n\n            if(options.parent != null) {\n\n                _should_add = false;\n                parent = options.parent;\n                _verbose(\" \\tparent specified, not adding to scene only to parent :\" + options.parent.name);\n\n            }\n\n            if(_should_add) {\n\n                if(options.scene != null) {\n                    scene = options.scene;\n                    _verbose(\" \\tscene specified, storing in scene named : \" + options.scene.name );\n                } else {\n                    scene = Luxe.scene;\n                    _verbose(\" \\tno scene specified, adding to default scene\");\n                }\n\n            } //_should_add\n\n        } else {\n\n            scene = Luxe.scene;\n\n            _verbose(\" \\tadding to default scene because no options were specified.\");\n\n        } //options ! null\n\n\n            //finally, add to the requested scene\n        if(scene != null) {\n\n            _verbose(\" \\tadding to scene \" + scene.name);\n\n            scene.add( this #if debug, _pos_info #end );\n\n                //we also want to listen for scene events\n\n        } else {\n            _verbose(\" \\tnot adding to any scene.\");\n        }\n\n        _verbose(\" created \" + name);\n\n    } //new\n\n\n//components\n\n\n        /** attach a component to the entity */\n    var component_count : Int = 0;\n    public inline function add<T:Component>( _component:T ) : T {\n        component_count++;\n        return _components.add( _component );\n    } //add\n\n        /** remove a component from the entity */\n    public inline function remove( _name:String ) : Bool {\n        component_count--;\n        return _components.remove( _name );\n    } //remove\n\n        /** get a component from the entity, by name */\n    public inline function get<T>(_name:String, ?_in_children:Bool = false ) : T {\n        return _components.get( _name, _in_children );\n    } //get\n\n        /** get all component from the entity, by name */\n    public inline function get_any<T>(_name:String, ?_in_children:Bool = false, ?_first_only:Bool = true ) : Array<T> {\n        return _components.get_any( _name, _in_children, _first_only );\n    } //get\n\n        /** returns true if the entity has a component by the given name */\n    public inline function has( _name:String ) : Bool {\n        return _components.has( _name );\n    } //has\n\n\n\n//internal\n\n    @:allow(luxe.Scene)\n    inline function _init() {\n\n            //verbose debugging\n        _verbose('${this} inside _init with options as $options' );\n        _debug('calling init on ' + name);\n\n\n        init();\n            //for any potential listeners, after the init() direct call\n            //as there is likely connections made during init\n        emit(Ev.init);\n\n        if(component_count > 0) {\n            //init all the components attached\n            for(_component in components) {\n                _verbose(\"          \" + name + \" calling init on component \" + _component.name );\n                _component.init();\n            } //for each component\n        } //component_count\n\n            //now init our children, so they do the same\n        if(children.length > 0) {\n            for(_child in children) {\n                _verbose(\"         parent \" + name + \" calling init on child \" + _child.name );\n                _child._init();\n            } //for each child\n        }\n\n            //flag internally\n        inited = true;\n\n    } //_init\n\n    @:allow(luxe.Scene)\n    inline function _reset(_) {\n\n        _debug('calling reset on ' + name);\n\n            //parent\n        onreset();\n            //potential listeners\n        emit(Ev.reset);\n\n        if(component_count > 0) {\n            for(_component in components) {\n                _verbose(\"          \" + name + \" calling reset on component \" + _component.name );\n                _component.onreset();\n            } //for each component\n        }\n\n            //now reset our children, so they do the same\n        if(children.length > 0) {\n            for(_child in children) {\n                _child._reset(_);\n                _debug(\"         parent \" + name + \" calling reset on child \" + _child.name );\n            } //for each child\n        }\n\n            //start the fixed rate timer\n        _set_fixed_rate_timer( fixed_rate );\n\n            //flag internally\n        started = true;\n\n    } //_reset\n\n        /** destroy this entity. removes it from the scene if any, from the parent etc. */\n    public function destroy( ?_from_parent:Bool=false ) {\n\n        _debug('destroy ' + name + ' with ' + children.length + ' children and ' + Lambda.count(components) + \" components / \" + id);\n\n            //first destroy children\n        if(children.length > 0) {\n            for(_child in children) {\n                _verbose('     calling destroy on child ' + _child.name);\n                _child.destroy(true);\n            } //for each child\n        }\n\n            //clear the list\n        children = null;\n        children = [];\n\n        if(component_count > 0) {\n            for(_component in components) {\n                _verbose(\"          \" + name + \" calling destroy on component \" + _component.name );\n                _component.onremoved();\n                _component.ondestroy();\n            } //for each component\n        }\n\n            //tell listeners\n        emit(Ev.destroy);\n            //then parent\n        ondestroy();\n\n            //remove it from it's parent if any\n        if(parent != null && !_from_parent) {\n            _verbose(\"     removing \" + name + \"/\" + id + \" from parent \" + parent.name + \" / \" + parent.id );\n            parent._remove_child(this);\n        }\n\n            //kill any fixed rate timers\n        _stop_fixed_rate_timer();\n\n            //mark the flags\n        destroyed = true;\n        inited = false;\n        started = false;\n\n            //remove from the scene it's in if any\n        _verbose( \"     removing \" + name + \" / \" + id + \" from scene \" + scene );\n\n        if(scene != null) {\n            scene.remove(this);\n        }\n\n            //kill the events\n        if(events != null) {\n            events.destroy();\n            events = null;\n        }\n\n    } //destroy\n\n    @:allow(luxe.Scene)\n    inline function _update(dt:Float) {\n\n        if(destroyed) {\n            _debug(\" calling update AFTER DESTROYED on \" + name + \" / \" + id );\n            return;\n        }\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _verboser('calling update on ' + name);\n\n            //make sure transforms are resolved\n        transform.clean_check();\n\n            //update the parent first\n        update(dt);\n\n        if(events != null) {\n                //update the events\n            events.process();\n        }\n\n            //update all the components attached directly to us\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.update(dt);\n            } //for each component\n        }\n\n            //now update our children, so they do the same\n        if(children.length > 0) {\n            for(_child in children) {\n                _child._update(dt);\n            } //for each child\n        }\n\n    } //_update\n\n//timing\n\n    @:allow(luxe.Entity)\n    function _fixed_update() {\n\n        if(destroyed) {\n            return;\n        }\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _verboser('calling fixedupdate on ' + name);\n\n        emit(Ev.fixedupdate);\n\n        onfixedupdate(fixed_rate);\n\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.onfixedupdate(fixed_rate);\n            }\n        }\n\n        if(children.length > 0) {\n            for(_child in children) {\n                _child._fixed_update();\n            }\n        }\n\n    } //_fixed_update\n\n//events\n\n    inline function _find_emit_source(?_from_unlisten:Bool=false) : Emitter<Luxe.Ev> {\n\n        var source = null;\n\n        if(scene != null) {\n\n            source = scene;\n\n        } else if(parent != null) {\n\n            var looking = true;\n            var _parent = parent;\n\n            while(looking) {\n\n                    //not a root item\n                if(_parent.scene == null) {\n                        //no parent? this is not connected at all\n                    if(_parent.parent == null) {\n                        if(!_from_unlisten) {\n                            log('entity has no parent or scene, currently no core events will reach it.');\n                        }\n                        looking = false;\n                        break;\n                    } else {\n                        //still has a parent,\n                        //keep looking\n                        _parent = _parent.parent;\n                    }\n\n                } else {\n\n                    source = _parent.scene;\n                    looking = false;\n                    break;\n\n                } //no scene\n\n            } //while looking\n\n        } else {\n            if(!_from_unlisten) {\n                log('entity has no parent or scene, currently no core events will reach it.');\n            }\n        }\n\n        return source;\n\n    } //_find_emit_source\n\n    @:allow(luxe.Component)\n    function _listen( _event:Int, _handler:EmitHandler, ? _self:Bool=false ) {\n\n        //this function is called when a component, or a subclass tries to override the onmousedown handler,\n        //at which point it makes sure this entity is connected to the scene handlers, and then makes sure\n        //that the calling component or this instance is connected to its own events to the requested handler\n\n        //the duplication of events&handler combo is handled internally by Emitter, so we don't have to worry\n        //todo: potential consolidation to avoid the switch here\n\n\n        if( !_self ){\n            on(_event, _handler);\n        }\n\n        var source = _find_emit_source();\n\n        _debug('$name / listen to $_event sourced from $source');\n\n        if(source != null) {\n            switch(_event) {\n\n                case Ev.keyup           : source.on(_event, _keyup);\n                case Ev.keydown         : source.on(_event, _keydown);\n                case Ev.textinput       : source.on(_event, _textinput);\n\n                case Ev.mousedown       : source.on(_event, _mousedown);\n                case Ev.mouseup         : source.on(_event, _mouseup);\n                case Ev.mousemove       : source.on(_event, _mousemove);\n                case Ev.mousewheel      : source.on(_event, _mousewheel);\n\n                case Ev.touchdown       : source.on(_event, _touchdown);\n                case Ev.touchup         : source.on(_event, _touchup);\n                case Ev.touchmove       : source.on(_event, _touchmove);\n\n                case Ev.inputup         : source.on(_event, _inputup);\n                case Ev.inputdown       : source.on(_event, _inputdown);\n\n                case Ev.gamepaddown     : source.on(_event, _gamepaddown);\n                case Ev.gamepadup       : source.on(_event, _gamepadup);\n                case Ev.gamepadaxis     : source.on(_event, _gamepadaxis);\n                case Ev.gamepaddevice   : source.on(_event, _gamepaddevice);\n\n                case Ev.windowmoved     : source.on(_event, _windowmoved);\n                case Ev.windowresized   : source.on(_event, _windowresized);\n                case Ev.windowsized     : source.on(_event, _windowsized);\n                case Ev.windowminimized : source.on(_event, _windowminimized);\n                case Ev.windowrestored  : source.on(_event, _windowrestored);\n\n            } //switch event\n        } //source != null\n\n    } //_listen\n\n    @:allow(luxe.Entity)\n    @:allow(luxe.Component)\n    @:allow(luxe.macros.ComponentRules)\n    function _unlisten( _event:Int, _handler:EmitHandler, ?_self:Bool=false ) {\n\n        var source = _find_emit_source(true);\n\n        _debug('$name / unlisten to $_event from $source');\n\n        if(!_self) {\n            off(_event, _handler);\n        }\n\n        if(source != null) {\n            switch(_event) {\n\n                case Ev.keyup           : source.off(_event, _keyup);\n                case Ev.keydown         : source.off(_event, _keydown);\n                case Ev.textinput       : source.off(_event, _textinput);\n\n                case Ev.mousedown       : source.off(_event, _mousedown);\n                case Ev.mouseup         : source.off(_event, _mouseup);\n                case Ev.mousemove       : source.off(_event, _mousemove);\n                case Ev.mousewheel      : source.off(_event, _mousewheel);\n\n                case Ev.touchdown       : source.off(_event, _touchdown);\n                case Ev.touchup         : source.off(_event, _touchup);\n                case Ev.touchmove       : source.off(_event, _touchmove);\n\n                case Ev.inputup         : source.off(_event, _inputup);\n                case Ev.inputdown       : source.off(_event, _inputdown);\n\n                case Ev.gamepaddown     : source.off(_event, _gamepaddown);\n                case Ev.gamepadup       : source.off(_event, _gamepadup);\n                case Ev.gamepadaxis     : source.off(_event, _gamepadaxis);\n                case Ev.gamepaddevice   : source.off(_event, _gamepaddevice);\n\n                case Ev.windowmoved     : source.off(_event, _windowmoved);\n                case Ev.windowresized   : source.off(_event, _windowresized);\n                case Ev.windowsized     : source.off(_event, _windowsized);\n                case Ev.windowminimized : source.off(_event, _windowminimized);\n                case Ev.windowrestored  : source.off(_event, _windowrestored);\n\n            } //switch event\n        } //source != null\n\n    } //_unlisten\n\n\n//scene\n\n    function _detach_scene() {\n\n        if(scene != null) {\n\n            scene.off(Ev.reset, _reset);\n            scene.off(Ev.destroy, destroy);\n\n                //precaution\n            scene.off(Ev.keyup, _keyup);\n            scene.off(Ev.keydown, _keydown);\n            scene.off(Ev.textinput, _textinput);\n            scene.off(Ev.mousedown, _mousedown);\n            scene.off(Ev.mouseup, _mouseup);\n            scene.off(Ev.mousemove, _mousemove);\n            scene.off(Ev.mousewheel, _mousewheel);\n            scene.off(Ev.touchdown, _touchdown);\n            scene.off(Ev.touchup, _touchup);\n            scene.off(Ev.touchmove, _touchmove);\n            scene.off(Ev.inputup, _inputup);\n            scene.off(Ev.inputdown, _inputdown);\n            scene.off(Ev.gamepaddown, _gamepaddown);\n            scene.off(Ev.gamepadup, _gamepadup);\n            scene.off(Ev.gamepadaxis, _gamepadaxis);\n            scene.off(Ev.gamepaddevice, _gamepaddevice);\n            scene.off(Ev.windowmoved, _windowmoved);\n            scene.off(Ev.windowresized, _windowresized);\n            scene.off(Ev.windowsized, _windowsized);\n            scene.off(Ev.windowminimized, _windowminimized);\n            scene.off(Ev.windowrestored, _windowrestored);\n\n        } //scene != null\n\n    } //detach_scene\n\n    function _attach_scene() {\n\n        if(scene != null) {\n            scene.on(Ev.reset, _reset);\n            scene.on(Ev.destroy, destroy);\n        }\n\n    } //attach_scene\n\n//Keys\n\n    function _keyup( _event:KeyEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _keyup on ' + name);\n\n        onkeyup(_event);\n        emit(Ev.keyup, _event);\n\n    } //_keyup\n\n    function _keydown( _event:KeyEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _keydown on ' + name);\n\n        onkeydown(_event);\n        emit(Ev.keydown, _event);\n\n    } //_keydown\n\n    function _textinput( _event:TextEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _textinput on ' + name);\n\n        ontextinput(_event);\n        emit(Ev.textinput, _event);\n\n    } //_textinput\n\n\n//Mouse\n\n    function _mousedown( _event:MouseEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _mousedown on ' + name );\n\n        onmousedown(_event);\n        emit(Ev.mousedown, _event);\n\n    } //_mousedown\n\n\n    function _mouseup( _event:MouseEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _mouseup on ' + name);\n\n        onmouseup(_event);\n        emit(Ev.mouseup, _event);\n\n    } //_mouseup\n\n    function _mousewheel( _event:MouseEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _mousewheel on ' + name);\n\n        onmousewheel(_event);\n        emit(Ev.mousewheel, _event);\n\n    } //_mousewheel\n\n    function _mousemove( _event:MouseEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _mousemove on ' + name);\n\n        onmousemove(_event);\n        emit(Ev.mousemove, _event);\n\n    } //_mousemove\n\n//Touch\n    function _touchdown( _event:TouchEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _touchdown on ' + name);\n\n        ontouchdown(_event);\n        emit(Ev.touchdown, _event);\n\n    } //_touchdown\n\n    function _touchup( _event:TouchEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _touchup on ' + name);\n\n        ontouchup(_event);\n        emit(Ev.touchup, _event);\n\n    } //_touchup\n\n    function _touchmove( _event:TouchEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _touchmove on ' + name);\n\n        ontouchmove(_event);\n        emit(Ev.touchmove, _event);\n\n    } //_touchmove\n\n//Gamepad\n    function _gamepadaxis( _event:GamepadEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _gamepadaxis on ' + name);\n\n        ongamepadaxis(_event);\n        emit(Ev.gamepadaxis, _event);\n\n    } //_gamepadaxis\n\n    function _gamepaddown( _event:GamepadEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _gamepaddown on ' + name);\n\n        ongamepaddown(_event);\n        emit(Ev.gamepaddown, _event);\n\n    } //_gamepaddown\n\n    function _gamepadup( _event:GamepadEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _gamepadup on ' + name);\n\n        ongamepadup(_event);\n        emit(Ev.gamepadup, _event);\n\n    } //_gamepadup\n\n    function _gamepaddevice( _event:GamepadEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _gamepaddevice on ' + name);\n\n        ongamepaddevice(_event);\n        emit(Ev.gamepaddevice, _event);\n\n    } //_gamepaddevice\n\n//Windowing\n\n    function _windowmoved( _event:WindowEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _windowmoved on ' + name);\n\n        onwindowmoved(_event);\n        emit(Ev.windowmoved, _event);\n\n    } //_windowmoved\n\n    function _windowresized( _event:WindowEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _windowresized on ' + name);\n\n        onwindowresized(_event);\n        emit(Ev.windowresized, _event);\n\n    } //_windowresized\n\n    function _windowsized( _event:WindowEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _windowsized on ' + name);\n\n        onwindowsized(_event);\n        emit(Ev.windowsized, _event);\n\n    } //_windowsized\n\n    function _windowminimized( _event:WindowEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _windowminimized on ' + name);\n\n        onwindowminimized(_event);\n        emit(Ev.windowminimized, _event);\n\n    } //_windowminimized\n\n    function _windowrestored( _event:WindowEvent ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _windowrestored on ' + name);\n\n        onwindowrestored(_event);\n        emit(Ev.windowrestored, _event);\n\n    } //_windowrestored\n\n//Input\n\n    function _inputdown( _event : { name:String, event:InputEvent } ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _inputdown on ' + name);\n\n        oninputdown(_event.name, _event.event);\n        emit(Ev.inputdown, _event);\n\n    } //_inputdown\n\n    function _inputup( _event : { name:String, event:InputEvent } ) {\n\n        if(!active || !inited || !started) {\n            return;\n        }\n\n        _debug('calling _inputup on ' + name);\n\n        oninputup(_event.name, _event.event);\n        emit(Ev.inputup, _event );\n\n    } //_inputup\n\n\n//timing\n\n    inline function get_fixed_rate() : Float {\n\n        return fixed_rate;\n\n    } //get_fixed_rate\n\n    inline function set_fixed_rate( _rate:Float ) : Float {\n\n        fixed_rate = _rate;\n\n        if(started) {\n            _set_fixed_rate_timer( _rate );\n        }\n\n        return fixed_rate;\n\n    } //set_fixed_rate\n\n    inline function _stop_fixed_rate_timer() {\n\n        if(fixed_rate_timer != null) {\n            fixed_rate_timer.stop();\n            fixed_rate_timer = null;\n        }\n\n    } //_stop_fixed_rate_timer\n\n    inline function _set_fixed_rate_timer( _rate:Float #if debug , ?_pos:haxe.PosInfos #end ) {\n\n        _stop_fixed_rate_timer();\n\n            //only top tier entities call this,\n            //all their children are fixed under the parent rate\n            //for now, that is.\n        if(_rate != 0 && parent == null && !destroyed) {\n            fixed_rate_timer = new snow.api.Timer( _rate );\n            fixed_rate_timer.run = _fixed_update;\n        } //_rate\n\n    } //_set_fixed_rate_timer\n\n//components\n\n    inline function get_components() {\n        return _components.components;\n    } //get_components\n\n//children\n\n    @:allow(luxe.Entity)\n    function _add_child( child:Entity ) {\n\n        children.push(child);\n\n        _debug( '' + name + \" : add child : \" + child.name );\n\n            //children inherit the updates and such from the parent, so they shouldn't be in the root of the scene\n        if(child.scene != null) {\n            _debug( '' + name + \" add child \" + child.name + \" being parented, removing from scene root of \" + child.scene.name);\n            var removed = child.scene.remove( child );\n        } else {\n            _debug('' + name + \" add child \" + child.name + \" being parented, but not from a scene\");\n        }\n\n    } //_add_child\n\n    @:allow(luxe.Entity)\n    function _remove_child(child:Entity) {\n\n        children.remove(child);\n\n    } //removeChild\n\n//listeners\n\n    function set_pos_from_transform( _pos:Vector ) {\n\n            //and we have to propogate the values to the components\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.entity_pos_change( _pos );\n            } //for each _component\n        }\n\n    } //set_pos_from_transform\n\n    function set_rotation_from_transform( _rotation:Quaternion ) {\n\n            //and we have to propogate the values to the components\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.entity_rotation_change( _rotation );\n            } //for each _component\n        }\n\n    } //set_rotation_from_transform\n\n    function set_scale_from_transform( _scale:Vector ) {\n\n            //and we have to propogate the values to the components\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.entity_scale_change( _scale );\n            } //for each _component\n        }\n\n    } //set_scale_from_transform\n\n    function set_origin_from_transform( _origin:Vector ) {\n\n            //and we have to propogate the values to the components\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.entity_origin_change( _origin );\n            } //for each _component\n        }\n\n    } //set_origin_from_transform\n\n    function set_parent_from_transform( _parent:Transform ) {\n\n            //and we have to propogate the values to the components\n        if(component_count > 0) {\n            for(_component in components) {\n                _component.entity_parent_change( _parent );\n            } //for each _component\n        }\n\n    } //set_parent_from_transform\n\n//pos\n\n    function set_pos(_p:Vector) {\n\n        return transform.pos = _p;\n\n    } //set_pos\n\n    function get_pos() {\n\n        return transform.pos;\n\n    } //get_pos\n\n//rotation\n\n    function set_rotation( _r:Quaternion ) {\n\n        return transform.rotation = _r;\n\n    } //set_rotation\n\n    function get_rotation() {\n\n        return transform.rotation;\n\n    } //get_rotation\n\n//scale\n\n    function set_scale( _s:Vector ) {\n\n        return transform.scale = _s;\n\n    } //set_scale\n\n    function get_scale() {\n\n        return transform.scale;\n\n    } //get_scale\n\n//origin\n\n    function set_origin( _origin:Vector ) {\n\n        return transform.origin = _origin;\n\n    } //set_origin\n\n\n    function get_origin() {\n\n        return transform.origin;\n\n    } //get_origin\n\n//transform\n\n    function set_transform( _transform:Transform ) {\n\n        return transform = _transform;\n\n    } //set_transform\n\n\n    function get_transform() {\n\n        return transform;\n\n    } //get_transform\n\n//parent\n\n    function set_parent( other:Entity ) {\n\n        assert(other != this, 'Entity setting itself as parent makes no sense');\n\n        _debug('>>  ' + name + ' calling set parent to ' + (other == null ? 'null' : other.name) );\n\n            //if we are parented already,\n            //remove ourselves from that parent\n        if(parent != null) {\n            parent._remove_child( this );\n        } //remove\n\n            //store the new parent, even if it's null, that is ok\n        parent = other;\n\n            //and if we are not detaching parent using null\n            //we add it to the parent directly and update its transform\n        if(parent != null) {\n            parent._add_child(this);\n            transform.parent = parent.transform;\n        } else {\n            transform.parent = null;\n        }\n\n        return parent;\n\n    } //set_parent\n\n    function get_parent() {\n\n        return parent;\n\n    } //get_parent\n\n//scene\n\n    function set_scene(_scene:Scene) {\n\n        _detach_scene();\n\n            scene = _scene;\n\n        _attach_scene();\n\n        return scene;\n\n    } //set_scene\n\n    function get_scene() {\n\n        return scene;\n\n    } //get_scene\n\n//name\n\n    override function set_name(_name:String) : String {\n\n        assertnull(_name);\n\n        var _scene = scene;\n\n        if(_scene != null) {\n            _scene.entities.remove(name);\n            _scene.handle_duplicate_warning(_name);\n            _scene.entities.set(_name, this);\n            _scene._has_changed = true;\n        }\n\n        return name = _name;\n\n    } //set_name\n\n//active\n\n    function set_active(_active:Bool) : Bool {\n\n        return active = _active;\n\n    } //set_active\n\n    function get_active() {\n\n        return active;\n\n    } //get_active\n\n} //Entity\n","package luxe;\n\nimport haxe.io.Path;\nimport haxe.macro.Context;\nimport haxe.macro.Expr;\n\nprivate enum LogError {\n    RequireString(detail:String);\n}\n\nclass Log {\n\n        //default to `log`\n    static var _level : Int = 1;\n    static var _filter : Array<String>;\n    static var _exclude : Array<String>;\n    static var _log_width : Int = 16;\n\n    macro public static function get_level() : haxe.macro.Expr {\n        return macro $v{ ${luxe.Log._level} };\n    }\n    macro public static function get_filter() : haxe.macro.Expr {\n        return macro $v{ ${luxe.Log._filter} };\n    }\n    macro public static function get_exclude() : haxe.macro.Expr {\n        return macro $v{ ${luxe.Log._exclude} };\n    }\n\n    macro static function level( __level:Int ) : haxe.macro.Expr {\n\n        _level = __level;\n\n        return macro null;\n\n    } //level\n\n    macro static function filter( __filter:String ) : haxe.macro.Expr {\n\n        _filter = __filter.split(',');\n\n        var _index = 0;\n        for(_f in _filter) {\n            _filter[_index] = StringTools.trim(_f);\n            _index++;\n        }\n\n        return macro null;\n\n    } //filter\n\n    macro static function exclude( __exclude:String ) : haxe.macro.Expr {\n\n        _exclude = __exclude.split(',');\n\n        var _index = 0;\n        for(_e in _exclude) {\n            _exclude[_index] = StringTools.trim(_e);\n            _index++;\n        }\n\n        return macro null;\n\n    } //exclude\n\n    macro static function width( _width:Int ) : haxe.macro.Expr {\n\n        _log_width = _width;\n\n        return macro null;\n\n    } //width\n\n        //This macro uses the defined log level value to reject code that\n        //shouldn't even exist at runtime , like low level debug information\n        //and logging by injecting or not injecting code\n    macro public static function log( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 0);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}i / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //log\n\n    macro public static function _debug( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 1);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}d / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //_debug\n\n    macro public static function _verbose( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 2);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}v / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //_verbose\n\n    macro public static function _verboser( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 3);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}V / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //_verboser\n\n    macro public static function assert(expr:Expr, ?reason:ExprOf<String>) {\n        #if !luxe_no_assertions\n            var str = haxe.macro.ExprTools.toString(expr);\n\n            reason = switch(reason) {\n                case macro null: macro '';\n                case _: macro ' ( ' + $reason + ' )';\n            }\n\n            return macro @:pos(Context.currentPos()) {\n                if(!$expr) throw luxe.Log.DebugError.assertion( '$str' + $reason);\n            }\n        #end\n        return macro null;\n    } //assert\n\n    macro public static function assertnull(value:Expr, ?reason:ExprOf<String>) {\n        #if !luxe_no_assertions\n            var str = haxe.macro.ExprTools.toString(value);\n\n            reason = switch(reason) {\n                case macro null: macro '';\n                case _: macro ' ( ' + $reason + ' )';\n            }\n            return macro @:pos(Context.currentPos()) {\n                if($value == null) throw luxe.Log.DebugError.null_assertion('$str was null' + $reason);\n            }\n        #end\n        return macro null;\n    } //assert\n\n    macro public static function def(value:Expr, def:Expr):Expr {\n        return macro @:pos(Context.currentPos()) {\n            if($value == null) $value = $def;\n            $value;\n        }\n    }\n\n\n//Internal Helpers\n\n\n    static function _get_spacing(_file:String ) {\n\n        var _spaces = '';\n\n            //the magic number here is File.hx[:1234] for the trace listener log spacing\n        var _trace_length = _file.length + 4;\n        var _diff : Int = _log_width - _trace_length;\n        if(_diff > 0) {\n            for(i in 0 ... _diff) {\n                _spaces += ' ';\n            }\n        }\n\n        return _spaces;\n\n    } //_get_spacing\n\n    macro static function _get_log_file() {\n        return macro Context.getPosInfos(Context.currentPos()).file;\n    } //get_log_context\n\n} // Debug\n\nenum DebugError {\n    assertion(expr:String);\n    null_assertion(expr:String);\n}","package luxe.structural;\n\n/**\n    WIP\n*/\n\nimport Map;\n\nclass OrderedMapIterator<K,V> {\n\n    var map : OrderedMap<K,V>;\n    var index : Int = 0;\n\n    public inline function new(omap:OrderedMap<K,V>)\n        map = omap;\n    public inline function hasNext() : Bool\n        return index < map._keys.length;\n    public inline function next() : V\n        return map.get( map._keys[index++] );\n\n} //OrderedMapIterator\n\nclass OrderedMap<K, V> implements IMap<K, V> {\n\n    var map:Map<K, V>;\n    var idx = 0;\n\n    @:allow(luxe.structural.OrderedMapIterator)\n    var _keys:Array<K>;\n\n    public inline function new(_map) {\n       _keys = [];\n       map = _map;\n    }\n\n    public inline function set(key:K, value:V) {\n        if (!map.exists(key)) _keys.push(key);\n        map[key] = value;\n    }\n\n    public inline function toString() {\n        var _ret = ''; var _cnt = 0; var _len = _keys.length;\n        for(k in _keys) _ret += '$k => ${map.get(k)}${(_cnt++<_len-1?\", \":\"\")}';\n        return '{$_ret}';\n    }\n\n    public inline function iterator()          return new OrderedMapIterator<K,V>(this);\n    public inline function remove(key)         return map.remove(key) && _keys.remove(key);\n    public inline function exists(key)         return map.exists(key);\n    public inline function get(key)            return map.get(key);\n    public inline function keys()              return _keys.iterator();\n\n} //OrderedMap\n","package luxe;\n\nimport luxe.Color;\nimport luxe.Entity;\nimport luxe.Vector;\nimport luxe.Rectangle;\nimport luxe.utils.Maths;\nimport luxe.resource.Resource;\n\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.QuadGeometry;\n\nimport phoenix.Shader;\nimport phoenix.Batcher;\nimport phoenix.Quaternion;\nimport phoenix.Texture;\n\nimport luxe.options.VisualOptions;\n\nimport luxe.Log.*;\n\nclass Visual extends Entity {\n\n\n        /** the size of this geometry (only makes sense for QuadGeometry) */\n    @:isVar public var size         (default,set) : Vector;\n        /** the geometry this visual contains */\n    @:isVar public var geometry     (default,set) : Geometry;\n        /** the geometry static flag. This is a hint on how to render the geometry for performance */\n    @:isVar public var locked       (default,set) : Bool = false;\n        /** the texture for the geometry */\n    @:isVar public var texture      (default,set) : Texture;\n        /** the shader for the geometry */\n    @:isVar public var shader       (default,set) : Shader;\n        /** the base color */\n    @:isVar public var color        (default,set) : Color;\n        /** the visibility */\n    @:isVar public var visible      (default,set) : Bool = true;\n        /** the geometry depth value (see guides)*/\n    @:isVar public var depth        (default,set) : Float = 0.0;\n        /** If note null, the geometry will be clipped to this rectangle region (in world space). */\n    @:isVar public var clip_rect    (default,set) : Rectangle;\n        /** convenience: controls the rotation around the z axis, in radians. */\n    @:isVar public var radians      (get,set) : Float = 0.0;\n        /** convenience: controls the rotation around the z axis, in degrees. */\n    public var rotation_z           (get,set) : Float;\n\n        //private\n    var _rotation_euler : Vector;\n    var _rotation_quat : Quaternion;\n    var _has_custom_origin : Bool = false;\n\n        /** Create a new visual based on the given options */\n    public function new( _options:VisualOptions #if debug, ?_pos_info:haxe.PosInfos #end ) {\n\n        assertnull(_options, 'Visual requires non-null options');\n\n            //cached values\n            //these need to be before super\n        _rotation_euler = new Vector();\n        _rotation_quat = new Quaternion();\n\n            //call the entity constructor\n        super( _options #if debug, _pos_info #end);\n\n            //create the position value so we can exploit it a bit\n        color = new Color();\n        size = new Vector();\n\n            //texture\n        if(options.texture != null) {\n            texture = options.texture;\n        }\n            //shader\n        if(options.shader != null) {\n            shader = options.shader;\n        }\n            //color\n        if(options.color != null) {\n            color = options.color;\n        }\n            //depth\n        if(options.depth != null) {\n            depth = options.depth;\n        }\n            //visible\n        if(options.visible != null) {\n            visible = options.visible;\n        }\n\n            //size is interesting, as it's possibly based on texture\n\n            //user specified a size\n        if(options.size != null) {\n\n            size = options.size;\n                //the size is explicit, so make the geometry\n            _create_geometry();\n\n        } else {\n\n                //if the texture isn't invalid entirely\n            if(texture != null) {\n\n                size = new Vector(texture.width, texture.height);\n                _create_geometry();\n\n            } else {\n\n                    //default to a value big enough to see\n                size = new Vector(64,64);\n                _create_geometry();\n\n            } //texture !=null\n\n        } //\n\n    } //new\n\n    var _creating_geometry : Bool = false;\n    @:noCompletion public function _create_geometry() {\n\n            //if they give a geometry, don't create one\n        if(options.geometry == null) {\n\n            if(options.no_geometry == null || options.no_geometry == false) {\n\n                _creating_geometry = true;\n\n                var _batcher : Batcher = null;\n                if(options.no_batcher_add == null || options.no_batcher_add == false) {\n                    if(options.batcher != null) {\n                        _batcher = options.batcher;\n                    } else {\n                        _batcher = Luxe.renderer.batcher;\n                    }\n                }\n\n                    geometry = new QuadGeometry({\n                        id:name + '.visual',\n                        x:0,\n                        y:0,\n                        w:size.x,\n                        h:size.y,\n                        scale: new Vector(1,1,1),\n                        texture : texture,\n                        color : color,\n                        shader : shader,\n                        batcher : _batcher,\n                        depth : (options.depth == null) ? 0 : options.depth,\n                        visible : (options.visible == null) ? visible : options.visible\n                    });\n\n                _creating_geometry = false;\n\n                    //call the geometry create listener\n                on_geometry_created();\n\n            } //no_geometry is not present\n\n        } else {\n\n            geometry = options.geometry;\n\n        }\n\n            //default to the visual name\n        if(geometry != null) {\n            geometry.id = name + \".visual\";\n            geometry.transform.id = name + \".visual.transform\";\n        }\n\n            //custom provided origin will override any until now\n        if(options.origin != null) {\n            _has_custom_origin = true;\n            origin = options.origin;\n        }\n\n            //apply the rotation if any\n        if(options.rotation_z != null) {\n            rotation_z = options.rotation_z;\n        }\n\n    } //create_geometry\n\n    override function ondestroy() {\n\n            //drop the geometry\n        if(geometry != null && geometry.added ) {\n            geometry.drop( true );\n        }\n\n            //clear our references to these\n        geometry = null;\n        texture = null;\n\n    } //ondestroy\n\n    function on_geometry_created() {\n\n        // geometry.transform.parent = transform;\n\n    } //on_geometry_created\n\n//Visibility properties\n\n    function set_visible(_v:Bool) {\n\n        visible = _v;\n\n            //careful\n        if(geometry != null) {\n            geometry.visible = visible;\n        }\n\n        return visible;\n\n    } //set_visible\n\n    function set_depth(_v:Float) {\n\n        if(geometry != null) {\n            geometry.depth = _v;\n        } //geometry\n\n        return depth = _v;\n\n    } //set_depth\n\n//Color properties\n\n    function set_color(_c:Color) {\n\n        if(color != null && geometry != null) {\n            geometry.color = _c;\n        }\n\n        return color = _c;\n\n    } //set_color\n\n    function set_texture(_t:Texture) {\n\n        if(geometry != null && geometry.texture != _t) {\n            geometry.texture = _t;\n        } //geometry!=null\n\n        return texture = _t;\n    }\n\n    function set_shader(_s:Shader) {\n\n        if(geometry != null && geometry.shader != _s) {\n            geometry.shader = _s;\n        } //geometry!=null\n\n        return shader = _s;\n    }\n\n//Geometry\n\n    var ignore_texture_on_geometry_change : Bool = false;\n\n    function set_geometry(_g:Geometry) : Geometry {\n\n            //same geometry?\n        if(geometry == _g) {\n            return geometry;\n        }\n\n            //kill the existing geometry first\n        if(geometry != null) {\n            geometry.drop();\n        }\n\n            //store the new one\n        geometry = _g;\n\n            //rebind it's colors and whatever else\n        if(geometry != null) {\n\n                //make sure it's attached\n            geometry.transform.parent = transform;\n\n            _verbose('    assign geometry transform as child : $geometry.id to $name');\n\n                //:todo: This block is dumb\n                //and was solving some obscure issue\n                //and needs to be redone as it\n                //causes more issues than it solves.\n                {\n                    if(_creating_geometry == false) {\n\n                        geometry.color = color;\n                        geometry.depth = depth;\n                        geometry.visible = visible;\n                        // geometry.shader = shader;\n\n                        if(!ignore_texture_on_geometry_change) {\n                            // geometry.texture = texture;\n                        }\n\n                    } //_creating_geometry == false\n                }\n\n        } //geometry != null\n\n        return geometry;\n\n    } //set_geometry\n\n\n//Transforms\n\n    override function set_parent_from_transform( _parent:Transform ) {\n\n        super.set_parent_from_transform( _parent );\n\n        if(geometry != null) {\n                //make sure it's attached\n            geometry.transform.parent = transform;\n        }\n\n    } //set_parent_from_transform\n\n    override function set_rotation_from_transform( _rotation:Quaternion ) {\n\n        super.set_rotation_from_transform(_rotation);\n\n            //update caches\n        _rotation_euler.setEulerFromQuaternion(_rotation);\n        _rotation_quat.copy(_rotation);\n\n    } //set_rotation_from_transform\n\n//Size\n\n    function set_size( _v:Vector ) : Vector {\n\n        size = _v;\n\n        if(size != null)\n            Vector.Listen( size, _size_change );\n\n        return size;\n\n    } //set_size\n\n//Rotation\n\n    function get_rotation_z() : Float {\n\n        return Maths.degrees(radians);\n\n    } //get_rotation\n\n    function set_rotation_z( _degrees:Float ) : Float {\n\n        radians = Maths.radians(_degrees);\n\n        return _degrees;\n\n    } //set_rotation_z\n\n    function set_radians(_r:Float) : Float {\n\n        _rotation_euler.z = _r;\n        _rotation_quat.setFromEuler( _rotation_euler );\n\n        rotation = _rotation_quat.clone();\n\n        return radians = _r;\n\n    } //set_radians\n\n    function get_radians() : Float {\n        return radians;\n    } //get_radians\n\n//Locked\n\n    function set_locked(_l:Bool) : Bool {\n\n        if(geometry != null) {\n            geometry.locked = _l;\n        }\n\n        return locked = _l;\n\n    } //set_locked\n\n\n//Geometry properties\n//Clip rect\n    function set_clip_rect(_val : Rectangle) : Rectangle {\n\n        if(geometry != null) {\n            geometry.clip_rect = _val;\n        }\n\n        return clip_rect = _val;\n    }\n\n//Size\n\n        //An internal callback for when x y or z on a size changes\n    function _size_change( _v:Float ) { this.set_size( size ); }\n\n} //Visual\n","package luxe.macros;\n\nimport haxe.macro.Context;\nimport haxe.macro.Expr;\nimport haxe.macro.ExprTools;\n\n@:noCompletion class EntityRules {\n\n#if macro\n\n    static var init_field : Field;\n    static var ondestroy_field : Field;\n\n    macro public static function apply() : Array<Field> {\n\n        init_field = null;\n        ondestroy_field = null;\n\n        var _fields = Context.getBuildFields();\n\n            //do this first to ensure the values are set\n        for(_field in _fields) {\n            switch(_field.name) {\n                case 'init': init_field = _field;\n                case 'ondestroy': ondestroy_field = _field;\n            }\n        }\n\n            //if no init field, insert one\n        if(init_field == null) {\n            init_field = {\n                name: 'init',\n                doc: null, meta: [],\n                access: [AOverride],\n                kind: FFun({ params:[], args:[], ret:null, expr:macro { super.init(); } }),\n                pos: Context.currentPos()\n            };\n            _fields.push(init_field);\n        }\n\n            //if no ondestroy field, insert one\n        if(ondestroy_field == null) {\n            ondestroy_field = {\n                name: 'ondestroy',\n                doc: null, meta: [],\n                access: [AOverride],\n                kind: FFun({ params:[], args:[], ret:null, expr:macro { super.ondestroy(); } }),\n                pos: Context.currentPos()\n            };\n            _fields.push(ondestroy_field);\n        }\n\n        for(_field in _fields) {\n\n            switch(_field.name) {\n\n                case\n                    'ontouchmove',\n                    'ontouchdown',\n                    'ontouchup',\n                    'onmousemove',\n                    'onmousedown',\n                    'onmouseup',\n                    'onmousewheel',\n                    'ongamepadaxis',\n                    'ongamepadup',\n                    'ongamepaddown',\n                    'ongamepaddevice',\n                    'onkeydown',\n                    'onkeyup',\n                    'ontextinput',\n                    'oninputdown',\n                    'oninputup',\n                    'onwindowmoved',\n                    'onwindowresized',\n                    'onwindowsized',\n                    'onwindowminimized',\n                    'onwindowrestored' :\n                {\n                    connect_event(_field);\n                }\n\n            } //switch _field.name\n\n        } //for field in fields\n\n        return _fields;\n\n    } //apply\n\n\n\n    static function connect_event( _field:haxe.macro.Field ) {\n\n        if(_field.access.indexOf(AOverride) != -1) {\n\n            var _event_name : String = _field.name.substr(2);\n\n                //inject the init connection\n            switch(init_field.kind) {\n                default:\n                case FFun(f):\n                    switch(f.expr.expr) {\n                        default:\n                        case EBlock(exprs):\n                            exprs.push( Context.parse('_listen( Luxe.Ev.${_event_name}, ${_field.name}, true )', _field.pos) );\n                    } //switch exp\n            } //switch kind\n\n                //and inject the ondestroy connection\n            switch(ondestroy_field.kind) {\n                default:\n                case FFun(f):\n                    switch(f.expr.expr) {\n                        default:\n                        case EBlock(exprs):\n                            exprs.push( Context.parse('_unlisten( Luxe.Ev.${_event_name}, ${_field.name}, true )', _field.pos) );\n                    } //switch exp\n            } //switch kind\n\n        } //if override\n\n    } //connect_event\n\n#end //macro\n\n} //EntityRules\n","\npackage ;\n\nimport luxe.Visual;\nimport luxe.Color;\nimport luxe.Vector;\n\nusing utils.VectorUtil;\n\nclass Actor extends Visual\n{\n\n\n        // Direction-aware velocity\n    public var velocity         :Vector;\n\n        // constant addition\n    public var acceleration     :Vector;\n\n        // Force is reset back to zero on each frame.\n        // Should be used to apply impulse forces, like jump.\n    public var force            :Vector;\n\n        // gets data from/to velocity\n    public var speed(get, set)  :Float;\n\n        // Real position of Actor, right before it's rounded for view\n    public var realPos          :Vector;\n\n        // Is this actor on ground?\n    public var on_ground(get, null):Bool;\n\n\n\n\n    override public function new( _options:luxe.options.VisualOptions #if debug, ?_pos_info:haxe.PosInfos #end )\n    {\n\n        super(_options);\n\n        velocity        = new Vector();\n        acceleration    = new Vector();\n        force           = new Vector();\n\n        realPos = new Vector();\n        realPos.copy_from(pos);\n    }\n\n    override function init():Void\n    {\n        \n    }\n\n    override function ondestroy():Void\n    {\n        realPos = null;\n    }\n\n    override function update(dt:Float):Void\n    {\n        pos.copy_from(realPos);\n\n        pos.x = Math.round(pos.x);\n        pos.y = Math.round(pos.y);\n        pos.z = Math.round(pos.z);\n    }\n\n// Public\n\n    public function applyForce(_x:Float, _y:Float, ?_z:Float = 0):Void\n    {\n        force.x += _x;\n        force.y += _y;\n        force.z += _z;\n    } // applyForce\n\n    // Clean vectors\n    public function cleanVectors()\n    {\n        if( Math.abs(velocity.x) < 0.01 && velocity.x != 0 ) velocity.x = 0;\n        if( Math.abs(velocity.y) < 0.01 && velocity.y != 0 ) velocity.y = 0;\n        if( Math.abs(velocity.z) < 0.01 && velocity.z != 0 ) velocity.z = 0;\n    }\n\n    // Immediately update real position.\n    // Helpful when \n    public function moveRealPos(dt:Float)\n    {\n        cleanVectors();\n\n        realPos.x += velocity.x * dt;\n        realPos.y += velocity.y * dt;\n        realPos.z += velocity.z * dt;\n    }\n\n    public function step(dt:Float)\n    {\n\n        velocity.add(force);\n        velocity.add(acceleration);\n\n        moveRealPos(dt);\n\n        force.set_xyz(0,0,0);\n        // acceleration.copy_from(Main.physics.gravity);\n\n        this.depth = realPos.y/100;\n    }\n\n\n\n\n// Public Getters/Setters\n    \n    public function get_speed():Float\n    {\n        return velocity.get_length2D();\n    }\n\n    public function set_speed(v:Float):Float\n    {\n        velocity.set_length2D(v);\n        return velocity.get_length2D();\n    }\n\n    // Override to define your own thing\n    public function get_on_ground():Bool\n    {\n        return false;\n    }\n\n\n\n\n// Internal functions\n\n\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class EReg {\n\n\tvar r : HaxeRegExp;\n\n\tpublic function new( r : String, opt : String ) : Void {\n\t\topt = opt.split(\"u\").join(\"\"); // 'u' (utf8) depends on page encoding\n\t\tthis.r = new HaxeRegExp(r, opt);\n\t}\n\n\tpublic function match( s : String ) : Bool {\n\t\tif( r.global ) r.lastIndex = 0;\n\t\tr.m = r.exec(s);\n\t\tr.s = s;\n\t\treturn (r.m != null);\n\t}\n\n\tpublic function matched( n : Int ) : String {\n\t\treturn if( r.m != null && n >= 0 && n < r.m.length ) r.m[n] else throw \"EReg::matched\";\n\t}\n\n\tpublic function matchedLeft() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn r.s.substr(0,r.m.index);\n\t}\n\n\tpublic function matchedRight() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\tvar sz = r.m.index+r.m[0].length;\n\t\treturn r.s.substr(sz,r.s.length-sz);\n\t}\n\n\tpublic function matchedPos() : { pos : Int, len : Int } {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn { pos : r.m.index, len : r.m[0].length };\n\t}\n\n\tpublic function matchSub( s : String, pos : Int, len : Int = -1):Bool {\n\t\treturn if (r.global) {\n\t\t\tr.lastIndex = pos;\n\t\t\tr.m = r.exec(len < 0 ? s : s.substr(0, pos + len));\n\t\t\tvar b = r.m != null;\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t}\n\t\t\tb;\n\t\t} else {\n\t\t\t// TODO: check some ^/$ related corner cases\n\t\t\tvar b = match( len < 0 ? s.substr(pos) : s.substr(pos,len) );\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t\tr.m.index += pos;\n\t\t\t}\n\t\t\tb;\n\t\t}\n\t}\n\n\tpublic function split( s : String ) : Array<String> {\n\t\t// we can't use directly s.split because it's ignoring the 'g' flag\n\t\tvar d = \"#__delim__#\";\n\t\treturn untyped s.replace(r,d).split(d);\n\t}\n\n\tpublic function replace( s : String, by : String ) : String {\n\t\treturn untyped s.replace(r,by);\n\t}\n\n\tpublic function map( s : String, f : EReg -> String ) : String {\n\t\tvar offset = 0;\n\t\tvar buf = new StringBuf();\n\t\tdo {\n\t\t\tif (offset >= s.length)\n\t\t\t\tbreak;\n\t\t\telse if (!matchSub(s, offset)) {\n\t\t\t\tbuf.add(s.substr(offset));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar p = matchedPos();\n\t\t\tbuf.add(s.substr(offset, p.pos - offset));\n\t\t\tbuf.add(f(this));\n\t\t\tif (p.len == 0) {\n\t\t\t\tbuf.add(s.substr(p.pos, 1));\n\t\t\t\toffset = p.pos + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t\toffset = p.pos + p.len;\n\t\t} while (r.global);\n\t\tif (!r.global && offset > 0 && offset < s.length)\n\t\t\tbuf.add(s.substr(offset));\n\t\treturn buf.toString();\n\t}\n}\n\n@:native(\"RegExp\")\nprivate extern class HaxeRegExp extends js.RegExp {\n\tvar m:js.RegExp.RegExpMatch;\n\tvar s:String;\n}\n","package luxe;\n\nimport Luxe.Ev;\nimport luxe.Input;\nimport luxe.Screen;\nimport luxe.Objects;\nimport luxe.options.StateOptions;\n\nimport luxe.Log.log;\nimport luxe.Log._debug;\nimport luxe.Log._verbose;\nimport luxe.Log._verboser;\n\n\nclass State extends ID {\n\n    public var machine : States;\n    public var active : Bool = false;\n    public var enabled : Bool = false;\n    public var inited : Bool = false;\n\n    public function new( _options:StateOptions ) {\n\n        super( _options.name );\n\n    } //_name\n\n    public function enable<T>( ?_enable_with:T ) {\n\n        machine.enable( name, _enable_with );\n\n    } //enable\n\n    public function disable<T>( ?_disable_with:T ) {\n\n        machine.disable( name, _disable_with );\n\n    } //disable\n\n    public function destroy() {\n\n        machine.kill( name );\n\n    } //destroy\n\n        //critical events\n    public function init() {}\n    public function update(dt:Float) {}\n\n    @:noCompletion public function onfixedupdate() {}\n\n        //state specific events\n    @:noCompletion public function onleave<T>(d:T) {}\n    @:noCompletion public function onenter<T>(d:T) {}\n    @:noCompletion public function onenabled<T>(d:T) {}\n    @:noCompletion public function ondisabled<T>(d:T) {}\n    @:noCompletion public function onadded() {}\n    @:noCompletion public function onremoved() {}\n\n    @:noCompletion public function onrender() {}\n    @:noCompletion public function onprerender() {}\n    @:noCompletion public function onpostrender() {}\n\n   //scene events, called directly\n    @:noCompletion public function onreset() {}\n    @:noCompletion public function ondestroy() {}\n\n        //input events, connected only when overridden in child class\n    @:noCompletion public function onkeyup( event:KeyEvent ) {}\n    @:noCompletion public function onkeydown( event:KeyEvent ) {}\n    @:noCompletion public function ontextinput( event:TextEvent ) {}\n\n    @:noCompletion public function oninputdown( name:String, event:InputEvent ) {}\n    @:noCompletion public function oninputup( name:String, event:InputEvent ) {}\n\n    @:noCompletion public function onmousedown( event:MouseEvent ) {}\n    @:noCompletion public function onmouseup( event:MouseEvent ) {}\n    @:noCompletion public function onmousemove( event:MouseEvent ) {}\n    @:noCompletion public function onmousewheel( event:MouseEvent ) {}\n\n    @:noCompletion public function ontouchdown( event:TouchEvent ) {}\n    @:noCompletion public function ontouchup( event:TouchEvent ) {}\n    @:noCompletion public function ontouchmove( event:TouchEvent ) {}\n\n    @:noCompletion public function ongamepadup( event:GamepadEvent ) {}\n    @:noCompletion public function ongamepaddown( event:GamepadEvent ) {}\n    @:noCompletion public function ongamepadaxis( event:GamepadEvent ) {}\n    @:noCompletion public function ongamepaddevice( event:GamepadEvent ) {}\n\n   @:noCompletion public function onwindowmoved( event:WindowEvent ) {}\n   @:noCompletion public function onwindowresized( event:WindowEvent ) {}\n   @:noCompletion public function onwindowsized( event:WindowEvent ) {}\n   @:noCompletion public function onwindowminimized( event:WindowEvent ) {}\n   @:noCompletion public function onwindowrestored( event:WindowEvent ) {}\n\n//internal\n\n    @:allow(luxe.States)\n    inline function _init() {\n        if(!inited) {\n            inited = true;\n            init();\n        }\n    } //_init\n\n\n} //State\n\nclass States extends Objects {\n\n    @:noCompletion public var _states: Map<String,State>;\n\n    public var active_states: Array<State>;\n    public var current_state: State;\n\n    var active_count:Int = 0;\n\n    public function new( ?_options:StatesOptions ) {\n\n        var _name = '';\n\n        if(_options != null && _options.name != null) {\n            _name = _options.name;\n        }\n\n        super(_name == '' ? Luxe.utils.uniqueid() : _name);\n\n        _states = new Map();\n        active_states = new Array<State>();\n\n        Luxe.core.on(Ev.init, init);\n        Luxe.core.on(Ev.destroy, ondestroy);\n        Luxe.core.on(Ev.update, update);\n\n        Luxe.core.on(Ev.prerender, prerender);\n        Luxe.core.on(Ev.postrender, postrender);\n        Luxe.core.on(Ev.render, render);\n\n        Luxe.core.on(Ev.keydown, keydown);\n        Luxe.core.on(Ev.keyup, keyup);\n        Luxe.core.on(Ev.textinput, textinput);\n\n        Luxe.core.on(Ev.inputup, inputup);\n        Luxe.core.on(Ev.inputdown, inputdown);\n\n        Luxe.core.on(Ev.mouseup, mouseup);\n        Luxe.core.on(Ev.mousedown, mousedown);\n        Luxe.core.on(Ev.mousemove, mousemove);\n        Luxe.core.on(Ev.mousewheel, mousewheel);\n\n        Luxe.core.on(Ev.touchup, touchup);\n        Luxe.core.on(Ev.touchdown, touchdown);\n        Luxe.core.on(Ev.touchmove, touchmove);\n\n        Luxe.core.on(Ev.gamepadup, gamepadup);\n        Luxe.core.on(Ev.gamepaddown, gamepaddown);\n        Luxe.core.on(Ev.gamepadaxis, gamepadaxis);\n        Luxe.core.on(Ev.gamepaddevice, gamepaddevice);\n\n        Luxe.core.on(Ev.windowmoved, windowmoved);\n        Luxe.core.on(Ev.windowresized, windowresized);\n        Luxe.core.on(Ev.windowsized, windowsized);\n        Luxe.core.on(Ev.windowminimized, windowminimized);\n        Luxe.core.on(Ev.windowrestored, windowrestored);\n\n    } //new\n\n    var _state_count:Int = 0;\n    public function add<T:State>( _state:T ) : T {\n\n            //store it in the state list\n        _states.set( _state.name, _state );\n        _state_count++;\n            //store reference of the owner\n        _state.machine = this;\n            //let them know\n        _state.onadded();\n            //if this state is added\n            //after init has happened,\n            //it should init immediately\n        if(Luxe.core.inited) {\n            _state._init();\n        }\n\n            //debug stuff\n        _debug('$name / adding a state called ' + _state.name + ', now at ' + Lambda.count(_states) + ' states');\n\n        return _state;\n\n    } //add\n\n    public function remove<T:State, T1>( _name:String, ?_leave_with:T1 ) : T {\n\n        if(_states.exists(_name)) {\n\n            var _state:T = cast _states.get(_name);\n\n            if(_state != null) {\n\n                    //if it's running unset it\n                if(_state.active) {\n\n                    leave(_state, _leave_with);\n\n                    if(_state == current_state) {\n                        current_state = null;\n                    }\n\n                } //_state.active\n\n                    //if it's stacked, disable it\n                if(_state.enabled) {\n                    disable(_state.name);\n                }\n\n                    //tell user\n                _state.onremoved();\n\n                    //remove it\n                _states.remove(_name);\n                _state_count--;\n\n            } //state != null\n\n            return _state;\n\n        } //remove\n\n        return null;\n\n    } //remove\n\n    public function kill( _name:String ) {\n\n        if(_state_count > 0) {\n            if( _states.exists(_name) ) {\n                var _state : State = remove( _name );\n                if(_state != null) {\n                    _state.ondestroy();\n                }\n            }\n        }\n\n    } //kill\n\n    public function enabled( _name:String ) {\n        if(_state_count == 0) return false;\n\n        var state = _states.get( _name );\n\n        if(state != null) {\n            return state.enabled;\n        }\n\n        return false;\n\n    } //enabled\n\n    public function enable<T>( _name:String, ?_enable_with:T ) {\n        if(_state_count == 0) return;\n\n        var state = _states.get( _name );\n        if(state != null) {\n            _debug('$name / enabling a state ' + _name );\n            state.onenabled(_enable_with);\n            state.active = true;\n            state.enabled = true;\n            active_states.push(state);\n            active_count++;\n            _debug('$name / now at ${active_states.length} active states');\n        }\n    } //enable\n\n    public function disable<T>( _name:String, ?_disable_with:T  ) {\n        if(_state_count == 0) return;\n\n        var state = _states.get( _name );\n        if(state != null) {\n            _debug('$name / disabling a state ' + _name );\n            state.ondisabled(_disable_with);\n            state.active = false;\n            state.enabled = false;\n            active_states.remove( state );\n            active_count--;\n            _debug('$name / now at ${active_states.length} active states');\n        }\n    } //disable\n\n    function enter<T>( _state:State, ?_enter_with:T ) {\n\n            //order matters\n        _state.onenter( _enter_with );\n        active_states.push( _state );\n        active_count++;\n        _state.active = true;\n\n    } //enter\n\n    function leave<T>( _state:State, ?_leave_with:T ) {\n\n            //order matters\n        _state.active = false;\n        active_states.remove( _state );\n        active_count--;\n        _state.onleave( _leave_with );\n\n    } //leave\n\n        /** Change the actively set state. */\n    public function set<T1,T2>(name:String, ?_enter_with:T1, ?_leave_with:T2 #if debug, ?pos:haxe.PosInfos #end ) : Bool {\n\n        #if debug //:todo:\n        _debug('attempt to set state to $name from ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}');\n        #end\n\n        if(!_states.exists(name)) {\n            log('cannot find state named $name, is it added to this state machine?');\n            return false;\n        }\n\n        //leave current state\n\n        unset(_leave_with);\n\n        //enter new state\n\n        _debug('found state named $name, calling enter');\n\n        current_state = _states.get(name);\n        enter( current_state, _enter_with );\n\n        _debug('called enter on $name, now at ${Lambda.count(active_states)} active_states');\n\n        return true;\n\n    } //set\n\n        /** Exit the actively set state. */\n    public function unset<T>( ?_leave_with:T ) {\n\n        if (current_state != null) {\n\n                _debug('current state was valid, leaving current state : ${current_state.name} (${current_state.active})');\n                _debug('currently at ${Lambda.count(active_states)} active_states');\n\n            leave( current_state, _leave_with );\n\n                _debug('removed ${current_state.name}, now at ${Lambda.count(active_states)} active_states');\n\n            current_state = null;\n\n        } //current_state != null\n\n    } //unset\n\n    public function destroy() {\n\n        if(_state_count > 0) {\n            for (state in _states) {\n                state.destroy();\n            }\n        }\n\n        Luxe.core.off(Ev.init, init);\n        Luxe.core.off(Ev.destroy, ondestroy);\n        Luxe.core.off(Ev.update, update);\n\n        Luxe.core.off(Ev.prerender, prerender);\n        Luxe.core.off(Ev.postrender, postrender);\n        Luxe.core.off(Ev.render, render);\n\n        Luxe.core.off(Ev.keydown, keydown);\n        Luxe.core.off(Ev.keyup, keyup);\n        Luxe.core.off(Ev.textinput, textinput);\n\n        Luxe.core.off(Ev.inputup, inputup);\n        Luxe.core.off(Ev.inputdown, inputdown);\n\n        Luxe.core.off(Ev.mouseup, mouseup);\n        Luxe.core.off(Ev.mousedown, mousedown);\n        Luxe.core.off(Ev.mousemove, mousemove);\n        Luxe.core.off(Ev.mousewheel, mousewheel);\n\n        Luxe.core.off(Ev.touchup, touchup);\n        Luxe.core.off(Ev.touchdown, touchdown);\n        Luxe.core.off(Ev.touchmove, touchmove);\n\n        Luxe.core.off(Ev.gamepadup, gamepadup);\n        Luxe.core.off(Ev.gamepaddown, gamepaddown);\n        Luxe.core.off(Ev.gamepadaxis, gamepadaxis);\n        Luxe.core.off(Ev.gamepaddevice, gamepaddevice);\n\n        Luxe.core.off(Ev.windowmoved, windowmoved);\n        Luxe.core.off(Ev.windowresized, windowresized);\n        Luxe.core.off(Ev.windowsized, windowsized);\n        Luxe.core.off(Ev.windowminimized, windowminimized);\n        Luxe.core.off(Ev.windowrestored, windowrestored);\n\n        emit(Ev.destroy);\n\n    } //destroy\n\n    //entity router functions\n    function init(_) {\n        if(_state_count > 0) {\n            for (state in _states) {\n                state._init();\n            }\n        }\n    } //init\n\n    function reset(_) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onreset();\n            }\n        }\n    } //reset\n\n    function update(dt:Float) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                _verboser('${state.name} / update / $dt');\n                state.update(dt);\n            }\n        }\n    } //update\n\n    function ondestroy(_) {\n\n        destroy();\n\n    } //ondestroy\n\n    function render(_) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onrender();\n            }\n        }\n    } //render\n\n    function prerender(_) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onprerender();\n            }\n        }\n    } //prerender\n\n    function postrender(_) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onpostrender();\n            }\n        }\n    } //postrender\n\n//Internal helper functions\n\n    function keydown( e:KeyEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onkeydown(e);\n            }\n        }\n    } //onkeydown\n\n    function keyup( e:KeyEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onkeyup(e);\n            }\n        }\n    } //onkeyup\n\n    function textinput( e:TextEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ontextinput(e);\n            }\n        }\n    } //ontextinput\n\n//inputbindings\n\n    function inputup( _event:{ name:String, event:InputEvent } ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.oninputup( _event.name, _event.event );\n            }\n        }\n    } //oninputup\n\n    function inputdown( _event:{ name:String, event:InputEvent } ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.oninputdown( _event.name, _event.event );\n            }\n        }\n    } //oninputdown\n\n//mouse\n\n    function mousedown( e:MouseEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onmousedown(e);\n            }\n        }\n    } //onmousedown\n\n    function mousewheel( e:MouseEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onmousewheel(e);\n            }\n        }\n    } //onmousewheel\n\n    function mouseup( e:MouseEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onmouseup(e);\n            }\n        }\n    } //onmouseup\n\n    function mousemove( e:MouseEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onmousemove(e);\n            }\n        }\n    } //onmousemove\n\n//touch\n\n    function touchdown( e:TouchEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ontouchdown(e);\n            }\n        }\n    } //ontouchdown\n\n    function touchup( e:TouchEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ontouchup(e);\n            }\n        }\n    } //ontouchup\n\n    function touchmove( e:TouchEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ontouchmove(e);\n            }\n        }\n    } //ontouchmove\n\n//gamepad\n\n    function gamepadaxis( e:GamepadEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ongamepadaxis(e);\n            }\n        }\n    } //ongamepadaxis\n\n    function gamepadup( e:GamepadEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ongamepadup(e);\n            }\n        }\n    } //ongamepadup\n\n    function gamepaddown( e:GamepadEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ongamepaddown(e);\n            }\n        }\n    } //ongamepaddown\n\n    function gamepaddevice( e:GamepadEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.ongamepaddevice(e);\n            }\n        }\n    } //ongamepaddevice\n\n//windowing\n\n    function windowmoved( e:WindowEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onwindowmoved(e);\n            }\n        }\n    } //windowmoved\n\n    function windowresized( e:WindowEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onwindowresized(e);\n            }\n        }\n    } //windowresized\n\n    function windowsized( e:WindowEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onwindowsized(e);\n            }\n        }\n    } //windowsized\n\n    function windowminimized( e:WindowEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onwindowminimized(e);\n            }\n        }\n    } //windowminimized\n\n    function windowrestored( e:WindowEvent ) {\n        if(active_count > 0) {\n            for (state in active_states) {\n                state.onwindowrestored(e);\n            }\n        }\n    } //windowrestored\n\n\n} //States\n","\nimport luxe.Entity;\nimport luxe.Input;\nimport luxe.Color;\nimport luxe.Rectangle;\nimport luxe.Scene;\nimport luxe.Sprite;\nimport luxe.States;\nimport luxe.Log.*;\nimport luxe.collision.ShapeDrawerLuxe;\nimport luxe.tween.Actuate;\nimport luxe.utils.Maths;\nimport luxe.utils.Random;\nimport luxe.Vector;\n\nclass Game extends State {\n\n    public static inline var width:Int = 160;\n    public static inline var height:Int = 144;\n\n    public static var random:Random;\n    public static var drawer:ShapeDrawerLuxe;\n\n\n    // is game on? If not, then it's probably preparing (startup stuff)\n    public static var playing:Bool = false;\n\n    // Did we just loose?\n    public static var gameover:Bool = false;\n\n    // quick delay during gameplay, like getting mushroom in Mario\n    public static var delayed:Bool = false;\n\n\n    // playtime?\n    public static var time:Float = 0;\n\n    public static var difficulty:Float = 0;\n\n\n\n\n\n    \n\n\n\n\n    // User interface\n    var hud:Hud;\n\n    // Hold every kind of events here.\n    // Quick for kililng events when game is over.\n    var game_events:Array<String>;\n\n\n    public function new(options:GameOptions)\n    {\n\n        super({ name:'game' });\n\n        Game.random = new Random(Math.random());\n        // Game.scene = new Scene('gamescene');\n\n        Game.drawer = new ShapeDrawerLuxe();\n\n    }\n\n    override function onleave<T>(_:T)\n    {\n\n        hud.destroy();\n\n        kill_events();\n        // Game.scene.empty();\n\n    }\n\n    override function onenter<T>(_:T) \n    {\n        reset();\n\n        create_hud();\n\n        init_events();\n\n        Luxe.timer.schedule(3, function(){\n            playing = true;\n            Luxe.events.fire('game.start');\n        });\n\n\n        Luxe.events.fire('game.init');\n\n    }\n\n    function reset()\n    {\n        Game.difficulty = 0;\n        Game.time = 0;\n\n        Game.playing = false;\n        Game.gameover = false;\n        Game.delayed = false;\n\n        Game.random.reset();\n\n        Luxe.events.fire('game.reset');\n    }\n\n    function game_over(reason:String)\n    {\n\n        Game.playing = false;\n        Game.gameover = true;\n        Luxe.events.fire('game.over.${reason}');\n\n    }\n\n    function create_hud()\n    {\n        hud = new Hud({\n            name: 'hud',\n        });\n    }\n\n\n    function create_player()\n    {\n\n        // player = new Player({\n        //     name: 'player',\n        //     name_unique: true,\n        //     texture: Luxe.resources.texture('assets/images/player.gif'),\n        //     size: new Vector(16,16),\n        //     pos: new Vector(160/2, 144/2),\n        //     centered: true,\n        //     depth: 10,\n        //     scene: Game.scene,\n        // });\n        // player.texture.filter_mag = nearest;\n        // player.texture.filter_min = nearest;\n\n    }\n\n    function init_events()\n    {\n        game_events = new Array<String>();\n\n        // Finally start the sequence when they touch\n        // game_events.push( Luxe.events.listen('player.hit.gal', function(_)\n        // {\n        //     trace('player.hit.gal !!');\n        //     Actuate.tween(Game, 2, {speed:0});\n            \n        //     spawner.events.fire('sequence.gal');\n        // }) );\n    }\n\n    function kill_events()\n    {\n        for(s in game_events)\n        {\n            Luxe.events.unlisten(s);\n        }\n    }\n\n\n\n    override function update(dt:Float)\n    {\n\n        if(Game.playing && !Game.delayed)\n        {\n            \n            Game.time += dt;\n\n        }\n\n    }\n\n\n\n\n    // HAXXX\n    override public function onkeydown( event:KeyEvent )\n    {\n\n        if(event.keycode == Key.key_p){\n            Game.delayed = !Game.delayed;\n        }\n\n    }\n\n\n\n\n}\n\n\ntypedef GameOptions = {\n    @:optional var tutorial:Bool;\n}\n","\npackage ;\n\nimport luxe.options.EntityOptions;\nimport luxe.Entity;\nimport luxe.Input;\nimport luxe.Rectangle;\nimport luxe.Text;\nimport luxe.utils.Maths;\nimport luxe.Vector;\nimport luxe.Color;\nimport luxe.Visual;\n\nimport phoenix.Batcher;\nimport phoenix.Camera;\n\n\n\n\nclass Hud extends Entity\n{\n\n    @:isVar public var hud_batcher(default, null):Batcher;\n\n\n    /**\n     * What actor to follow?\n     */\n    public var followTarget:Actor;\n\n    /**\n     * Maximum deadzone for the followed actor\n     */\n    var deadzone:Rectangle;\n    public var max_distance:Float;\n\n    /**\n     * Camera position, before rounding\n     */\n    var camPos:Vector;\n\n    /**\n     * Lerp for camera movement\n     */\n    var followLerp:Float = 1;    // 0.07\n\n    /**\n     * Temp vafiable for getting difference\n     */\n    var diff:Vector;\n\n    /**\n     * Cursor\n     */\n    // var cursor:Cursor;\n\n    // Key input, camera modes debug\n    // HOLD C and then hit 1-0\n    var _debugHeld:Bool = false;\n    var _mode:Int = 1;\n\n    \n    override public function init():Void\n    {\n        hud_batcher = Luxe.renderer.create_batcher({\n            name : 'hud_batcher',\n            layer : 10,\n            no_add : true,\n        });\n\n        setup_camera();\n        setup_hud();\n        setup_cursor();\n\n        init_events();\n    }\n\n    function init_events()\n    {\n\n    }\n\n    function setup_camera()\n    {\n        Luxe.camera.size = new Vector( Luxe.screen.w, Luxe.screen.h );\n        Luxe.camera.zoom = 4;\n\n        Luxe.camera.pos.x = roundPixels(Luxe.camera.pos.x);\n        Luxe.camera.pos.y = roundPixels(Luxe.camera.pos.y);\n\n        camPos = new Vector(Luxe.camera.center.x, Luxe.camera.center.y);\n\n        deadzone = new Rectangle();\n    }\n\n    function setup_hud()\n    {\n\n        // var textField = new Text({\n        //     pos : new Vector(5,Luxe.screen.h/3),\n        //     point_size : 16,\n        //     depth : 3.5,\n        //     align : TextAlign.left,\n        //     text : '',\n        //     color : new Color().rgb(0xFFFFFF),\n        //     batcher : hud_batcher\n        // });\n\n    }\n\n\n    function setup_cursor()\n    {\n        // cursor = new Cursor({batcher: hud_batcher});\n        // add(cursor);\n    }\n\n\n    override function update(dt:Float)\n    {\n\n        if( followTarget != null )\n        {\n\n            if (followLerp >= 1)\n            {\n                Luxe.camera.center.x = roundPixels(followTarget.pos.x);\n                Luxe.camera.center.y = roundPixels(followTarget.pos.y);\n            }\n            else\n            {\n                var helper:Float = Luxe.camera.size.x / 64;\n                deadzone.set(\n                    // (Luxe.screen.w / Luxe.camera.zoom - helper) / 2,\n                    // (Luxe.screen.h / Luxe.camera.zoom - helper) / 2,\n                    -helper/2,\n                    -helper/2,\n                    helper,\n                    helper\n                );\n\n                camPos.x = Maths.lerp(camPos.x, followTarget.pos.x, followLerp);\n                camPos.y = Maths.lerp(camPos.y, followTarget.pos.y, followLerp);\n\n                var edge:Float;\n                var targetX:Float = followTarget.pos.x;\n                var targetY:Float = followTarget.pos.y;\n\n\n                edge = targetX - deadzone.x;\n                if (camPos.x > edge)\n                {\n                    camPos.x = edge;\n                } \n                edge = targetX - deadzone.x - deadzone.w;\n                if (camPos.x < edge)\n                {\n                    camPos.x = edge;\n                }\n                \n                edge = targetY - deadzone.y;\n                if (camPos.y > edge)\n                {\n                    camPos.y = edge;\n                }\n                edge = targetY - deadzone.y - deadzone.h;\n                if (camPos.y < edge)\n                {\n                    camPos.y = edge;\n                }\n\n                Luxe.camera.center.x = roundPixels( camPos.x );\n                Luxe.camera.center.y = roundPixels( camPos.y );\n\n            }\n\n        }\n        \n    }\n\n\n    // override function onkeydown(e:KeyEvent):Void\n    // {\n    //     if(e.keycode == Key.key_c)\n    //     {\n    //         _debugHeld = true;\n    //     }\n\n    //     if(_debugHeld)\n    //     {\n    //         if(e.keycode >= 49 && e.keycode <= 57)\n    //         {\n    //             _mode = e.keycode - 48;\n    //         }\n    //     }\n    // }\n\n    // override function onkeyup(e:KeyEvent):Void\n    // {\n    //     if(e.keycode == Key.key_c)\n    //     {\n    //         _debugHeld = false;\n    //     }\n    // }\n\n    public static function roundPixels(val:Float):Float\n    {\n        return Math.round( val*Luxe.camera.zoom ) / Luxe.camera.zoom;\n        // return Math.round( val );\n    }\n\n    public static function floorToMatchPixels(val:Float):Float\n    {\n        return Math.floor( val*Luxe.camera.zoom ) / Luxe.camera.zoom;\n    }\n\n\n\n\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d : Date = untyped __new__(Date);\n\t\t\tuntyped d[\"setTime\"](0);\n\t\t\tuntyped d[\"setUTCHours\"](k[0]);\n\t\t\tuntyped d[\"setUTCMinutes\"](k[1]);\n\t\t\tuntyped d[\"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],cast untyped k[1] - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],cast untyped y[1] - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn untyped undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif( pos != null && pos != 0 && len != null && len < 0 ) return \"\";\n\t\tif( len == null ) len = s.length;\n\t\tif( pos < 0 ){\n\t\t\tpos = s.length + pos;\n\t\t\tif( pos < 0 ) pos = 0;\n\t\t}else if( len < 0 ){\n\t\t\tlen = s.length + len - pos;\n\t\t}\n\n\t\treturn (untyped s).substr(pos, len);\n\t}\n\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if !js_es5\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tThe `Lambda` class is a collection of methods to support functional\n\tprogramming. It is ideally used with 'using Lambda' and then acts as an\n\textension to Iterable types.\n\n\tOn static platforms, working with the Iterable structure might be slower\n\tthan performing the operations directly on known types, such as Array and\n\tList.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\nclass Lambda {\n\n\t/**\n\t\tCreates an Array from Iterable `it`.\n\n\t\tIf `it` is an Array, this function returns a copy of it.\n\t**/\n\tpublic static function array<A>( it : Iterable<A> ) : Array<A> {\n\t\tvar a = new Array<A>();\n\t\tfor(i in it)\n\t\t\ta.push(i);\n\t\treturn a;\n\t}\n\n\t/**\n\t\tCreates a List form Iterable `it`.\n\n\t\tIf `it` is a List, this function returns a copy of it.\n\t**/\n\tpublic static function list<A>( it : Iterable<A> ) : List<A> {\n\t\tvar l = new List<A>();\n\t\tfor(i in it)\n\t\t\tl.add(i);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tCreates a new List by applying function `f` to all elements of `it`.\n\n\t\tThe order of elements is preserved.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function map<A,B>( it : Iterable<A>, f : A -> B ) : List<B> {\n\t\tvar l = new List<B>();\n\t\tfor( x in it )\n\t\t\tl.add(f(x));\n\t\treturn l;\n\t}\n\n\t/**\n\t\tSimilar to map, but also passes the index of each element to `f`.\n\n\t\tThe order of elements is preserved.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function mapi<A,B>( it : Iterable<A>, f : Int -> A -> B ) : List<B> {\n\t\tvar l = new List<B>();\n\t\tvar i = 0;\n\t\tfor( x in it )\n\t\t\tl.add(f(i++,x));\n\t\treturn l;\n\t}\n\n\t/**\n\t\tTells if `it` contains `elt`.\n\n\t\tThis function returns true as soon as an element is found which is equal\n\t\tto `elt` according to the `==` operator.\n\n\t\tIf no such element is found, the result is false.\n\t**/\n\tpublic static function has<A>( it : Iterable<A>, elt : A ) : Bool {\n\t\tfor( x in it )\n\t\t\tif( x == elt )\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `it` contains an element for which `f` is true.\n\n\t\tThis function returns true as soon as an element is found for which a\n\t\tcall to `f` returns true.\n\n\t\tIf no such element is found, the result is false.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function exists<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tfor( x in it )\n\t\t\tif( f(x) )\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `f` is true for all elements of `it`.\n\n\t\tThis function returns false as soon as an element is found for which a\n\t\tcall to `f` returns false.\n\n\t\tIf no such element is found, the result is true.\n\n\t\tIn particular, this function always returns true if `it` is empty.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function foreach<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tfor( x in it )\n\t\t\tif( !f(x) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tCalls `f` on all elements of `it`, in order.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function iter<A>( it : Iterable<A>, f : A -> Void ) {\n\t\tfor( x in it )\n\t\t\tf(x);\n\t}\n\n\t/**\n\t\tReturns a List containing those elements of `it` for which `f` returned\n\t\ttrue.\n\n\t\tIf `it` is empty, the result is the empty List even if `f` is null.\n\n\t\tOtherwise if `f` is null, the result is unspecified.\n\t**/\n\tpublic static function filter<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tvar l = new List<A>();\n\t\tfor( x in it )\n\t\t\tif( f(x) )\n\t\t\t\tl.add(x);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tFunctional fold on Iterable `it`, using function `f` with start argument\n\t\t`first`.\n\n\t\tIf `it` has no elements, the result is `first`.\n\n\t\tOtherwise the first element of `it` is passed to `f` alongside `first`.\n\t\tThe result of that call is then passed to `f` with the next element of\n\t\t`it`, and so on until `it` has no more elements.\n\n\t\tIf `it` or `f` are null, the result is unspecified.\n\t**/\n\tpublic static function fold<A,B>( it : Iterable<A>, f : A -> B -> B, first : B ) : B {\n\t\tfor( x in it )\n\t\t\tfirst = f(x,first);\n\t\treturn first;\n\t}\n\n\t/**\n\t\tReturns the number of elements in `it` for which `pred` is true, or the\n\t\ttotal number of elements in `it` if `pred` is null.\n\n\t\tThis function traverses all elements.\n\t**/\n\tpublic static function count<A>( it : Iterable<A>, ?pred : A -> Bool ) {\n\t\tvar n = 0;\n\t\tif( pred == null )\n\t\t\tfor( _ in it )\n\t\t\t\tn++;\n\t\telse\n\t\t\tfor( x in it )\n\t\t\t\tif( pred(x) )\n\t\t\t\t\tn++;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tTells if Iterable `it` does not contain any element.\n\t**/\n\tpublic static function empty<T>( it : Iterable<T> ) : Bool {\n\t\treturn !it.iterator().hasNext();\n\t}\n\n\t/**\n\t\tReturns the index of the first element `v` within Iterable `it`.\n\n\t\tThis function uses operator `==` to check for equality.\n\n\t\tIf `v` does not exist in `it`, the result is -1.\n\t**/\n\tpublic static function indexOf<T>( it : Iterable<T>, v : T ) : Int {\n\t\tvar i = 0;\n\t\tfor( v2 in it ) {\n\t\t\tif( v == v2 )\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t\tReturns the first element of `it` for which `f` is true.\n\n\t\tThis function returns as soon as an element is found for which a call to\n\t\t`f` returns true.\n\n\t\tIf no such element is found, the result is null.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function find<T>( it : Iterable<T>, f : T -> Bool ) : Null<T> {\n\t\tfor( v in it ) {\n\t\t\tif(f(v)) return v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tReturns a new List containing all elements of Iterable `a` followed by\n\t\tall elements of Iterable `b`.\n\n\t\tIf `a` or `b` are null, the result is unspecified.\n\t**/\n\tpublic static function concat<T>( a : Iterable<T>, b : Iterable<T> ) : List<T> {\n\t\tvar l = new List();\n\t\tfor( x in a )\n\t\t\tl.add(x);\n\t\tfor( x in b )\n\t\t\tl.add(x);\n\t\treturn l;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tA linked-list of elements. The list is composed of two-elements arrays\n\tthat are chained together. It is optimized so that adding or removing an\n\telement does not imply copying the whole array content every time.\n**/\nclass List<T> {\n\n\tprivate var h : Array<Dynamic>;\n\tprivate var q : Array<Dynamic>;\n\n\t/**\n\t\tThe length of `this` List.\n\t**/\n\tpublic var length(default,null) : Int;\n\n\t/**\n\t\tCreates a new empty list.\n\t**/\n\tpublic function new() {\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tAdds element `item` at the end of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function add( item : T ) {\n\t\tvar x:Array<Dynamic> = #if neko untyped __dollar__array(item,null) #else [item] #end;\n\t\tif( h == null )\n\t\t\th = x;\n\t\telse\n\t\t\tq[1] = x;\n\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tAdds element `item` at the beginning of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function push( item : T ) {\n\t\tvar x : Array<Dynamic> = #if neko\n\t\t\tuntyped __dollar__array(item,h)\n\t\t#else\n\t\t\t[item,h]\n\t\t#end;\n\t\th = x;\n\t\tif( q == null )\n\t\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function first() : Null<T> {\n\t\treturn if( h == null ) null else h[0];\n\t}\n\n\t/**\n\t\tReturns the last element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function last() : Null<T> {\n\t\treturn if( q == null ) null else q[0];\n\t}\n\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThe element is removed from `this` List.\n\t**/\n\tpublic function pop() : Null<T> {\n\t\tif( h == null )\n\t\t\treturn null;\n\t\tvar x = h[0];\n\t\th = h[1];\n\t\tif( h == null )\n\t\t\tq = null;\n\t\tlength--;\n\t\treturn x;\n\t}\n\n\t/**\n\t\tTells if `this` List is empty.\n\t**/\n\tpublic function isEmpty() : Bool {\n\t\treturn (h == null);\n\t}\n\n\t/**\n\t\tEmpties `this` List.\n\n\t\tThis function does not traverse the elements, but simply sets the\n\t\tinternal references to null and `this.length` to 0.\n\t**/\n\tpublic function clear() : Void {\n\t\th = null;\n\t\tq = null;\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tRemoves the first occurence of `v` in `this` List.\n\n\t\tIf `v` is found by checking standard equality, it is removed from `this`\n\t\tList and the function returns true.\n\n\t\tOtherwise, false is returned.\n\t**/\n\tpublic function remove( v : T ) : Bool {\n\t\tvar prev = null;\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tif( l[0] == v ) {\n\t\t\t\tif( prev == null )\n\t\t\t\t\th = l[1];\n\t\t\t\telse\n\t\t\t\t\tprev[1] = l[1];\n\t\t\t\tif( q == l )\n\t\t\t\t\tq = prev;\n\t\t\t\tlength--;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l[1];\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tReturns an iterator on the elements of the list.\n\t**/\n\tpublic inline function iterator() : ListIterator<T> {\n\t\treturn new ListIterator<T>(h);\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List.\n\n\t\tThe result is enclosed in { } with the individual elements being\n\t\tseparated by a comma.\n\t**/\n\tpublic function toString() {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\ts.add(\"{\");\n\t\twhile( l != null ) {\n\t\t\tif( first )\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(\", \");\n\t\t\ts.add(Std.string(l[0]));\n\t\t\tl = l[1];\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List, with `sep` separating\n\t\teach element.\n\t**/\n\tpublic function join(sep : String) {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tif( first )\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(sep);\n\t\t\ts.add(l[0]);\n\t\t\tl = l[1];\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a list filtered with `f`. The returned list will contain all\n\t\telements for which `f(x) == true`.\n\t**/\n\tpublic function filter( f : T -> Bool ) {\n\t\tvar l2 = new List();\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tvar v = l[0];\n\t\t\tl = l[1];\n\t\t\tif( f(v) )\n\t\t\t\tl2.add(v);\n\t\t}\n\t\treturn l2;\n\t}\n\n\t/**\n\t\tReturns a new list where all elements have been converted by the\n\t\tfunction `f`.\n\t**/\n\tpublic function map<X>(f : T -> X) : List<X> {\n\t\tvar b = new List();\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tvar v = l[0];\n\t\t\tl = l[1];\n\t\t\tb.add(f(v));\n\t\t}\n\t\treturn b;\n\t}\n\n}\n\nprivate class ListIterator<T> {\n\tvar head:Array<Dynamic>;\n\tvar val:Dynamic;\n\n\tpublic inline function new(head:Array<Dynamic>) {\n\t\tthis.head = head;\n\t\tthis.val = null;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():T {\n\t\tval = head[0];\n\t\thead = head[1];\n\t\treturn val;\n\t}\n}\n","package ;\n\nimport phoenix.BitmapFont;\nimport phoenix.geometry.Geometry;\nimport phoenix.Texture;\nimport phoenix.Shader;\nimport phoenix.Batcher;\n\nimport luxe.resource.Resource;\n\nimport luxe.Rectangle;\nimport luxe.Vector;\nimport luxe.Screen;\nimport snow.Snow;\n\n@:keep\nclass Luxe {\n\n        /** Direct access to the core engine */\n    public static var core      : luxe.Core;\n        /** Access to the core debug features */\n    public static var debug     : luxe.Debug;\n        /** Access to the io features */\n    public static var io        : luxe.IO;\n        /** Access to the drawing features */\n    public static var draw      : luxe.Draw;\n        /** Access to the audio features */\n    public static var audio     : luxe.Audio;\n        /** Access to the timing features */\n    public static var timer     : luxe.Timer;\n        /** Access to the global event system */\n    public static var events    : luxe.Events;\n        /** Access to the input features */\n    public static var input     : luxe.Input;\n        /** Access to the default luxe scene */\n    public static var scene     : luxe.Scene;\n        /** Access to the different utilities */\n    public static var utils     : luxe.utils.Utils;\n        /** Access to the physics bindings, if any */\n    public static var physics   : luxe.Physics;\n        /** Access to the default camera */\n    public static var camera    : luxe.Camera;\n        /** Access to the default resource manager  */\n    public static var resources : luxe.Resources;\n        /** Access to the rendering system */\n    public static var renderer  : phoenix.Renderer;\n\n        /** Direct access to the underlying snow app API, note that `core:luxe.Core` is a snow app in itself. */\n    public static var snow(get, never) : snow.Snow;\n        /** The current time in seconds, highest precision from the platform. */\n    public static var time(get, never) : Float;\n        /** Access to information about the game window (sizes, cursor etc) */\n    public static var screen(get, never) : Screen;\n        /** The version of the engine  */\n    public static var version : String = 'dev';\n        /** The version + build meta information, generated at compile time from a macro (luxe.BuildVersion) */\n    public static var build : String = luxe.macros.BuildVersion.latest();\n\n//Timing information proxy to the snow App timing\n\n        /** the scale of time */\n    public static var timescale (get,set) : Float;\n        /** if this is non zero this will be passed in */\n    public static var fixed_delta (get,set) : Float;\n        /** if this is non zero, updates will be forced to this rate */\n    public static var update_rate (get,set) : Float;\n        /** the maximum frame time */\n    public static var max_frame_time (get,set) : Float;\n\n//Timing information\n\n        /** the time the last frame took to run */\n    public static var dt (get,set) : Float;\n        /** the simulated time the last frame took to run, relative to scale etc */\n    public static var delta_sim (get,set) : Float;\n        /** the start time of the last frame */\n    public static var last_frame_start (get,set) : Float;\n        /** the current simulation time */\n    public static var current_time (get,set) : Float;\n        /** the start time of this frame */\n    public static var cur_frame_start (get,set) : Float;\n        /** the alpha time for a render between frame updates */\n    public static var alpha (get,set) : Float;\n\n        /** listen for core events */\n    public static function on<T>(event:Ev, handler:T->Void ) : Void {\n        core.emitter.on(event, handler);\n    }\n\n        /** stop listening for core events */\n    public static function off<T>(event:Ev, handler:T->Void ) : Bool {\n        return core.emitter.off(event, handler);\n    }\n\n        /** Call a function at the start of the next frame */\n    public static inline function next( func: Void->Void ) : Void {\n\n        Snow.next(func);\n\n    } //next\n\n        /** shutdown the engine and quit */\n    public static function shutdown() : Void {\n\n        core.shutdown();\n\n    } //shutdown\n\n        /** show/hide the debug console programmatically */\n    public static function showConsole(_show:Bool) : Void {\n\n        core.show_console( _show );\n\n    } //showConsole\n\n//Internal\n\n        /** the snow app instance */\n    static inline function get_snow() : snow.Snow return core.app;\n        /** the screen instance */\n    static inline function get_screen() : luxe.Screen return core.screen;\n        /** the current time */\n    static inline function get_time() : Float return core.app.time;\n        /** the scale of time */\n    static inline function get_timescale() : Float return core.timescale;\n        /** if this is non zero this will be passed in */\n    static inline function get_fixed_delta() : Float return core.fixed_delta;\n        /** if this is non zero, updates will be forced to this rate */\n    static inline function get_update_rate() : Float return core.update_rate;\n        /** the maximum frame time */\n    static inline function get_max_frame_time() : Float return core.max_frame_time;\n        /** the time the last frame took to run */\n    static inline function get_dt() : Float return core.delta_time;\n        /** the simulated time the last frame took to run, relative to scale etc */\n    static inline function get_delta_sim() : Float return core.delta_sim;\n        /** the start time of the last frame */\n    static inline function get_last_frame_start() : Float return core.last_frame_start;\n        /** the current simulation time */\n    static inline function get_current_time() : Float return core.current_time;\n        /** the start time of this frame */\n    static inline function get_cur_frame_start() : Float return core.cur_frame_start;\n        /** the alpha time for a render between frame updates */\n    static inline function get_alpha() : Float return core.alpha;\n\n        /** the scale of time */\n    static inline function set_timescale( value:Float ) : Float return core.timescale = value;\n        /** if this is non zero this will be passed in */\n    static inline function set_fixed_delta( value:Float ) : Float return core.fixed_delta = value;\n        /** if this is non zero, updates will be forced to this rate */\n    static inline function set_update_rate( value:Float ) : Float return core.update_rate = value;\n        /** the maximum frame time */\n    static inline function set_max_frame_time( value:Float ) : Float return core.max_frame_time = value;\n        /** the time the last frame took to run */\n    static inline function set_dt( value:Float ) : Float return core.delta_time = value;\n        /** the simulated time the last frame took to run, relative to scale etc */\n    static inline function set_delta_sim( value:Float ) : Float return core.delta_sim = value;\n        /** the start time of the last frame */\n    static inline function set_last_frame_start( value:Float ) : Float return core.last_frame_start = value;\n        /** the current simulation time */\n    static inline function set_current_time( value:Float ) : Float return core.current_time = value;\n        /** the start time of this frame */\n    static inline function set_cur_frame_start( value:Float ) : Float return core.cur_frame_start = value;\n        /** the alpha time for a render between frame updates */\n    static inline function set_alpha( value:Float ) : Float return core.alpha = value;\n\n\n\n} //Luxe\n\n\n\n\n/** A core event enum for the core luxe events.\n    Used with `on` and `off` handlers, with strict types to Ev */\n@:keep\n@:enum abstract Ev(Int) from Int to Int {\n\n    var unknown         = 0;\n    var ready           = 1;\n    var init            = 2;\n    var reset           = 3;\n    var tickstart       = 4;\n    var tickend         = 5;\n    var update          = 6;\n    var fixedupdate     = 7;\n    var destroy         = 8;\n    var prerender       = 9;\n    var render          = 10;\n    var postrender      = 11;\n    var keydown         = 12;\n    var keyup           = 13;\n    var textinput       = 14;\n    var inputdown       = 15;\n    var inputup         = 16;\n    var mousedown       = 17;\n    var mouseup         = 18;\n    var mousemove       = 19;\n    var mousewheel      = 20;\n    var touchdown       = 21;\n    var touchup         = 22;\n    var touchmove       = 23;\n    var gamepadaxis     = 24;\n    var gamepaddown     = 25;\n    var gamepadup       = 26;\n    var gamepaddevice   = 27;\n\n    var window          = 28;\n    var windowmoved     = 29;\n    var windowresized   = 30;\n    var windowsized     = 31;\n    var windowminimized = 32;\n    var windowrestored  = 33;\n        //this is not a typo, it should match\n    var last            = 33;\n\n} //Ev\n","import Main;\n\nimport luxe.Core;\nimport luxe.AppConfig;\n\nimport snow.Snow;\nimport snow.types.Types;\n\nclass LuxeApp {\n\n    public static var _game : Main;\n    public static var _core : Core;\n    public static var _snow : Snow;\n    public static var _conf : luxe.AppConfig;\n\n    public static function main () {\n\n        //Start with sane defaults\n\n        _conf = {\n            window: {\n                width: 960,\n                height: 640,\n                fullscreen: false,\n                resizable: true,\n                borderless: false,\n                title: 'luxe app'\n            }\n        } //_conf\n\n        #if mobile\n            _conf.window.fullscreen = true;\n            _conf.window.borderless = true;\n        #end //mobile\n\n        \n        //Apply the values if they are set\n            _conf.window.width = 640;\n            _conf.window.height = 640;\n            _conf.window.fullscreen = false;\n            _conf.window.resizable = true;\n            _conf.window.borderless = false;\n            _conf.window.title = 'luxe empty project';\n\n            //Create the runtime\n        _snow = new Snow();\n            //Create the app class, give it to the bootstrapper\n        _game = new Main();\n            //Create the core luxe runtime\n        _core = new Core( _game, _conf );\n\n        var _snow_config : SnowConfig = {\n            has_loop : true,\n            config_path : 'config.json',\n            app_package : 'com.darekgreenly.empty'\n        };\n\n            //Start up, giving luxe as the host\n        _snow.init( _snow_config, _core );\n\n    } //main\n\n} //LuxeApp","package luxe;\n\nimport luxe.Core;\nimport luxe.Objects;\nimport luxe.Input;\nimport luxe.Screen;\nimport snow.App;\n\n@:noCompletion\n@:keepSub\nclass Game extends Emitter<Int> {\n\n    @:noCompletion public var app : Core;\n\n        /** Empty constructor. Use `ready` instead. */\n    public function new() {\n        super();\n    }\n\n        /** Called by luxe to request config changes, override this to change the defaults.\n            This happens before ready, so the values are available when ready is called. */\n    public function config( _config:luxe.AppConfig ) : luxe.AppConfig  { return _config; }\n        /** Your entry point. Called for you when you can initialize your application */\n    public function ready() {}\n        /** Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide}) */\n    public function update(dt:Float) {}\n\n        /** very low level event handler from snow core. Often handled by the subsystems and by luxe, so check there first! */\n    @:noCompletion public function onevent( event:snow.types.Types.SystemEvent ) { }\n\n       /** Your exit point. Called for you when you should shut down your application */\n   public function ondestroy() {}\n\n       /** Called when the application is about to render */\n   public function onprerender() {}\n       /** Called when the application is rendering */\n   public function onrender() {}\n       /** Called when the application is done rendering */\n   public function onpostrender() {}\n\n       /** Called when a named input down event occurs */\n   public function oninputdown( _name:String, e:InputEvent ) {}\n       /** Called when a named input up event occurs */\n   public function oninputup( _name:String, e:InputEvent ) {}\n\n       /** Called for you when a mouse button is pressed */\n   public function onmousedown( event:MouseEvent ) {}\n       /** Called for you when a mouse button is released */\n   public function onmouseup( event:MouseEvent ) {}\n       /** Called for you when the mouse wheel moves */\n   public function onmousewheel( event:MouseEvent ) {}\n       /** Called for you when the mouse moves */\n   public function onmousemove( event:MouseEvent ) {}\n\n       /** Called for you when a key is pressed down */\n   public function onkeydown( event:KeyEvent ) {}\n       /** Called for you when a key is released */\n   public function onkeyup( event:KeyEvent ) {}\n       /** Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc. */\n   public function ontextinput( event:TextEvent ) {}\n\n       /** Called for you when a touch is first pressed, use the `touch_id` to track which */\n   public function ontouchdown( event:TouchEvent ) {}\n       /** Called for you when a touch is released, use the `touch_id` to track which */\n   public function ontouchup( event:TouchEvent ) {}\n       /** Called for you when a touch is moved, use the `touch_id` to track which */\n   public function ontouchmove( event:TouchEvent ) {}\n\n       /** Called for you when a connected gamepad axis moves, use `gamepad` to determine gamepad id */\n   public function ongamepadaxis( event:GamepadEvent ) {}\n       /** Called for you when a connected gamepad button is pressed, use `gamepad` to determine gamepad id */\n   public function ongamepaddown( event:GamepadEvent ) {}\n       /** Called for you when a connected gamepad button is released, use `gamepad` to determine gamepad id */\n   public function ongamepadup( event:GamepadEvent ) {}\n       /** Called for you when a gamepad is connected or disconnected, use `gamepad` to determine gamepad id */\n   public function ongamepaddevice( event:GamepadEvent ) {}\n\n       /** Called for you when a window is moved, with the data containing the new x/y position */\n   public function onwindowmoved( event:WindowEvent ) {}\n       /** Called for you when a window is resized by the user, with the data containing the new x/y size */\n   public function onwindowresized( event:WindowEvent ) {}\n       /** Called for you when a window is resized by the system or code or the user, with the data containing the new x/y size */\n   public function onwindowsized( event:WindowEvent ) {}\n       /** Called for you when a window is minimized. */\n   public function onwindowminimized( event:WindowEvent ) {}\n       /** Called for you when a window is restored. */\n   public function onwindowrestored( event:WindowEvent ) {}\n\n} //Game\n","\nimport luxe.Input;\nimport luxe.Color;\nimport luxe.Parcel;\nimport luxe.ParcelProgress;\nimport luxe.Physics;\nimport luxe.Rectangle;\nimport luxe.Scene;\nimport luxe.Sprite;\nimport luxe.States;\nimport luxe.Text;\nimport luxe.utils.Random;\nimport luxe.Vector;\n\nclass Main extends luxe.Game\n{\n\n    public static var random:Random;\n\n\n    //      DUDE, it's Luxe.screen.w ...\n    // public static var width     (get, null):Float;\n    // public static var height    (get, null):Float;\n\n    // Everything happens in States!\n    var machine:States;\n\n\n    override function config(config:luxe.AppConfig)\n    {\n\n        return config;\n\n    } //config\n\n    override function ready()\n    {\n\n        preload_assets();\n\n    } //ready\n\n\n    override function onkeyup( e:KeyEvent )\n    {\n\n        if(e.keycode == Key.escape)\n        {\n            Luxe.shutdown();\n        }\n        // if(e.keycode == Key.key_n)\n        // {\n        //     Main.physics.paused = !Main.physics.paused;\n        // }\n        // if(e.keycode == Key.key_m && Main.physics.paused)\n        // {\n        //     Main.physics.forceStep();\n        // }\n\n\n    } //onkeyup\n\n    override function onmousemove( e:MouseEvent )\n    {\n        \n    } // onmousemove\n\n    override function update(dt:Float)\n    {\n\n    } //update\n\n\n    /**\n     * Shader stuff\n     */\n    override function onprerender()\n    {\n        // if(hud != null){\n        //     if(hud.has('grayscaleshader')){\n        //         hud.get('grayscaleshader').onprerender();\n        //     }\n        // }\n    }\n\n    override function onpostrender()\n    {\n        // if(hud != null){\n        //     hud.hud_batcher.draw();\n        //     if(hud.has('grayscaleshader')){\n        //         hud.get('grayscaleshader').onpostrender();\n        //     }\n        // }\n    }\n\n\n\n\n// Internal\n    \n    function preload_assets()\n    {\n        var parcel = new Parcel({\n            textures : [\n                { id:'assets/dg_logo.gif' },\n            ]\n        });\n\n        new ParcelProgress({\n            parcel      : parcel,\n            background  : new Color(0,0,0,0.85),\n            oncomplete  : assets_loaded,\n        });\n\n            //go!\n        parcel.load();\n\n    } // preload_assets\n\n\n    function init_states()\n    {\n        // Machines\n        machine = new States({ name:'statemachine' });\n\n        machine.add( new Game({\n            // what: true\n        }) );\n        \n        machine.set('game');\n        \n    }\n\n\n\n    function assets_loaded(_)\n    {\n\n        Luxe.renderer.clear_color = new Color().rgb(0x000000);\n\n\n        init_states();\n\n        Luxe.events.fire('game.assets.loaded');\n\n    } // assets_loaded\n\n\n} //Main\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\n\tpublic inline static function hasField( o : Dynamic, field : String ) : Bool {\n\t\treturn untyped __js__('Object').prototype.hasOwnProperty.call(o, field);\n\t}\n\n\tpublic static function field( o : Dynamic, field : String ) : Dynamic {\n\t\ttry return untyped o[field] catch( e : Dynamic ) return null;\n\t}\n\n\tpublic inline static function setField( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\to[field] = value;\n\t}\n\n\tpublic static inline function getProperty( o : Dynamic, field : String ) : Dynamic untyped {\n\t\tvar tmp;\n\t\treturn if( o == null ) __define_feature__(\"Reflect.getProperty\",null) else if( o.__properties__ && (tmp=o.__properties__[\"get_\"+field]) ) o[tmp]() else o[field];\n\t}\n\n\tpublic static inline function setProperty( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\tvar tmp;\n\t\tif( o.__properties__ && (tmp=o.__properties__[\"set_\"+field]) ) o[tmp](value) else o[field] = __define_feature__(\"Reflect.setProperty\",value);\n\t}\n\n\tpublic inline static function callMethod( o : Dynamic, func : haxe.Constraints.Function, args : Array<Dynamic> ) : Dynamic untyped {\n\t\treturn func.apply(o,args);\n\t}\n\n\tpublic static function fields( o : Dynamic ) : Array<String> {\n\t\tvar a = [];\n\t\tif (o != null) untyped {\n\t\t\tvar hasOwnProperty = __js__('Object').prototype.hasOwnProperty;\n\t\t\t__js__(\"for( var f in o ) {\");\n\t\t\tif( f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f) ) a.push(f);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static function isFunction( f : Dynamic ) : Bool untyped {\n\t\treturn __js__(\"typeof(f)\") == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>( a : T, b : T ) : Int {\n\t\treturn ( a == b ) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods( f1 : Dynamic, f2 : Dynamic ) : Bool {\n\t\tif( f1 == f2 )\n\t\t\treturn true;\n\t\tif( !isFunction(f1) || !isFunction(f2) )\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\tpublic static function isObject( v : Dynamic ) : Bool untyped {\n\t\tif( v == null )\n\t\t\treturn false;\n\t\tvar t = __js__(\"typeof(v)\");\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null)) || (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue( v : Dynamic ) : Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField( o : Dynamic, field : String ) : Bool untyped {\n\t\tif( !hasField(o,field) ) return false;\n\t\t__js__(\"delete\")(o[field]);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>( o : T ) : T {\n\t\tvar o2 : Dynamic = {};\n\t\tfor( f in Reflect.fields(o) )\n\t\t\tReflect.setField(o2,f,Reflect.field(o,f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function( f : Array<Dynamic> -> Void ) : Dynamic {})\n\tpublic static function makeVarArgs( f : Array<Dynamic> -> Dynamic ) : Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(__js__(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport js.Boot;\n\n@:keepInit\n@:coreApi class Std {\n\n\tpublic static inline function is( v : Dynamic, t : Dynamic ) : Bool {\n\t\treturn untyped js.Boot.__instanceof(v,t);\n\t}\n\n\tpublic static inline function instance<T:{},S:T>( value : T, c : Class<S> ) : S {\n\t\treturn untyped __instanceof__(value, c) ? cast value : null;\n\t}\n\n\tpublic static function string( s : Dynamic ) : String {\n\t\treturn untyped js.Boot.__string_rec(s,\"\");\n\t}\n\n\tpublic static inline function int( x : Float ) : Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\tpublic static function parseInt( x : String ) : Null<Int> {\n\t\tvar v = untyped __js__(\"parseInt\")(x, 10);\n\t\t// parse again if hexadecimal\n\t\tif( v == 0 && (x.charCodeAt(1) == 'x'.code || x.charCodeAt(1) == 'X'.code) )\n\t\t\tv = untyped __js__(\"parseInt\")(x);\n\t\tif( untyped __js__(\"isNaN\")(v) )\n\t\t\treturn null;\n\t\treturn cast v;\n\t}\n\n\tpublic static inline function parseFloat( x : String ) : Float {\n\t\treturn untyped __js__(\"parseFloat\")(x);\n\t}\n\n\tpublic static function random( x : Int ) : Int {\n\t\treturn untyped x <= 0 ? 0 : Math.floor(Math.random()*x);\n\t}\n\n\tstatic function __init__() : Void untyped {\n\t\t__feature__(\"js.Boot.getClass\",String.prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"String\"] = String,String));\n\t\t__feature__(\"js.Boot.isClass\",String.__name__ = __feature__(\"Type.getClassName\",[\"String\"],true));\n\t\t__feature__(\"Type.resolveClass\",$hxClasses[\"Array\"] = Array);\n\t\t__feature__(\"js.Boot.isClass\",Array.__name__ = __feature__(\"Type.getClassName\",[\"Array\"],true));\n\t\t__feature__(\"Date.*\", {\n\t\t\t__feature__(\"js.Boot.getClass\",__js__('Date').prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"Date\"] = __js__('Date'),__js__('Date')));\n\t\t\t__feature__(\"js.Boot.isClass\",__js__('Date').__name__ = [\"Date\"]);\n\t\t});\n\t\t__feature__(\"Int.*\",{\n\t\t\tvar Int = __feature__(\"Type.resolveClass\", $hxClasses[\"Int\"] = { __name__ : [\"Int\"] }, { __name__ : [\"Int\"] });\n\t\t});\n\t\t__feature__(\"Dynamic.*\",{\n\t\t\tvar Dynamic = __feature__(\"Type.resolveClass\", $hxClasses[\"Dynamic\"] = { __name__ : [\"Dynamic\"] }, { __name__ : [\"Dynamic\"] });\n\t\t});\n\t\t__feature__(\"Float.*\",{\n\t\t\tvar Float = __feature__(\"Type.resolveClass\", $hxClasses[\"Float\"] = __js__(\"Number\"), __js__(\"Number\"));\n\t\t\tFloat.__name__ = [\"Float\"];\n\t\t});\n\t\t__feature__(\"Bool.*\",{\n\t\t\tvar Bool = __feature__(\"Type.resolveEnum\",$hxClasses[\"Bool\"] = __js__(\"Boolean\"), __js__(\"Boolean\"));\n\t\t\tBool.__ename__ = [\"Bool\"];\n\t\t});\n\t\t__feature__(\"Class.*\",{\n\t\t\tvar Class = __feature__(\"Type.resolveClass\", $hxClasses[\"Class\"] = { __name__ : [\"Class\"] }, { __name__ : [\"Class\"] });\n\t\t});\n\t\t__feature__(\"Enum.*\",{\n\t\t\tvar Enum = {};\n\t\t});\n\t\t__feature__(\"Void.*\",{\n\t\t\tvar Void = __feature__(\"Type.resolveEnum\", $hxClasses[\"Void\"] = { __ename__ : [\"Void\"] }, { __ename__ : [\"Void\"] });\n\t\t});\n\n#if !js_es5\n\t\t__feature__(\"Array.map\",\n\t\t\tif( Array.prototype.map == null )\n\t\t\t\tArray.prototype.map = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length )\n\t\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n\t\t__feature__(\"Array.filter\",\n\t\t\tif( Array.prototype.filter == null )\n\t\t\t\tArray.prototype.filter = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length ) {\n\t\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\t\tif( f(e) ) a.push(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tIts cross-platform implementation uses String concatenation internally, but\n\tStringBuf may be optimized for different targets.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues. However, the internal buffer cannot be modified.\n**/\nclass StringBuf {\n\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get,never) : Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>( x : T ) : Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub( s : String, pos : Int, ?len : Int) : Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn b;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class provides advanced methods on Strings. It is ideally used with\n\t'using StringTools' and then acts as an extension to the String class.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\n#if cpp\nusing cpp.NativeString;\n#end\nclass StringTools {\n\t/**\n\t\tEncode an URL by using the standard format.\n\t**/\n\t#if (!java && !cpp) inline #end public static function urlEncode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"encodeURIComponent\"](s);\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlEncode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped encodeURIComponent(s);\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLEncode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLEncoder.encode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.EscapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.quote(s, \"\");\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tDecode an URL using the standard format.\n\t**/\n\t#if (!java && !cpp) inline #end public static function urlDecode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"decodeURIComponent\"](s.split(\"+\").join(\" \"));\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlDecode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped decodeURIComponent(s.split(\"+\").join(\" \"));\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLDecode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLDecoder.decode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.UnescapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.unquote(s);\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tEscapes HTML special characters of the string `s`.\n\n\t\tThe following replacements are made:\n\n\t\t- `&` becomes `&amp`;\n\t\t- `<` becomes `&lt`;\n\t\t- `>` becomes `&gt`;\n\n\t\tIf `quotes` is true, the following characters are also replaced:\n\n\t\t- `\"` becomes `&quot`;\n\t\t- `'` becomes `&#039`;\n\t**/\n\tpublic static function htmlEscape( s : String, ?quotes : Bool ) : String {\n\t\ts = s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t\treturn quotes ? s.split('\"').join(\"&quot;\").split(\"'\").join(\"&#039;\") : s;\n\t}\n\n\t/**\n\t\tUnescapes HTML special characters of the string `s`.\n\n\t\tThis is the inverse operation to htmlEscape, i.e. the following always\n\t\tholds: htmlUnescape(htmlEscape(s)) == s\n\n\t\tThe replacements follow:\n\n\t\t- `&amp;` becomes `&`\n\t\t- `&lt;` becomes `<`\n\t\t- `&gt;` becomes `>`\n\t\t- `&quot;` becomes `\"`\n\t\t- `&#039;` becomes `'`\n\t**/\n\tpublic static function htmlUnescape( s : String ) : String {\n\t\treturn s.split(\"&gt;\").join(\">\").split(\"&lt;\").join(\"<\").split(\"&quot;\").join('\"').split(\"&#039;\").join(\"'\").split(\"&amp;\").join(\"&\");\n\t}\n\n\t/**\n\t\tTells if the string `s` starts with the string `start`.\n\n\t\tIf `start` is null, the result is unspecified.\n\n\t\tIf `start` is the empty String \"\", the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function startsWith( s : String, start : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.startsWith(start);\n\t\t#elseif cs\n\t\treturn untyped s.StartsWith(start);\n\t\t#elseif cpp\n\t\tif (s.length<start.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str();\n\t\tvar p1 = start.c_str();\n\t\tfor(i in 0...start.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#else\n\t\treturn( s.length >= start.length && s.substr(0, start.length) == start );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the string `s` ends with the string `end`.\n\n\t\tIf `end` is null, the result is unspecified.\n\n\t\tIf `end` is the empty String \"\", the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function endsWith( s : String, end : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.endsWith(end);\n\t\t#elseif cs\n\t\treturn untyped s.EndsWith(end);\n\t\t#elseif cpp\n\t\tif (s.length<end.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str().add( s.length-end.length );\n\t\tvar p1 = end.c_str();\n\t\tfor(i in 0...end.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#else\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn( slen >= elen && s.substr(slen - elen, elen) == end );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the character in the string `s` at position `pos` is a space.\n\n\t\tA character is considered to be a space character if its character code\n\t\tis 9,10,11,12,13 or 32.\n\n\t\tIf `s` is the empty String \"\", or if pos is not a valid position within\n\t\t`s`, the result is false.\n\t**/\n\tpublic static function isSpace( s : String, pos : Int ) : Bool {\n\t\t#if python\n\t\tif (s.length == 0 || pos < 0 || pos >= s.length) return false;\n\t\t#end\n\t\tvar c = s.charCodeAt( pos );\n\t\treturn (c > 8 && c < 14) || c == 32;\n\t}\n\n\t/**\n\t\tRemoves leading space characters of `s`.\n\n\t\tThis function internally calls isSpace() to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String \"\" or consists only of space characters, the\n\t\tresult is the empty String \"\".\n\t**/\n\tpublic #if cs inline #end static function ltrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimStart();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,r) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 )\n\t\t\treturn s.substr(r, l-r);\n\t\telse\n\t\t\treturn s;\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves trailing space characters of `s`.\n\n\t\tThis function internally calls isSpace() to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String \"\" or consists only of space characters, the\n\t\tresult is the empty String \"\".\n\t**/\n\tpublic #if cs inline #end static function rtrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimEnd();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,l-r-1) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 ){\n\t\t\treturn s.substr(0, l-r);\n\t\t}else{\n\t\t\treturn s;\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves leading and trailing space characters of `s`.\n\n\t\tThis is a convenience function for ltrim(rtrim(s)).\n\t**/\n\tpublic #if (cs || java) inline #end static function trim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.Trim();\n\t\t#elseif java\n\t\treturn untyped s.trim();\n\t\t#else\n\t\treturn ltrim(rtrim(s));\n\t\t#end\n\t}\n\n\t/**\n\t\tConcatenates `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String \"\" or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function lpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = c + s;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tAppends `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String \"\" or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function rpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = s + c;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReplace all occurences of the String `sub` in the String `s` by the\n\t\tString `by`.\n\n\t\tIf `sub` is the empty String \"\", `by` is inserted after each character\n\t\tof `s`. If `by` is also the empty String \"\", `s` remains unchanged.\n\n\t\tThis is a convenience function for `s.split(sub).join(by)`.\n\n\t\tIf `sub` or `by` are null, the result is unspecified.\n\t**/\n\tpublic static function replace( s : String, sub : String, by : String ) : String {\n\t\t#if java\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.replace(sub, by);\n\t\t#elseif cs\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.Replace(sub, by);\n\t\t#else\n\t\treturn s.split(sub).join(by);\n\t\t#end\n\t}\n\n\t/**\n\t\tEncodes `n` into a hexadecimal representation.\n\n\t\tIf `digits` is specified, the resulting String is padded with \"0\" until\n\t\tits length equals `digits`.\n\t**/\n\tpublic static function hex( n : Int, ?digits : Int ) {\n\t\t#if flash\n\t\t\tvar n : UInt = n;\n\t\t\tvar s : String = untyped n.toString(16);\n\t\t\ts = s.toUpperCase();\n\t\t#else\n\t\t\tvar s = \"\";\n\t\t\tvar hexChars = \"0123456789ABCDEF\";\n\t\t\tdo {\n\t\t\t\ts = hexChars.charAt(n&15) + s;\n\t\t\t\tn >>>= 4;\n\t\t\t} while( n > 0 );\n\t\t#end\n\t\t#if python\n\t\tif (digits != null && s.length < digits) {\n\t\t\tvar diff = digits - s.length;\n\t\t\tfor (_ in 0...diff) {\n\t\t\t\ts = \"0\" + s;\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif( digits != null )\n\t\t\twhile( s.length < digits )\n\t\t\t\ts = \"0\"+s;\n\t\t#end\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReturns the character code at position `index` of String `s`, or an\n\t\tend-of-file indicator at if `position` equals `s.length`.\n\n\t\tThis method is faster than String.charCodeAt() on some platforms, but\n\t\tthe result is unspecified if `index` is negative or greater than\n\t\t`s.length`.\n\n\t\tEnd of file status can be checked by calling `StringTools.isEof` with\n\t\tthe returned value as argument.\n\n\t\tThis operation is not guaranteed to work if `s` contains the \\0\n\t\tcharacter.\n\t**/\n\tpublic static inline function fastCodeAt( s : String, index : Int ) : Int {\n\t\t#if neko\n\t\treturn untyped __dollar__sget(s.__s, index);\n\t\t#elseif cpp\n\t\treturn untyped s.cca(index);\n\t\t#elseif flash\n\t\treturn untyped s.cca(index);\n\t\t#elseif java\n\t\treturn ( index < s.length ) ? cast(_charAt(s, index), Int) : -1;\n\t\t#elseif cs\n\t\treturn ( cast(index, UInt) < s.length ) ? cast(s[index], Int) : -1;\n\t\t#elseif js\n\t\treturn (untyped s).charCodeAt(index);\n\t\t#elseif python\n\t\treturn if (index >= s.length) -1 else python.internal.UBuiltins.ord(python.Syntax.arrayAccess(s, index));\n\t\t#else\n\t\treturn untyped s.cca(index);\n\t\t#end\n\t}\n\n\t/*\n\t\tTells if `c` represents the end-of-file (EOF) character.\n\t*/\n\t@:noUsing public static inline function isEof( c : Int ) : Bool {\n\t\t#if (flash || cpp)\n\t\treturn c == 0;\n\t\t#elseif js\n\t\treturn c != c; // fast NaN\n\t\t#elseif neko\n\t\treturn c == null;\n\t\t#elseif cs\n\t\treturn c == -1;\n\t\t#elseif java\n\t\treturn c == -1;\n\t\t#elseif python\n\t\treturn c == -1;\n\t\t#else\n\t\treturn false;\n\t\t#end\n\t}\n\n\t#if java\n\tprivate static inline function _charAt(str:String, idx:Int):java.StdTypes.Char16 return untyped str._charAt(idx);\n\t#end\n\n\t#if neko\n\tprivate static var _urlEncode = neko.Lib.load(\"std\",\"url_encode\",1);\n\tprivate static var _urlDecode = neko.Lib.load(\"std\",\"url_decode\",1);\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nenum ValueType {\n\tTNull;\n\tTInt;\n\tTFloat;\n\tTBool;\n\tTObject;\n\tTFunction;\n\tTClass( c : Class<Dynamic> );\n\tTEnum( e : Enum<Dynamic> );\n\tTUnknown;\n}\n\n@:coreApi class Type {\n\n\tpublic static inline function getClass<T>( o : T ) : Class<T> {\n\t\treturn if (o == null) null else @:privateAccess js.Boot.getClass(o);\n\t}\n\n\tpublic static function getEnum( o : EnumValue ) : Enum<Dynamic> untyped {\n\t\tif( o == null )\n\t\t\treturn null;\n\t\treturn o.__enum__;\n\t}\n\n\tpublic static function getSuperClass( c : Class<Dynamic> ) : Class<Dynamic> untyped {\n\t\treturn c.__super__;\n\t}\n\n\n\tpublic static function getClassName( c : Class<Dynamic> ) : String {\n\t\tvar a : Array<String> = untyped c.__name__;\n\t\tif (a == null)\n\t\t\treturn null;\n\t\treturn a.join(\".\");\n\t}\n\n\tpublic static function getEnumName( e : Enum<Dynamic> ) : String {\n\t\tvar a : Array<String> = untyped e.__ename__;\n\t\treturn a.join(\".\");\n\t}\n\n\tpublic static function resolveClass( name : String ) : Class<Dynamic> untyped {\n\t\tvar cl : Class<Dynamic> = $hxClasses[name];\n\t\t// ensure that this is a class\n\t\tif( cl == null || !js.Boot.isClass(cl) )\n\t\t\treturn null;\n\t\treturn cl;\n\t}\n\n\tpublic static function resolveEnum( name : String ) : Enum<Dynamic> untyped {\n\t\tvar e : Dynamic = $hxClasses[name];\n\t\t// ensure that this is an enum\n\t\tif( e == null || !js.Boot.isEnum(e) )\n\t\t\treturn null;\n\t\treturn e;\n\t}\n\n\tpublic static function createInstance<T>( cl : Class<T>, args : Array<Dynamic> ) : T untyped {\n\t\tswitch( args.length ) {\n\t\tcase 0:\n\t\t\treturn __new__(cl);\n\t\tcase 1:\n\t\t\treturn __new__(cl,args[0]);\n\t\tcase 2:\n\t\t\treturn __new__(cl,args[0],args[1]);\n\t\tcase 3:\n\t\t\treturn __new__(cl,args[0],args[1],args[2]);\n\t\tcase 4:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3]);\n\t\tcase 5:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4]);\n\t\tcase 6:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5]);\n\t\tcase 7:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6]);\n\t\tcase 8:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);\n\t\tdefault:\n\t\t\tthrow \"Too many arguments\";\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static function createEmptyInstance<T>( cl : Class<T> ) : T untyped {\n\t\t__js__(\"function empty() {}; empty.prototype = cl.prototype\");\n\t\treturn __js__(\"new empty()\");\n\t}\n\n\tpublic static function createEnum<T>( e : Enum<T>, constr : String, ?params : Array<Dynamic> ) : T {\n\t\tvar f:Dynamic = Reflect.field(e,constr);\n\t\tif( f == null ) throw \"No such constructor \"+constr;\n\t\tif( Reflect.isFunction(f) ) {\n\t\t\tif( params == null ) throw \"Constructor \"+constr+\" need parameters\";\n\t\t\treturn Reflect.callMethod(e,f,params);\n\t\t}\n\t\tif( params != null && params.length != 0 )\n\t\t\tthrow \"Constructor \"+constr+\" does not need parameters\";\n\t\treturn f;\n\t}\n\n\tpublic static function createEnumIndex<T>( e : Enum<T>, index : Int, ?params : Array<Dynamic> ) : T {\n\t\tvar c : String = (untyped e.__constructs__)[index];\n\t\tif( c == null ) throw index+\" is not a valid enum constructor index\";\n\t\treturn createEnum(e,c,params);\n\t}\n\n\tpublic static function getInstanceFields( c : Class<Dynamic> ) : Array<String> {\n\t\tvar a = [];\n\t\tuntyped __js__(\"for(var i in c.prototype) a.push(i)\");\n\t\ta.remove(\"__class__\");\n\t\ta.remove(\"__properties__\");\n\t\treturn a;\n\t}\n\n\tpublic static function getClassFields( c : Class<Dynamic> ) : Array<String> {\n\t\tvar a = Reflect.fields(c);\n\t\ta.remove(\"__name__\");\n\t\ta.remove(\"__interfaces__\");\n\t\ta.remove(\"__properties__\");\n\t\ta.remove(\"__super__\");\n\t\ta.remove(\"__meta__\");\n\t\ta.remove(\"prototype\");\n\t\treturn a;\n\t}\n\n\tpublic static function getEnumConstructs( e : Enum<Dynamic> ) : Array<String> {\n\t\tvar a : Array<String> = untyped e.__constructs__;\n\t\treturn a.copy();\n\t}\n\n\tpublic static function typeof( v : Dynamic ) : ValueType untyped {\n\t\tswitch( __js__(\"typeof\")(v) ) {\n\t\tcase \"boolean\": return TBool;\n\t\tcase \"string\": return TClass(String);\n\t\tcase \"number\":\n\t\t\t// this should handle all cases : NaN, +/-Inf and Floats outside range\n\t\t\tif( Math.ceil(v) == v%2147483648.0 )\n\t\t\t\treturn TInt;\n\t\t\treturn TFloat;\n\t\tcase \"object\":\n\t\t\tif( v == null )\n\t\t\t\treturn TNull;\n\t\t\tvar e = v.__enum__;\n\t\t\tif( e != null )\n\t\t\t\treturn TEnum(e);\n\t\t\tvar c = js.Boot.getClass(v);\n\t\t\tif( c != null )\n\t\t\t\treturn TClass(c);\n\t\t\treturn TObject;\n\t\tcase \"function\":\n\t\t\tif( js.Boot.isClass(v) || js.Boot.isEnum(v) )\n\t\t\t\treturn TObject;\n\t\t\treturn TFunction;\n\t\tcase \"undefined\":\n\t\t\treturn TNull;\n\t\tdefault:\n\t\t\treturn TUnknown;\n\t\t}\n\t}\n\n\tpublic static function enumEq<T>( a : T, b : T ) : Bool untyped {\n\t\tif( a == b )\n\t\t\treturn true;\n\t\ttry {\n\t\t\tif( a[0] != b[0] )\n\t\t\t\treturn false;\n\t\t\tfor( i in 2...a.length )\n\t\t\t\tif( !enumEq(a[i],b[i]) )\n\t\t\t\t\treturn false;\n\t\t\tvar e = a.__enum__;\n\t\t\tif( e != b.__enum__ || e == null )\n\t\t\t\treturn false;\n\t\t} catch( e : Dynamic ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic inline static function enumConstructor( e : EnumValue ) : String {\n\t\treturn untyped e[0];\n\t}\n\n\tpublic inline static function enumParameters( e : EnumValue ) : Array<Dynamic> {\n\t\treturn untyped e.slice(2);\n\t}\n\n\tpublic inline static function enumIndex( e : EnumValue ) : Int {\n\t\treturn untyped e[1];\n\t}\n\n\tpublic static function allEnums<T>( e : Enum<T> ) : Array<T> {\n\t\treturn untyped e.__empty_constructs__;\n\t}\n\n}\n\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n#if ((flash || flash9doc || cs) && !doc_gen)\n/**\n\tThe unsigned Int type is only defined for Flash and C#. It's currently\n\thandled the same as a normal Int.\n**/\n@:coreType\n@:notNull\n@:runtimeValue\n@:analyzer(no_const_propagation)\nabstract UInt to Int from Int\n{\n\t@:commutative @:op(A+B) private static function addI(lhs:UInt, rhs:Int):UInt;\n\t@:commutative @:op(A+B) private static function addF(lhs:UInt, rhs:Float):Float;\n\t@:op(A+B) private static function add(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A*B) private static function mulI(lhs:UInt, rhs:Int):UInt;\n\t@:commutative @:op(A*B) private static function mulF(lhs:UInt, rhs:Float):Float;\n\t@:op(A*B) private static function mul(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A%B) private static function modI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A%B) private static function modF(lhs:UInt, rhs:Float):Float;\n\t@:op(A%B) private static function mod(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A-B) private static function subI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A-B) private static function subF(lhs:UInt, rhs:Float):Float;\n\t@:op(A-B) private static function sub(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A/B) private static function divI(lhs:UInt, rhs:Int):Float;\n\t@:op(A/B) private static function divF(lhs:UInt, rhs:Float):Float;\n\t@:op(A/B) private static function div(lhs:UInt, rhs:UInt):Float;\n\n\t@:commutative @:op(A|B) private static function orI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A|B) private static function or(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A^B) private static function xorI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A^B) private static function xor(lhs:UInt, rhs:UInt):UInt;\n\n\t@:commutative @:op(A&B) private static function andI(lhs:UInt, rhs:Int):UInt;\n\t@:op(A&B) private static function and(lhs:UInt, rhs:UInt):UInt;\n\n\t@:op(A<<B) private static function shl(lhs:UInt, rhs:Int):UInt;\n\t@:op(A>>B) private static function shr(lhs:UInt, rhs:Int):UInt;\n\t@:op(A>>>B) private static function ushr(lhs:UInt, rhs:Int):UInt;\n\n\t@:op(A>B) private static function gt(lhs:UInt, rhs:UInt):Bool;\n\t@:op(A>=B) private static function gte(lhs:UInt, rhs:UInt):Bool;\n\t@:op(A<B) private static function lt(lhs:UInt, rhs:UInt):Bool;\n\t@:op(A<=B) private static function lte(lhs:UInt, rhs:UInt):Bool;\n\n\t@:op(A>B) private static function gtf(lhs:UInt, rhs:Float):Bool;\n\t@:op(A>B) private static function gtf(lhs:Float, rhs:UInt):Bool;\n\t@:op(A>=B) private static function gtef(lhs:UInt, rhs:Float):Bool;\n\t@:op(A>=B) private static function gtef(lhs:Float, rhs:UInt):Bool;\n\t@:op(A<B) private static function ltf(lhs:UInt, rhs:Float):Bool;\n\t@:op(A<B) private static function ltf(lhs:Float, rhs:UInt):Bool;\n\t@:op(A<=B) private static function ltef(lhs:UInt, rhs:Float):Bool;\n\t@:op(A<=B) private static function ltef(lhs:Float, rhs:UInt):Bool;\n\n\t@:op(~A) private static function bneg(t:UInt):UInt;\n\n\t@:commutative @:op(A == B) private static function equalsInt<T:Int>(a:UInt, b:T):Bool;\n\t@:commutative @:op(A != B) private static function notEqualsInt<T:Int>(a:UInt, b:T):Bool;\n\t@:commutative @:op(A == B) private static function equalsFloat<T:Float>(a:UInt, b:T):Bool;\n\t@:commutative @:op(A != B) private static function notEqualsFloat<T:Float>(a:UInt, b:T):Bool;\n\n\t@:op(++A) private function prefixIncrement():UInt;\n\t@:op(A++) private function postfixIncrement():UInt;\n\t@:op(--A) private function prefixDecrement():UInt;\n\t@:op(A--) private function postfixDecrement():UInt;\n}\n#else\n/**\n\tThe unsigned Int type is only defined for Flash and C#.\n\tSimulate it for other platforms.\n**/\nabstract UInt(Int) from Int to Int {\n\n\t@:op(A + B) private static inline function add(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() + b.toInt();\n\t}\n\n\t@:op(A / B) private static inline function div(a:UInt, b:UInt):Float {\n\t\treturn a.toFloat() / b.toFloat();\n\t}\n\n\t@:op(A * B) private static inline function mul(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() * b.toInt();\n\t}\n\n\t@:op(A - B) private static inline function sub(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() - b.toInt();\n\t}\n\n\t@:op(A > B) private static #if !js inline #end function gt(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn\n\t\t\tif( aNeg != bNeg ) aNeg;\n\t\t\telse a.toInt() > b.toInt();\n\t}\n\n\t@:op(A >= B) private static #if !js inline #end function gte(a:UInt, b:UInt):Bool {\n\t\tvar aNeg = a.toInt() < 0;\n\t\tvar bNeg = b.toInt() < 0;\n\t\treturn\n\t\t\tif( aNeg != bNeg ) aNeg;\n\t\t\telse a.toInt() >= b.toInt();\n\t}\n\n\t@:op(A < B) private static inline function lt(a:UInt, b:UInt):Bool {\n\t\treturn gt(b, a);\n\t}\n\n\t@:op(A <= B) private static inline function lte(a:UInt, b:UInt):Bool {\n\t\treturn gte(b, a);\n\t}\n\n\t@:op(A & B) private static inline function and(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() & b.toInt();\n\t}\n\n\t@:op(A | B) private static inline function or(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() | b.toInt();\n\t}\n\n\t@:op(A ^ B) private static inline function xor(a:UInt, b:UInt):UInt {\n\t\treturn a.toInt() ^ b.toInt();\n\t}\n\n\t@:op(A << B) private static inline function shl(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() << b;\n\t}\n\n\t@:op(A >> B) private static inline function shr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >> b;\n\t}\n\n\t@:op(A >>> B) private static inline function ushr(a:UInt, b:Int):UInt {\n\t\treturn a.toInt() >>> b;\n\t}\n\n\t@:op(A % B) private static inline function mod(a:UInt, b:UInt):UInt {\n\t\treturn Std.int( a.toFloat() % b.toFloat() );\n\t}\n\n\t@:commutative @:op(A + B) private static inline function addWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() + b;\n\t}\n\n\t@:commutative @:op(A * B) private static inline function mulWithFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() * b;\n\t}\n\n\t@:op(A / B) private static inline function divFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() / b;\n\t}\n\n\t@:op(A / B) private static inline function floatDiv(a:Float, b:UInt):Float {\n\t\treturn a / b.toFloat();\n\t}\n\n\t@:op(A - B) private static inline function subFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() - b;\n\t}\n\n\t@:op(A - B) private static inline function floatSub(a:Float, b:UInt):Float {\n\t\treturn a - b.toFloat();\n\t}\n\n\t@:op(A > B) private static inline function gtFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() > b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() == b;\n\t}\n\n\t@:commutative @:op(A != B) private static inline function notEqualsInt<T:Int>(a:UInt, b:T):Bool {\n\t\treturn a.toInt() != b;\n\t}\n\n\t@:commutative @:op(A == B) private static inline function equalsFloat<T:Float>(a:UInt, b:T):Bool {\n        return a.toFloat() == b;\n    }\n\n    @:commutative @:op(A != B) private static inline function notEqualsFloat<T:Float>(a:UInt, b:T):Bool {\n        return a.toFloat() != b;\n    }\n\n\t@:op(A >= B) private static inline function gteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() >= b;\n\t}\n\n\n\t@:op(A > B) private static inline function floatGt(a:Float, b:UInt):Bool {\n\t\treturn a > b.toFloat();\n\t}\n\n\t@:op(A >= B) private static inline function floatGte(a:Float, b:UInt):Bool {\n\t\treturn a >= b.toFloat();\n\t}\n\n\t@:op(A < B) private static inline function ltFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() < b;\n\t}\n\n\t@:op(A <= B) private static inline function lteFloat(a:UInt, b:Float):Bool {\n\t\treturn a.toFloat() <= b;\n\t}\n\n\t@:op(A < B) private static inline function floatLt(a:Float, b:UInt):Bool {\n\t\treturn a < b.toFloat();\n\t}\n\n\t@:op(A <= B) private static inline function floatLte(a:Float, b:UInt):Bool {\n\t\treturn a <= b.toFloat();\n\t}\n\n\t@:op(A % B) private static inline function modFloat(a:UInt, b:Float):Float {\n\t\treturn a.toFloat() % b;\n\t}\n\n\t@:op(A % B) private static inline function floatMod(a:Float, b:UInt):Float {\n\t\treturn a % b.toFloat();\n\t}\n\n\t@:op(~A) private inline function negBits():UInt {\n\t\treturn ~this;\n\t}\n\n\t@:op(++A) private inline function prefixIncrement():UInt {\n\t\treturn ++this;\n\t}\n\n\t@:op(A++) private inline function postfixIncrement():UInt {\n\t\treturn this++;\n\t}\n\n\t@:op(--A) private inline function prefixDecrement():UInt {\n\t\treturn --this;\n\t}\n\n\t@:op(A--) private inline function postfixDecrement():UInt {\n\t\treturn this--;\n\t}\n\n\t// TODO: radix is just defined to deal with doc_gen issues\n\tprivate inline function toString(?radix:Int):String {\n\t\treturn Std.string(toFloat());\n\t}\n\n\tprivate inline function toInt():Int {\n\t\treturn this;\n\t}\n\n\t@:to private #if (!js || analyzer) inline #end function toFloat():Float {\n\t\tvar int = toInt();\n\t\tif (int < 0) {\n\t\t\treturn 4294967296.0 + int;\n\t\t}\n\t\telse {\n\t\t\t// + 0.0 here to make sure we promote to Float on some platforms\n\t\t\t// In particular, PHP was having issues when comparing to Int in the == op.\n\t\t\treturn int + 0.0;\n\t\t}\n\t}\n}\n#end\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tElements return by `CallStack` methods.\n**/\nenum StackItem {\n\tCFunction;\n\tModule( m : String );\n\tFilePos( s : Null<StackItem>, file : String, line : Int );\n\tMethod( classname : String, method : String );\n\tLocalFunction( ?v : Int );\n}\n\n/**\n\tGet informations about the call stack.\n**/\nclass CallStack {\n\t#if js\n\tstatic var lastException:js.Error;\n\n\tstatic function getStack(e:js.Error):Array<StackItem> {\n\t\tif (e == null) return [];\n\t\t// https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\t\tvar oldValue = (untyped Error).prepareStackTrace;\n\t\t(untyped Error).prepareStackTrace = function (error, callsites :Array<Dynamic>) {\n\t\t\tvar stack = [];\n\t\t\tfor (site in callsites) {\n\t\t\t\tif (wrapCallSite != null) site = wrapCallSite(site);\n\t\t\t\tvar method = null;\n\t\t\t\tvar fullName :String = site.getFunctionName();\n\t\t\t\tif (fullName != null) {\n\t\t\t\t\tvar idx = fullName.lastIndexOf(\".\");\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tvar className = fullName.substr(0, idx);\n\t\t\t\t\t\tvar methodName = fullName.substr(idx+1);\n\t\t\t\t\t\tmethod = Method(className, methodName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstack.push(FilePos(method, site.getFileName(), site.getLineNumber()));\n\t\t\t}\n\t\t\treturn stack;\n\t\t}\n\t\tvar a = makeStack(e.stack);\n\t\t(untyped Error).prepareStackTrace = oldValue;\n\t\treturn a;\n\t}\n\n\t// support for source-map-support module\n\t@:noCompletion\n\tpublic static var wrapCallSite:Dynamic->Dynamic;\n\t#end\n\n\t/**\n\t\tReturn the call stack elements, or an empty array if not available.\n\t**/\n\tpublic static function callStack() : Array<StackItem> {\n\t\t#if neko\n\t\t\tvar a = makeStack(untyped __dollar__callstack());\n\t\t\ta.shift(); // remove Stack.callStack()\n\t\t\treturn a;\n\t\t#elseif flash\n\t\t\tvar a = makeStack( new flash.errors.Error().getStackTrace() );\n\t\t\ta.shift(); // remove Stack.callStack()\n\t\t\treturn a;\n\t\t#elseif php\n\t\t\treturn makeStack(\"%s\");\n\t\t#elseif cpp\n\t\t\tvar s:Array<String> = untyped __global__.__hxcpp_get_call_stack(true);\n\t\t\treturn makeStack(s);\n\t\t#elseif js\n\t\t\ttry {\n\t\t\t\tthrow new js.Error();\n\t\t\t} catch( e : Dynamic ) {\n\t\t\t\tvar a = getStack(e);\n\t\t\t\ta.shift(); // remove Stack.callStack()\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t#elseif java\n\t\t\tvar stack = [];\n\t\t\tfor ( el in java.lang.Thread.currentThread().getStackTrace() ) {\n\t\t\t\tvar className = el.getClassName();\n\t\t\t\tvar methodName = el.getMethodName();\n\t\t\t\tvar fileName = el.getFileName();\n\t\t\t\tvar lineNumber = el.getLineNumber();\n\t\t\t\tvar method = Method( className, methodName );\n\t\t\t\tif ( fileName != null || lineNumber >= 0 ) {\n\t\t\t\t\tstack.push( FilePos( method, fileName, lineNumber ) );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstack.push( method );\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack.shift();\n\t\t\tstack.shift();\n\t\t\tstack.pop();\n\t\t\treturn stack;\n\t\t#elseif cs\n\t\t\treturn makeStack(new cs.system.diagnostics.StackTrace(1, true));\n\t\t#elseif python\n\t\t\tvar stack = [];\n\t\t\tvar infos = python.lib.Traceback.extract_stack();\n\t\t\tinfos.pop();\n\t\t\tinfos.reverse();\n\t\t\tfor (elem in infos)\n\t\t\t\tstack.push(FilePos(null, elem._1, elem._2));\n\t\t\treturn stack;\n\t\t#else\n\t\t\treturn []; // Unsupported\n\t\t#end\n\t}\n\n\t/**\n\t\tReturn the exception stack : this is the stack elements between\n\t\tthe place the last exception was thrown and the place it was\n\t\tcaught, or an empty array if not available.\n\t**/\n\t#if cpp @:noStack #end /* Do not mess up the exception stack */\n\tpublic static function exceptionStack() : Array<StackItem> {\n\t\t#if neko\n\t\t\treturn makeStack(untyped __dollar__excstack());\n\t\t#elseif as3\n\t\t\treturn new Array();\n\t\t#elseif flash\n\t\t\tvar err : flash.errors.Error = untyped flash.Boot.lastError;\n\t\t\tif( err == null ) return new Array();\n\t\t\tvar a = makeStack( err.getStackTrace() );\n\t\t\tvar c = callStack();\n\t\t\tvar i = c.length - 1;\n\t\t\twhile( i > 0 ) {\n\t\t\t\tif( Std.string(a[a.length-1]) == Std.string(c[i]) )\n\t\t\t\t\ta.pop();\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t\ti--;\n\t\t\t}\n\t\t\treturn a;\n\t\t#elseif php\n\t\t\treturn makeStack(\"%e\");\n\t\t#elseif cpp\n\t\t\tvar s:Array<String> = untyped __global__.__hxcpp_get_exception_stack();\n\t\t\treturn makeStack(s);\n\t\t#elseif java\n\t\t\tvar stack = [];\n\t\t\tfor ( el in java.internal.Exceptions.currentException().getStackTrace() ) {\n\t\t\t\tvar className = el.getClassName();\n\t\t\t\tvar methodName = el.getMethodName();\n\t\t\t\tvar fileName = el.getFileName();\n\t\t\t\tvar lineNumber = el.getLineNumber();\n\t\t\t\tvar method = Method( className, methodName );\n\t\t\t\tif ( fileName != null || lineNumber >= 0 ) {\n\t\t\t\t\tstack.push( FilePos( method, fileName, lineNumber ) );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstack.push( method );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// stack.shift();\n\t\t\tstack.shift();\n\t\t\tstack.pop();\n\t\t\treturn stack;\n\t\t#elseif cs\n\t\t\treturn makeStack(new cs.system.diagnostics.StackTrace(cs.internal.Exceptions.exception, true));\n\t\t#elseif python\n\t\t\tvar stack = [];\n\t\t\tvar exc = python.lib.Sys.exc_info();\n\t\t\tif (exc._3 != null)\n\t\t\t{\n\t\t\t\tvar infos = python.lib.Traceback.extract_tb(exc._3);\n\t\t\t\tinfos.reverse();\n\t\t\t\tfor (elem in infos)\n\t\t\t\t\tstack.push(FilePos(null, elem._1, elem._2));\n\t\t\t}\n\t\t\treturn stack;\n\t\t#elseif js\n\t\t\treturn untyped __define_feature__(\"haxe.CallStack.exceptionStack\", getStack(lastException));\n\t\t#else\n\t\t\treturn []; // Unsupported\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a representation of the stack as a printable string.\n\t**/\n\tpublic static function toString( stack : Array<StackItem> ) {\n\t\tvar b = new StringBuf();\n\t\tfor( s in stack ) {\n\t\t\tb.add(\"\\nCalled from \");\n\t\t\titemToString(b,s);\n\t\t}\n\t\treturn b.toString();\n\t}\n\n\tprivate static function itemToString( b : StringBuf, s ) {\n\t\tswitch( s ) {\n\t\tcase CFunction:\n\t\t\tb.add(\"a C function\");\n\t\tcase Module(m):\n\t\t\tb.add(\"module \");\n\t\t\tb.add(m);\n\t\tcase FilePos(s,file,line):\n\t\t\tif( s != null ) {\n\t\t\t\titemToString(b,s);\n\t\t\t\tb.add(\" (\");\n\t\t\t}\n\t\t\tb.add(file);\n\t\t\tb.add(\" line \");\n\t\t\tb.add(line);\n\t\t\tif( s != null ) b.add(\")\");\n\t\tcase Method(cname,meth):\n\t\t\tb.add(cname);\n\t\t\tb.add(\".\");\n\t\t\tb.add(meth);\n\t\tcase LocalFunction(n):\n\t\t\tb.add(\"local function #\");\n\t\t\tb.add(n);\n\t\t}\n\t}\n\n\t#if cpp @:noStack #end /* Do not mess up the exception stack */\n\tprivate static function makeStack(s #if cs : cs.system.diagnostics.StackTrace #end) {\n\t\t#if neko\n\t\t\tvar a = new Array();\n\t\t\tvar l = untyped __dollar__asize(s);\n\t\t\tvar i = 0;\n\t\t\twhile( i < l ) {\n\t\t\t\tvar x = s[i++];\n\t\t\t\tif( x == null )\n\t\t\t\t\ta.unshift(CFunction);\n\t\t\t\telse if( untyped __dollar__typeof(x) == __dollar__tstring )\n\t\t\t\t\ta.unshift(Module(new String(x)));\n\t\t\t\telse\n\t\t\t\t\ta.unshift(FilePos(null,new String(untyped x[0]),untyped x[1]));\n\t\t\t}\n\t\t\treturn a;\n\t\t#elseif flash\n\t\t\tvar a = new Array();\n\t\t\tvar r = ~/at ([^\\/]+?)\\$?(\\/[^\\(]+)?\\(\\)(\\[(.*?):([0-9]+)\\])?/;\n\t\t\tvar rlambda = ~/^MethodInfo-([0-9]+)$/g;\n\t\t\twhile( r.match(s) ) {\n\t\t\t\tvar cl = r.matched(1).split(\"::\").join(\".\");\n\t\t\t\tvar meth = r.matched(2);\n\t\t\t\tvar item;\n\t\t\t\tif( meth == null ) {\n\t\t\t\t\tif( rlambda.match(cl) )\n\t\t\t\t\t\titem = LocalFunction(Std.parseInt(rlambda.matched(1)));\n\t\t\t\t\telse\n\t\t\t\t\t\titem = Method(cl,\"new\");\n\t\t\t\t} else\n\t\t\t\t\titem = Method(cl,meth.substr(1));\n\t\t\t\tif( r.matched(3) != null )\n\t\t\t\t\titem = FilePos( item, r.matched(4), Std.parseInt(r.matched(5)) );\n\t\t\t\ta.push(item);\n\t\t\t\ts = r.matchedRight();\n\t\t\t}\n\t\t\treturn a;\n\t\t#elseif php\n\t\t\tif (!untyped __call__(\"isset\", __var__(\"GLOBALS\", s)))\n\t\t\t\treturn [];\n\t\t\tvar a : Array<String> = untyped __var__(\"GLOBALS\", s);\n\t\t\tvar m = [];\n\t\t\tfor( i in 0...a.length - ((s == \"%s\") ? 2 : 0)) {\n\t\t\t\tvar d = a[i].split(\"::\");\n\t\t\t\tm.unshift(Method(d[0],d[1]));\n\t\t\t}\n\t\t\treturn m;\n\t\t#elseif cpp\n\t\t\tvar stack : Array<String> = s;\n\t\t\tvar m = new Array<StackItem>();\n\t\t\tfor(func in stack) {\n\t\t\t\tvar words = func.split(\"::\");\n\t\t\t\tif (words.length==0)\n\t\t\t\t\tm.push(CFunction)\n\t\t\t\telse if (words.length==2)\n\t\t\t\t\tm.push(Method(words[0],words[1]));\n\t\t\t\telse if (words.length==4)\n\t\t\t\t\tm.push(FilePos( Method(words[0],words[1]),words[2],Std.parseInt(words[3])));\n\t\t\t}\n\t\t\treturn m;\n\t\t#elseif js\n\t\t\tif (s == null) {\n\t\t\t\treturn [];\n\t\t\t} else if ((untyped __js__(\"typeof\"))(s) == \"string\") {\n\t\t\t\t// Return the raw lines in browsers that don't support prepareStackTrace\n\t\t\t\tvar stack : Array<String> = s.split(\"\\n\");\n\t\t\t\tif( stack[0] == \"Error\" ) stack.shift();\n\t\t\t\tvar m = [];\n\t\t\t\tvar rie10 = ~/^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$/;\n\t\t\t\tfor( line in stack ) {\n\t\t\t\t\tif( rie10.match(line) ) {\n\t\t\t\t\t\tvar path = rie10.matched(1).split(\".\");\n\t\t\t\t\t\tvar meth = path.pop();\n\t\t\t\t\t\tvar file = rie10.matched(2);\n\t\t\t\t\t\tvar line = Std.parseInt(rie10.matched(3));\n\t\t\t\t\t\tm.push(FilePos( meth == \"Anonymous function\" ? LocalFunction() : meth == \"Global code\" ? null : Method(path.join(\".\"),meth), file, line ));\n\t\t\t\t\t} else\n\t\t\t\t\t\tm.push(Module(StringTools.trim(line))); // A little weird, but better than nothing\n\t\t\t\t}\n\t\t\t\treturn m;\n\t\t\t} else {\n\t\t\t\treturn cast s;\n\t\t\t}\n\t\t#elseif cs\n\t\t\tvar stack = [];\n\t\t\tfor (i in 0...s.FrameCount)\n\t\t\t{\n\t\t\t\tvar frame = s.GetFrame(i);\n\t\t\t\tvar m = frame.GetMethod();\n\n\t\t\t\tvar method = StackItem.Method(m.ReflectedType.ToString(), m.Name);\n\n\t\t\t\tvar fileName = frame.GetFileName();\n\t\t\t\tvar lineNumber = frame.GetFileLineNumber();\n\n\t\t\t\tif (fileName != null || lineNumber >= 0)\n\t\t\t\t\tstack.push(FilePos(method, fileName, lineNumber));\n\t\t\t\telse\n\t\t\t\t\tstack.push(method);\n\t\t\t}\n\t\t\treturn stack;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\nusing haxe.Int64;\n\n /**\n\tA cross-platform signed 64-bit integer.\n\tInt64 instances can be created from two 32-bit words using `Int64.make()`.\n **/\n#if flash\n@:notNull\n#end\nabstract Int64(__Int64) from __Int64 to __Int64\n{\n\tprivate inline function new( x : __Int64 )\n\t\tthis = x;\n\n\t/**\n\t\tMakes a copy of `this` Int64.\n\t**/\n\tpublic inline function copy():Int64\n\t\treturn make( high, low );\n\n\t/**\n\t\tConstruct an Int64 from two 32-bit words `high` and `low`.\n\t**/\n\tpublic static inline function make( high:Int32, low:Int32 ) : Int64\n\t\treturn new Int64( new __Int64(high, low) );\n\n\t/**\n\t\tReturns an Int64 with the value of the Int `x`.\n\t\t`x` is sign-extended to fill 64 bits.\n\t**/\n\t@:from public static inline function ofInt( x : Int ) : Int64\n\t\treturn make( x >> 31, x );\n\n\t/**\n\t\tReturns an Int with the value of the Int64 `x`.\n\t\tThrows an exception  if `x` cannot be represented in 32 bits.\n\t**/\n\tpublic static inline function toInt( x : Int64 ) : Int {\n\t\tif( x.high != x.low >> 31 )\n\t\t\tthrow \"Overflow\";\n\n\t\treturn x.low;\n\t}\n\n\t/**\n\t\tReturns whether the value `val` is of type `haxe.Int64`\n\t**/\n\tinline public static function is( val : Dynamic ) : Bool\n\t\treturn Std.is(val,__Int64);\n\n\t/**\n\t\tReturns the high 32-bit word of `x`.\n\t**/\n\t@:deprecated(\"Use high instead\")\n\tpublic static inline function getHigh( x : Int64 ) : Int32\n\t\treturn x.high;\n\n\t/**\n\t\tReturns the low 32-bit word of `x`.\n\t**/\n\t@:deprecated(\"Use low instead\")\n\tpublic static inline function getLow( x : Int64 ) : Int32\n\t\treturn x.low;\n\n\t/**\n\t\tReturns `true` if `x` is less than zero.\n\t**/\n\tpublic static inline function isNeg( x : Int64) : Bool\n\t\treturn x.high < 0;\n\n\t/**\n\t\tReturns `true` if `x` is exactly zero.\n\t**/\n\tpublic static inline function isZero( x : Int64 ) : Bool\n\t\treturn x == 0;\n\n\t/**\n\t\tCompares `a` and `b` in signed mode.\n\t\tReturns a negative value if `a < b`, positive if `a > b`,\n\t\tor 0 if `a == b`.\n\t**/\n\tpublic static inline function compare( a : Int64, b : Int64 ) : Int {\n\t\tvar v = a.high - b.high;\n\t\tv = if( v != 0 ) v else Int32.ucompare(a.low, b.low);\n\t\treturn a.high < 0 ? (b.high < 0 ? v : -1) : (b.high >= 0 ? v : 1);\n\t}\n\n\t/**\n\t\tCompares `a` and `b` in unsigned mode.\n\t\tReturns a negative value if `a < b`, positive if `a > b`,\n\t\tor 0 if `a == b`.\n\t**/\n\tpublic static inline function ucompare( a : Int64, b : Int64 ) : Int {\n\t\tvar v = Int32.ucompare(a.high, b.high);\n\t\treturn if( v != 0 ) v else Int32.ucompare(a.low, b.low);\n\t}\n\n\t/**\n\t\tReturns a signed decimal `String` representation of `x`.\n\t**/\n\tpublic static inline function toStr(x:Int64) : String\n\t\treturn x.toString();\n\n\t#if as3 public #else private #end function toString() : String\n\t{\n\t\tvar i : Int64 = cast this;\n\t\tif ( i == 0 )\n\t\t\treturn \"0\";\n\t\tvar str = \"\";\n\t\tvar neg = false;\n\t\tif( i.isNeg() ) {\n\t\t\tneg = true;\n\t\t\ti = -i;\n\t\t}\n\t\tvar ten : Int64 = 10;\n\t\twhile( i != 0 ) {\n\t\t\tvar r = i.divMod( ten );\n\t\t\tstr = r.modulus.low + str;\n\t\t\ti = r.quotient;\n\t\t}\n\t\tif( neg ) str = \"-\" + str;\n\t\treturn str;\n\t}\n\n\t/**\n\t\tPerforms signed integer divison of `dividend` by `divisor`.\n\t\tReturns `{ quotient : Int64, modulus : Int64 }`.\n\t**/\n\tpublic static function divMod( dividend : Int64, divisor : Int64 ) : { quotient : Int64, modulus : Int64 }\n\t{\n\t\t// Handle special cases of 0 and 1\n\t\tif( divisor.high == 0 )\n\t\t{\n\t\t\tswitch( divisor.low ) {\n\t\t\t\tcase 0: throw \"divide by zero\";\n\t\t\t\tcase 1: return { quotient : dividend.copy(), modulus : 0 };\n\t\t\t}\n\t\t}\n\n\t\tvar divSign = dividend.isNeg() != divisor.isNeg();\n\n\t\tvar modulus = dividend.isNeg() ? -dividend : dividend.copy();\n\t\tdivisor = divisor.isNeg() ? -divisor : divisor;\n\n\t\tvar quotient : Int64 = 0;\n\t\tvar mask : Int64 = 1;\n\n\t\twhile( !divisor.isNeg() ) {\n\t\t\tvar cmp = ucompare( divisor, modulus );\n\t\t\tdivisor <<= 1;\n\t\t\tmask <<= 1;\n\t\t\tif( cmp >= 0 ) break;\n\t\t}\n\n\t\twhile( mask != 0 ) {\n\t\t\tif( ucompare(modulus, divisor) >= 0 ) {\n\t\t\t\tquotient |= mask;\n\t\t\t\tmodulus -= divisor;\n\t\t\t}\n\t\t\tmask >>>= 1;\n\t\t\tdivisor >>>= 1;\n\t\t}\n\n\t\tif( divSign ) quotient = -quotient;\n\t\tif( dividend.isNeg() ) modulus = -modulus;\n\n\t\treturn {\n\t\t\tquotient : quotient,\n\t\t\tmodulus  : modulus\n\t\t};\n\t}\n\n\t/**\n\t\tReturns the negative of `x`.\n\t**/\n\t@:op(-A) public static inline function neg( x : Int64 ) : Int64 {\n\t\tvar high = ~x.high;\n\t\tvar low = -x.low;\n\t\tif( low == 0 )\n\t\t\thigh++;\n\t\treturn make( high, low );\n\t}\n\n\t@:op(++A) private inline function preIncrement() : Int64 {\n\t\tthis.low++;\n\t\tif( this.low == 0 ) this.high++;\n\t\treturn cast this;\n\t}\n\n\t@:op(A++) private inline function postIncrement() : Int64 {\n\t\tvar ret = copy();\n\t\tpreIncrement();\n\t\treturn ret;\n\t}\n\n\t@:op(--A) private inline function preDecrement() : Int64 {\n\t\tif( this.low == 0 ) this.high--;\n\t\tthis.low--;\n\t\treturn cast this;\n\t}\n\n\t@:op(A--) private inline function postDecrement() : Int64 {\n\t\tvar ret = copy();\n\t\tpreDecrement();\n\t\treturn ret;\n\t}\n\n\t/**\n\t\tReturns the sum of `a` and `b`.\n\t**/\n\t@:op(A + B) public static inline function add( a : Int64, b : Int64 ) : Int64 {\n\t\tvar high = a.high + b.high;\n\t\tvar low = a.low + b.low;\n\t\tif( Int32.ucompare( low, a.low ) < 0 ) high++;\n\t\treturn make( high, low );\n\t}\n\n\t@:op(A + B) @:commutative private static inline function addInt( a : Int64, b : Int ) : Int64\n\t\treturn add( a, b );\n\n\t/**\n\t\tReturns `a` minus `b`.\n\t**/\n\t@:op(A - B) public static inline function sub( a : Int64, b : Int64 ) : Int64 {\n\t\tvar high = a.high - b.high;\n\t\tvar low = a.low - b.low;\n\t\tif( Int32.ucompare( a.low, b.low ) < 0 ) high--;\n        return make( high, low );\n\t}\n\n\t@:op(A - B) private static inline function subInt( a : Int64, b : Int ) : Int64\n\t\treturn sub( a, b );\n\n\t@:op(A - B) private static inline function intSub( a : Int, b : Int64 ) : Int64\n\t\treturn sub( a, b );\n\n\t/**\n\t\tReturns the product of `a` and `b`.\n\t**/\n\t@:op(A * B) public static inline function mul( a : Int64, b : Int64 ) : Int64 {\n\t\tvar mask = 0xFFFF;\n\t\tvar al = a.low & mask, ah = a.low >>> 16;\n\t\tvar bl = b.low & mask, bh = b.low >>> 16;\n\t\tvar p00 = al * bl;\n\t\tvar p10 = ah * bl;\n\t\tvar p01 = al * bh;\n\t\tvar p11 = ah * bh;\n\t\tvar low = p00;\n\t\tvar high = p11 + (p01 >>> 16) + (p10 >>> 16);\n\t\tp01 <<= 16;\n\t\tlow += p01;\n\t\tif( Int32.ucompare(low, p01) < 0 ) high++;\n\t\tp10 <<= 16;\n\t\tlow += p10;\n\t\tif( Int32.ucompare(low, p10) < 0 ) high++;\n\t\thigh += a.low * b.high + a.high * b.low;\n\t\treturn make( high, low );\n\t}\n\n\t@:op(A * B) @:commutative private static inline function mulInt( a : Int64, b : Int ) : Int64\n\t\treturn mul( a, b );\n\n\t/**\n\t\tReturns the quotient of `a` divided by `b`.\n\t**/\n\t@:op(A / B) public static inline function div( a : Int64, b : Int64 ) : Int64\n\t\treturn divMod(a, b).quotient;\n\n\t@:op(A / B) private static inline function divInt( a : Int64, b : Int ) : Int64\n\t\treturn div( a, b );\n\n\t@:op(A / B) private static inline function intDiv( a : Int, b : Int64 ) : Int64\n\t\treturn div( a, b ).toInt();\n\n\t/**\n\t\tReturns the modulus of `a` divided by `b`.\n\t**/\n\t@:op(A % B) public static inline function mod( a : Int64, b : Int64 ) : Int64\n\t\treturn divMod(a, b).modulus;\n\n\t@:op(A % B) private static inline function modInt( a : Int64, b : Int ) : Int64\n\t\treturn mod( a, b ).toInt();\n\n\t@:op(A % B) private static inline function intMod( a : Int, b : Int64 ) : Int64\n\t\treturn mod( a, b ).toInt();\n\n\t/**\n\t\tReturns `true` if `a` is equal to `b`.\n\t**/\n\t@:op(A == B) public static inline function eq( a : Int64, b : Int64 ) : Bool\n\t\treturn a.high == b.high && a.low == b.low;\n\n\t@:op(A == B) @:commutative private static inline function eqInt( a : Int64, b : Int ) : Bool\n\t\treturn eq( a, b );\n\n\t/**\n\t\tReturns `true` if `a` is not equal to `b`.\n\t**/\n\t@:op(A != B) public static inline function neq( a : Int64, b : Int64 ) : Bool\n\t\treturn a.high != b.high || a.low != b.low;\n\n\t@:op(A != B) @:commutative private static inline function neqInt( a : Int64, b : Int ) : Bool\n\t\treturn neq(a, b);\n\n\t@:op(A < B) private static inline function lt( a : Int64, b : Int64 ) : Bool\n\t\treturn compare(a, b) < 0;\n\n\t@:op(A < B) private static inline function ltInt( a : Int64, b : Int ) : Bool\n\t\treturn lt(a, b);\n\n\t@:op(A < B) private static inline function intLt( a : Int, b : Int64 ) : Bool\n\t\treturn lt(a, b);\n\n\t@:op(A <= B) private static inline function lte( a : Int64, b : Int64 ) : Bool\n\t\treturn compare(a, b) <= 0;\n\n\t@:op(A <= B) private static inline function lteInt( a : Int64, b : Int ) : Bool\n\t\treturn lte(a, b);\n\n\t@:op(A <= B) private static inline function intLte( a : Int, b : Int64 ) : Bool\n\t\treturn lte(a, b);\n\n\t@:op(A > B) private static inline function gt( a : Int64, b : Int64 ) : Bool\n\t\treturn compare(a, b) > 0;\n\n\t@:op(A > B) private static inline function gtInt( a : Int64, b : Int ) : Bool\n\t\treturn gt(a, b);\n\n\t@:op(A > B) private static inline function intGt( a : Int, b : Int64 ) : Bool\n\t\treturn gt( a, b );\n\n\t@:op(A >= B) private static inline function gte( a : Int64, b : Int64 ) : Bool\n\t\treturn compare(a, b) >= 0;\n\n\t@:op(A >= B) private static inline function gteInt( a : Int64, b : Int ) : Bool\n\t\treturn gte(a, b);\n\n\t@:op(A >= B) private static inline function intGte( a : Int, b : Int64 ) : Bool\n\t\treturn gte(a, b);\n\n\t/**\n\t\tReturns the bitwise NOT of `a`.\n\t**/\n\t@:op(~A) private static inline function complement( a : Int64 ) : Int64\n\t\treturn make( ~a.high, ~a.low );\n\n\t/**\n\t\tReturns the bitwise AND of `a` and `b`.\n\t**/\n\t@:op(A & B) public static inline function and( a : Int64, b : Int64 ) : Int64\n\t\treturn make( a.high & b.high, a.low & b.low );\n\n\t/**\n\t\tReturns the bitwise OR of `a` and `b`.\n\t**/\n\t@:op(A | B) public static inline function or( a : Int64, b : Int64 ) : Int64\n\t\treturn make( a.high | b.high, a.low | b.low );\n\n\t/**\n\t\tReturns the bitwise XOR of `a` and `b`.\n\t**/\n\t@:op(A ^ B) public static inline function xor( a : Int64, b : Int64 ) : Int64\n\t\treturn make( a.high ^ b.high, a.low ^ b.low );\n\n\t/**\n\t\tReturns `a` left-shifted by `b` bits.\n\t**/\n\t@:op(A << B) public static inline function shl( a : Int64, b : Int ) : Int64 {\n\t\tb &= 63;\n\t\treturn if( b == 0 ) a.copy()\n\t\t\telse if( b < 32 ) make( (a.high << b) | (a.low >>> (32-b)), a.low << b)\n\t\t\telse make( a.low << (b-32), 0 );\n\t}\n\n\t/**\n\t\tReturns `a` right-shifted by `b` bits in signed mode.\n\t\t`a` is sign-extended.\n\t**/\n\t@:op(A >> B) public static inline function shr( a : Int64, b : Int) : Int64 {\n\t\tb &= 63;\n\t\treturn if( b == 0 ) a.copy()\n\t\t\telse if( b < 32 ) make( a.high >> b, (a.high << (32-b)) | (a.low >>> b) )\n\t\t\telse make( a.high >> 31, a.high >> (b - 32) );\n\t}\n\n\t/**\n\t\tReturns `a` right-shifted by `b` bits in unsigned mode.\n\t\t`a` is padded with zeroes.\n\t**/\n\t@:op(A >>> B) public static inline function ushr( a : Int64, b : Int ) : Int64 {\n\t\tb &= 63;\n\t\treturn if( b == 0 ) a.copy()\n\t\t\telse if( b < 32 ) make( a.high >>> b, (a.high << (32-b)) | (a.low >>> b) )\n\t\t\telse make( 0, a.high >>> (b - 32) );\n\t}\n\n\tpublic var high(get, never) : Int32;\n\tprivate inline function get_high() return this.high;\n\tprivate inline function set_high(x) return this.high = x;\n\n\tpublic var low(get, never) : Int32;\n\tprivate inline function get_low() return this.low;\n\tprivate inline function set_low(x) return this.low = x;\n}\n\n/**\n  * This typedef will fool @:coreApi into thinking that we are using\n  * the same underlying type, even though it might be different on\n  * specific platforms.\n  */\nprivate typedef __Int64 = ___Int64;\n\nprivate class ___Int64 {\n\tpublic var high : Int32;\n\tpublic var low : Int32;\n\n\tpublic inline function new( high, low ) {\n\t\tthis.high = high;\n\t\tthis.low = low;\n\t}\n\n\t/**\n\t\tWe also define toString here to ensure we always get a pretty string\n\t\twhen tracing or calling Std.string. This tends not to happen when\n\t\ttoString is only in the abstract.\n\t**/\n\tpublic function toString() : String\n\t\treturn Int64.toStr( cast this );\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tLog primarily provides the trace() method, which is invoked upon a call to\n\ttrace() in haxe code.\n**/\nclass Log {\n\n\t/**\n\t\tOutputs `v` in a platform-dependent way.\n\n\t\tThe second parameter `infos` is injected by the compiler and contains\n\t\tinformation about the position where the trace() call was made.\n\n\t\tThis method can be rebound to a custom function:\n\t\t\tvar oldTrace = haxe.Log.trace; // store old function\n\t\t\thaxe.Log.trace = function(v,infos) { // handle trace }\n\t\t\t...\n\t\t\thaxe.Log.trace = oldTrace;\n\n\t\tIf it is bound to null, subsequent calls to trace() will cause an\n\t\texception.\n\t**/\n\tpublic static dynamic function trace( v : Dynamic, ?infos : PosInfos ) : Void {\n\t\t#if flash\n\t\t\t#if (fdb || native_trace)\n\t\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\t\tvar str = flash.Boot.__string_rec(v, \"\");\n\t\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + flash.Boot.__string_rec(v, \"\");\n\t\t\t\tuntyped __global__[\"trace\"](pstr+\": \"+str);\n\t\t\t#else\n\t\t\t\tuntyped flash.Boot.__trace(v,infos);\n\t\t\t#end\n\t\t#elseif neko\n\t\t\tuntyped {\n\t\t\t\t$print(infos.fileName + \":\" + infos.lineNumber + \": \", v);\n\t\t\t\tif( infos.customParams != null ) for( v in infos.customParams ) $print(\",\", v);\n\t\t\t\t$print(\"\\n\");\n\t\t\t}\n\t\t#elseif js\n\t\t\tuntyped js.Boot.__trace(v,infos);\n\t\t#elseif php\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __call__('_hx_trace', v + extra, infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __call__('_hx_trace', v, infos);\n\t\t#elseif cpp\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __trace(v + extra,infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __trace(v,infos);\n\t\t#elseif (cs || java)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + infos.lineNumber + \": \" + v;\n\t\t\t\tif (infos.customParams != null)\n\t\t\t\t{\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\t#if cs\n\t\t\tcs.system.Console.WriteLine(str);\n\t\t\t#elseif java\n\t\t\tuntyped __java__(\"java.lang.System.out.println(str)\");\n\t\t\t#end\n\t\t#elseif (python)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + Std.string(infos.lineNumber) + \": \" + v;\n\t\t\t\tif (infos.customParams != null) {\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\tpython.Lib.println(str);\n\t\t#end\n\t}\n\n\t#if (flash || js)\n\t/**\n\t\tClears the trace output.\n\t**/\n\tpublic static dynamic function clear() : Void {\n\t\t#if flash\n\t\tuntyped flash.Boot.__clear_trace();\n\t\t#elseif js\n\t\tuntyped js.Boot.__clear_trace();\n\t\t#end\n\t}\n\t#end\n\n\t#if flash\n\t/**\n\t\tSets the color of the trace output to `rgb`.\n\t**/\n\tpublic static dynamic function setColor( rgb : Int ) {\n\t\tuntyped flash.Boot.__set_trace_color(rgb);\n\t}\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tResource can be used to access resources that were added through the\n\t-resource file@name command line parameter.\n\n\tDepending on their type they can be obtained as String through\n\tgetString(name), or as binary data through getBytes(name).\n\n\tA list of all available resource names can be obtained from listNames().\n**/\nclass Resource {\n\n\tstatic var content : Array<{ name : String, data : String, str : String }>;\n\n\t/**\n\t\tLists all available resource names. The resource name is the name part\n\t\tof the -resource file@name command line parameter.\n\t**/\n\tpublic static function listNames() : Array<String> {\n\t\treturn [for (x in content) x.name];\n\t}\n\n\t/**\n\t\tRetrieves the resource identified by `name` as a String.\n\n\t\tIf `name` does not match any resource name, null is returned.\n\t**/\n\tpublic static function getString( name : String ) : String {\n\t\tfor( x in content )\n\t\t\tif( x.name == name ) {\n\t\t\t\t#if neko\n\t\t\t\treturn new String(x.data);\n\t\t\t\t#else\n\t\t\t\tif( x.str != null ) return x.str;\n\t\t\t\tvar b : haxe.io.Bytes = haxe.crypto.Base64.decode(x.data);\n\t\t\t\treturn b.toString();\n\t\t\t\t#end\n\t\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tRetrieves the resource identified by `name` as an instance of\n\t\thaxe.io.Bytes.\n\n\t\tIf `name` does not match any resource name, null is returned.\n\t**/\n\tpublic static function getBytes( name : String ) : haxe.io.Bytes {\n\t\tfor( x in content )\n\t\t\tif( x.name == name ) {\n\t\t\t\t#if neko\n\t\t\t\treturn haxe.io.Bytes.ofData(cast x.data);\n\t\t\t\t#else\n\t\t\t\tif( x.str != null ) return haxe.io.Bytes.ofString(x.str);\n\t\t\t\treturn haxe.crypto.Base64.decode(x.data);\n\t\t\t\t#end\n\t\t\t}\n\t\treturn null;\n\t}\n\n\tstatic function __init__() {\n\t\t#if neko\n\t\tvar tmp = untyped __resources__();\n\t\tcontent = untyped Array.new1(tmp,__dollar__asize(tmp));\n\t\t#elseif php\n\t\tcontent = null;\n\t\t#elseif as3\n\t\tnull;\n\t\t#else\n\t\tcontent = untyped __resources__();\n\t\t#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tThe Serializer class can be used to encode values and objects into a String,\n\tfrom which the Unserializer class can recreate the original representation.\n\n\tThis class can be used in two ways:\n\n\t- create a new Serializer() instance, call its serialize() method with\n\t\tany argument and finally retrieve the String representation from\n\t\ttoString()\n\t- call Serializer.run() to obtain the serialized representation of a\n\t\tsingle argument\n\n\tSerialization is guaranteed to work for all haxe-defined classes, but may\n\tor may not work for instances of external/native classes.\n\n\tThe specification of the serialization format can be found here:\n\t`http://haxe.org/manual/serialization/format`\n**/\nclass Serializer {\n\n\t/**\n\t\tIf the values you are serializing can contain circular references or\n\t\tobjects repetitions, you should set USE_CACHE to true to prevent\n\t\tinfinite loops.\n\n\t\tThis may also reduce the size of serialization Strings at the expense of\n\t\tperformance.\n\n\t\tThis value can be changed for individual instances of Serializer by\n\t\tsetting their useCache field.\n\t**/\n\tpublic static var USE_CACHE = false;\n\n\t/**\n\t\tUse constructor indexes for enums instead of names.\n\n\t\tThis may reduce the size of serialization Strings, but makes them less\n\t\tsuited for long-term storage: If constructors are removed or added from\n\t\tthe enum, the indices may no longer match.\n\n\t\tThis value can be changed for individual instances of Serializer by\n\t\tsetting their useEnumIndex field.\n\t**/\n\tpublic static var USE_ENUM_INDEX = false;\n\n\tstatic var BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\n\n\tvar buf : StringBuf;\n\tvar cache : Array<Dynamic>;\n\tvar shash : haxe.ds.StringMap<Int>;\n\tvar scount : Int;\n\n\t/**\n\t\tThe individual cache setting for `this` Serializer instance.\n\n\t\tSee USE_CACHE for a complete description.\n\t**/\n\tpublic var useCache : Bool;\n\n\t/**\n\t\tThe individual enum index setting for `this` Serializer instance.\n\n\t\tSee USE_ENUM_INDEX for a complete description.\n\t**/\n\tpublic var useEnumIndex : Bool;\n\n\t/**\n\t\tCreates a new Serializer instance.\n\n\t\tSubsequent calls to `this.serialize` will append values to the\n\t\tinternal buffer of this String. Once complete, the contents can be\n\t\tretrieved through a call to `this.toString`.\n\n\t\tEach Serializer instance maintains its own cache if this.useCache` is\n\t\ttrue.\n\t**/\n\tpublic function new() {\n\t\tbuf = new StringBuf();\n\t\tcache = new Array();\n\t\tuseCache = USE_CACHE;\n\t\tuseEnumIndex = USE_ENUM_INDEX;\n\t\tshash = new haxe.ds.StringMap();\n\t\tscount = 0;\n\t}\n\n\t/**\n\t\tReturn the String representation of `this` Serializer.\n\n\t\tThe exact format specification can be found here:\n\t\thttp://haxe.org/manual/serialization/format\n\t**/\n\tpublic function toString() {\n\t\treturn buf.toString();\n\t}\n\n\t/* prefixes :\n\t\ta : array\n\t\tb : hash\n\t\tc : class\n\t\td : Float\n\t\te : reserved (float exp)\n\t\tf : false\n\t\tg : object end\n\t\th : array/list/hash end\n\t\ti : Int\n\t\tj : enum (by index)\n\t\tk : NaN\n\t\tl : list\n\t\tm : -Inf\n\t\tn : null\n\t\to : object\n\t\tp : +Inf\n\t\tq : haxe.ds.IntMap\n\t\tr : reference\n\t\ts : bytes (base64)\n\t\tt : true\n\t\tu : array nulls\n\t\tv : date\n\t\tw : enum\n\t\tx : exception\n\t\ty : urlencoded string\n\t\tz : zero\n\t\tA : Class<Dynamic>\n\t\tB : Enum<Dynamic>\n\t\tM : haxe.ds.ObjectMap\n\t\tC : custom\n\t*/\n\n\tfunction serializeString( s : String ) {\n\t\tvar x = shash.get(s);\n\t\tif( x != null ) {\n\t\t\tbuf.add(\"R\");\n\t\t\tbuf.add(x);\n\t\t\treturn;\n\t\t}\n\t\tshash.set(s,scount++);\n\t\t#if old_serialize\n\t\t\t// no more support for -D old_serialize due to 'j' reuse\n\t\t\t#if error #end\n\t\t#end\n\t\tbuf.add(\"y\");\n\t\ts = StringTools.urlEncode(s);\n\t\tbuf.add(s.length);\n\t\tbuf.add(\":\");\n\t\tbuf.add(s);\n\t}\n\n\tfunction serializeRef(v) {\n\t\t#if js\n\t\tvar vt = untyped __js__(\"typeof\")(v);\n\t\t#end\n\t\tfor( i in 0...cache.length ) {\n\t\t\t#if js\n\t\t\tvar ci = cache[i];\n\t\t\tif( untyped __js__(\"typeof\")(ci) == vt && ci == v ) {\n\t\t\t#else\n\t\t\tif( cache[i] == v ) {\n\t\t\t#end\n\t\t\t\tbuf.add(\"r\");\n\t\t\t\tbuf.add(i);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tcache.push(v);\n\t\treturn false;\n\t}\n\n\t#if flash\n\t// only the instance variables\n\n\tfunction serializeClassFields(v,c) {\n\t\tvar xml : flash.xml.XML = untyped __global__[\"flash.utils.describeType\"](c);\n\t\tvar vars = xml.factory[0].child(\"variable\");\n\t\tfor( i in 0...vars.length() ) {\n\t\t\tvar f = vars[i].attribute(\"name\").toString();\n\t\t\tif( !v.hasOwnProperty(f) )\n\t\t\t\tcontinue;\n\t\t\tserializeString(f);\n\t\t\tserialize(Reflect.field(v,f));\n\t\t}\n\t\tbuf.add(\"g\");\n\t}\n\t#end\n\n\tfunction serializeFields(v) {\n\t\tfor( f in Reflect.fields(v) ) {\n\t\t\tserializeString(f);\n\t\t\tserialize(Reflect.field(v,f));\n\t\t}\n\t\tbuf.add(\"g\");\n\t}\n\n\t/**\n\t\tSerializes `v`.\n\n\t\tAll haxe-defined values and objects with the exception of functions can\n\t\tbe serialized. Serialization of external/native objects is not\n\t\tguaranteed to work.\n\n\t\tThe values of `this.useCache` and `this.useEnumIndex` may affect\n\t\tserialization output.\n\t**/\n\tpublic function serialize( v : Dynamic ) {\n\t\tswitch( Type.typeof(v) ) {\n\t\tcase TNull:\n\t\t\tbuf.add(\"n\");\n\t\tcase TInt:\n\t\t\tvar v : Int = v;\n\t\t\tif( v == 0 ) {\n\t\t\t\tbuf.add(\"z\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbuf.add(\"i\");\n\t\t\tbuf.add(v);\n\t\tcase TFloat:\n\t\t\tvar v : Float = v;\n\t\t\tif( Math.isNaN(v) )\n\t\t\t\tbuf.add(\"k\");\n\t\t\telse if( !Math.isFinite(v) )\n\t\t\t\tbuf.add(if( v < 0 ) \"m\" else \"p\");\n\t\t\telse {\n\t\t\t\tbuf.add(\"d\");\n\t\t\t\tbuf.add(v);\n\t\t\t}\n\t\tcase TBool:\n\t\t\tbuf.add(if( v ) \"t\" else \"f\");\n\t\tcase TClass(c):\n\t\t\tif( #if neko untyped c.__is_String #else c == String #end ) {\n\t\t\t\tserializeString(v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif( useCache && serializeRef(v) )\n\t\t\t\treturn;\n\t\t\tswitch( #if (neko || cs || python) Type.getClassName(c) #else c #end ) {\n\t\t\tcase #if (neko || cs || python) \"Array\" #else cast Array #end:\n\t\t\t\tvar ucount = 0;\n\t\t\t\tbuf.add(\"a\");\n\t\t\t\t#if (flash || python)\n\t\t\t\tvar v : Array<Dynamic> = v;\n\t\t\t\t#end\n\t\t\t\tvar l = #if (neko || flash || php || cs || java || python) v.length #elseif cpp v.__length() #else __getField(v, \"length\") #end;\n\t\t\t\tfor( i in 0...l ) {\n\t\t\t\t\tif( v[i] == null )\n\t\t\t\t\t\tucount++;\n\t\t\t\t\telse {\n\t\t\t\t\t\tif( ucount > 0 ) {\n\t\t\t\t\t\t\tif( ucount == 1 )\n\t\t\t\t\t\t\t\tbuf.add(\"n\");\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tbuf.add(\"u\");\n\t\t\t\t\t\t\t\tbuf.add(ucount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tucount = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tserialize(v[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( ucount > 0 ) {\n\t\t\t\t\tif( ucount == 1 )\n\t\t\t\t\t\tbuf.add(\"n\");\n\t\t\t\t\telse {\n\t\t\t\t\t\tbuf.add(\"u\");\n\t\t\t\t\t\tbuf.add(ucount);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"List\" #else cast List #end:\n\t\t\t\tbuf.add(\"l\");\n\t\t\t\tvar v : List<Dynamic> = v;\n\t\t\t\tfor( i in v )\n\t\t\t\t\tserialize(i);\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"Date\" #else cast Date #end:\n\t\t\t\tvar d : Date = v;\n\t\t\t\tbuf.add(\"v\");\n\t\t\t\tbuf.add(d.getTime());\n\t\t\tcase #if (neko || cs || python) \"haxe.ds.StringMap\" #else cast haxe.ds.StringMap #end:\n\t\t\t\tbuf.add(\"b\");\n\t\t\t\tvar v : haxe.ds.StringMap<Dynamic> = v;\n\t\t\t\tfor( k in v.keys() ) {\n\t\t\t\t\tserializeString(k);\n\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"haxe.ds.IntMap\" #else cast haxe.ds.IntMap #end:\n\t\t\t\tbuf.add(\"q\");\n\t\t\t\tvar v : haxe.ds.IntMap<Dynamic> = v;\n\t\t\t\tfor( k in v.keys() ) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(k);\n\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"haxe.ds.ObjectMap\" #else cast haxe.ds.ObjectMap #end:\n\t\t\t\tbuf.add(\"M\");\n\t\t\t\tvar v : haxe.ds.ObjectMap<Dynamic,Dynamic> = v;\n\t\t\t\tfor ( k in v.keys() ) {\n\t\t\t\t\t#if (js || neko)\n\t\t\t\t\tvar id = Reflect.field(k, \"__id__\");\n\t\t\t\t\tReflect.deleteField(k, \"__id__\");\n\t\t\t\t\tserialize(k);\n\t\t\t\t\tReflect.setField(k, \"__id__\", id);\n\t\t\t\t\t#else\n\t\t\t\t\tserialize(k);\n\t\t\t\t\t#end\n\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"haxe.io.Bytes\" #else cast haxe.io.Bytes #end:\n\t\t\t\tvar v : haxe.io.Bytes = v;\n\t\t\t\t#if neko\n\t\t\t\tvar chars = new String(base_encode(v.getData(),untyped BASE64.__s));\n\t\t\t\t#else\n\t\t\t\tvar i = 0;\n\t\t\t\tvar max = v.length - 2;\n\t\t\t\tvar charsBuf = new StringBuf();\n\t\t\t\tvar b64 = BASE64;\n\t\t\t\twhile( i < max ) {\n\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\tvar b2 = v.get(i++);\n\t\t\t\t\tvar b3 = v.get(i++);\n\n\t\t\t\t\tcharsBuf.add(b64.charAt(b1 >> 2));\n\t\t\t\t\tcharsBuf.add(b64.charAt(((b1 << 4) | (b2 >> 4)) & 63));\n\t\t\t\t\tcharsBuf.add(b64.charAt(((b2 << 2) | (b3 >> 6)) & 63));\n\t\t\t\t\tcharsBuf.add(b64.charAt(b3 & 63));\n\t\t\t\t}\n\t\t\t\tif( i == max ) {\n\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\tvar b2 = v.get(i++);\n\t\t\t\t\tcharsBuf.add(b64.charAt(b1 >> 2));\n\t\t\t\t\tcharsBuf.add(b64.charAt(((b1 << 4) | (b2 >> 4)) & 63));\n\t\t\t\t\tcharsBuf.add(b64.charAt((b2 << 2) & 63));\n\t\t\t\t} else if( i == max + 1 ) {\n\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\tcharsBuf.add(b64.charAt(b1 >> 2));\n\t\t\t\t\tcharsBuf.add(b64.charAt((b1 << 4) & 63));\n\t\t\t\t}\n\t\t\t\tvar chars = charsBuf.toString();\n\t\t\t\t#end\n\t\t\t\tbuf.add(\"s\");\n\t\t\t\tbuf.add(chars.length);\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(chars);\n\t\t\tdefault:\n\t\t\t\tif( useCache ) cache.pop();\n\t\t\t\tif( #if flash try v.hxSerialize != null catch( e : Dynamic ) false #elseif (cs || java || python) Reflect.hasField(v, \"hxSerialize\") #else v.hxSerialize != null #end  ) {\n\t\t\t\t\tbuf.add(\"C\");\n\t\t\t\t\tserializeString(Type.getClassName(c));\n\t\t\t\t\tif( useCache ) cache.push(v);\n\t\t\t\t\tv.hxSerialize(this);\n\t\t\t\t\tbuf.add(\"g\");\n\t\t\t\t} else {\n\t\t\t\t\tbuf.add(\"c\");\n\t\t\t\t\tserializeString(Type.getClassName(c));\n\t\t\t\t\tif( useCache ) cache.push(v);\n\t\t\t\t\t#if flash\n\t\t\t\t\tserializeClassFields(v,c);\n\t\t\t\t\t#else\n\t\t\t\t\tserializeFields(v);\n\t\t\t\t\t#end\n\t\t\t\t}\n\t\t\t}\n\t\tcase TObject:\n\t\t\tif (Std.is(v,Class)) {\n\t\t\t\tvar className = Type.getClassName(v);\n\t\t\t\t#if (flash || cpp)\n\t\t\t\t// Currently, Enum and Class are the same for flash and cpp.\n\t\t\t\t//  use resolveEnum to test if it is actually an enum\n\t\t\t\tif (Type.resolveEnum(className)!=null) buf.add(\"B\") else\n\t\t\t\t#end\n\t\t\t\tbuf.add(\"A\");\n\t\t\t\tserializeString(className);\n\t\t\t} else if (Std.is(v,Enum)) {\n\t\t\t\tbuf.add(\"B\");\n\t\t\t\tserializeString(Type.getEnumName(v));\n\t\t\t} else {\n\t\t\t\tif( useCache && serializeRef(v) )\n\t\t\t\t\treturn;\n\t\t\t\tbuf.add(\"o\");\n\t\t\t\tserializeFields(v);\n\t\t\t}\n\t\tcase TEnum(e):\n\t\t\tif( useCache ) {\n\t\t\t\tif( serializeRef(v) )\n\t\t\t\t\treturn;\n\t\t\t\tcache.pop();\n\t\t\t}\n\t\t\tbuf.add(useEnumIndex?\"j\":\"w\");\n\t\t\tserializeString(Type.getEnumName(e));\n\t\t\t#if neko\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v.index);\n\t\t\t} else\n\t\t\t\tserializeString(new String(v.tag));\n\t\t\tbuf.add(\":\");\n\t\t\tif( v.args == null )\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tvar l : Int = untyped __dollar__asize(v.args);\n\t\t\t\tbuf.add(l);\n\t\t\t\tfor( i in 0...l )\n\t\t\t\t\tserialize(v.args[i]);\n\t\t\t}\n\t\t\t#elseif flash\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar i : Int = v.index;\n\t\t\t\tbuf.add(i);\n\t\t\t} else\n\t\t\t\tserializeString(v.tag);\n\t\t\tbuf.add(\":\");\n\t\t\tvar pl : Array<Dynamic> = v.params;\n\t\t\tif( pl == null )\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tbuf.add(pl.length);\n\t\t\t\tfor( p in pl )\n\t\t\t\t\tserialize(p);\n\t\t\t}\n\t\t\t#elseif cpp\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v.__Index());\n\t\t\t} else\n\t\t\t\tserializeString(v.__Tag());\n\t\t\tbuf.add(\":\");\n\t\t\tvar pl : Array<Dynamic> = v.__EnumParams();\n\t\t\tif( pl == null )\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tbuf.add(pl.length);\n\t\t\t\tfor( p in pl )\n\t\t\t\t\tserialize(p);\n\t\t\t}\n\t\t\t#elseif php\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v.index);\n\t\t\t} else\n\t\t\t\tserializeString(v.tag);\n\t\t\tbuf.add(\":\");\n\t\t\tvar l : Int = untyped __call__(\"count\", v.params);\n\t\t\tif( l == 0 || v.params == null)\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tbuf.add(l);\n\t\t\t\tfor( i in 0...l )\n\t\t\t\t\tserialize(untyped __field__(v, __php__(\"params\"), i));\n\t\t\t}\n\t\t\t#elseif (java || cs || python)\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(Type.enumIndex(v));\n\t\t\t} else\n\t\t\t\tserializeString(Type.enumConstructor(v));\n\t\t\tbuf.add(\":\");\n\t\t\tvar arr:Array<Dynamic> = Type.enumParameters(v);\n\t\t\tif (arr != null)\n\t\t\t{\n\t\t\t\tbuf.add(arr.length);\n\t\t\t\tfor (v in arr)\n\t\t\t\t\tserialize(v);\n\t\t\t} else {\n\t\t\t\tbuf.add(\"0\");\n\t\t\t}\n\n\t\t\t#else\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v[1]);\n\t\t\t} else\n\t\t\t\tserializeString(v[0]);\n\t\t\tbuf.add(\":\");\n\t\t\tvar l = __getField(v, \"length\");\n\t\t\tbuf.add(l - 2);\n\t\t\tfor( i in 2...l )\n\t\t\t\tserialize(v[i]);\n\t\t\t#end\n\t\t\tif( useCache ) cache.push(v);\n\t\tcase TFunction:\n\t\t\tthrow \"Cannot serialize function\";\n\t\tdefault:\n\t\t\t#if neko\n\t\t\tif( untyped (__i32__kind != null && __dollar__iskind(v,__i32__kind)) ) {\n\t\t\t\tbuf.add(\"i\");\n\t\t\t\tbuf.add(v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t#end\n\t\t\tthrow \"Cannot serialize \"+Std.string(v);\n\t\t}\n\t}\n\n\t@:extern inline function __getField(o:Dynamic, f:String):Dynamic return untyped o[f];\n\n\tpublic function serializeException( e : Dynamic ) {\n\t\tbuf.add(\"x\");\n\t\t#if flash\n\t\tif( untyped __is__(e,__global__[\"Error\"]) ) {\n\t\t\tvar e : flash.errors.Error = e;\n\t\t\tvar s = e.getStackTrace();\n\t\t\tif( s == null )\n\t\t\t\tserialize(e.message);\n\t\t\telse\n\t\t\t\tserialize(s);\n\t\t\treturn;\n\t\t}\n\t\t#end\n\t\tserialize(e);\n\t}\n\n\t/**\n\t\tSerializes `v` and returns the String representation.\n\n\t\tThis is a convenience function for creating a new instance of\n\t\tSerializer, serialize `v` into it and obtain the result through a call\n\t\tto toString().\n\t**/\n\tpublic static function run( v : Dynamic ) {\n\t\tvar s = new Serializer();\n\t\ts.serialize(v);\n\t\treturn s.toString();\n\t}\n\n\t#if neko\n\tstatic var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\t#end\n\n}\n\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tThe Timer class allows you to create asynchronous timers on platforms that\n\tsupport events.\n\n\tThe intended usage is to create an instance of the Timer class with a given\n\tinterval, set its run() method to a custom function to be invoked and\n\teventually call stop() to stop the Timer.\n\n\tNote that a running Timer may or may not prevent the program to exit\n\tautomatically when main() returns.\n\n\tIt is also possible to extend this class and override its run() method in\n\tthe child class.\n**/\nclass Timer {\n\t#if (flash || js || java || python)\n\n\t#if (flash || js)\n\t\tprivate var id : Null<Int>;\n\t#elseif java\n\t\tprivate var timer : java.util.Timer;\n\t\tprivate var task : java.util.TimerTask;\n\t#end\n\n\t/**\n\t\tCreates a new timer that will run every `time_ms` milliseconds.\n\n\t\tAfter creating the Timer instance, it calls `this].run` repeatedly,\n\t\twith delays of `time_ms` milliseconds, until `this.stop` is called.\n\n\t\tThe first invocation occurs after `time_ms` milliseconds, not\n\t\timmediately.\n\n\t\tThe accuracy of this may be platform-dependent.\n\t**/\n\tpublic function new( time_ms : Int ){\n\t\t#if flash\n\t\t\tvar me = this;\n\t\t\tid = untyped __global__[\"flash.utils.setInterval\"](function() { me.run(); },time_ms);\n\t\t#elseif js\n\t\t\tvar me = this;\n\t\t\tid = untyped setInterval(function() me.run(),time_ms);\n\t\t#elseif java\n\t\t\ttimer = new java.util.Timer();\n\t\t\ttimer.scheduleAtFixedRate(task = new TimerTask(this), haxe.Int64.ofInt(time_ms), haxe.Int64.ofInt(time_ms));\n\t\t#end\n\t}\n\n\t/**\n\t\tStops `this` Timer.\n\n\t\tAfter calling this method, no additional invocations of `this.run`\n\t\twill occur.\n\n\t\tIt is not possible to restart `this` Timer once stopped.\n\t**/\n\tpublic function stop() {\n\t\t#if (flash || js)\n\t\t\tif( id == null )\n\t\t\t\treturn;\n\t\t\t#if flash\n\t\t\t\tuntyped __global__[\"flash.utils.clearInterval\"](id);\n\t\t\t#elseif js\n\t\t\t\tuntyped clearInterval(id);\n\t\t\t#end\n\t\t\tid = null;\n\t\t#elseif java\n\t\t\ttimer.cancel();\n\t\t\ttimer = null;\n\t\t\ttask = null;\n\t\t#end\n\t}\n\n\t/**\n\t\tThis method is invoked repeatedly on `this` Timer.\n\n\t\tIt can be overridden in a subclass, or rebound directly to a custom\n\t\tfunction:\n\t\t\tvar timer = new haxe.Timer(1000); // 1000ms delay\n\t\t\ttimer.run = function() { ... }\n\n\t\tOnce bound, it can still be rebound to different functions until `this`\n\t\tTimer is stopped through a call to `this.stop`.\n\t**/\n\tpublic dynamic function run() {\n\n\t}\n\n\t/**\n\t\tInvokes `f` after `time_ms` milliseconds.\n\n\t\tThis is a convenience function for creating a new Timer instance with\n\t\t`time_ms` as argument, binding its run() method to `f` and then stopping\n\t\t`this` Timer upon the first invocation.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function delay( f : Void -> Void, time_ms : Int ) {\n\t\tvar t = new haxe.Timer(time_ms);\n\t\tt.run = function() {\n\t\t\tt.stop();\n\t\t\tf();\n\t\t};\n\t\treturn t;\n\t}\n\n\t#end\n\n\t/**\n\t\tMeasures the time it takes to execute `f`, in seconds with fractions.\n\n\t\tThis is a convenience function for calculating the difference between\n\t\tTimer.stamp() before and after the invocation of `f`.\n\n\t\tThe difference is passed as argument to Log.trace(), with \"s\" appended\n\t\tto denote the unit. The optional `pos` argument is passed through.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function measure<T>( f : Void -> T, ?pos : PosInfos ) : T {\n\t\tvar t0 = stamp();\n\t\tvar r = f();\n\t\tLog.trace((stamp() - t0) + \"s\", pos);\n\t\treturn r;\n\t}\n\n\t/**\n\t\tReturns a timestamp, in seconds with fractions.\n\n\t\tThe value itself might differ depending on platforms, only differences\n\t\tbetween two values make sense.\n\t**/\n\tpublic static function stamp() : Float {\n\t\t#if flash\n\t\t\treturn flash.Lib.getTimer() / 1000;\n\t\t#elseif (neko || php)\n\t\t\treturn Sys.time();\n\t\t#elseif js\n\t\t\treturn Date.now().getTime() / 1000;\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__time_stamp();\n\t\t#elseif sys\n\t\t\treturn Sys.time();\n\t\t#else\n\t\t\treturn 0;\n\t\t#end\n\t}\n\n}\n\n#if java\n@:nativeGen\nprivate class TimerTask extends java.util.TimerTask {\n\tvar timer:Timer;\n\tpublic function new(timer:Timer):Void {\n\t\tsuper();\n\t\tthis.timer = timer;\n\t}\n\n\t@:overload override public function run():Void {\n\t\ttimer.run();\n\t}\n}\n#end\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n@:noDoc\ntypedef TypeResolver = {\n\tfunction resolveClass( name : String ) : Class<Dynamic>;\n\tfunction resolveEnum( name : String ) : Enum<Dynamic>;\n}\n\n/**\n\tThe Unserializer class is the complement to the Serializer class. It parses\n\ta serialization String and creates objects from the contained data.\n\n\tThis class can be used in two ways:\n\n\t- create a new Unserializer() instance with a given serialization\n\t\tString, then call its unserialize() method until all values are\n\t\textracted\n\t- call Unserializer.run() to unserialize a single value from a given\n\t\tString\n**/\nclass Unserializer {\n\n\t/**\n\t\tThis value can be set to use custom type resolvers.\n\n\t\tA type resolver finds a Class or Enum instance from a given String. By\n\t\tdefault, the haxe Type Api is used.\n\n\t\tA type resolver must provide two methods:\n\n\t\t1. resolveClass(name:String):Class<Dynamic> is called to determine a\n\t\t\t\tClass from a class name\n\t\t2. resolveEnum(name:String):Enum<Dynamic> is called to determine an\n\t\t\t\tEnum from an enum name\n\n\t\tThis value is applied when a new Unserializer instance is created.\n\t\tChanging it afterwards has no effect on previously created instances.\n\t**/\n\tpublic static var DEFAULT_RESOLVER : TypeResolver = Type;\n\n\tstatic var BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\n\n\t#if !neko\n\tstatic var CODES = null;\n\n\tstatic function initCodes() {\n\t\tvar codes =\n\t\t\t#if flash\n\t\t\t\tnew flash.utils.ByteArray();\n\t\t\t#else\n\t\t\t\tnew Array();\n\t\t\t#end\n\t\tfor( i in 0...BASE64.length )\n\t\t\tcodes[StringTools.fastCodeAt(BASE64,i)] = i;\n\t\treturn codes;\n\t}\n\t#end\n\n \tvar buf : String;\n \tvar pos : Int;\n \tvar length : Int;\n \tvar cache : Array<Dynamic>;\n \tvar scache : Array<String>;\n \tvar resolver : TypeResolver;\n \t#if neko\n \tvar upos : Int;\n \t#end\n\n\t/**\n\t\tCreates a new Unserializer instance, with its internal buffer\n\t\tinitialized to `buf`.\n\n\t\tThis does not parse `buf` immediately. It is parsed only when calls to\n\t\t`this.unserialize` are made.\n\n\t\tEach Unserializer instance maintains its own cache.\n\t**/\n \tpublic function new( buf : String ) {\n \t\tthis.buf = buf;\n \t\tlength = buf.length;\n \t\tpos = 0;\n \t\t#if neko\n \t\tupos = 0;\n \t\t#end\n \t\tscache = new Array();\n \t\tcache = new Array();\n\t\tvar r = DEFAULT_RESOLVER;\n\t\tif( r == null ) {\n\t\t\tr = Type;\n\t\t\tDEFAULT_RESOLVER = r;\n\t\t}\n \t\tsetResolver(r);\n \t}\n\n\t/**\n\t\tSets the type resolver of `this` Unserializer instance to `r`.\n\n\t\tIf `r` is null, a special resolver is used which returns null for all\n\t\tinput values.\n\n\t\tSee DEFAULT_RESOLVER for more information on type resolvers.\n\t**/\n \tpublic function setResolver( r ) {\n\t\tif( r == null )\n\t\t\tresolver = {\n\t\t\t\tresolveClass : function(_) { return null; },\n\t\t\t\tresolveEnum : function(_) { return null; }\n\t\t\t};\n\t\telse\n\t\t\tresolver = r;\n\t}\n\n\t/**\n\t\tGets the type resolver of `this` Unserializer instance.\n\n\t\tSee DEFAULT_RESOLVER for more information on type resolvers.\n\t**/\n \tpublic function getResolver() {\n\t\treturn resolver;\n\t}\n\n\tinline function get(p) : Int {\n\t\treturn StringTools.fastCodeAt(buf, p);\n\t}\n\n \tfunction readDigits() {\n \t\tvar k = 0;\n \t\tvar s = false;\n \t\tvar fpos = pos;\n \t\twhile( true ) {\n \t\t\tvar c = get(pos);\n\t\t\tif( StringTools.isEof(c) )\n\t\t\t\tbreak;\n \t\t\tif( c == \"-\".code ) {\n \t\t\t\tif( pos != fpos )\n \t\t\t\t\tbreak;\n \t\t\t\ts = true;\n \t\t\t\tpos++;\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\tif( c < \"0\".code || c > \"9\".code )\n \t\t\t\tbreak;\n \t\t\tk = k * 10 + (c - \"0\".code);\n \t\t\tpos++;\n \t\t}\n \t\tif( s )\n \t\t\tk *= -1;\n \t\treturn k;\n \t}\n\n\tfunction readFloat() {\n\t\tvar p1 = pos;\n \t\twhile( true ) {\n \t\t\tvar c = get(pos);\n \t\t\t// + - . , 0-9\n \t\t\tif( (c >= 43 && c < 58) || c == \"e\".code || c == \"E\".code )\n \t\t\t\tpos++;\n \t\t\telse\n \t\t\t\tbreak;\n \t\t}\n \t\treturn Std.parseFloat(buf.substr(p1,pos-p1));\n\t}\n\n\tfunction unserializeObject(o) {\n \t\twhile( true ) {\n \t\t\tif( pos >= length )\n \t\t\t\tthrow \"Invalid object\";\n \t\t\tif( get(pos) == \"g\".code )\n \t\t\t\tbreak;\n \t\t\tvar k = unserialize();\n \t\t\tif( !Std.is(k,String) )\n \t\t\t\tthrow \"Invalid object key\";\n \t\t\tvar v = unserialize();\n \t\t\tReflect.setField(o,k,v);\n \t\t}\n \t\tpos++;\n\t}\n\n\tfunction unserializeEnum( edecl, tag ) {\n\t\tif( get(pos++) != \":\".code )\n\t\t\tthrow \"Invalid enum format\";\n\t\tvar nargs = readDigits();\n\t\tif( nargs == 0 )\n\t\t\treturn Type.createEnum(edecl,tag);\n\t\tvar args = new Array();\n\t\twhile( nargs-- > 0 )\n\t\t\targs.push(unserialize());\n\t\treturn Type.createEnum(edecl,tag,args);\n\t}\n\n\t/**\n\t\tUnserializes the next part of `this` Unserializer instance and returns\n\t\tthe according value.\n\n\t\tThis function may call `this.resolver.resolveClass` to determine a\n\t\tClass from a String, and `this.resolver.resolveEnum` to determine an\n\t\tEnum from a String.\n\n\t\tIf `this` Unserializer instance contains no more or invalid data, an\n\t\texception is thrown.\n\n\t\tThis operation may fail on structurally valid data if a type cannot be\n\t\tresolved or if a field cannot be set. This can happen when unserializing\n\t\tStrings that were serialized on a different haxe target, in which the\n\t\tserialization side has to make sure not to include platform-specific\n\t\tdata.\n\n\t\tClasses are created from Type.createEmptyInstance, which means their\n\t\tconstructors are not called.\n\t**/\n \tpublic function unserialize() : Dynamic {\n \t\tswitch( get(pos++) ) {\n \t\tcase \"n\".code:\n \t\t\treturn null;\n \t\tcase \"t\".code:\n \t\t\treturn true;\n \t\tcase \"f\".code:\n \t\t\treturn false;\n \t\tcase \"z\".code:\n \t\t\treturn 0;\n \t\tcase \"i\".code:\n \t\t\treturn readDigits();\n \t\tcase \"d\".code:\n \t\t\treturn readFloat();\n\t\tcase \"y\".code:\n \t\t\tvar len = readDigits();\n \t\t\tif( get(pos++) != \":\".code || length - pos < len )\n \t\t\t\tthrow \"Invalid string length\";\n\t\t\tvar s = buf.substr(pos,len);\n\t\t\tpos += len;\n\t\t\ts = StringTools.urlDecode(s);\n\t\t\tscache.push(s);\n\t\t\treturn s;\n \t\tcase \"k\".code:\n \t\t\treturn Math.NaN;\n \t\tcase \"m\".code:\n \t\t\treturn Math.NEGATIVE_INFINITY;\n \t\tcase \"p\".code:\n \t\t\treturn Math.POSITIVE_INFINITY;\n \t\tcase \"a\".code:\n\t\t\tvar buf = buf;\n \t\t\tvar a = new Array<Dynamic>();\n \t\t\tcache.push(a);\n \t\t\twhile( true ) {\n \t\t\t\tvar c = get(pos);\n \t\t\t\tif( c == \"h\".code ) {\n\t\t\t\t\tpos++;\n \t\t\t\t\tbreak;\n\t\t\t\t}\n \t\t\t\tif( c == \"u\".code ) {\n\t\t\t\t\tpos++;\n \t\t\t\t\tvar n = readDigits();\n \t\t\t\t\ta[a.length+n-1] = null;\n \t\t\t\t} else\n \t\t\t\t\ta.push(unserialize());\n \t\t\t}\n \t\t\treturn a;\n \t\tcase \"o\".code:\n\t \t\tvar o = {};\n\t \t\tcache.push(o);\n\t\t\tunserializeObject(o);\n\t\t\treturn o;\n \t\tcase \"r\".code:\n \t\t\tvar n = readDigits();\n \t\t\tif( n < 0 || n >= cache.length )\n \t\t\t\tthrow \"Invalid reference\";\n \t\t\treturn cache[n];\n \t\tcase \"R\".code:\n\t\t\tvar n = readDigits();\n\t\t\tif( n < 0 || n >= scache.length )\n\t\t\t\tthrow \"Invalid string reference\";\n\t\t\treturn scache[n];\n \t\tcase \"x\".code:\n\t\t\tthrow unserialize();\n\t\tcase \"c\".code:\n\t \t\tvar name = unserialize();\n\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\tif( cl == null )\n\t\t\t\tthrow \"Class not found \" + name;\n\t\t\tvar o = Type.createEmptyInstance(cl);\n\t\t\tcache.push(o);\n\t\t\tunserializeObject(o);\n\t\t\treturn o;\n\t\tcase \"w\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar edecl = resolver.resolveEnum(name);\n\t\t\tif( edecl == null )\n\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\tvar e = unserializeEnum(edecl, unserialize());\n\t\t\tcache.push(e);\n\t\t\treturn e;\n \t\tcase \"j\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar edecl = resolver.resolveEnum(name);\n\t\t\tif( edecl == null )\n\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\tpos++; /* skip ':' */\n\t\t\tvar index = readDigits();\n\t\t\tvar tag = Type.getEnumConstructs(edecl)[index];\n\t\t\tif( tag == null )\n\t\t\t\tthrow \"Unknown enum index \"+name+\"@\"+index;\n\t\t\tvar e = unserializeEnum(edecl, tag);\n\t\t\tcache.push(e);\n\t\t\treturn e;\n\t\tcase \"l\".code:\n\t\t\tvar l = new List();\n\t\t\tcache.push(l);\n\t\t\tvar buf = buf;\n\t\t\twhile( get(pos) != \"h\".code )\n\t\t\t\tl.add(unserialize());\n\t\t\tpos++;\n\t\t\treturn l;\n\t\tcase \"b\".code:\n\t\t\tvar h = new haxe.ds.StringMap();\n\t\t\tcache.push(h);\n\t\t\tvar buf = buf;\n\t\t\twhile( get(pos) != \"h\".code ) {\n\t\t\t\tvar s = unserialize();\n\t\t\t\th.set(s,unserialize());\n\t\t\t}\n\t\t\tpos++;\n\t\t\treturn h;\n\t\tcase \"q\".code:\n\t\t\tvar h = new haxe.ds.IntMap();\n\t\t\tcache.push(h);\n\t\t\tvar buf = buf;\n\t\t\tvar c = get(pos++);\n\t\t\twhile( c == \":\".code ) {\n\t\t\t\tvar i = readDigits();\n\t\t\t\th.set(i,unserialize());\n\t\t\t\tc = get(pos++);\n\t\t\t}\n\t\t\tif( c != \"h\".code )\n\t\t\t\tthrow \"Invalid IntMap format\";\n\t\t\treturn h;\n\t\tcase \"M\".code:\n\t\t\tvar h = new haxe.ds.ObjectMap();\n\t\t\tcache.push(h);\n\t\t\tvar buf = buf;\n\t\t\twhile( get(pos) != \"h\".code ) {\n\t\t\t\tvar s = unserialize();\n\t\t\t\th.set(s,unserialize());\n\t\t\t}\n\t\t\tpos++;\n\t\t\treturn h;\n\t\tcase \"v\".code:\n\t\t\tvar d;\n\t\t\tif(\tget(pos) >= '0'.code && get(pos) <= '9'.code &&\n\t\t\t\tget(pos + 1) >= '0'.code && get(pos + 1) <= '9'.code &&\n\t\t\t\tget(pos + 2) >= '0'.code && get(pos + 2) <= '9'.code &&\n\t\t\t\tget(pos + 3) >= '0'.code && get(pos + 3) <= '9'.code &&\n\t\t\t\tget(pos + 4) == '-'.code\n\t\t\t\t) {\n\t\t\t\t// Included for backwards compatibility\n\t\t\t\td = Date.fromString(buf.substr(pos,19));\n\t\t\t\tpos += 19;\n\t\t\t} else\n\t\t\t\td = Date.fromTime(readFloat());\n\t\t\tcache.push(d);\n\t\t\treturn d;\n \t\tcase \"s\".code:\n \t\t\tvar len = readDigits();\n\t\t\tvar buf = buf;\n \t\t\tif( get(pos++) != \":\".code || length - pos < len )\n\t\t\t\tthrow \"Invalid bytes length\";\n\t\t\t#if neko\n\t\t\tvar bytes = haxe.io.Bytes.ofData( base_decode(untyped buf.substr(pos,len).__s,untyped BASE64.__s) );\n\t\t\t#else\n\t\t\tvar codes = CODES;\n\t\t\tif( codes == null ) {\n\t\t\t\tcodes = initCodes();\n\t\t\t\tCODES = codes;\n\t\t\t}\n\t\t\tvar i = pos;\n\t\t\tvar rest = len & 3;\n\t\t\tvar size = (len >> 2) * 3 + ((rest >= 2) ? rest - 1 : 0);\n\t\t\tvar max = i + (len - rest);\n\t\t\tvar bytes = haxe.io.Bytes.alloc(size);\n\t\t\tvar bpos = 0;\n\t\t\twhile( i < max ) {\n\t\t\t\tvar c1 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c1 << 2) | (c2 >> 4));\n\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c2 << 4) | (c3 >> 2));\n\t\t\t\tvar c4 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c3 << 6) | c4);\n\t\t\t}\n\t\t\tif( rest >= 2 ) {\n\t\t\t\tvar c1 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c1 << 2) | (c2 >> 4));\n\t\t\t\tif( rest == 3 ) {\n\t\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\t\tbytes.set(bpos++,(c2 << 4) | (c3 >> 2));\n\t\t\t\t}\n\t\t\t}\n \t\t\t#end\n\t\t\tpos += len;\n\t\t\tcache.push(bytes);\n\t\t\treturn bytes;\n\t\tcase \"C\".code:\n\t \t\tvar name = unserialize();\n\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\tif( cl == null )\n\t\t\t\tthrow \"Class not found \" + name;\n\t\t\tvar o : Dynamic = Type.createEmptyInstance(cl);\n\t\t\tcache.push(o);\n\t\t\to.hxUnserialize(this);\n\t\t\tif( get(pos++) != \"g\".code )\n\t\t\t\tthrow \"Invalid custom data\";\n\t\t\treturn o;\n\t\tcase \"A\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\tif( cl == null )\n\t\t\t\tthrow \"Class not found \" + name;\n\t\t\treturn cl;\n\t\tcase \"B\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar e = resolver.resolveEnum(name);\n\t\t\tif( e == null )\n\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\treturn e;\n \t\tdefault:\n \t\t}\n \t\tpos--;\n \t\tthrow (\"Invalid char \"+buf.charAt(pos)+\" at position \"+pos);\n \t}\n\n\t/**\n\t\tUnserializes `v` and returns the according value.\n\n\t\tThis is a convenience function for creating a new instance of\n\t\tUnserializer with `v` as buffer and calling its unserialize() method\n\t\tonce.\n\t**/\n\tpublic static function run( v : String ) : Dynamic {\n\t\treturn new Unserializer(v).unserialize();\n\t}\n\n\t#if neko\n\tstatic var base_decode = neko.Lib.load(\"std\",\"base_decode\",2);\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tSince all platforms does not guarantee that String always uses UTF-8 encoding, you\n\tcan use this crossplatform API to perform operations on such strings.\n**/\nclass Utf8 {\n\n\tvar __b : String;\n\n\t/**\n\t\tAllocate a new Utf8 buffer using an optional bytes size.\n\t**/\n\tpublic function new( ?size : Int ) {\n\t\t__b = \"\";\n\t}\n\n\t/**\n\t\tAdd the given UTF8 character code to the buffer.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\t__b += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tReturns the buffer converted to a String;\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn __b;\n\t}\n\n\t/**\n\t\tCall the `chars` function for each UTF8 char of the string.\n\t**/\n\tpublic static function iter( s : String, chars : Int -> Void ) {\n\t\tfor( i in 0...s.length )\n\t\t\tchars(s.charCodeAt(i));\n\t}\n\n\t/**\n\t\tEncode the input ISO string into the corresponding UTF8 one.\n\t**/\n\tpublic static function encode( s : String ) : String {\n\t\tthrow \"Not implemented\";\n\t}\n\n\t/**\n\t\tDecode an UTF8 string back to an ISO string.\n\t\tThrow an exception if a given UTF8 character is not supported by the decoder.\n\t**/\n\tpublic static function decode( s : String ) : String {\n\t\tthrow \"Not implemented\";\n\t}\n\n\t/**\n\t\tSimilar to `String.charCodeAt` but uses the UTF8 character position.\n\t**/\n\tpublic static inline function charCodeAt( s : String, index : Int ) : Int {\n\t\treturn s.charCodeAt(index);\n\t}\n\n\t/**\n\t\tTells if the String is correctly encoded as UTF8.\n\t**/\n\tpublic static inline function validate( s : String ) : Bool {\n\t\treturn true;\n\t}\n\n\t/**\n\t\tReturns the number of UTF8 chars of the String.\n\t**/\n\t#if js @:extern #end\n\tpublic static inline function length( s : String ) : Int {\n\t\treturn s.length;\n\t}\n\n\t/**\n\t\tCompare two UTF8 strings, character by character.\n\t**/\n\tpublic static function compare( a : String, b : String ) : Int {\n\t\treturn a > b ? 1 : (a == b ? 0 : -1);\n\t}\n\n\t/**\n\t\tThis is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.\n\t**/\n\tpublic static inline function sub( s : String, pos : Int, len : Int ) : String {\n\t\treturn s.substr(pos,len);\n\t}\n\n}","/*\n * Copyright (C)2005-2014 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\nimport js.html.compat.Uint8Array;\nimport js.html.compat.DataView;\n\n@:coreApi\nclass Bytes {\n\n\tpublic var length(default,null) : Int;\n\tvar b : js.html.Uint8Array;\n\tvar data : js.html.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.html.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get( pos : Int ) : Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set( pos : Int, v : Int ) : Void {\n\t\tb[pos] = v & 0xFF; // the &0xFF is necessary for js.html.compat support\n\t}\n\n\tpublic function blit( pos : Int, src : Bytes, srcpos : Int, len : Int ) : Void {\n\t\tif( pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length ) throw Error.OutsideBounds;\n\t\tif( srcpos == 0 && len == src.length )\n\t\t\tb.set(src.b,pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos,srcpos+len),pos);\n\t}\n\n\tpublic function fill( pos : Int, len : Int, value : Int ) : Void {\n\t\tfor( i in 0...len )\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub( pos : Int, len : Int ) : Bytes {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos+b.byteOffset,pos+b.byteOffset+len));\n\t}\n\n\tpublic function compare( other : Bytes ) : Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor( i in 0...len )\n\t\t\tif( b1[i] != b2[i] )\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData() : Void {\n\t\tif( data == null ) data = new js.html.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64( pos : Int ) : haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4),getInt32(pos));\n\t}\n\n\tpublic function setInt64( pos : Int, v : haxe.Int64 ) : Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString( pos : Int, len : Int ) : String {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar fcc = String.fromCharCode;\n\t\tvar i = pos;\n\t\tvar max = pos+len;\n\t\t// utf8-decode and utf16-encode\n\t\twhile( i < max ) {\n\t\t\tvar c = b[i++];\n\t\t\tif( c < 0x80 ) {\n\t\t\t\tif( c == 0 ) break;\n\t\t\t\ts += fcc(c);\n\t\t\t} else if( c < 0xE0 )\n\t\t\t\ts += fcc( ((c & 0x3F) << 6) | (b[i++] & 0x7F) );\n\t\t\telse if( c < 0xF0 ) {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\ts += fcc( ((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F) );\n\t\t\t} else {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\tvar c3 = b[i++];\n\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t// surrogate pair\n\t\t\t\ts += fcc( (u >> 10) + 0xD7C0 );\n\t\t\t\ts += fcc( (u & 0x3FF) | 0xDC00 );\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString() : String {\n\t\treturn getString(0,length);\n\t}\n\n\tpublic function toHex() : String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor( i in 0...str.length )\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor( i in 0...length ) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData() : BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static function alloc( length : Int ) : Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString( s : String ) : Bytes {\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile( i < s.length ) {\n\t\t\tvar c : Int = StringTools.fastCodeAt(s,i++);\n\t\t\t// surrogate pair\n\t\t\tif( 0xD800 <= c && c <= 0xDBFF )\n\t\t\t    c = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s,i++) & 0x3FF);\n\t\t\tif( c <= 0x7F )\n\t\t\t\ta.push(c);\n\t\t\telse if( c <= 0x7FF ) {\n\t\t\t\ta.push( 0xC0 | (c >> 6) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else if( c <= 0xFFFF ) {\n\t\t\t\ta.push( 0xE0 | (c >> 12) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else {\n\t\t\t\ta.push( 0xF0 | (c >> 18) );\n\t\t\t\ta.push( 0x80 | ((c >> 12) & 63) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.html.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData( b : BytesData ) : Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif( hb != null ) return hb;\n\t\treturn new Bytes(b);\n\t}\n\n\tpublic inline static function fastGet( b : BytesData, pos : Int ) : Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tAllows to encode/decode String and bytes using Base64 encoding.\n**/\nclass Base64 {\n\n\tpublic static var CHARS(default,null) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\tpublic static var BYTES(default,null) = haxe.io.Bytes.ofString(CHARS);\n\n\tpublic static function encode( bytes : haxe.io.Bytes, complement = true ) : String {\n\t\tvar str = new BaseCode(BYTES).encodeBytes(bytes).toString();\n\t\tif( complement )\n\t\t\tswitch (bytes.length % 3) {\n\t\t\tcase 1:\n\t\t\t\tstr += \"==\";\n\t\t\tcase 2:\n\t\t\t\tstr += \"=\";\n\t\t\tdefault:\n\t\t\t}\n\t\treturn str;\n\t}\n\n\tpublic static function decode( str : String, complement = true ) : haxe.io.Bytes {\n\t\tif( complement )\n\t\t\twhile( str.charCodeAt(str.length-1) == \"=\".code )\n\t\t\t\tstr = str.substr(0,-1);\n\t\treturn new BaseCode(BYTES).decodeBytes(haxe.io.Bytes.ofString(str));\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tAllows to encode/decode String and bytes using a power of two base dictionnary.\n**/\nclass BaseCode {\n\n\tvar base : haxe.io.Bytes;\n\tvar nbits : Int;\n\tvar tbl : Array<Int>;\n\n\tpublic function new( base : haxe.io.Bytes ) {\n\t\tvar len = base.length;\n\t\tvar nbits = 1;\n\t\twhile( len > 1 << nbits )\n\t\t\tnbits++;\n\t\tif( nbits > 8 || len != 1 << nbits )\n\t\t\tthrow \"BaseCode : base length must be a power of two.\";\n\t\tthis.base = base;\n\t\tthis.nbits = nbits;\n\t}\n\n\tpublic function encodeBytes( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if (neko && !interp)\n\t\treturn haxe.io.Bytes.ofData( base_encode(b.getData(),base.getData()) );\n\t\t#else\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tvar size = Std.int(b.length * 8 / nbits);\n\t\tvar out = haxe.io.Bytes.alloc(size + (((b.length * 8) % nbits == 0) ? 0 : 1) );\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar mask = (1 << nbits) - 1;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile( pout < size ) {\n\t\t\twhile( curbits < nbits ) {\n\t\t\t\tcurbits += 8;\n\t\t\t\tbuf <<= 8;\n\t\t\t\tbuf |= b.get(pin++);\n\t\t\t}\n\t\t\tcurbits -= nbits;\n\t\t\tout.set(pout++,base.get((buf >> curbits) & mask));\n\t\t}\n\t\tif( curbits > 0 )\n\t\t\tout.set(pout++,base.get((buf << (nbits - curbits)) & mask));\n\t\treturn out;\n\t\t#end\n\t}\n\n\tfunction initTable() {\n\t\tvar tbl = new Array();\n\t\tfor( i in 0...256 )\n\t\t\ttbl[i] = -1;\n\t\tfor( i in 0...base.length )\n\t\t\ttbl[base.get(i)] = i;\n\t\tthis.tbl = tbl;\n\t}\n\n\tpublic function decodeBytes( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if (neko && !interp)\n\t\treturn haxe.io.Bytes.ofData( base_decode(b.getData(),base.getData()) );\n\t\t#else\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tif( this.tbl == null ) initTable();\n\t\tvar tbl = this.tbl;\n\t\tvar size = (b.length * nbits) >> 3;\n\t\tvar out = haxe.io.Bytes.alloc(size);\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile( pout < size ) {\n\t\t\twhile( curbits < 8 ) {\n\t\t\t\tcurbits += nbits;\n\t\t\t\tbuf <<= nbits;\n\t\t\t\tvar i = tbl[b.get(pin++)];\n\t\t\t\tif( i == -1 )\n\t\t\t\t\tthrow \"BaseCode : invalid encoded char\";\n\t\t\t\tbuf |= i;\n\t\t\t}\n\t\t\tcurbits -= 8;\n\t\t\tout.set(pout++,(buf >> curbits) & 0xFF);\n\t\t}\n\t\treturn out;\n\t\t#end\n\t}\n\n\tpublic function encodeString( s : String ) {\n\t\t#if (neko && !interp)\n\t\treturn neko.NativeString.toString( base_encode(neko.NativeString.ofString(s),base.getData()) );\n\t\t#else\n\t\treturn encodeBytes(haxe.io.Bytes.ofString(s)).toString();\n\t\t#end\n\t}\n\n\tpublic function decodeString( s : String ) {\n\t\t#if (neko && !interp)\n\t\treturn neko.NativeString.toString( base_decode(neko.NativeString.ofString(s),base.getData()) );\n\t\t#else\n\t\treturn decodeBytes(haxe.io.Bytes.ofString(s)).toString();\n\t\t#end\n\t}\n\n\tpublic static function encode( s : String, base : String ) {\n\t\tvar b = new BaseCode(haxe.io.Bytes.ofString(base));\n\t\treturn b.encodeString(s);\n\t}\n\n\tpublic static function decode( s : String, base : String ) {\n\t\tvar b = new BaseCode(haxe.io.Bytes.ofString(base));\n\t\treturn b.decodeString(s);\n\t}\n\n\t#if neko\n\tprivate static var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\tprivate static var base_decode = neko.Lib.load(\"std\",\"base_decode\",2);\n\t#end\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tCreates a MD5 of a String.\n**/\nclass Md5 {\n\n\tpublic static function encode( s : String ) : String {\n\t\t#if neko\n\t\t\treturn untyped new String(base_encode(make_md5(s.__s),\"0123456789abcdef\".__s));\n\t\t#elseif php\n\t\t\treturn untyped __call__(\"md5\", s);\n\t\t#else\n\t\t\tvar m = new Md5();\n\t\t\tvar h = m.doEncode(str2blks(s));\n\t\t\treturn m.hex(h);\n\t\t#end\n\t}\n\n\tpublic static function make( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if neko\n\t\t\treturn haxe.io.Bytes.ofData(make_md5(b.getData()));\n\t\t#elseif php\n\t\t\treturn haxe.io.Bytes.ofData(untyped __call__(\"md5\", b.getData(), true));\n\t\t#else\n\t\t\tvar h = new Md5().doEncode(bytes2blks(b));\n\t\t\tvar out = haxe.io.Bytes.alloc(16);\n\t\t\tvar p = 0;\n\t\t\tfor( i in 0...4 ) {\n\t\t\t\tout.set(p++,h[i]&0xFF);\n\t\t\t\tout.set(p++,(h[i]>>8)&0xFF);\n\t\t\t\tout.set(p++,(h[i]>>16)&0xFF);\n\t\t\t\tout.set(p++,h[i]>>>24);\n\t\t\t}\n\t\t\treturn out;\n\t\t#end\n\t}\n\n\t#if neko\n\tstatic var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\tstatic var make_md5 = neko.Lib.load(\"std\",\"make_md5\",1);\n\t#elseif !php\n\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Copyright (C) Paul Johnston 1999 - 2000.\n * Updated by Greg Holt 2000 - 2001.\n * See http://pajhome.org.uk/site/legal.html for details.\n */\n\n\tfunction new() {\n\t}\n\n\tfunction bitOR(a, b){\n\t\tvar lsb = (a & 0x1) | (b & 0x1);\n\t\tvar msb31 = (a >>> 1) | (b >>> 1);\n\t\treturn (msb31 << 1) | lsb;\n\t}\n\n\tfunction bitXOR(a, b){\n\t\tvar lsb = (a & 0x1) ^ (b & 0x1);\n\t\tvar msb31 = (a >>> 1) ^ (b >>> 1);\n\t\treturn (msb31 << 1) | lsb;\n\t}\n\n\tfunction bitAND(a, b){\n\t\tvar lsb = (a & 0x1) & (b & 0x1);\n\t\tvar msb31 = (a >>> 1) & (b >>> 1);\n\t\treturn (msb31 << 1) | lsb;\n\t}\n\n\tfunction addme(x, y) {\n\t\tvar lsw = (x & 0xFFFF)+(y & 0xFFFF);\n\t\tvar msw = (x >> 16)+(y >> 16)+(lsw >> 16);\n\t\treturn (msw << 16) | (lsw & 0xFFFF);\n\t}\n\n\tfunction hex( a : Array<Int> ){\n\t\tvar str = \"\";\n\t\tvar hex_chr = \"0123456789abcdef\";\n\t\tfor( num in a )\n\t\t\tfor( j in 0...4 )\n\t\t\t\tstr += hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F) +\n\t\t\t\t\t\t\t hex_chr.charAt((num >> (j * 8)) & 0x0F);\n\t\treturn str;\n\t}\n\n\tstatic function bytes2blks( b : haxe.io.Bytes ){\n\t\tvar nblk = ((b.length + 8) >> 6) + 1;\n\t\tvar blks = new Array();\n\n\t\t//preallocate size\n\t\tvar blksSize = nblk * 16;\n\t\t#if (neko || cs || cpp || java)\n\t\tblks[blksSize - 1] = 0;\n\t\t#end\n\n\t\t#if !(cpp || cs) //C++ and C# will already initialize them with zeroes.\n\t\tfor( i in 0...blksSize ) blks[i] = 0;\n\t\t#end\n\n\t\tvar i = 0;\n\t\twhile( i < b.length ) {\n\t\t\tblks[i >> 2] |= b.get(i) << ((((b.length << 3) + i) & 3) << 3);\n\t\t\ti++;\n\t\t}\n\t\tblks[i >> 2] |= 0x80 << (((b.length * 8 + i) % 4) * 8);\n\t\tvar l = b.length * 8;\n\t\tvar k = nblk * 16 - 2;\n\t\tblks[k] = (l & 0xFF);\n\t\tblks[k] |= ((l >>> 8) & 0xFF) << 8;\n\t\tblks[k] |= ((l >>> 16) & 0xFF) << 16;\n\t\tblks[k] |= ((l >>> 24) & 0xFF) << 24;\n\t\treturn blks;\n\t}\n\n\tstatic function str2blks( str : String ){\n\t\tvar nblk = ((str.length + 8) >> 6) + 1;\n\t\tvar blks = new Array();\n\n\t\t//preallocate size\n\t\tvar blksSize = nblk * 16;\n\t\t#if (neko || cs || cpp || java)\n\t\tblks[blksSize - 1] = 0;\n\t\t#end\n\n\t\t#if !(cpp || cs) //C++ and C# will already initialize them with zeroes.\n\t\tfor( i in 0...blksSize ) blks[i] = 0;\n\t\t#end\n\n\t\tvar i = 0;\n\t\twhile( i < str.length ) {\n\t\t\tblks[i >> 2] |= str.charCodeAt(i) << (((str.length * 8 + i) % 4) * 8);\n\t\t\ti++;\n\t\t}\n\t\tblks[i >> 2] |= 0x80 << (((str.length * 8 + i) % 4) * 8);\n\t\tvar l = str.length * 8;\n\t\tvar k = nblk * 16 - 2;\n\t\tblks[k] = (l & 0xFF);\n\t\tblks[k] |= ((l >>> 8) & 0xFF) << 8;\n\t\tblks[k] |= ((l >>> 16) & 0xFF) << 16;\n\t\tblks[k] |= ((l >>> 24) & 0xFF) << 24;\n\t\treturn blks;\n\t}\n\n\tfunction rol(num, cnt){\n\t\treturn (num << cnt) | (num >>> (32 - cnt));\n\t}\n\n\tfunction cmn(q, a, b, x, s, t){\n\t\treturn addme(rol((addme(addme(a, q), addme(x, t))), s), b);\n\t}\n\n\tfunction ff(a, b, c, d, x, s, t){\n\t\treturn cmn(bitOR(bitAND(b, c), bitAND((~b), d)), a, b, x, s, t);\n\t}\n\n\tfunction gg(a, b, c, d, x, s, t){\n\t\treturn cmn(bitOR(bitAND(b, d), bitAND(c, (~d))), a, b, x, s, t);\n\t}\n\n\tfunction hh(a, b, c, d, x, s, t){\n\t\treturn cmn(bitXOR(bitXOR(b, c), d), a, b, x, s, t);\n\t}\n\n\tfunction ii(a, b, c, d, x, s, t){\n\t\treturn cmn(bitXOR(c, bitOR(b, (~d))), a, b, x, s, t);\n\t}\n\n\tfunction doEncode( x : Array<Int> ) : Array<Int> {\n\n\t\tvar a =  1732584193;\n\t\tvar b = -271733879;\n\t\tvar c = -1732584194;\n\t\tvar d =  271733878;\n\n\t\tvar step;\n\n\t\tvar i = 0;\n\t\twhile( i < x.length )  {\n\t\t\tvar olda = a;\n\t\t\tvar oldb = b;\n\t\t\tvar oldc = c;\n\t\t\tvar oldd = d;\n\n\t\t\tstep = 0;\n\t\t\ta = ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n\t\t\td = ff(d, a, b, c, x[i+ 1], 12, -389564586);\n\t\t\tc = ff(c, d, a, b, x[i+ 2], 17,  606105819);\n\t\t\tb = ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n\t\t\ta = ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n\t\t\td = ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n\t\t\tc = ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n\t\t\tb = ff(b, c, d, a, x[i+ 7], 22, -45705983);\n\t\t\ta = ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n\t\t\td = ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n\t\t\tc = ff(c, d, a, b, x[i+10], 17, -42063);\n\t\t\tb = ff(b, c, d, a, x[i+11], 22, -1990404162);\n\t\t\ta = ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n\t\t\td = ff(d, a, b, c, x[i+13], 12, -40341101);\n\t\t\tc = ff(c, d, a, b, x[i+14], 17, -1502002290);\n\t\t\tb = ff(b, c, d, a, x[i+15], 22,  1236535329);\n\t\t\ta = gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n\t\t\td = gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n\t\t\tc = gg(c, d, a, b, x[i+11], 14,  643717713);\n\t\t\tb = gg(b, c, d, a, x[i+ 0], 20, -373897302);\n\t\t\ta = gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n\t\t\td = gg(d, a, b, c, x[i+10], 9 ,  38016083);\n\t\t\tc = gg(c, d, a, b, x[i+15], 14, -660478335);\n\t\t\tb = gg(b, c, d, a, x[i+ 4], 20, -405537848);\n\t\t\ta = gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n\t\t\td = gg(d, a, b, c, x[i+14], 9 , -1019803690);\n\t\t\tc = gg(c, d, a, b, x[i+ 3], 14, -187363961);\n\t\t\tb = gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n\t\t\ta = gg(a, b, c, d, x[i+13], 5 , -1444681467);\n\t\t\td = gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n\t\t\tc = gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n\t\t\tb = gg(b, c, d, a, x[i+12], 20, -1926607734);\n\t\t\ta = hh(a, b, c, d, x[i+ 5], 4 , -378558);\n\t\t\td = hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n\t\t\tc = hh(c, d, a, b, x[i+11], 16,  1839030562);\n\t\t\tb = hh(b, c, d, a, x[i+14], 23, -35309556);\n\t\t\ta = hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n\t\t\td = hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n\t\t\tc = hh(c, d, a, b, x[i+ 7], 16, -155497632);\n\t\t\tb = hh(b, c, d, a, x[i+10], 23, -1094730640);\n\t\t\ta = hh(a, b, c, d, x[i+13], 4 ,  681279174);\n\t\t\td = hh(d, a, b, c, x[i+ 0], 11, -358537222);\n\t\t\tc = hh(c, d, a, b, x[i+ 3], 16, -722521979);\n\t\t\tb = hh(b, c, d, a, x[i+ 6], 23,  76029189);\n\t\t\ta = hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n\t\t\td = hh(d, a, b, c, x[i+12], 11, -421815835);\n\t\t\tc = hh(c, d, a, b, x[i+15], 16,  530742520);\n\t\t\tb = hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\t\t\ta = ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n\t\t\td = ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n\t\t\tc = ii(c, d, a, b, x[i+14], 15, -1416354905);\n\t\t\tb = ii(b, c, d, a, x[i+ 5], 21, -57434055);\n\t\t\ta = ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n\t\t\td = ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n\t\t\tc = ii(c, d, a, b, x[i+10], 15, -1051523);\n\t\t\tb = ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n\t\t\ta = ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n\t\t\td = ii(d, a, b, c, x[i+15], 10, -30611744);\n\t\t\tc = ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n\t\t\tb = ii(b, c, d, a, x[i+13], 21,  1309151649);\n\t\t\ta = ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n\t\t\td = ii(d, a, b, c, x[i+11], 10, -1120210379);\n\t\t\tc = ii(c, d, a, b, x[i+ 2], 15,  718787259);\n\t\t\tb = ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n\t\t\ta = addme(a, olda);\n\t\t\tb = addme(b, oldb);\n\t\t\tc = addme(c, oldc);\n\t\t\td = addme(d, oldd);\n\n\t\t\ti += 16;\n\t\t}\n\t\treturn [a,b,c,d];\n\t}\n\n\t#end\n\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\n@:coreApi class IntMap<T> implements haxe.Constraints.IMap<Int,T> {\n\n\tprivate var h : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tpublic inline function set( key : Int, value : T ) : Void {\n\t\tuntyped h[key] = value;\n\t}\n\n\tpublic inline function get( key : Int ) : Null<T> {\n\t\treturn untyped h[key];\n\t}\n\n\tpublic inline function exists( key : Int ) : Bool {\n\t\treturn untyped h.hasOwnProperty(key);\n\t}\n\n\tpublic function remove( key : Int ) : Bool {\n\t\tif( untyped !h.hasOwnProperty(key) ) return false;\n\t\tuntyped  __js__(\"delete\")(h[key]);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<Int> {\n\t\tvar a = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\ta.push(key|0);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<T> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[i]; }\n\t\t};\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(i);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n}\n","/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of h software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and h permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n@:coreApi\nclass ObjectMap<K:{ }, V> implements haxe.Constraints.IMap<K,V> {\n\n\tstatic var count = 0;\n\n\tstatic inline function assignId(obj: { } ):Int {\n\t\treturn untyped obj.__id__ = ++count;\n\t}\n\n\tstatic inline function getId(obj: { } ):Int {\n\t\treturn untyped obj.__id__;\n\t}\n\n\tvar h : { };\n\n\tpublic function new() : Void {\n\t\th = { };\n\t\tuntyped h.__keys__ = { };\n\t}\n\n\tpublic function set(key:K, value:V):Void untyped {\n\t\tvar id : Int = untyped key.__id__ || assignId(key);\n\t\th[id] = value;\n\t\th.__keys__[id] = key;\n\t}\n\n\tpublic inline function get(key:K):Null<V> {\n\t\treturn untyped h[getId(key)];\n\t}\n\n\tpublic inline function exists(key:K):Bool {\n\t\treturn untyped h.__keys__[getId(key)] != null;\n\t}\n\n\tpublic function remove( key : K ) : Bool {\n\t\tvar id = getId(key);\n\t\tif ( untyped h.__keys__[id] == null ) return false;\n\t\tuntyped  __js__(\"delete\")(h[id]);\n\t\tuntyped  __js__(\"delete\")(h.__keys__[id]);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<K> {\n\t\tvar a = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h.__keys__ ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\ta.push(h.__keys__[key]);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<V> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[getId(i)]; }\n\t\t};\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(Std.string(i));\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n}","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\nprivate class StringMapIterator<T> {\n\tvar map : StringMap<T>;\n\tvar keys : Array<String>;\n\tvar index : Int;\n\tvar count : Int;\n\tpublic inline function new(map:StringMap<T>, keys:Array<String>) {\n\t\tthis.map = map;\n\t\tthis.keys = keys;\n\t\tthis.index = 0;\n\t\tthis.count = keys.length;\n\t}\n\tpublic inline function hasNext() {\n\t\treturn index < count;\n\t}\n\tpublic inline function next() {\n\t\treturn map.get(keys[index++]);\n\t}\n}\n\n@:coreApi class StringMap<T> implements haxe.Constraints.IMap<String,T> {\n\n\tprivate var h : Dynamic;\n\tprivate var rh : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tinline function isReserved(key:String) : Bool {\n\t\treturn untyped __js__(\"__map_reserved\")[key] != null;\n\t}\n\n\tpublic inline function set( key : String, value : T ) : Void {\n\t\tif( isReserved(key) )\n\t\t\tsetReserved(key, value);\n\t\telse\n\t\t\th[cast key] = value;\n\t}\n\n\tpublic inline function get( key : String ) : Null<T> {\n\t\tif( isReserved(key) )\n\t\t\treturn getReserved(key);\n\t\treturn h[cast key];\n\t}\n\n\tpublic inline function exists( key : String ) : Bool {\n\t\tif( isReserved(key) )\n\t\t\treturn existsReserved(key);\n\t\treturn h.hasOwnProperty(key);\n\t}\n\n\tfunction setReserved( key : String, value : T ) : Void {\n\t\tif( rh == null ) rh = {};\n\t\trh[cast \"$\"+key] = value;\n\t}\n\n\tfunction getReserved( key : String ) : Null<T> {\n\t\treturn rh == null ? null : rh[cast \"$\"+key];\n\t}\n\n\tfunction existsReserved( key : String ) : Bool {\n\t\tif( rh == null ) return false;\n\t\treturn untyped rh.hasOwnProperty(\"$\"+key);\n\t}\n\n\tpublic function remove( key : String ) : Bool {\n\t\tif( isReserved(key) ) {\n\t\t\tkey = \"$\" + key;\n\t\t\tif( rh == null || !rh.hasOwnProperty(key) ) return false;\n\t\t\tuntyped __js__(\"delete\")(rh[key]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif( !h.hasOwnProperty(key) )\n\t\t\t\treturn false;\n\t\t\tuntyped __js__(\"delete\")(h[key]);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function keys() : Iterator<String> {\n\t\treturn arrayKeys().iterator();\n\t}\n\t\n\tfunction arrayKeys() : Array<String> {\n\t\tvar out = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\tout.push(key);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\tif( rh != null ) untyped {\n\t\t\t__js__(\"for( var key in this.rh ) {\");\n\t\t\t\tif( key.charCodeAt(0) == \"$\".code )\n\t\t\t\t\tout.push(key.substr(1));\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn out;\n\t}\n\n\tpublic inline function iterator() : Iterator<T> {\n\t\treturn new StringMapIterator(this, arrayKeys());\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar keys = arrayKeys();\n\t\tfor( i in 0...keys.length ) {\n\t\t\tvar k = keys[i];\n\t\t\ts.add(k);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(k)));\n\t\t\tif( i < keys.length )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __js__(\"var __map_reserved = {}\");\n\t}\n\n}\n","/*\n * Copyright (C)2005-2015 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tHelper that converts between floating point and binary representation.\n\tAlways works in low-endian encoding.\n**/\nclass FPHelper {\n\n\t#if neko_v21\n\t// stored in helper\n\t#elseif neko\n\tstatic var i64tmp = new neko.vm.Tls<Int64>();\n\t#elseif !(java || cs)\n\tstatic var i64tmp = Int64.ofInt(0);\n\t#end\n\n\t#if neko\n\t\t#if neko_v21\n\t\tstatic var helpers = new neko.vm.Tls<neko.NativeArray<Dynamic>>();\n\t\t#else\n\t\tstatic var helperf = new neko.vm.Tls<neko.NativeString>();\n\t\tstatic var helperd = new neko.vm.Tls<neko.NativeString>();\n\t\tstatic var _float_of_bytes = neko.Lib.load(\"std\",\"float_of_bytes\",2);\n\t\tstatic var _double_of_bytes = neko.Lib.load(\"std\",\"double_of_bytes\",2);\n\t\tstatic var _float_bytes = neko.Lib.load(\"std\",\"float_bytes\",2);\n\t\tstatic var _double_bytes = neko.Lib.load(\"std\",\"double_bytes\",2);\n\t\t#end\n\t#elseif flash\n\t\tstatic var helper = {\n\t\t\tvar b = new flash.utils.ByteArray();\n\t\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t\tb;\n\t\t}\n\t#elseif php\n\t\tstatic var isLittleEndian : Bool = untyped __call__('unpack','S','\\x01\\x00')[1] == 1;\n\t#else\n\t\tstatic inline var LN2 = 0.6931471805599453; // Math.log(2)\n\t#end\n\n\t#if neko_v21 inline #end\n\tpublic static function i32ToFloat( i : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itof(i,false);\n\t\t\t#else\n\t\t\tvar helper = helperf.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperf.value = helper = neko.NativeString.alloc(4);\n\t\t\tuntyped $sset(helper,0,i&0xFF);\n\t\t\tuntyped $sset(helper,1,(i>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(i>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,i>>>24);\n\t\t\treturn _float_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32_as_float32(i);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = i;\n\t\t\t} else {\n\t\t\t\thelper.i = ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.intBitsToFloat(i);\n\t\t#elseif php\n\t\t\treturn untyped  __call__('unpack', 'f', __call__('pack', 'l', i))[1];\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(i);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readFloat();\n\t\t#else\n\t\t\tvar sign = 1 - ((i >>> 31) << 1);\n\t\t\tvar exp = (i >>> 23) & 0xFF;\n\t\t\tvar sig = i & 0x7FFFFF;\n\t\t\tif( sig == 0 && exp == 0 )\n\t\t\t\treturn 0.0;\n\t\t\treturn sign*(1 + Math.pow(2, -23)*sig) * Math.pow(2, exp-127);\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function floatToI32( f : Float ) : Int {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $ftoi(f,false);\n\t\t\t#else\n\t\t\tvar r = _float_bytes(f,false);\n\t\t\treturn untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_float32_as_le_int32(f);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(f);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\treturn ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.floatToRawIntBits(f);\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeFloat(f);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readUnsignedInt();\n\t\t#elseif php\n\t\t\treturn untyped __call__('unpack','l',__call__('pack', 'f', f))[1];\n\t\t#else\n\t\t\tif( f == 0 ) return 0;\n\t\t\tvar af = f < 0 ? -f : f;\n\t\t\tvar exp = Math.floor(Math.log(af) / LN2);\n\t\t\tif( exp < -127 ) exp = -127 else if( exp > 128 ) exp = 128;\n\t\t\tvar sig = Math.round((af / Math.pow(2, exp) - 1) * 0x800000) & 0x7FFFFF;\n\t\t\treturn (f < 0 ? 0x80000000 : 0) | ((exp + 127) << 23) | sig;\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function i64ToDouble( low : Int, high : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itod(low,high,false);\n\t\t\t#else\n\t\t\tvar helper = helperd.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperd.value = helper = neko.NativeString.alloc(8);\n\t\t\tuntyped $sset(helper,0,low&0xFF);\n\t\t\tuntyped $sset(helper,1,(low>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(low>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,low>>>24);\n\t\t\tuntyped $sset(helper,4,high&0xFF);\n\t\t\tuntyped $sset(helper,5,(high>>8)&0xFF);\n\t\t\tuntyped $sset(helper,6,(high>>16)&0xFF);\n\t\t\tuntyped $sset(helper,7,high>>>24);\n\t\t\treturn _double_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32s_as_float64(low,high);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = haxe.Int64.make(high,low);\n\t\t\t} else {\n\t\t\t\tvar i1 = high,\n\t\t\t\t    i2 = low;\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\t\t\t\thelper.i = haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.longBitsToDouble( Int64.make(high,low) );\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(low);\n\t\t\thelper.writeUnsignedInt(high);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readDouble();\n\t\t#elseif php\n\t\t\treturn untyped  __call__('unpack', 'd', __call__('pack', 'ii', isLittleEndian ? low : high, isLittleEndian ? high : low))[1];\n\t\t#else\n\t\t\tvar sign = 1 - ((high >>> 31) << 1);\n\t\t\tvar exp = ((high >> 20) & 0x7FF) - 1023;\n\t\t\tvar sig = (high&0xFFFFF) * 4294967296. + (low>>>31) * 2147483648. + (low&0x7FFFFFFF);\n\t\t\tif( sig == 0 && exp == -1023 )\n\t\t\t\treturn 0.0;\n\t\t\treturn sign*(1.0 + Math.pow(2, -52)*sig) * Math.pow(2, exp);\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns an Int64 representing the bytes representation of the double precision IEEE float value.\n\t\tWARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.\n\t\tWe still ensure that this is safe to use in a multithread environment\n\t**/\n\tpublic static function doubleToI64( v : Float ) : Int64 {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\tvar helper = helpers.value;\n\t\t\tif( helper == null ) {\n\t\t\t\thelpers.value = helper = neko.NativeArray.alloc(2);\n\t\t\t\thelper[0] = neko.NativeArray.alloc(2);\n\t\t\t\thelper[1] = haxe.Int64.ofInt(0);\n\t\t\t}\n\t\t\tvar i64 : haxe.Int64 = helper[1], int2 = helper[0];\n\t\t\tuntyped $dtoi(v,int2,false);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(int2[0]);\n\t\t\t\ti64.set_high(int2[1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#else\n\t\t\tvar r = _double_bytes(v,false), i64 = i64tmp.value;\n\t\t\tif( i64 == null )\n\t\t\t\ti64 = i64tmp.value = haxe.Int64.ofInt(0);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24));\n\t\t\t\ti64.set_high(untyped $sget(r,4) | ($sget(r,5)<<8) | ($sget(r,6)<<16) | ($sget(r,7)<<24));\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn Int64.make(untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_high(v),\n\t\t\t\t               untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_low(v) );\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.doubleToRawLongBits(v);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(v);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\tvar i1 = haxe.Int64.getHigh(i),\n\t\t\t\t    i2 = haxe.Int64.getLow(i);\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\n\t\t\t\treturn haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeDouble(v);\n\t\t\thelper.position = 0;\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(cast helper.readUnsignedInt());\n\t\t\t\ti64.set_high(cast helper.readUnsignedInt());\n\t\t\t}\n\t\t\treturn i64;\n\t\t#elseif php\n\t\t\tvar a = untyped __call__('unpack',isLittleEndian ? 'V2' : 'N2',__call__('pack', 'd', v));\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(a[isLittleEndian ? 1 : 2]);\n\t\t\t\ti64.set_high(a[isLittleEndian ? 2 : 1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t#else\n\t\t\tvar i64 = i64tmp;\n\t\t\tif( v == 0 ) {\n\t\t\t\t@:privateAccess {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar av = v < 0 ? -v : v;\n\t\t\t\tvar exp = Math.floor(Math.log(av) / LN2);\n\t\t\t\tvar sig = Math.fround(((av / Math.pow(2, exp)) - 1) * 4503599627370496.); // 2^52\n\t\t\t\tvar sig_l = Std.int(sig);\n\t\t\t\tvar sig_h = Std.int(sig / 4294967296.0);\n\t\t\t\t@:privateAccess {\n\t\t\t\t\ti64.set_low(sig_l);\n\t\t\t\t\ti64.set_high((v < 0 ? 0x80000000 : 0) | ((exp + 1023) << 20) | sig_h);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn i64;\n\t\t#end\n\t}\n\n}\n\n#if cs\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class SingleHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:Int;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Single;\n\n\tpublic function new(f:Single)\n\t{\n\t\tthis.i = 0;\n\t\tthis.f = f;\n\t}\n}\n\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class FloatHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:haxe.Int64;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Float;\n\n\tpublic function new(f:Float)\n\t{\n\t\tthis.i = haxe.Int64.ofInt(0);\n\t\tthis.f = f;\n\t}\n}\n\n#end\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tThis class provides a convenient way of working with paths. It supports the\n\tcommon path formats:\n\n\t- directory1/directory2/filename.extension\n\t- directory1\\directory2\\filename.excention\n**/\nclass Path {\n\n\t/**\n\t\tThe directory.\n\n\t\tThis is the leading part of the path that is not part of the file name\n\t\tand the extension.\n\n\t\tDoes not end with a `/` or `\\` separator.\n\n\t\tIf the path has no directory, the value is null.\n\t**/\n\tpublic var dir : String;\n\n\t/**\n\t\tThe file name.\n\n\t\tThis is the part of the part between the directory and the extension.\n\n\t\tIf there is no file name, e.g. for \".htaccess\" or \"/dir/\", the value\n\t\tis the empty String \"\".\n\t**/\n\tpublic var file : String;\n\n\t/**\n\t\tThe file extension.\n\n\t\tIt is separated from the file name by a dot. This dot is not part of\n\t\tthe extension.\n\n\t\tIf the path has no extension, the value is null.\n\t**/\n\tpublic var ext : String;\n\n\t/**\n\t\tTrue if the last directory separator is a backslash, false otherwise.\n\t**/\n\tpublic var backslash : Bool;\n\n\t/**\n\t\tCreates a new Path instance by parsing `path`.\n\n\t\tPath information can be retrieved by accessing the dir, file and ext\n\t\tproperties.\n\t**/\n\tpublic function new( path : String ) {\n\t\tswitch (path) {\n\t\t\tcase \".\" | \"..\":\n\t\t\t\tdir = path;\n\t\t\t\tfile = \"\";\n\t\t\t\treturn;\n\t\t}\n\t\tvar c1 = path.lastIndexOf(\"/\");\n\t\tvar c2 = path.lastIndexOf(\"\\\\\");\n\t\tif( c1 < c2 ) {\n\t\t\tdir = path.substr(0,c2);\n\t\t\tpath = path.substr(c2+1);\n\t\t\tbackslash = true;\n\t\t} else if( c2 < c1 ) {\n\t\t\tdir = path.substr(0,c1);\n\t\t\tpath = path.substr(c1+1);\n\t\t} else\n\t\t\tdir = null;\n\t\tvar cp = path.lastIndexOf(\".\");\n\t\tif( cp != -1 ) {\n\t\t\text = path.substr(cp+1);\n\t\t\tfile = path.substr(0,cp);\n\t\t} else {\n\t\t\text = null;\n\t\t\tfile = path;\n\t\t}\n\t}\n\n\t/**\n\t\tReturns a String representation of `this` path.\n\n\t\tIf `this.backslash` is true, backslash is used as directory separator,\n\t\totherwise slash is used. This only affects the separator between\n\t\t`this.dir` and `this.file`.\n\n\t\tIf `this.directory` or `this.extension` is null, their representation\n\t\tis the empty String \"\".\n\t**/\n\tpublic function toString() {\n\t\treturn (if( dir == null ) \"\" else dir + if( backslash ) \"\\\\\" else \"/\") + file + (if( ext == null ) \"\" else \".\" + ext);\n\t}\n\n\t/**\n\t\tReturns the String representation of `path` without the file extension.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function withoutExtension( path : String ) {\n\t\tvar s = new Path(path);\n\t\ts.ext = null;\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns the String representation of `path` without the directory.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function withoutDirectory( path ) {\n\t\tvar s = new Path(path);\n\t\ts.dir = null;\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns the directory of `path`.\n\n\t\tIf the directory is null, the empty String \"\" is returned.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function directory( path ) {\n\t\tvar s = new Path(path);\n\t\tif( s.dir == null )\n\t\t\treturn \"\";\n\t\treturn s.dir;\n\t}\n\n\t/**\n\t\tReturns the extension of `path`.\n\n\t\tIf the extension is null, the empty String \"\" is returned.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function extension( path ) {\n\t\tvar s = new Path(path);\n\t\tif( s.ext == null )\n\t\t\treturn \"\";\n\t\treturn s.ext;\n\t}\n\n\t/**\n\t\tReturns a String representation of `path` where the extension is `ext`.\n\n\t\tIf `path` has no extension, `ext` is added as extension.\n\n\t\tIf `path` or `ext` are null, the result is unspecified.\n\t**/\n\tpublic static function withExtension( path, ext ) {\n\t\tvar s = new Path(path);\n\t\ts.ext = ext;\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tJoins all paths in `paths` together.\n\n\t\tIf `paths` is empty, the empty String `\"\"` is returned. Otherwise the\n\t\tpaths are joined with a slash between them.\n\n\t\tIf `paths` is null, the result is unspecified.\n\t**/\n\tpublic static function join(paths:Array<String>) : String {\n\t\tvar paths = paths.filter(function(s) return s != null && s != \"\");\n\t\tif (paths.length == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tvar path = paths[0];\n\t\tfor (i in 1...paths.length) {\n\t\t\tpath = addTrailingSlash(path);\n\t\t\tpath += paths[i];\n\t\t}\n\t\treturn normalize(path);\n\t}\n\n\t/**\n\t\tNormalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').\n\n\t\tAlso replaces backslashes \\ with slashes / and afterwards turns\n\t\tmultiple slashes into a single one.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function normalize(path : String) : String {\n\t\tvar slash = '/';\n\t\tpath = path.split(\"\\\\\").join(\"/\");\n\t\tif( path == null || path == slash ) {\n\t\t\treturn slash;\n\t\t}\n\n\t\tvar target = [];\n\n\t\tfor( token in path.split(slash) ) {\n\t\t\tif(token == '..' && target.length > 0 && target[target.length-1] != \"..\") {\n\t\t\t\ttarget.pop();\n\t\t\t} else if(token != '.') {\n\t\t\t\ttarget.push(token);\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = target.join(slash);\n\t\tvar regex = ~/([^:])\\/+/g;\n\t\tvar result = regex.replace(tmp, \"$1\" +slash);\n\t\tvar acc = new StringBuf();\n\t\tvar colon = false;\n\t\tvar slashes = false;\n\t\tfor (i in 0...tmp.length) {\n\t\t\tswitch (tmp.charCodeAt(i)) {\n\t\t\t\tcase \":\".code:\n\t\t\t\t\tacc.add(\":\");\n\t\t\t\t\tcolon = true;\n\t\t\t\tcase \"/\".code if (colon == false):\n\t\t\t\t\tslashes = true;\n\t\t\t\tcase i:\n\t\t\t\t\tcolon = false;\n\t\t\t\t\tif (slashes) {\n\t\t\t\t\t\tacc.add(\"/\");\n\t\t\t\t\t\tslashes = false;\n\t\t\t\t\t}\n\t\t\t\t\tacc.add(String.fromCharCode(i));\n\t\t\t}\n\t\t}\n\t\tvar result = acc.toString();\n\t\treturn result;\n\t}\n\n\t/**\n\t\tAdds a trailing slash to `path`, if it does not have one already.\n\n\t\tIf the last slash in `path` is a backslash, a backslash is appended to\n\t\t`path`.\n\n\t\tIf the last slash in `path` is a slash, or if no slash is found, a slash\n\t\tis appended to `path`. In particular, this applies to the empty String\n\t\t\"\".\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function addTrailingSlash( path : String ) : String {\n\t\tif (path.length == 0)\n\t\t\treturn \"/\";\n\t\tvar c1 = path.lastIndexOf(\"/\");\n\t\tvar c2 = path.lastIndexOf(\"\\\\\");\n\t\treturn if ( c1 < c2 ) {\n\t\t\tif (c2 != path.length - 1) path + \"\\\\\";\n\t\t\telse path;\n\t\t} else {\n\t\t\tif (c1 != path.length - 1) path + \"/\";\n\t\t\telse path;\n\t\t}\n\t}\n\n\t/**\n\t\tRemoves trailing slashes from `path`.\n\n\t\tIf `path` does not end with a `/` or `\\`, `path` is returned unchanged.\n\n\t\tOtherwise the substring of `path` excluding the trailing slashes or\n\t\tbackslashes is returned.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\t@:require(haxe_ver >= 3.1)\n\tpublic static function removeTrailingSlashes ( path : String ) : String {\n\t\twhile (true) {\n\t\t\tswitch(path.charCodeAt(path.length - 1)) {\n\t\t\t\tcase '/'.code | '\\\\'.code: path = path.substr(0, -1);\n\t\t\t\tcase _: break;\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t\tReturns true if the path is an absolute path, and false otherwise.\n\t**/\n\t@:require(haxe_ver >= 3.2)\n\tpublic static function isAbsolute ( path : String ) : Bool {\n\t\tif (StringTools.startsWith(path, '/')) return true;\n\t\tif (path.charAt(1) == ':') return true;\n\t\treturn false;\n\t}\n\n\tprivate static function unescape( path : String ) : String {\n\t\tvar regex = ~/-x([0-9][0-9])/g;\n\t\treturn regex.map(path, function(regex) return String.fromCharCode(Std.parseInt(regex.matched(1))));\n\t}\n\n\tprivate static function escape( path : String, allowSlashes : Bool = false ) : String {\n\t\tvar regex = allowSlashes ? ~/[^A-Za-z0-9_\\/\\\\\\.]/g : ~/[^A-Za-z0-9_\\.]/g;\n\t\treturn regex.map(path, function(v) return '-x' + v.matched(0).charCodeAt(0));\n\t}\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js;\n\nprivate class HaxeError extends js.Error {\n\n\tvar val:Dynamic;\n\n\tpublic function new(val:Dynamic) untyped {\n\t\tsuper();\n\t\tthis.val = __define_feature__(\"js.Boot.HaxeError\", val);\n\t\tthis.message = String(val);\n\t\tif (js.Error.captureStackTrace) js.Error.captureStackTrace(this, HaxeError);\n\t}\n}\n\n@:dox(hide)\nclass Boot {\n\n\tprivate static function __unhtml(s : String) {\n\t\treturn s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t}\n\n\tprivate static function __trace(v,i : haxe.PosInfos) {\n\t\tuntyped {\n\t\t\tvar msg = if( i != null ) i.fileName+\":\"+i.lineNumber+\": \" else \"\";\n\t\t\t#if jsfl\n\t\t\tmsg += __string_rec(v,\"\");\n\t\t\tfl.trace(msg);\n\t\t\t#else\n\t\t\tmsg += __string_rec(v, \"\");\n\t\t\tif( i != null && i.customParams != null )\n\t\t\t\tfor( v in i.customParams )\n\t\t\t\t\tmsg += \",\" + __string_rec(v, \"\");\n\t\t\tvar d;\n\t\t\tif( __js__(\"typeof\")(document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null )\n\t\t\t\td.innerHTML += __unhtml(msg)+\"<br/>\";\n\t\t\telse if( __js__(\"typeof console\") != \"undefined\" && __js__(\"console\").log != null )\n\t\t\t\t__js__(\"console\").log(msg);\n\t\t\t#end\n\t\t}\n\t}\n\n\tprivate static function __clear_trace() {\n\t\tuntyped {\n\t\t\t#if jsfl\n\t\t\tfl.outputPanel.clear();\n\t\t\t#else\n\t\t\tvar d = document.getElementById(\"haxe:trace\");\n\t\t\tif( d != null )\n\t\t\t\td.innerHTML = \"\";\n\t\t\t#end\n\t\t}\n\t}\n\n\tstatic inline function isClass(o:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\tstatic function getClass(o:Dynamic) : Dynamic {\n\t\tif (Std.is(o, Array))\n\t\t\treturn Array;\n\t\telse {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o,s:String) {\n\t\tuntyped {\n\t\t\tif( o == null )\n\t\t\t    return \"null\";\n\t\t\tif( s.length >= 5 )\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = __js__(\"typeof(o)\");\n\t\t\tif( t == \"function\" && (isClass(o) || isEnum(o)) )\n\t\t\t\tt = \"object\";\n\t\t\tswitch( t ) {\n\t\t\tcase \"object\":\n\t\t\t\tif( __js__(\"o instanceof Array\") ) {\n\t\t\t\t\tif( o.__enum__ ) {\n\t\t\t\t\t\tif( o.length == 2 )\n\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\tvar str = o[0]+\"(\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor( i in 2...o.length ) {\n\t\t\t\t\t\t\tif( i != 2 )\n\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i],s);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tstr += __string_rec(o[i],s);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t}\n\t\t\t\t\tvar l = o.length;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tfor( i in 0...l )\n\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\")+__string_rec(o[i],s);\n\t\t\t\t\tstr += \"]\";\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\tvar tostr;\n\t\t\t\ttry {\n\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t} catch( e : Dynamic ) {\n\t\t\t\t\t// strange error on IE\n\t\t\t\t\treturn \"???\";\n\t\t\t\t}\n\t\t\t\tif( tostr != null && tostr != __js__(\"Object.toString\") && __typeof__(tostr) == \"function\" ) {\n\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\tif( s2 != \"[object Object]\")\n\t\t\t\t\t\treturn s2;\n\t\t\t\t}\n\t\t\t\tvar k : String = null;\n\t\t\t\tvar str = \"{\\n\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t__js__(\"for( var k in o ) {\");\n\t\t\t\t\tif( hasp && !o.hasOwnProperty(k) )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\" )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( str.length != 2 )\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \"+__string_rec(o[k],s);\n\t\t\t\t__js__(\"}\");\n\t\t\t\ts = s.substring(1);\n\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\treturn str;\n\t\t\tcase \"function\":\n\t\t\t\treturn \"<function>\";\n\t\t\tcase \"string\":\n\t\t\t\treturn o;\n\t\t\tdefault:\n\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function __interfLoop(cc : Dynamic,cl : Dynamic) {\n\t\tif( cc == null )\n\t\t\treturn false;\n\t\tif( cc == cl )\n\t\t\treturn true;\n\t\tvar intf : Dynamic = cc.__interfaces__;\n\t\tif( intf != null )\n\t\t\tfor( i in 0...intf.length ) {\n\t\t\t\tvar i : Dynamic = intf[i];\n\t\t\t\tif( i == cl || __interfLoop(i,cl) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\treturn __interfLoop(cc.__super__,cl);\n\t}\n\n\t@:ifFeature(\"typed_catch\") private static function __instanceof(o : Dynamic,cl : Dynamic) {\n\t\tif( cl == null )\n\t\t\treturn false;\n\t\tswitch( cl ) {\n\t\tcase Int:\n\t\t\treturn (untyped __js__(\"(o|0) === o\"));\n\t\tcase Float:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\";\n\t\tcase Bool:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"boolean\";\n\t\tcase String:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"string\";\n\t\tcase Array:\n\t\t\treturn (untyped __js__(\"(o instanceof Array)\")) && o.__enum__ == null;\n\t\tcase Dynamic:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tif( o != null ) {\n\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\tif( (untyped __js__(\"typeof\"))(cl) == \"function\" ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif( __interfLoop(getClass(o),cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if ( (untyped __js__(\"typeof\"))(cl) == \"object\" && __isNativeObj(cl) ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// do not use isClass/isEnum here\n\t\t\tuntyped __feature__(\"Class.*\",if( cl == Class && o.__name__ != null ) return true);\n\t\t\tuntyped __feature__(\"Enum.*\",if( cl == Enum && o.__ename__ != null ) return true);\n\t\t\treturn o.__enum__ == cl;\n\t\t}\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o : Dynamic, t : Dynamic) {\n\t\tif (__instanceof(o, t)) return o;\n\t\telse throw \"Cannot cast \" +Std.string(o) + \" to \" +Std.string(t);\n\t}\n\n\tstatic var __toStr = untyped __js__(\"{}.toString\");\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name = untyped __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn untyped js.Lib.global[name];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2015 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla/HTMLCanvasElement.webidl line 17:0. Do not edit!\n\npackage js.html;\n\n@:native(\"HTMLCanvasElement\")\nextern class CanvasElement extends Element\n{\n\tvar width : Int;\n\tvar height : Int;\n\t\n\t/** @throws DOMError */\n\tfunction getContext( contextId : String, ?contextOptions : Dynamic ) : Dynamic/*MISSING nsISupports*/;\n\t/** @throws DOMError */\n\tfunction toDataURL( ?type : String = \"\", ?encoderOptions : Dynamic ) : String;\n\t/** @throws DOMError */\n\tfunction toBlob( callback : Blob -> Void, ?type : String = \"\", ?encoderOptions : Dynamic ) : Void;\n\t\n\t/** Shorthand for getting a CanvasRenderingContext2D. */\n\tinline function getContext2d( ?attribs : {} ) : CanvasRenderingContext2D {\n\t\treturn cast getContext(\"2d\", attribs);\n\t}\n\t/** Shorthand for getting a js.html.webgl.RenderingContext. */\n\tinline function getContextWebGL( ?attribs : js.html.webgl.ContextAttributes ) : js.html.webgl.RenderingContext {\n\t\treturn CanvasUtil.getContextWebGL(this, attribs);\n\t}\n}\n\nprivate class CanvasUtil {\n\tpublic static function getContextWebGL( canvas :CanvasElement, attribs :{} ) {\n\t\tfor (name in [\"webgl\", \"experimental-webgl\"]) {\n\t\t\tvar ctx = canvas.getContext(name, attribs);\n\t\t\tif (ctx != null) return ctx;\n\t\t}\n\t\treturn null;\n\t}\n}\n","/*\n * Copyright (C)2005-2014 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n@:keep\nclass ArrayBuffer {\n\n\tpublic var byteLength : Int;\n\tvar a : Array<Int>;\n\t\n\tpublic function new( ?a : Dynamic ) {\n\t\tif( Std.is(a,Array) ) {\n\t\t\tthis.a = a;\n\t\t\tbyteLength = a.length;\n\t\t} else {\n\t\t\tvar len : Int = a;\n\t\t\tthis.a = [];\n\t\t\tfor( i in 0...len )\n\t\t\t\tthis.a[i] = 0;\n\t\t\tbyteLength = len;\n\t\t}\n\t}\n\t\n\tpublic function slice(begin,?end) {\n\t\treturn new ArrayBuffer(a.slice(begin,end));\n\t}\n\t\n\tstatic function sliceImpl(begin,?end) {\n\t\tvar u = new js.html.Uint8Array(untyped __js__('this'), begin, end == null ? null : end - begin);\n        var result = new js.html.ArrayBuffer(u.byteLength);\n        var resultArray = new js.html.Uint8Array(result);\n\t\tresultArray.set(u);\n        return result;\n\t}\n\n\tstatic function __init__() untyped {\n\t\tvar ArrayBuffer = js.Lib.global.ArrayBuffer || js.html.compat.ArrayBuffer;\n\t\tif( ArrayBuffer.prototype.slice == null ) ArrayBuffer.prototype.slice = sliceImpl; // IE10\n\t}\n}","/*\n * Copyright (C)2005-2014 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\nimport haxe.io.Error;\n\n@:keep\n@:access(js.html.compat.ArrayBuffer)\nclass DataView {\n\n\tvar buf : ArrayBuffer;\n\tvar offset : Int;\n\tvar length : Int;\n\n\tpublic function new( buffer : ArrayBuffer, ?byteOffset : Int, ?byteLength : Int ) : Void {\n\t\tthis.buf = buffer;\n\t\tthis.offset = byteOffset == null ? 0 : byteOffset;\n\t\tthis.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;\n\t\tif( offset < 0 || length < 0 || offset+length > buffer.byteLength )\n\t\t\tthrow OutsideBounds;\n\t}\n\n\tpublic function getInt8( byteOffset : Int ) : Int {\n\t\tvar v = buf.a[offset + byteOffset];\n\t\treturn v >= 0x80 ? v - 256 : v;\n\t}\n\n\tpublic function getUint8( byteOffset : Int ) : Int {\n\t\treturn buf.a[offset + byteOffset];\n\t}\n\n\tpublic function getInt16( byteOffset : Int, ?littleEndian : Bool ) : Int {\n\t\tvar v = getUint16(byteOffset, littleEndian);\n\t\treturn v >= 0x8000 ? v - 65536 : v;\n\t}\n\n\tpublic function getUint16( byteOffset : Int, ?littleEndian : Bool ) : Int {\n\t\treturn littleEndian ? buf.a[offset + byteOffset] | (buf.a[offset + byteOffset + 1] << 8) : (buf.a[offset + byteOffset]<<8) | buf.a[offset + byteOffset + 1];\n\t}\n\n\tpublic function getInt32( byteOffset : Int, ?littleEndian : Bool ) : Int {\n\t\tvar p = offset + byteOffset;\n\t\tvar a = buf.a[p++];\n\t\tvar b = buf.a[p++];\n\t\tvar c = buf.a[p++];\n\t\tvar d = buf.a[p++];\n\t\treturn littleEndian ? a | (b<<8) | (c<<16) | (d<<24) : d | (c << 8) | (b << 16) | (a << 24);\n\t}\n\n\tpublic function getUint32( byteOffset : Int, ?littleEndian : Bool ) : Int {\n\t\tvar v = getInt32(byteOffset, littleEndian);\n\t\treturn v < 0 ? cast (v + 4294967296.) : v;\n\t}\n\n\tpublic function getFloat32( byteOffset : Int, ?littleEndian : Bool ) : Float {\n\t\treturn haxe.io.FPHelper.i32ToFloat(getInt32(byteOffset,littleEndian));\n\t}\n\n\tpublic function getFloat64( byteOffset : Int, ?littleEndian : Bool ) : Float {\n\t\tvar a = getInt32(byteOffset, littleEndian);\n\t\tvar b = getInt32(byteOffset + 4, littleEndian);\n\t\treturn haxe.io.FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);\n\t}\n\n\tpublic function setInt8( byteOffset : Int, value : Int ) : Void {\n\t\tbuf.a[byteOffset + offset] = (value < 0) ? (value + 128) & 0xFF : value & 0xFF;\n\t}\n\n\tpublic function setUint8( byteOffset : Int, value : Int ) : Void {\n\t\tbuf.a[byteOffset + offset] = value & 0xFF;\n\t}\n\n\tpublic function setInt16( byteOffset : Int, value : Int, ?littleEndian : Bool ) : Void {\n\t\tsetUint16(byteOffset, value < 0 ? value + 65536 : value, littleEndian);\n\t}\n\n\tpublic function setUint16( byteOffset : Int, value : Int, ?littleEndian : Bool ) : Void {\n\t\tvar p = byteOffset + offset;\n\t\tif( littleEndian ) {\n\t\t\tbuf.a[p] = value&0xFF;\n\t\t\tbuf.a[p++] = (value>>8) & 0xFF;\n\t\t} else {\n\t\t\tbuf.a[p++] = (value>>8) & 0xFF;\n\t\t\tbuf.a[p] = value&0xFF;\n\t\t}\n\t}\n\n\tpublic function setInt32( byteOffset : Int, value : Int, ?littleEndian : Bool ) : Void {\n\t\tsetUint32(byteOffset, value, littleEndian);\n\t}\n\n\tpublic function setUint32( byteOffset : Int, value : Int, ?littleEndian : Bool ) : Void {\n\t\tvar p = byteOffset + offset;\n\t\tif( littleEndian ) {\n\t\t\tbuf.a[p++] = value & 0xFF;\n\t\t\tbuf.a[p++] = (value>>8) & 0xFF;\n\t\t\tbuf.a[p++] = (value>>16) & 0xFF;\n\t\t\tbuf.a[p++] = value >>> 24;\n\t\t} else {\n\t\t\tbuf.a[p++] = value >>> 24;\n\t\t\tbuf.a[p++] = (value>>16) & 0xFF;\n\t\t\tbuf.a[p++] = (value>>8) & 0xFF;\n\t\t\tbuf.a[p++] = value & 0xFF;\n\t\t}\n\t}\n\n\tpublic function setFloat32( byteOffset : Int, value : Float, ?littleEndian : Bool ) : Void {\n\t\tsetUint32(byteOffset, haxe.io.FPHelper.floatToI32(value),littleEndian);\n\t}\n\n\tpublic function setFloat64( byteOffset : Int, value : Float, ?littleEndian : Bool ) : Void {\n\t\tvar i64 = haxe.io.FPHelper.doubleToI64(value);\n\t\tif( littleEndian ) {\n\t\t\tsetUint32(byteOffset, i64.low);\n\t\t\tsetUint32(byteOffset, i64.high);\n\t\t} else {\n\t\t\tsetUint32(byteOffset, i64.high);\n\t\t\tsetUint32(byteOffset, i64.low);\n\t\t}\n\t}\n\n\tstatic function __init__() {\n\t\tvar DataView = untyped js.Lib.global.DataView || js.html.compat.DataView;\n\t}\n\n}","/*\n * Copyright (C)2005-2014 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n@:keep\nclass Uint8Array {\n\n\tstatic var BYTES_PER_ELEMENT = 1;\n\n\tstatic function _new( ?arg1 : Dynamic, ?offset : Int, ?length : Int ) : Dynamic {\n\t\tvar arr;\n\t\tif( untyped __typeof__(arg1) == 'number' ) {\n\t\t\tarr = new Array();\n\t\t\tfor( i in 0...arg1 )\n\t\t\t\tarr[i] = 0;\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(arr);\n\t\t\t}\n\t\t} else if( Std.is(arg1,ArrayBuffer) ) {\n\t\t\tvar buffer : ArrayBuffer = arg1;\n\t\t\tif( offset == null ) offset = 0;\n\t\t\tif( length == null ) length = buffer.byteLength - offset;\n\t\t\tif( offset == 0 )\n\t\t\t\tarr = cast @:privateAccess buffer.a;\n\t\t\telse\n\t\t\t\t// here we are losing the fact that we should reference the same data,\n\t\t\t\t// but I don't see another way to have this behaviour while keeping [] access\n\t\t\t\tarr = cast @:privateAccess buffer.a.slice(offset, offset+length);\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = offset;\n\t\t\t\tarr.buffer = buffer;\n\t\t\t}\n\t\t} else if( Std.is(arg1, Array) ) {\n\t\t\tarr = (arg1 : Array<Int>).copy();\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(arr);\n\t\t\t}\n\t\t} else\n\t\t\tthrow \"TODO \"+arg1;\n\t\tuntyped {\n\t\t\tarr.subarray = _subarray;\n\t\t\tarr.set = _set;\n\t\t}\n\t\treturn arr;\n\t}\n\n\tstatic function _set( ?arg : Dynamic, ?offset : Int ) {\n\t\tvar t : Dynamic = untyped __js__(\"this\");\n\t\tif( Std.is(arg.buffer,ArrayBuffer) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( arg.byteLength + offset > t.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...arg.byteLength )\n\t\t\t\tt[i + offset] = a[i];\n\t\t} else if( Std.is(arg,Array) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( a.length + offset > t.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...a.length )\n\t\t\t\tt[i + offset] = a[i];\n\t\t} else\n\t\t\tthrow \"TODO\";\n\t}\n\n\tstatic function _subarray( start : Int, ?end : Int ) {\n\t\tvar t : Dynamic = untyped __js__(\"this\");\n\t\tvar a = _new(t.slice(start,end));\n\t\ta.byteOffset = start;\n\t\treturn a;\n\t}\n\n\tstatic function __init__() {\n\t\tvar Uint8Array = untyped js.Lib.global.Uint8Array || _new;\n\t}\n\n}","package luxe;\n\nimport luxe.Core;\n\nimport luxe.Log._debug;\n\nclass Audio {\n\n    @:noCompletion public var core : Core;\n\n    @:noCompletion public function new( _core:Core ) {\n\n        core = _core;\n\n    } //new\n\n    @:noCompletion public function init() {\n        _debug('\\t audio initialized.');\n    } //init\n\n    @:noCompletion public function destroy() {\n        _debug('\\t audio shut down.');\n    } //destroy\n\n        /**\n            Create a named audio reference, with optional streaming flag   \n            **id** The asset file id from which the audio is loaded/streamed.   \n            **name** The name to assign the sound for the named api    \n            **streaming** Whether or not to stream the audio, default `false`   \n            **returns** The `Sound` instance, if needed. can be manipulated through named api as well.\n        */\n    public function create( _id:String, ?_name:String = '', ?_streaming:Bool = false ) : snow.api.Promise {\n        return core.app.audio.create( _id, _name, _streaming );\n    } //create\n\n    // wip alpha-2.0\n    @:noCompletion\n    public function create_from_bytes( ?_name:String = '', _bytes:snow.api.buffers.Uint8Array, _format:snow.types.Types.AudioFormatType ) : luxe.Sound {\n        return core.app.audio.create_from_bytes( _name, _bytes, _format);\n    } //create_from_bytes\n\n\n        /**\n            Destroy a named audio reference.\n            Use the reference directly with sound.destroy if you have an instance. */\n    public function uncreate( _name:String ) {\n        return core.app.audio.uncreate( _name );\n    } //uncreate\n\n        /** Add a manually created sound instance to the audio system.\n            Once added the regular named api should apply.\n            Do not add sounds returned from `create` calls. */\n    @:noCompletion public function add( sound:luxe.Sound ) {\n        return core.app.audio.add( sound );\n    }\n\n\n        /** Listen for an event on a named sound. `load` and `end` are valid */\n    public function on(_name:String, _event:String, _handler:luxe.Sound->Void) {\n        return core.app.audio.on(_name, _event, _handler);\n    } //on\n\n        /** Stop listening for an event on a named sound. See `on` */\n    public function off(_name:String, _event:String, _handler:luxe.Sound->Void) {\n        return core.app.audio.off(_name, _event, _handler);\n    } //off\n\n        /**\n            Fetch a named audio reference   \n            **name** The name to acquire audio reference   \n            **returns** The `Sound` instance\n        */\n    public function get( _name:String ) : luxe.Sound {\n        return core.app.audio.get(_name);\n    } //get\n\n        /**\n            Determine whether a named audio reference exists   \n            **name** The audio reference name to check   \n            **returns** true/false\n        */\n    public function exists( _name:String ) : Bool {\n        return get(_name) != null;\n    } //exists\n\n\n        /**\n            Loop a named audio reference indefinitely. Use `stop` if needed.   \n            **name** The audio reference name to loop   \n            **returns** nothing\n        */\n    public function loop( _name:String ) : Void {\n        return core.app.audio.loop(_name);\n    } //loop\n\n        /**\n            Stop a named audio reference from playing (or looping)   \n            **name** The audio reference name to stop   \n            **returns** nothing\n        */\n    public function stop( _name:String ) : Void {\n        return core.app.audio.stop(_name);\n    } //stop\n\n        /**\n            Play a named audio reference   \n            **name** The audio reference name to play   \n            **returns** nothing\n        */\n    public function play( _name:String ) {\n        return core.app.audio.play( _name );\n    } //play\n\n        /**\n            Pause a named audio reference   \n            **name** The audio reference name to pause   \n            **returns** nothing\n        */\n    public function pause( _name:String ) {\n        return core.app.audio.pause( _name );\n    } //pause\n\n\n        /** Toggle a sound instance by name, pausing the sound or resuming it */\n    public function toggle(_name:String) {\n        return core.app.audio.toggle(_name);\n    } //toggle\n\n        /**\n            get/set the volume of a named audio reference,   \n            leave the second argument empty for get   \n            **name** The audio reference name to adjust   \n            **volume** A new volume value\n        */\n    public function volume( _name:String, ?_volume:Float ) : Float {\n        return core.app.audio.volume(_name, _volume);\n    } //volume\n\n        /**\n            get/set the pan of a named audio reference,   \n            leave the second argument empty for get   \n            **name** The audio reference name to adjust   \n            **pan** A new pan value\n        */\n    public function pan( _name:String, ?_pan:Float ) : Float  {\n        return core.app.audio.pan(_name, _pan);\n    } //pan\n\n        /**\n            get/set the pitch of a named audio reference,   \n            leave the second argument empty for get   \n            **name** The audio reference name to adjust   \n            **pitch** A new pitch value\n        */\n    public function pitch( _name:String, ?_pitch:Float ) : Float {\n        return core.app.audio.pitch( _name, _pitch );\n    } //pitch\n        /**\n            get/set the position in `seconds` of a named audio reference,   \n            leave the second argument empty for get   \n            **name** The audio reference name to adjust   \n            **pan** A new pan value\n        */\n    public function position( _name:String, ?_position:Float ) : Float  {\n        return core.app.audio.position(_name, _position);\n    } //pan\n\n        /**\n            get the position in seconds of a named audio reference   \n            **name** The audio reference name to get   \n        */\n    public function duration( _name:String ) : Float {\n        return core.app.audio.duration( _name );\n    } //pitch\n\n    @:noCompletion public function process() {\n\n    } //process\n\n} //Audio\n","package luxe;\n\nimport luxe.Log.*;\nimport luxe.Rectangle;\nimport luxe.utils.Maths;\nimport luxe.Vector;\nimport luxe.Entity;\nimport luxe.tween.Actuate;\nimport luxe.tween.easing.Quad;\nimport phoenix.Camera.ProjectionType;\nimport phoenix.Quaternion;\n\nimport luxe.options.CameraOptions;\n\ntypedef ProjectionType = phoenix.Camera.ProjectionType;\n\n    /** A value to use when controlling the camera size property only. */\nenum SizeMode {\n\n        /** fit the size into the camera viewport (possible letter/pillar box) */\n    fit;\n        /** cover the viewport with the size (possible cropping) */\n    cover;\n        /** contain the size (stretch to fit the viewport)*/\n    contain;\n\n} //SizeMode\n\n    /** An entity based camera class */\nclass Camera extends Entity {\n\n        /** The viewport size for this camera, proxy to the view */\n    public var viewport (get,set) : Rectangle;\n        /** The center point of this camera, proxy to the view */\n    public var center (get,set) : Vector;\n        /** The current zoom value this camera can be set to, proxy to the view */\n    public var zoom (get,set) : Float;\n        /** The minimum zoom value this camera can be set to, proxy to the view */\n    public var minimum_zoom (get,set) : Float;\n\n        /** The virtual size of this camera. allows simple upscaling world coordinates, using `size_mode`. Note that this changes the view `scale` values and the `center` property. */\n    @:isVar public var size (get,set) : Vector;\n        /** When the size of the world is set using the `size` property, this controls how the scaling will apply. */\n    @:isVar public var size_mode (get,set) : SizeMode;\n\n        /** the view camera this entity wraps */\n    public var view : phoenix.Camera;\n        /** if set, the camera will not move outside of this region (world space) */\n    public var bounds : Rectangle;\n\n        /** the current shake vector amounts in x,y,z */\n    @:noCompletion public var shake_vector : Vector;\n        /** the last shake amount */\n    @:noCompletion public var shake_amount : Float;\n        /** if true, shake is busy happening */\n    @:noCompletion public var shaking : Bool = false;\n        /** the threshold cutoff for shaking */\n    @:noCompletion public var minimum_shake : Float = 0.1;\n\n    var update_view_pos : Vector;\n\n    var _size_factor : Vector;\n    var _final_pos : Vector;\n    var _rotation_radian : Vector;\n    var _rotation_cache : Quaternion;\n\n        /** create a new camera with the given options */\n    public function new( ?options:LuxeCameraOptions ) {\n\n            //cache for later\n        _size_factor = new Vector();\n        _rotation_radian = new Vector();\n        _rotation_cache = new Quaternion();\n        size_mode = SizeMode.fit;\n\n        var _name = 'untitled camera';\n\n        if(options != null) {\n            if(options.name != null) {\n                _name = options.name;\n                options.camera_name = '$_name.view';\n            }\n        } else {\n            options = {\n                no_scene : false\n            }\n        }\n\n            //create or assign the underlying camera view\n        view = def(options.view, new phoenix.Camera( options ));\n\n            //Init the entity part\n        super({\n            name : _name,\n            no_scene : options.no_scene\n        });\n\n            //Start with the transform\n        _final_pos = view.pos;\n\n    } //new\n\n    function get_viewport() : Rectangle {\n        return view.viewport;\n    } //get_viewport\n\n    function set_viewport( _v:Rectangle ) : Rectangle {\n        return view.viewport = _v;\n    } //set_viewport\n\n    function get_center() : Vector {\n        return view.center;\n    } //get_center\n\n    function set_center( _c:Vector ) : Vector {\n\n        pos = new Vector(_c.x - (viewport.w/2), _c.y - (viewport.h/2));\n        return view.center = _c;\n\n    } //set_center\n\n    function get_minimum_zoom() : Float {\n        return view.minimum_zoom;\n    } //get_minimum_zoom\n\n    function set_minimum_zoom( _m:Float ) : Float {\n        return view.minimum_zoom = _m;\n    } //set_minimum_zoom\n\n    function get_zoom() : Float {\n        return view.zoom;\n    } //get_zoom\n\n    function set_zoom( _z:Float ) : Float {\n\n            //assign the base zoom\n        view.zoom = _z;\n\n            //handle size mode scale factor\n        if(size != null) {\n            view.scale.x *= (1/_size_factor.x);\n            view.scale.y *= (1/_size_factor.y);\n        }\n\n        return view.zoom;\n\n    } //set_zoom\n\n    function get_size() : Vector {\n        return size;\n    } //get_size\n\n    function get_size_mode() : SizeMode {\n        return size_mode;\n    } //get_size\n\n    function set_size_mode( _m:SizeMode ) : SizeMode {\n\n        if(size_mode != null) {\n            size_mode = _m;\n            if(size != null) {\n                set_size( size );\n            }\n        }\n\n        return size_mode = _m;\n\n    } //get_size\n\n    var _connected = false;\n    function _onwindowsized( _event:luxe.Screen.WindowEvent ) {\n        if(size != null) {\n                //:todo: set_xy handlers on viewport etc\n                //:todo: disconnect on destroy when destroy exists for camera\n            viewport = new Rectangle(viewport.x, viewport.y, _event.event.x, _event.event.y );\n            set_size(size);\n        }\n    }\n\n    function set_size( _size:Vector ) : Vector {\n\n            //disable size\n        if( _size == null ) {\n            center = new Vector(viewport.w/2, viewport.h/2);\n            size = _size;\n            _size_factor.x = _size_factor.y = 1;\n            set_zoom(zoom);\n            _connected = false;\n            Luxe.off(Luxe.Ev.windowsized, _onwindowsized);\n            return size;\n        }\n\n        if(!_connected) {\n            Luxe.on(Luxe.Ev.windowsized, _onwindowsized);\n            _connected = true;\n        }\n\n            //setting the size is an explicit action,\n            //making the center point fixed to the middle of the size,\n            //and making the scale of the view a ratio between the viewport\n            //size and the actual \"world\" size given\n        var _ratio_x = viewport.w / _size.x;\n        var _ratio_y = viewport.h / _size.y;\n        var _shortest = Math.max( _ratio_x, _ratio_y );\n        var _longest = Math.min( _ratio_x, _ratio_y );\n\n        switch(size_mode) {\n\n            case fit:{\n                _ratio_x = _ratio_y = _longest;\n            }\n\n            case cover: {\n                _ratio_x = _ratio_y = _shortest;\n            }\n\n            case contain: {\n                //use actual size\n            }\n\n        } //size_mode\n\n            //assign the scale values\n        _size_factor.x = _ratio_x;\n        _size_factor.y = _ratio_y;\n\n        view.scale.x = 1/(_size_factor.x * zoom);\n        view.scale.y = 1/(_size_factor.y * zoom);\n\n            //set the center\n        center = new Vector( _size.x/2, _size.y/2 );\n\n            //return\n        return size = _size.clone();\n\n    } //set_size\n\n        /**Focus the camera on a specific point, for Ortho only.\n        Use `.target` for a focus in perspective */\n    public function focus( _p:Vector, _t:Float = 0.6, ?oncomplete:Void->Void=null ) {\n\n        Actuate.tween(view.center, _t, { x:_p.x, y:_p.y }, true )\n            .onComplete( oncomplete ).ease( Quad.easeInOut )\n            .onUpdate( function() {\n                transform.pos.set_xy(view.pos.x, view.pos.y);\n            });\n\n    } //focus\n\n        /** convert a screen point to world space for this camera. handles zoom, rotation, scale, etc */\n    public function screen_point_to_world( _vector:Vector ) : Vector {\n\n        return view.screen_point_to_world( _vector );\n\n    } //screen_point_to_world\n\n        /** convert a world point to screen space for this camera. handles zoom, rotation, scale, etc */\n    public function world_point_to_screen( _vector:Vector, ?_viewport:Rectangle=null ) : Vector {\n\n        return view.world_point_to_screen( _vector, _viewport );\n\n    } //world_point_to_screen\n\n    // var cnt = 0;\n    override function set_pos_from_transform(_pos:Vector) {\n\n        var vw = view.viewport.w;\n        var vh = view.viewport.h;\n        var hvw = vw/2;\n        var hvh = vh/2;\n\n        var _px = _pos.x; var _py = _pos.y;\n\n        if(bounds != null) {\n            if(_px < bounds.x)        _px = bounds.x;\n            if(_py < bounds.y)        _py = bounds.y;\n            if(_px+hvw > bounds.w-vw) _px = bounds.w-vw-hvw;\n            if(_py+hvh > bounds.h-vh) _py = bounds.h-vh-hvh;\n        }\n\n        var prev = _pos.ignore_listeners;\n            _pos.ignore_listeners = true;\n        _pos.set_xy(_px, _py);\n            _pos.ignore_listeners = prev;\n\n        super.set_pos_from_transform(_pos);\n\n            //flag for update\n        update_view_pos = _pos;\n\n\n    } //set_pos_from_transform\n\n    override function set_rotation_from_transform(_rotation:Quaternion) {\n\n        super.set_rotation_from_transform(_rotation);\n\n        if(view != null) {\n            view.rotation = _rotation;\n        }\n\n    } //set_scale_from_transform\n\n    override function set_scale_from_transform(_scale:Vector) {\n\n        super.set_scale_from_transform(_scale);\n\n        if(view != null) {\n            view.scale = _scale;\n        }\n\n    } //set_scale_from_transform\n\n        /** Shake the camera a given amount */\n    public function shake(amount:Float) {\n\n        shake_amount = amount;\n        shaking = true;\n\n    } //shake\n\n        //Called by the scene the camera belongs to, or manually if you want\n    @:noCompletion override public function update(dt:Float) {\n\n            //add camera shake\n        if(shaking) {\n\n                //start at our base position\n            _final_pos.set_xyz( transform.pos.x, transform.pos.y, transform.pos.z );\n\n                //get a random direction\n            shake_vector = Luxe.utils.geometry.random_point_in_unit_circle();\n\n                //apply the shake amount scale\n            shake_vector.x *= shake_amount;\n            shake_vector.y *= shake_amount;\n            shake_vector.z *= shake_amount;\n\n                //fade the shake down\n            shake_amount *= 0.9;\n\n                //stop when it's too low\n            if(shake_amount <= minimum_shake) {\n                shake_amount = 0;\n                shaking = false;\n            }\n\n                //add the shake to the final position and apply it to the view\n            _final_pos.set_xyz(_final_pos.x+shake_vector.x, _final_pos.y+shake_vector.y, _final_pos.z+shake_vector.z);\n\n                //tell it to update the view\n            update_view_pos = _final_pos;\n\n        } //shaking\n\n        if(update_view_pos != null && view != null) {\n            view.pos = update_view_pos.clone();\n            update_view_pos = null;\n        }\n\n    } //update\n\n} //Camera\n","package luxe;\n\nimport luxe.Quaternion;\nimport luxe.Vector;\nimport luxe.Transform;\nimport luxe.Input;\nimport luxe.Screen;\nimport luxe.Objects.ID;\nimport luxe.options.ComponentOptions;\n\nimport luxe.Log.log;\nimport luxe.Log._debug;\nimport luxe.Log._verbose;\n\n@:autoBuild(luxe.macros.ComponentRules.apply())\nclass Component extends ID {\n\n        /** the entity this component is attached to */\n    @:isVar public var entity (get,set) : Entity;\n\n        /** The spatial transform of the attached entity. direct proxy to the entity transform */\n    public var transform : Transform;\n        /** The local position of the spatial transform. direct proxy to the entity transform */\n    public var pos              (get,set) : Vector;\n        /** The local rotation of the spatial transform. direct proxy to the entity transform */\n    public var rotation         (get,set) : Quaternion;\n        /** The local scale of the spatial transform. direct proxy to the entity transform */\n    public var scale            (get,set) : Vector;\n        /** The local origin of the spatial transform. direct proxy to the entity transform */\n    public var origin           (get,set) : Vector;\n\n        /** called when the scene is initiated. **use this instead of new** for state setup. it respects the order of creations, children, and component ordering. */\n    public function init() {}\n        /** called once per frame, passing the delta time */\n    public function update(dt:Float) {}\n\n        /** called when the component is attached to an entity */\n    public function onadded() {}\n        /** called when the component is removed from an entity */\n    public function onremoved() {}\n\n        /** called when the fixed update is triggered, if the entity has a fixed_rate set. hands the fixed_rate for interchangeable update/fixedupdate convenience */\n    @:noCompletion public function onfixedupdate(rate:Float) {}\n       /** called when the scene starts or is reset. use this to reset state. */\n    @:noCompletion public function onreset() {}\n        /** called when the scene, parent or entity is destroyed. use this to clean up state. */\n    @:noCompletion public function ondestroy() {}\n\n        /** override this to get notified when a key is released. only called if overridden. */\n    @:noCompletion public function onkeyup( event:KeyEvent ) {}\n        /** override this to get notified when a key is pressed. only called if overridden. */\n    @:noCompletion public function onkeydown( event:KeyEvent ) {}\n        /** override this to get notified when a text input event happens. only called if overridden. */\n    @:noCompletion public function ontextinput( event:TextEvent ) {}\n\n        /** override this to get notified when a named input event happens. only called if overridden. */\n    @:noCompletion public function oninputdown( event:{ name:String, event:InputEvent } ) {}\n        /** override this to get notified when a named input event happens. only called if overridden. */\n    @:noCompletion public function oninputup( event:{ name:String, event:InputEvent } ) {}\n\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\n    @:noCompletion public function onmousedown( event:MouseEvent ) {}\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\n    @:noCompletion public function onmouseup( event:MouseEvent ) {}\n        /** override this to get notified when a mouse is moved. only called if overridden. */\n    @:noCompletion public function onmousemove( event:MouseEvent ) {}\n        /** override this to get notified when the mouse wheel/trackpad is scrolled. only called if overridden. */\n    @:noCompletion public function onmousewheel( event:MouseEvent ) {}\n\n        /** override this to get notified when a touch begins. only called if overridden. */\n    @:noCompletion public function ontouchdown( event:TouchEvent ) {}\n        /** override this to get notified when a touch ends. only called if overridden. */\n    @:noCompletion public function ontouchup( event:TouchEvent ) {}\n        /** override this to get notified when a touch moves. only called if overridden. */\n    @:noCompletion public function ontouchmove( event:TouchEvent ) {}\n\n        /** override this to get notified when a gamepad button is released. only called if overridden. */\n    @:noCompletion public function ongamepadup( event:GamepadEvent ) {}\n        /** override this to get notified when a gamepad button is pressed. only called if overridden. */\n    @:noCompletion public function ongamepaddown( event:GamepadEvent ) {}\n        /** override this to get notified when a gamepad axis changes. only called if overridden. */\n    @:noCompletion public function ongamepadaxis( event:GamepadEvent ) {}\n        /** override this to get notified when a gamepad device event happens. only called if overridden. */\n    @:noCompletion public function ongamepaddevice( event:GamepadEvent ) {}\n\n       /** override this to get notified when a window is moved, with the data containing the new x/y position */\n   @:noCompletion public function onwindowmoved( event:WindowEvent ) {}\n       /** override this to get notified when a window is resized by the user, with the data containing the new x/y size */\n   @:noCompletion public function onwindowresized( event:WindowEvent ) {}\n       /** override this to get notified when a window is resized by the system or code or the user, with the data containing the new x/y size */\n   @:noCompletion public function onwindowsized( event:WindowEvent ) {}\n       /** override this to get notified when a window is minimized. */\n   @:noCompletion public function onwindowminimized( event:WindowEvent ) {}\n       /** override this to get notified when a window is restored. */\n   @:noCompletion public function onwindowrestored( event:WindowEvent ) {}\n\n        /** Use this to pass instance specific data and values to the component. */\n    public function new( ?_options:ComponentOptions ) {\n\n        var _name = '';\n\n        if(_options != null) {\n            if(_options.name != null) {\n                _name = _options.name;\n            }\n        }\n\n        super(_name == '' ? Luxe.utils.uniqueid() : _name);\n\n    } //new\n\n//components\n\n        /** attach a component to the entity */\n    public function add<T:Component>( component:T ) : T {\n        return entity.add( component );\n    } //add\n\n        /** remove a component from the entity */\n    public function remove( _name:String ) : Bool {\n        return entity.remove( _name );\n    } //add\n\n        /** get a component from the entity, by name */\n    public function get<T>( _name:String, ?in_children:Bool = false ) : T {\n        return entity.get( _name, in_children );\n    } //get\n\n        /** get all component from the entity, by name */\n    public function get_any<T>( _name:String, ?in_children:Bool = false, ?first_only:Bool = true ) : Array<T> {\n        return entity.get_any( _name, in_children, first_only );\n    } //get_any\n\n        /** returns true if the entity has a component by the given name */\n    public function has( _name:String ) : Bool {\n        return entity.has( _name );\n    } //has\n\n//Internal\n\n//entity\n\n    function _detach_entity() {\n\n        if(entity != null) {\n            //entity.off(Ev.reset, _reset);\n        }\n\n    } //detach_entity\n\n    function _attach_entity() {\n\n        if(entity != null) {\n            //entity.on(Ev.reset, _reset);\n        }\n\n    } //attach_entity\n\n    function set_entity(_entity:Entity) {\n\n        _detach_entity();\n\n            entity = _entity;\n\n        _attach_entity();\n\n        return entity;\n\n    } //set_entity\n\n    function get_entity() {\n\n        return entity;\n\n    } //get_entity\n\n//transforms\n\n    function set_pos( _p:Vector ) {\n        return entity.transform.pos = _p;\n    } //set_pos\n\n    function get_pos() {\n        return entity.transform.pos;\n    } //get_pos\n\n    function set_rotation( _r:Quaternion ) {\n        return entity.transform.rotation = _r;\n    } //set_rotation\n\n    function get_rotation() {\n        return entity.transform.rotation;\n    } //get_rotation\n\n    function set_scale(_s:Vector) {\n        return entity.transform.scale = _s;\n    } //set_scale\n\n    function get_scale() {\n        return entity.transform.scale;\n    } //get_scale\n\n    function set_origin(_o:Vector) {\n        return entity.transform.origin = _o;\n    } //set_origin\n\n    function get_origin() {\n        return entity.transform.origin;\n    } //get_origin\n\n    function set_transform(_o:Transform) {\n        return entity.transform = _o;\n    } //set_transform\n\n    function get_transform() {\n        return entity.transform;\n    } //get_transform\n\n    @:noCompletion public function entity_pos_change( _pos:Vector ) {}\n    @:noCompletion public function entity_scale_change( _scale:Vector ) {}\n    @:noCompletion public function entity_rotation_change( _rotation:Quaternion ) {}\n    @:noCompletion public function entity_origin_change( _origin:Vector ) {}\n    @:noCompletion public function entity_parent_change( _parent:Transform ) {}\n\n//internal api\n\n} //Component\n","package snow;\n\nimport snow.system.input.Input;\nimport snow.types.Types;\n\n    //Note all times in snow are in seconds.\n\n/** The default type of snow application, with variable delta, update limit, render limit, timescale and more. \n    See the {App Guide} for complete details. */\nclass App {\n\n//Access to the snow API\n\n        /** use this to access the api features. *i.e* `app.assets.text(_id)` */\n    public var app : Snow;\n\n//Configurable values\n\n        /** the scale of time */\n    public var timescale : Float = 1;\n        /** if this is non zero this will be passed in */\n    public var fixed_delta : Float = 0;\n        /** if this is non zero, rendering will be forced to this rate */\n    public var render_rate : Float = -1;\n        /** if this is non zero, updates will be forced to this rate */\n    public var update_rate : Float = 0;\n        /** the maximum frame time */\n    public var max_frame_time : Float = 0.25;\n\n//Timing information\n\n        /** the time the last frame took to run */\n    public var delta_time : Float = 1/60;\n        /** the simulated time the last frame took to run, relative to scale etc */\n    public var delta_sim : Float = 1/60;\n        /** the start time of the last frame */\n    public var last_frame_start : Float = 0.0;\n        /** the current simulation time */\n    public var current_time : Float = 0;\n        /** the start time of this frame */\n    public var cur_frame_start : Float = 0.0;\n        /** the alpha time for a render between frame updates */\n    public var alpha : Float = 1.0;\n\n//Internal values\n\n        /** for update_rate, the time when the next tick should occur around */\n    var next_tick : Float = 0;\n        /** for update_rate, the time when the next tick should occur around */\n    var next_render : Float = 0;\n\n//override these in your game class\n\n        /** The default constructor of an App is empty, so you can override it if you want, but take note that this happens way before snow is ready for use. Use [ready](#ready) for entry point. */\n    public function new() {}\n        /** Called by snow to request config changes, override this to change the defaults.\n            This happens before ready, so the values are available when ready is called. */\n    public function config( config:AppConfig ) : AppConfig  { return config; }\n        /** Your entry point. Called for you when you can initialize your application */\n    public function ready() {}\n        /** Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide}) */\n    public function update(dt:Float) {}\n        /** Your exit point. Called for you when you should shut down your application */\n    public function ondestroy() {}\n        /** Low level event handler from snow core. Often handled by the subsystems so check there first. */\n    public function onevent( event:SystemEvent ) {}\n\n        /** Called each frame *before* everything, the beginning of the frame. Use with understanding. */\n    public function ontickstart() {}\n        /** Called each frame *after* everything, at the end of the frame. Use with understanding. */\n    public function ontickend() {}\n\n        /** Called for you when a key is pressed down */\n    public function onkeydown( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {}\n        /** Called for you when a key is released */\n    public function onkeyup( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {}\n        /** Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc. */\n    public function ontextinput( text:String, start:Int, length:Int, type:TextEventType, timestamp:Float, window_id:Int ) {}\n\n        /** Called for you when a mouse button is pressed */\n    public function onmousedown( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {}\n        /** Called for you when a mouse button is released */\n    public function onmouseup( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {}\n        /** Called for you when the mouse wheel moves */\n    public function onmousewheel( x:Int, y:Int, timestamp:Float, window_id:Int ) {}\n        /** Called for you when the mouse moves */\n    public function onmousemove( x:Int, y:Int, xrel:Int, yrel:Int, timestamp:Float, window_id:Int ) {}\n\n        /** Called for you when a touch is released, use the `touch_id` to track which */\n    public function ontouchdown( x:Float, y:Float, touch_id:Int, timestamp:Float ) {}\n        /** Called for you when a touch is first pressed, use the `touch_id` to track which */\n    public function ontouchup( x:Float, y:Float, touch_id:Int, timestamp:Float ) {}\n        /** Called for you when a touch is moved, use the `touch_id` to track which */\n    public function ontouchmove( x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float ) {}\n\n        /** Called for you when a connected gamepad axis moves, use `which` to determine gamepad id */\n    public function ongamepadaxis( gamepad:Int, axis:Int, value:Float, timestamp:Float ) {}\n        /** Called for you when a connected gamepad button is pressed, use `which` to determine gamepad id */\n    public function ongamepaddown( gamepad:Int, button:Int, value:Float, timestamp:Float ) {}\n        /** Called for you when a connected gamepad button is released, use `which` to determine gamepad id */\n    public function ongamepadup( gamepad:Int, button:Int, value:Float, timestamp:Float ) {}\n        /** Called for you when a gamepad is connected or disconnected, use `which` to determine gamepad id. \n            `id` is the string name identifier for the controller, specified from the system. */\n    public function ongamepaddevice( gamepad:Int, id:String, type:GamepadDeviceEventType, timestamp:Float ) {}\n\n\n\n//No need to interact with these, unless you want pre-ready init, just call super.on_internal_init() etc\n//to maintain expected App behavior. You can override behavior in the base class, like AppFixedTimestep\n\n        //internal facing api\n    @:allow(snow.Snow)\n    function on_internal_init() {\n\n        cur_frame_start = app.time;\n        last_frame_start = cur_frame_start;\n        current_time = 0;\n        delta_time = 0.016;\n\n    } //on_internal_init\n\n    @:allow(snow.Snow)\n    function on_internal_update() {\n\n        if(update_rate != 0) {\n\n            if(app.time < next_tick) {\n                return;\n            }\n\n            next_tick = app.time + update_rate;\n\n        } //update_rate\n\n            //the start of this frame is now\n        cur_frame_start = app.time;\n            //delta is time since the last frame start\n        delta_time = (cur_frame_start - last_frame_start);\n            //last frame start is updated to now\n        last_frame_start = cur_frame_start;\n\n            //clamp delta to max frame time, preventing large deltas\n        if(delta_time > max_frame_time) {\n            delta_time = max_frame_time;\n        }\n\n            //which delta we are going to use, fixed or variable\n        var used_delta = (fixed_delta == 0) ? delta_time : fixed_delta;\n            //timescale the delta to the given scale\n        used_delta *= timescale;\n            //update the simulated delta value\n        delta_sim = used_delta;\n\n            //update the internal \"time\" counter\n        current_time += used_delta;\n            //do the internal systems update\n        app.do_internal_update( used_delta );\n\n    } //on_internal_update\n\n    @:allow(snow.Snow)\n    function on_internal_render() {\n\n            //and finally call render, if it's time\n        if(render_rate != 0) {\n            if(render_rate < 0 || (next_render < app.time)) {\n                app.render();\n                next_render += render_rate;\n            }\n        }\n\n    } //on_internal_render\n\n} //App\n\n\n\n/** Read the {App Guide} for full info, and for even more information see : http://gafferongames.com/game-physics/fix-your-timestep/\n    this stores and calculates a fixed game update loop, and rendering interpolation is required\n    for smooth updates between frames. */\nclass AppFixedTimestep extends App {\n\n        /** fixed simulation update speed */\n    public var frame_time : Float = 0.0167;\n        /** the overflow of the updates. This is used internally, for you, to calculate the alpha time for rendering interpolation as follows `alpha = overflow / frame_time;` */\n    public var overflow : Float = 0.0;\n\n    @:allow(snow.Snow)\n    override function on_internal_init() {\n\n        super.on_internal_init();\n\n        frame_time = 1.0/60.0;\n        last_frame_start = app.time;\n\n    } //on_internal_init\n\n        //no super.on_internal_update because this entirely controls\n        //the update loop for the application itself\n    @:allow(snow.Snow)\n    override function on_internal_update() {\n\n        cur_frame_start = app.time;\n        delta_time = (cur_frame_start - last_frame_start);\n        delta_sim = delta_time * timescale;\n\n        if(delta_sim > max_frame_time) {\n            delta_sim = max_frame_time;\n        }\n\n        last_frame_start = cur_frame_start;\n\n        overflow += delta_sim;\n\n        while(overflow >= frame_time) {\n\n            app.do_internal_update(frame_time * timescale);\n\n            current_time += frame_time * timescale;\n\n            overflow -= frame_time * timescale;\n\n        } //overflow >= frame_time\n\n            //work this out before a render\n        alpha = overflow / frame_time;\n\n    } //on_internal_update\n\n} //AppFixedTimestep\n","package luxe;\n\nimport snow.Snow;\nimport snow.types.Types;\nimport snow.system.window.Window;\nimport snow.system.assets.Asset;\nimport snow.api.buffers.Uint8Array;\n\nimport Luxe;\nimport luxe.IO;\nimport luxe.Audio;\nimport luxe.Events;\nimport luxe.Emitter;\nimport luxe.Input;\nimport luxe.Scene;\nimport luxe.Debug;\nimport luxe.Timer;\nimport luxe.Physics;\nimport luxe.AppConfig;\nimport luxe.Resources;\n\nimport luxe.debug.ProfilerDebugView;\n\nimport phoenix.Renderer;\nimport phoenix.Texture;\nimport phoenix.Shader;\n\nimport luxe.Game;\nimport luxe.Log.*;\n\n\n@:keep\n@:noCompletion\n@:log_as('luxe')\n\nclass Core\nextends\n    #if luxe_appfixedtimestep\n        snow.App.AppFixedTimestep\n    #else\n        snow.App\n    #end\n{\n\n        //the game object running the core\n    public var game : Game;\n    public var appconfig : AppConfig;\n\n        //if the console is displayed atm\n    public var console_visible : Bool = false;\n        /** Set to true if the app is running without a window */\n    public var headless : Bool = false;\n\n\n//Sub Systems, mostly in order of importance\n    public var emitter   : Emitter<Ev>;\n    public var debug     : Debug;\n    public var io        : IO;\n    public var draw      : Draw;\n    public var timer     : Timer;\n    public var events    : Events;\n    public var input     : Input;\n    public var audio     : Audio;\n    public var scene     : Scene;\n    public var resources : Resources;\n    public var renderer  : Renderer;\n    public var screen    : luxe.Screen;\n    public var physics   : Physics;\n\n//flags\n\n       //if we have started a shutdown\n    public var shutting_down : Bool = false;\n    public var has_shutdown : Bool = false;\n    public var inited : Bool = false;\n\n    var init_config: luxe.AppConfig;\n\n    @:noCompletion public function new( _game:Game, _config:luxe.AppConfig ) {\n\n        super();\n\n        init_config = _config;\n        game = _game;\n\n            //Store the core for reference in the game\n        game.app = this;\n\n            //Create internal stuff\n        emitter = new Emitter<Ev>();\n\n            //Set external references\n        Luxe.core = this;\n        Luxe.utils = new luxe.utils.Utils(this);\n\n    } //new\n\n\n        //This gets called once snow has booted us\n    override function ready() {\n\n        if(luxe.Log.get_level() > 1) {\n            log('log / level to ${luxe.Log.get_level()}' );\n            log('log / filter : ${luxe.Log.get_filter()}');\n            log('log / exclude : ${luxe.Log.get_exclude()}');\n        }\n\n        Luxe.version = haxe.Resource.getString('version');\n            //Don't change this, it matches semantic versioning http://semver.org/\n        Luxe.build = Luxe.version + haxe.Resource.getString('build');\n\n        log(runtime_info());\n\n            //flag for later\n        headless = (app.window == null);\n\n            //:todo: I'm not happy about this but for now it will do\n        #if no_default_font\n\n            init(null);\n\n        #else\n\n            if(!headless) {\n\n                var _font_name = 'default.png';\n                var _font_image = Uint8Array.fromBytes(haxe.Resource.getBytes(_font_name));\n                var _font_load = app.assets.image_from_bytes(_font_name, _font_image);\n\n                _font_load.then(function(asset:AssetImage) {\n                    init(asset);\n                }).error(function(error) {\n                    log(\"failed to load default font, things will probably not look right... $error\");\n                    init(null);\n                });\n\n            } else {\n\n                init(null);\n\n            }\n\n        #end //no_default_font\n\n    } //ready\n\n    override function ondestroy() {\n\n        shutting_down = true;\n\n        log('shutting down...');\n\n            //shutdown the game class\n        game.ondestroy();\n\n            //shutdown the default scene\n        emitter.emit(Ev.destroy);\n\n            //Order is imporant here too\n        if(renderer != null) {\n            renderer.destroy();\n        }\n\n        physics.destroy();\n        input.destroy();\n        audio.destroy();\n        timer.destroy();\n        events.destroy();\n        debug.destroy();\n\n            //Clear up for GC\n        emitter = null;\n        input = null;\n        audio = null;\n        events = null;\n        timer = null;\n        debug = null;\n        Luxe.utils = null;\n\n            //Flag it\n        has_shutdown = true;\n\n        log('goodbye.');\n\n    }\n\n    public function init( asset:AssetImage ) {\n\n        _debug('creating subsystems...');\n\n            //Order is important here\n\n        Luxe.debug = debug = new Debug( this );\n        Luxe.io = io = new IO( this );\n\n        draw = new Draw( this );\n        timer = new Timer( this );\n        events = new Events();\n        audio = new Audio( this );\n        input = new Input( this );\n        physics = new Physics( this );\n\n            //should be up earlier\n        resources = new Resources();\n        Luxe.resources = resources;\n\n        if(!headless) {\n                //listen for window events\n            app.window.onevent = window_event;\n                //create the renderer\n            renderer = new Renderer( this, asset );\n                //assign the globals\n            Luxe.renderer = renderer;\n        }\n\n            //if there is a window,\n            //store the size\n        var _window_w = 0;\n        var _window_h = 0;\n\n        if(app.window != null) {\n            _window_w = app.window.width;\n            _window_h = app.window.height;\n        }\n\n            //store the size for access from API\n        screen = new luxe.Screen( this, _window_w, _window_h );\n\n            //Now make sure\n            //they start up\n\n        debug.init();\n        io.init();\n        timer.init();\n        audio.init();\n        input.init();\n\n        if(!headless) {\n            renderer.init();\n        }\n\n        physics.init();\n\n        Luxe.audio = audio;\n        Luxe.draw = draw;\n        Luxe.events = events;\n        Luxe.timer = timer;\n        Luxe.input = input;\n\n        if(!headless) {\n            Luxe.camera = new luxe.Camera({ name:'default camera', view:renderer.camera });\n        }\n\n        Luxe.physics = physics;\n\n        scene = new Scene('default scene');\n        Luxe.scene = scene;\n\n        if(!headless) {\n            scene.add(Luxe.camera);\n            debug.create_debug_console();\n        }\n\n            //\n        internal_pre_ready();\n\n    } //init\n\n    function internal_pre_ready() {\n\n        if(!headless) {\n                //Don't remove this, :todo:\n                //it's a catch for crashing because\n                //we don't have a valid GL context, until the query\n                //is finalized on snow side\n            log('opengl ${snow.modules.opengl.GL.versionString()}');\n\n            _debug('ready. loading default parcel ' + appconfig.preload);\n\n                //pre load config parcel\n            var default_parcel = new Parcel({\n                id:         'default_parcel',\n                system:     resources,\n                bytes:      appconfig.preload.bytes,\n                texts:      appconfig.preload.texts,\n                jsons:      appconfig.preload.jsons,\n                textures:   appconfig.preload.textures,\n                fonts:      appconfig.preload.fonts,\n                shaders:    appconfig.preload.shaders,\n                sounds:     appconfig.preload.sounds,\n                oncomplete: internal_ready,\n                onfailed: function(_error:Dynamic) {\n                    log('config / preload / failed to load');\n                    throw Error.error(_error);\n                }\n            });\n\n            default_parcel.load();\n\n        } else {\n\n            internal_ready(null);\n\n        }\n\n    } //internal_pre_ready\n\n    function internal_ready(_) {\n\n            //and even more finally, tell snow we want to\n            //know when it's rendering the window so we can draw\n        if(app.window != null && !headless) {\n\n            app.window.onrender = render;\n\n                //start here because end is called first below\n            debug.start(Tag.update, 50);\n            debug.start(Tag.renderdt, 50);\n\n        } //app.window != null && !headless\n\n            //Call the main ready function\n            //and send the ready event to the game\n        game.ready();\n\n            //shutdown can come from the ready function\n        if(!shutting_down) {\n\n                //emit the init event\n                //so that scene and others can start up\n            emitter.emit(Ev.init);\n            inited = true;\n\n                //Reset the physics (starts the timer etc)\n            physics.reset();\n\n                //Now, if no main loop is requested we should immediately shutdown\n            if(!app.snow_config.has_loop) {\n                shutdown();\n            }\n\n        } //!shutting down\n\n    } //internal_ready\n\n    public function shutdown() {\n\n            //Make sure all systems know we are going down\n        shutting_down = true;\n\n            //shutdown snow, which calls ondestroy for us\n        Luxe.next(app.shutdown);\n\n    } //shutdown\n\n    inline\n    public function on<T>(event:Ev, handler:T->Void ) {\n        emitter.on(event, handler);\n    }\n\n    inline\n    public function off<T>(event:Ev, handler:T->Void ) {\n        return emitter.off(event, handler);\n    }\n\n    inline\n    public function emit<T>(event:Ev, ?data:T) {\n        return emitter.emit(event, data);\n    }\n\n    override function ontickstart() {\n        if(!has_shutdown) emitter.emit(Ev.tickstart);\n    }\n\n    override function ontickend() {\n        if(!has_shutdown) emitter.emit(Ev.tickend);\n    }\n\n        //called by snow\n    override function onevent( event:snow.types.Types.SystemEvent ) {\n\n        game.onevent( event );\n\n    } //onevent\n\n        //called by snow\n    override function update( dt:Float ) {\n\n        #if luxe_fullprofile\n            _verbose('on_update ' + Luxe.time);\n        #end //luxe_fullprofile\n\n        if(has_shutdown) return;\n        if(!inited) return;\n\n        debug.end(Tag.update);\n        debug.start(Tag.update);\n\n            //Update all the subsystems, again, order important\n//Timers first\n            #if luxe_fullprofile debug.start(Tag.timer); #end\n        timer.process();\n            #if luxe_fullprofile debug.end(Tag.timer); #end\n//Input second\n            #if luxe_fullprofile debug.start(Tag.input); #end\n        input.process();\n            #if luxe_fullprofile debug.end(Tag.input); #end\n//Audio\n            #if luxe_fullprofile debug.start(Tag.audio); #end\n        audio.process();\n            #if luxe_fullprofile debug.end(Tag.audio); #end\n//Events\n            #if luxe_fullprofile debug.start(Tag.events); #end\n        events.process();\n            #if luxe_fullprofile debug.end(Tag.events); #end\n//Physics\n            //note that this does not update the physics, simply processes the active engines\n        physics.process();\n\n//Run update callbacks\n            debug.start(Tag.updates);\n        emitter.emit(Ev.update, dt);\n            debug.end(Tag.updates);\n\n//Update the game class for the game\n            debug.start( Tag.game_update );\n        game.update(dt);\n            debug.end( Tag.game_update );\n\n//And finally the debug stuff\n            #if luxe_fullprofile debug.start(Tag.debug); #end\n        debug.process();\n            #if luxe_fullprofile debug.end(Tag.debug); #end\n\n    } //update\n\n    function window_event( _event:snow.types.Types.WindowEvent ) {\n\n        if(shutting_down) return;\n        if(!inited) return;\n\n        emitter.emit(Ev.window, _event );\n\n        switch(_event.type) {\n\n            case WindowEventType.moved : {\n                emitter.emit(Ev.windowmoved, _event );\n                game.onwindowmoved( _event );\n            } //moved\n\n            case WindowEventType.resized : {\n                screen.internal_resized(_event.event.x, _event.event.y);\n                renderer.internal_resized(_event.event.x, _event.event.y);\n                emitter.emit(Ev.windowresized, _event );\n                game.onwindowresized( _event );\n            } //resized\n\n            case WindowEventType.size_changed : {\n                screen.internal_resized(_event.event.x, _event.event.y);\n                renderer.internal_resized(_event.event.x, _event.event.y);\n                emitter.emit(Ev.windowsized, _event );\n                game.onwindowsized( _event );\n            } //size_changed\n\n            case WindowEventType.minimized : {\n                emitter.emit(Ev.windowminimized, _event );\n                game.onwindowminimized( _event );\n            } //minimized\n\n            case WindowEventType.restored : {\n                emitter.emit(Ev.windowrestored, _event );\n                game.onwindowrestored( _event );\n            } //restored\n\n            default: {}\n\n        } //switch\n\n    } //window_event\n\n    function render( window:Window ) {\n\n        if(shutting_down) return;\n        if(!inited) return;\n\n        debug.end(Tag.renderdt);\n        debug.start(Tag.renderdt);\n\n        if(!headless) {\n\n            debug.start(Tag.render);\n\n            emitter.emit(Ev.prerender);\n            game.onprerender();\n\n                emitter.emit(Ev.render);\n                game.onrender();\n                renderer.process();\n\n            emitter.emit(Ev.postrender);\n            game.onpostrender();\n\n            debug.end(Tag.render);\n\n            #if !no_debug_console\n\n                var _batch = debug.batcher;\n                \n                if(_batch.enabled) {                \n                \n                    debug.start(Tag.debug_batch);\n                        \n                        _batch.draw();\n\n                        renderer.stats.geometry_count += _batch.geometry.size();\n                        renderer.stats.dynamic_batched_count += _batch.dynamic_batched_count;\n                        renderer.stats.static_batched_count += _batch.static_batched_count;\n                        renderer.stats.visible_count += _batch.visible_count;\n                        renderer.stats.draw_calls += _batch.draw_calls;\n                        renderer.stats.vert_count += _batch.vert_count;\n\n                    debug.end(Tag.debug_batch);\n\n                } //_batch.enabled\n\n            #end\n\n        } //!headless\n\n    } //render\n\n    public function show_console(_show:Bool = true) {\n\n        console_visible = _show;\n        debug.show_console(console_visible);\n\n    } //show_console\n\n//input events\n//keys\n    override function onkeydown( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n        var event : KeyEvent = {\n            scancode : scancode,\n            keycode : keycode,\n            state : InteractState.down,\n            mod : mod,\n            repeat : repeat,\n            timestamp : timestamp,\n            window_id : window_id\n        }\n\n        if(!shutting_down) {\n\n                //check for named input\n            input.check_named_keys(event, true);\n            emitter.emit(Ev.keydown, event);\n\n            game.onkeydown(event);\n\n            if(scancode == Scan.grave) {\n                show_console( !console_visible );\n            }\n\n        } //!shutting down\n\n    } //onkeydown\n\n    override function onkeyup( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n        var event : KeyEvent = {\n            scancode : scancode,\n            keycode : keycode,\n            state : InteractState.up,\n            mod : mod,\n            repeat : repeat,\n            timestamp : timestamp,\n            window_id : window_id\n        }\n\n        if(!shutting_down) {\n\n                //check for named input\n            input.check_named_keys(event);\n            emitter.emit(Ev.keyup, event);\n\n            game.onkeyup(event);\n\n        } //!shutting down\n\n    } //onkeyup\n\n    override function ontextinput( text:String, start:Int, length:Int, type:snow.types.TextEventType, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n        var _type : TextEventType = TextEventType.unknown;\n\n        switch(type) {\n            case edit: _type = TextEventType.edit;\n            case input: _type = TextEventType.input;\n            default: {\n                return;\n            }\n        }\n\n        var event : TextEvent = {\n            text : text,\n            start : start,\n            length : length,\n            type : _type,\n            timestamp : timestamp,\n            window_id : window_id\n        }\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.textinput, event);\n\n            game.ontextinput(event);\n\n        } //!shutting_down\n\n    } //ontextinput\n\n//input\n\n    public function oninputdown( name:String, event:InputEvent ) {\n\n        if(!inited) return;\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.inputdown, { name:name, event:event });\n\n            game.oninputdown( name, event );\n\n        } //!shutting_down\n\n    } //oninputdown\n\n    public function oninputup( name:String, event:InputEvent ) {\n\n        if(!inited) return;\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.inputup, { name:name, event:event });\n\n            game.oninputup( name, event );\n\n        } //!shutting_down\n\n    } //oninputup\n\n//mouse\n\n    override function onmousedown( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n            //this has to be a new value because if it's cached it sends in references that get kept by user code\n            //until :todo:immutable: Vector types\n        screen.cursor.set_internal(new luxe.Vector( x, y ));\n\n        var event : MouseEvent = {\n            timestamp : timestamp,\n            window_id : window_id,\n            state : InteractState.down,\n            button : button,\n            x : x,\n            y : y,\n            xrel : x,\n            yrel : y,\n            pos : screen.cursor.pos,\n        }\n\n        if(!shutting_down) {\n\n            input.check_named_mouse(event, true);\n            emitter.emit(Ev.mousedown, event);\n            game.onmousedown(event);\n\n        } //!shutting_down\n\n    } //onmousedown\n\n    override function onmouseup( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n            //see notes on new in mousedown\n        screen.cursor.set_internal(new luxe.Vector( x, y ));\n\n        var event : MouseEvent = {\n            timestamp : timestamp,\n            window_id : window_id,\n            state : InteractState.up,\n            button : button,\n            x : x,\n            y : y,\n            xrel : x,\n            yrel : y,\n            pos : screen.cursor.pos\n        }\n\n        if(!shutting_down) {\n\n            input.check_named_mouse(event);\n            emitter.emit(Ev.mouseup, event);\n            game.onmouseup(event);\n\n        } //!shutting_down\n\n    } //onmouseup\n\n    override function onmousemove( x:Int, y:Int, xrel:Int, yrel:Int, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n            //see notes on new in mousedown\n        screen.cursor.set_internal(new luxe.Vector( x, y ));\n\n        var event : MouseEvent = {\n            timestamp : timestamp,\n            window_id : window_id,\n            state : InteractState.move,\n            button : MouseButton.none,\n            x : x,\n            y : y,\n            xrel : xrel,\n            yrel : yrel,\n            pos : screen.cursor.pos\n        }\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.mousemove, event);\n            game.onmousemove(event);\n\n        } //!shutting_down\n\n    } //onmousemove\n\n    override function onmousewheel( x:Int, y:Int, timestamp:Float, window_id:Int ) {\n\n        if(!inited) return;\n\n        var event : MouseEvent = {\n            timestamp : timestamp,\n            window_id : window_id,\n            state : InteractState.wheel,\n            button : MouseButton.none,\n            x : x,\n            y : y,\n            xrel : x,\n            yrel : y,\n            pos : screen.cursor.pos\n        }\n\n        if(!shutting_down) {\n\n            input.check_named_mouse(event, false);\n            emitter.emit(Ev.mousewheel, event);\n            game.onmousewheel(event);\n\n        } //!shutting_down\n\n    } //onmousewheel\n\n//touch\n        //cached touch pos\n    var _touch_pos : Vector;\n\n    override function ontouchdown( x:Float, y:Float, touch_id:Int, timestamp:Float ) {\n\n        if(!inited) return;\n\n         _touch_pos = new luxe.Vector( x, y );\n\n        var event : TouchEvent = {\n            state : InteractState.down,\n            timestamp : timestamp,\n            touch_id : touch_id,\n            x : x,\n            y : y,\n            dx : x,\n            dy : y,\n            pos : _touch_pos\n        }\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.touchdown, event);\n\n            game.ontouchdown(event);\n\n            #if (!no_debug_console && mobile)\n\n                    //3 finger tap when console opens will switch tabs\n                if(app.input.touch_count == 3) {\n                    if(console_visible) {\n                        debug.switch_view();\n                    }\n                }\n\n                    //4 finger tap toggles console\n                if(app.input.touch_count == 4) {\n                    show_console( !console_visible );\n                }\n\n            #end //no_debug_console\n\n        } //!shutting_down\n\n    } //ontouchdown\n\n    override function ontouchup( x:Float, y:Float, touch_id:Int, timestamp:Float ) {\n\n        if(!inited) return;\n\n         _touch_pos = new luxe.Vector( x, y );\n\n        var event : TouchEvent = {\n            state : InteractState.up,\n            timestamp : timestamp,\n            touch_id : touch_id,\n            x : x,\n            y : y,\n            dx : x,\n            dy : y,\n            pos : _touch_pos\n        }\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.touchup, event);\n            game.ontouchup(event);\n\n        } //!shutting_down\n\n    } //ontouchup\n\n    override function ontouchmove( x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float ) {\n\n        if(!inited) return;\n\n        _touch_pos = new luxe.Vector( x, y );\n\n        var event : TouchEvent = {\n            state : InteractState.move,\n            timestamp : timestamp,\n            touch_id : touch_id,\n            x : x,\n            y : y,\n            dx : dx,\n            dy : dy,\n            pos : _touch_pos\n        }\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.touchmove, event);\n            game.ontouchmove(event);\n\n        } //!shutting_down\n\n    } //ontouchmove\n\n//gamepad\n\n    override function ongamepadaxis( gamepad:Int, axis:Int, value:Float, timestamp:Float ) {\n\n        if(!inited) return;\n\n        var event : GamepadEvent = {\n            timestamp : timestamp,\n            type : GamepadEventType.axis,\n            state : InteractState.axis,\n            gamepad : gamepad,\n            button : -1,\n            axis : axis,\n            value : value,\n            id : null\n        }\n\n        if(!shutting_down) {\n\n            emitter.emit(Ev.gamepadaxis,event);\n            game.ongamepadaxis(event);\n\n        } //!shutting_down\n\n    } //ongamepadaxis\n\n    override function ongamepaddown( gamepad:Int, button:Int, value:Float, timestamp:Float ) {\n\n        if(!inited) return;\n\n        var event : GamepadEvent = {\n            timestamp : timestamp,\n            type : GamepadEventType.button,\n            state : InteractState.down,\n            gamepad : gamepad,\n            button : button,\n            axis : -1,\n            value : value,\n            id : null\n        }\n\n        if(!shutting_down) {\n\n            input.check_named_gamepad_buttons(event, true);\n            emitter.emit(Ev.gamepaddown,event);\n            game.ongamepaddown(event);\n\n        } //!shutting_down\n\n    } //ongamepadbuttondown\n\n    override function ongamepadup( gamepad:Int, button:Int, value:Float, timestamp:Float ) {\n\n        if(!inited) return;\n\n        var event : GamepadEvent = {\n            timestamp : timestamp,\n            type : GamepadEventType.button,\n            state : InteractState.up,\n            gamepad : gamepad,\n            button : button,\n            axis : -1,\n            value : value,\n            id : null\n        }\n\n        if(!shutting_down) {\n\n            input.check_named_gamepad_buttons(event, false);\n            emitter.emit(Ev.gamepadup, event);\n            game.ongamepadup(event);\n\n        } //!shutting_down\n\n    } //ongamepadup\n\n    override function ongamepaddevice( gamepad:Int, id:String, type:GamepadDeviceEventType, timestamp:Float ) {\n\n        if(!inited) return;\n\n        var _event_type : GamepadEventType = GamepadEventType.unknown;\n\n        switch(type) {\n            case GamepadDeviceEventType.device_added:\n                _event_type = GamepadEventType.device_added;\n            case GamepadDeviceEventType.device_removed:\n                _event_type = GamepadEventType.device_removed;\n            case GamepadDeviceEventType.device_remapped:\n                _event_type = GamepadEventType.device_remapped;\n            default:\n        }\n\n        var event : GamepadEvent = {\n            timestamp : timestamp,\n            type : _event_type,\n            state : InteractState.none,\n            gamepad : gamepad,\n            button : -1,\n            axis : -1,\n            value : 0,\n            id : id\n        }\n\n        if(!shutting_down) {\n\n            game.ongamepaddevice(event);\n\n        } //!shutting_down\n\n    } //ongamepaddevice\n\n        /** return what the game decides for runtime config */\n    override function config( config: snow.types.Types.AppConfig ) : snow.types.Types.AppConfig {\n\n            //start with the snow default config\n        appconfig = cast config;\n\n            //assign the override values from the boot/flow config\n        appconfig.window.width =      init_config.window.width;\n        appconfig.window.height =     init_config.window.height;\n        appconfig.window.fullscreen = init_config.window.fullscreen;\n        appconfig.window.borderless = init_config.window.borderless;\n        appconfig.window.resizable =  init_config.window.resizable;\n        appconfig.window.title =      init_config.window.title;\n\n        appconfig.preload = {\n            bytes:      [],\n            texts:      [],\n            jsons:      [],\n            textures:   [],\n            fonts:      [],\n            shaders:    [],\n            sounds:     []\n        };\n\n            //fetch the user updates to the config\n        appconfig = game.config( appconfig );\n\n            //return the snow config\n        return cast appconfig;\n\n    } //config\n\n    @:noCompletion\n    public inline function runtime_info() return '${Luxe.build} / debug:${app.debug} / os:${app.os} / platform:${app.platform}';\n\n} //Core\n\n\n/**\nA tag class for the string based values in the core.\nNote that these values are not inline intentionally, they avoid\nallocating strings each frame.\n*/\n@:noCompletion\n@:allow(luxe.Core)\nclass Tag {\n    static var update       = 'update dt';\n    static var renderdt     = 'render dt';\n    static var game_update  = 'game.update';\n    static var render       = 'core.render';\n    static var debug        = 'core.debug';\n    static var updates      = 'core.updates';\n    static var events       = 'core.events';\n    static var audio        = 'core.audio';\n    static var input        = 'core.input';\n    static var timer        = 'core.timer';\n    static var scene        = 'core.scene';\n    static var debug_batch  = 'batcher.debug_batcher';\n}\n","package luxe;\n\nimport luxe.Core;\nimport Luxe.Ev;\n\nimport luxe.debug.Inspector;\nimport luxe.Input.KeyEvent;\nimport luxe.Input;\nimport phoenix.Batcher;\nimport phoenix.BitmapFont;\nimport phoenix.Camera;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.QuadGeometry;\nimport luxe.utils.Maths;\n\nimport luxe.debug.DebugView;\nimport luxe.debug.TraceDebugView;\nimport luxe.debug.ProfilerDebugView;\nimport luxe.debug.SceneDebugView;\nimport luxe.debug.StatsDebugView;\nimport luxe.debug.BatcherDebugView;\n\nimport luxe.Log._debug;\n\nclass Debug {\n\n    public var core : Core;\n    public var visible : Bool = false;\n    public static var shut_down : Bool = false;\n\n    public var inspector : Inspector;\n    public var overlay : QuadGeometry;\n\n    public var batcher : Batcher;\n    public var view : Camera;\n    public var debug_font : BitmapFont;\n\n        //track a 10 frame average\n    public var dt_average : Float = 0;\n    public var dt_average_accum : Float = 0;\n    public var dt_average_span : Int = 60;\n    public var dt_average_count : Int = 0;\n\n    public var current_view_index = 0;\n    public var last_view_index = 0;\n    public var current_view : DebugView;\n    public static var views : Array<DebugView>;\n\n    public var padding : Vector;\n\n    public var started = false;\n\n//Profile path\n    public var profile_path : String = \"profile.txt\";\n    public var profiling : Bool = false;\n\n    static var trace_callbacks : Map<String, Dynamic->?haxe.PosInfos->Void>;\n\n    @:noCompletion public function new( _core:Core ) {\n        core = _core;\n    } //new\n\n    @:noCompletion public function init() {\n\n        trace_callbacks = new Map();\n        views = [];\n\n        #if !no_debug_console\n\n            views.push(new TraceDebugView());\n            views.push(new StatsDebugView());\n            //views.push(new BatcherDebugView());\n            views.push(new ProfilerDebugView());\n            views.push(new SceneDebugView());\n\n            current_view = views[0];\n\n        #end\n\n        haxe.Log.trace = internal_trace;\n\n        _debug('\\t debug initialized.');\n\n    } //init\n\n        /** Fetch the instance of the debug view for manipulation by name */\n    public function get_view<T>(_name:String) : T {\n\n        for(view in views) {\n\n            if(view.name == _name) {\n                return cast view;\n            }\n\n        } //view\n\n        return null;\n\n    } //get_view\n\n        /** start a profiling section for the profiler debug view */\n    public function start(_name:String, ?_max:Float) {\n        #if !no_debug_console\n        if(!core.headless) {\n            ProfilerDebugView.start(_name, _max);\n        }\n        #end\n    }\n\n        /** end a profiling section for the profiler debug view */\n    public function end(_name:String) {\n        #if !no_debug_console\n        if(!core.headless) {\n            ProfilerDebugView.end(_name);\n        }\n        #end\n    }\n        /** remove a trace listener added via add_trace_listener */\n    public function remove_trace_listener( _name:String ) {\n        trace_callbacks.remove(_name);\n    }\n\n        /** since luxe captures the haxe `trace` log, you can add listeners to catch trace values for yourself. */\n    public function add_trace_listener( _name:String, _callback: Dynamic->?haxe.PosInfos->Void ) {\n        trace_callbacks.set(_name, _callback);\n    }\n\n\n    //Taken from haxe std lib\n#if cpp\n    static function default_cpp_trace( v : Dynamic, ?infos : haxe.PosInfos ) {\n        if (infos!=null && infos.customParams!=null) {\n            var extra:String = \"\";\n            for( v in infos.customParams ) { extra += \",\" + v; }\n            untyped __trace(v + extra,infos);\n        } else {\n            untyped __trace(v,infos);\n        }\n    } //default_native_trace\n#end //cpp\n#if neko\n    static function default_neko_trace(v:Dynamic, ?infos:haxe.PosInfos) {\n        untyped {\n            $print(infos.fileName + \":\" + infos.lineNumber + \": \", v);\n            if( infos.customParams != null ) for( v in infos.customParams ) $print(\",\", v);\n            $print(\"\\n\");\n        }\n    }\n#end //neko\n\n    @:noCompletion public static function internal_trace( v : Dynamic, ?inf : haxe.PosInfos ) {\n\n        var _line = StringTools.rpad(Std.string(inf.lineNumber), ' ', 4);\n\n        #if neko default_neko_trace(v, inf);\n        #elseif cpp default_cpp_trace(v, inf);\n        #end\n\n        #if luxe_web untyped console.log('${inf.fileName}::$_line $v');\n        #end\n\n        if(shut_down) {\n            return;\n        }\n\n            //call listeners\n        for(_callback in trace_callbacks) {\n            _callback(v, inf);\n        }\n\n    } //internal_trace\n\n    @:noCompletion public function create_debug_console() {\n\n        #if !no_debug_console\n\n            core.on(Ev.keyup, keyup);\n            core.on(Ev.keydown, keydown);\n            core.on(Ev.mouseup, mouseup);\n            core.on(Ev.mousedown, mousedown);\n            core.on(Ev.mousemove, mousemove);\n            core.on(Ev.mousewheel, mousewheel);\n\n                //create the debug renderer and view\n            batcher = new Batcher( Luxe.renderer, 'debug_batcher' );\n                //create a camera\n            view = new Camera({ camera_name:'debug_batcher_camera' });\n                //set the camera of the batcher\n            batcher.view = view;\n                //Also, set the layer so it renders last\n            batcher.layer = 999;\n\n            overlay = new QuadGeometry({\n                id: 'debug.overlay',\n                x:0, y:0,\n                w: Luxe.screen.w,  h: Luxe.screen.h,\n                color : new Color(0,0,0,0.8),\n                depth : 999,    //debug depth\n                visible : false, //default invisible\n                batcher : batcher\n            });\n\n            overlay.locked = true;\n\n                //create the scene inspector\n            padding = new Vector(Luxe.screen.w*0.05,Luxe.screen.h*0.05);\n            inspector = new Inspector({\n                pos : new Vector(padding.x, padding.y),\n                size : new Vector(Luxe.screen.w-(padding.x*2), Luxe.screen.h-(padding.y*2)),\n                batcher : batcher\n            });\n\n\n            inspector.onrefresh = refresh;\n\n            core.on(Ev.windowsized, function( _event:luxe.Screen.WindowEvent ){\n\n                var _w = _event.event.x;\n                var _h = _event.event.y;\n\n                padding.set_xy(_w*0.05,_h*0.05);\n\n                overlay.resize_xy(_w, _h);\n                view.viewport = new Rectangle(0, 0, _w, _h);\n                inspector.size = new Vector(_w-(padding.x*2), _h-(padding.y*2));\n                inspector.pos = new Vector(padding.x, padding.y);\n\n                for(view in views) {\n                    view.onwindowsized(_event);\n                }\n            });\n\n                //no need to process this while we are here.\n            batcher.enabled = false;\n\n            for(view in views) {\n                view.create();\n            }\n\n        #end //no_debug_console\n\n    } //create_debug_console\n\n    function mouseup(e:MouseEvent) {\n        if(visible) {\n            for(view in views) {\n                view.onmouseup(e);\n            }\n        }\n    } //mouseup\n\n    function mousedown(e:MouseEvent) {\n        if(visible) {\n            for(view in views) {\n                view.onmousedown(e);\n            }\n        }\n    } //mousedown\n\n    function mousewheel(e:MouseEvent) {\n        if(visible) {\n            for(view in views) {\n                view.onmousewheel(e);\n            }\n        }\n    } //mousewheel\n\n    function mousemove(e:MouseEvent) {\n        if(visible) {\n            for(view in views) {\n                view.onmousemove(e);\n            }\n        }\n    } //mousemove\n\n    function keyup(e:KeyEvent) {\n\n        if(visible) {\n            for(view in views) {\n                view.onkeyup(e);\n            }\n        } //visible\n\n        #if profiler\n            #if luxe_native\n                if(e.keycode == Key.key_p && profiling) {\n                    cpp.vm.Profiler.stop();\n                    profiling = false;\n                    trace(\"profiling complete. Look for the results in \" + profile_path );\n                }\n            #end //luxe_native\n        #end //profiler\n\n    } //keyup\n\n    function keydown(e:KeyEvent) {\n\n        if(visible) {\n\n            if(e.keycode == Key.key_1 && core.console_visible) {\n                switch_view();\n            }\n\n            for(view in views) {\n                view.onkeydown(e);\n            }\n\n        }\n\n        #if profiler\n            #if luxe_native\n                if(e.keycode == Key.key_p && e.mod.ctrl && !e.repeat) {\n                    trace(\"starting profiler ... let go of key to stop profiling.\");\n                    cpp.vm.Profiler.start( profile_path );\n                    profiling = true;\n                }\n            #end //luxe_native\n        #end //profiler\n\n    } //keydown\n\n    function refresh() {\n\n        if(current_view != null) {\n            current_view.refresh();\n        }\n\n    } //refresh\n\n        /** programmatically switch the debug console view. currently cycles the view. */\n    @:noCompletion public function switch_view() {\n\n            //keep knowledge of this\n        last_view_index = current_view_index;\n            //then go up one, :todo : make easier to jump to specific view?\n        current_view_index++;\n\n            //handle looping\n        if(current_view_index > views.length-1) {\n            current_view_index = 0;\n        }\n\n            //now hide the last view\n        views[last_view_index].hide();\n            //store the new one\n        current_view = views[current_view_index];\n\n            //show the new one\n        current_view.show();\n\n    } //switch_view\n\n    var last_cursor_shown : Bool = true;\n    var last_cursor_grab : Bool = false;\n\n    @:noCompletion public function show_console(_show:Bool = true) {\n\n        #if no_debug_console\n            return;\n        #end\n\n        if(_show) {\n\n            last_cursor_shown = Luxe.screen.cursor.visible;\n            last_cursor_grab = Luxe.screen.cursor.grab;\n\n            Luxe.screen.cursor.visible = true;\n            Luxe.screen.cursor.grab = false;\n\n        } else {\n\n            if(last_cursor_shown!=true) {\n                Luxe.screen.cursor.visible = last_cursor_shown;\n            }\n\n            if(last_cursor_grab!=false) {\n                Luxe.screen.cursor.grab = last_cursor_grab;\n            }\n        }\n\n        visible = _show;\n        batcher.enabled = _show;\n\n        if(_show) {\n            current_view.show();\n            overlay.visible = true;\n            inspector.show();\n        } else {\n            current_view.hide();\n            inspector.hide();\n            overlay.visible = false;\n        }\n\n    } //show_console\n\n    @:noCompletion public function destroy() {\n\n        core.off(Ev.keyup, keyup);\n        core.off(Ev.keydown, keydown);\n        core.off(Ev.mouseup, mouseup);\n        core.off(Ev.mousedown, mousedown);\n        core.off(Ev.mousemove, mousemove);\n        core.off(Ev.mousewheel, mousewheel);\n\n        _debug('\\t debug shut down.');\n        shut_down = true;\n\n    } //destroy\n\n    @:noCompletion public function process() {\n\n        dt_average_accum += Luxe.dt;\n        dt_average_count++;\n\n        if(dt_average_count == dt_average_span - 1) {\n            dt_average = dt_average_accum/dt_average_span;\n            dt_average_accum = dt_average;\n            dt_average_count = 0;\n        }\n\n        if(!visible) {\n            return;\n        }\n\n            //update the title\n        inspector.title.text = '[${current_view.name}] / ${Math.round(1/dt_average)} / ${Maths.fixed(Luxe.dt,5)} / ${Maths.fixed(dt_average,5)}';\n\n        for(view in views) {\n            view.process();\n        }\n\n    } //process\n\n} //Debug\n\n","package luxe;\n\nimport luxe.Log.*;\nimport luxe.Color;\nimport phoenix.Batcher;\nimport phoenix.geometry.*;\n\n    //:todo: move text options to the options package\nimport phoenix.geometry.TextGeometry.TextGeometryOptions;\n\nimport luxe.options.GeometryOptions;\nimport luxe.options.DrawOptions;\n\n/**\n    The `Luxe.draw` API class implementation.\n    This class handles quick access to drawing common geometry options,\n    and is a facilitator for higher level drawing. These can be used given to a `Visual` to convert\n    them into a higher level entity for use with the default scene.\n */\nclass Draw {\n\n//Public API\n\n        /** Draw a line geometry between points `p0` and `p1` with options */\n    public function line( options:DrawLineOptions ) {\n\n        assertnull(options.p0, 'draw.line requires p0:Vector, and p1:Vector');\n        assertnull(options.p1, 'draw.line requires p0:Vector, and p1:Vector');\n\n        def(options.id, 'line.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n            return new LineGeometry(options);\n\n    } // line\n\n        /** Draw a rectangle outline at the specified `x`,`y`,`w`,`h` with options */\n    public function rectangle( options:DrawRectangleOptions ) {\n\n        def(options.id, 'rectangle.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new RectangleGeometry(options);\n\n    } //rectangle\n\n        /** Draw a solid rectangle box at the specified `x`,`y`,`w`,`h` with options */\n    public function box( options:DrawBoxOptions ) {\n\n        def(options.id, 'quad.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new QuadGeometry(options);\n\n    } //box\n\n        /** Draw a circle outline at the specified `x`,`y` with radius `r` (or `rx`,`ry` optionally for an ellipse), with options */\n    public function ring( options:DrawRingOptions ) {\n\n        def(options.id, 'ring.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new RingGeometry(options);\n\n    } //ring\n\n        /** Draw a solid circle at the specified `x`,`y` with radius `r` (or `rx`,`ry` optionally for an ellipse), with options */\n    public function circle( options:DrawCircleOptions ) {\n\n        def(options.id, 'circle.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new CircleGeometry(options);\n\n    } //circle\n\n        /** Draw an arc (open circle) at the specified `x`,`y`, between `start_angle` and `end_angle` with radius `r` (or `rx`,`ry` optionally for an ellipsical arc), with options */\n    public function arc( options:DrawArcOptions ) {\n\n        def(options.id, 'arc.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new ArcGeometry(options);\n\n    } //arc\n\n        /** Draw an n-sided polygon (3 sides for triangle, 6 for hexagon etc) at `x`,`y` with a radius `r` and `sides` with options  */\n    public function ngon( options:DrawNgonOptions ) : Geometry {\n\n        def(options.id, 'ngon.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        var _sides : Int = 3;\n        var _radius : Float = 64;\n        var _solid : Bool = false;\n        var _x : Float = 0;\n        var _y : Float = 0;\n        var _angle : Float = 0;\n\n        if(options.sides != null) {\n            _sides = options.sides;\n        }\n\n        if(options.r != null) { _radius = options.r; }\n        if(options.x != null) { _x = options.x; }\n        if(options.y != null) { _y = options.y; }\n        if(options.angle != null) { _angle = options.angle; }\n        if(options.solid != null) { _solid = options.solid; }\n\n        if(!_solid) {\n            options.primitive_type = PrimitiveType.lines;\n        } else {\n            options.primitive_type = PrimitiveType.triangle_fan;\n        }\n\n        var _geometry = new Geometry(options);\n        var _two_pi : Float = 2 * Math.PI;\n        var _sides_over_pi : Float = Math.PI / _sides;\n        var _sides_over_twopi : Float = _two_pi / _sides;\n        var _angle_rad : Float = luxe.utils.Maths.radians(_angle);\n        var _color = options.color;\n\n        if(_solid) {\n                //add the center vertex\n            _geometry.add( new Vertex( new Vector( _x, _y ), _color ) );\n        }\n\n        var _count : Int = (_solid == false) ? _sides : _sides+1;\n        var _points:Array<Vector> = [];\n\n        for(i in 0 ... _count ) {\n\n            var __x   = (_radius * Math.sin(_angle_rad + (_sides_over_pi) + (i * (_sides_over_twopi))));\n            var __y   = (_radius * Math.cos(_angle_rad + (_sides_over_pi) + (i * (_sides_over_twopi))));\n            var __pos = new Vector( _x + __x, _y + __y, 0 );\n\n            _geometry.add( new Vertex( __pos, _color ) );\n\n            if(!_solid) {\n                if(i > 0) {\n                    var _last = _points[i - 1];\n                    _geometry.add( new Vertex( __pos, _color ) );\n                }\n            }\n\n            _points.push(__pos);\n\n        } //for all sides\n\n        if(!_solid) {\n            _geometry.add( new Vertex( _points[0], _color ) );\n        }\n\n        return _geometry;\n\n    } //ngon\n\n        /** Draw an arbitrary polygon of points with options.\n            Uses triangle fans (no additional verts added) for solid,\n            Uses lines for non-solid, adding verts as needed to form lines. */\n    public function poly( options:DrawPolygonOptions ) {\n\n        def(options.id, 'poly.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n        def(options.solid, true);\n        def(options.close, false);\n\n        var _default_col:Color = null;\n        var _has_colors = (options.colors != null);\n        if(!_has_colors) _default_col = def(options.color, new Color());\n\n        if(options.solid) {\n\n            def(options.primitive_type, PrimitiveType.triangle_fan);\n\n            var _geometry = new Geometry(options);\n\n            var _idx = 0;\n            var _l = options.points.length;\n            for(_point in options.points) {\n                var _color = _has_colors ? options.colors[_idx] : _default_col;\n                _geometry.add(new Vertex(_point, _color));\n                ++_idx;\n            }\n\n            return _geometry;\n\n        } else {\n\n            def(options.primitive_type, PrimitiveType.lines);\n\n            var _geometry = new Geometry(options);\n\n            var _idx = 0;\n            var _l = options.points.length;\n\n            for(_point in options.points) {\n                var _color = _has_colors ? options.colors[_idx] : _default_col;\n                _geometry.add(new Vertex(_point, _color));\n                if(_idx < _l-2) {\n                    var _color_next = _has_colors ? options.colors[_idx+1] : _default_col;\n                    _geometry.add(new Vertex(options.points[_idx+1], _color_next));\n                }\n                ++_idx;\n            }\n\n            if(options.close) {\n                var _last = options.points.length-1;\n                var _color1 = _has_colors ? options.colors[0] : _default_col;\n                var _color2 = _has_colors ? options.colors[_last] : _default_col;\n                _geometry.add(new Vertex(options.points[_last], _color1));\n                _geometry.add(new Vertex(options.points[0], _color2));\n            }\n\n            return _geometry;\n\n        }\n\n    } //poly\n\n        /** Draw a textured `box` with image `texture` at `x`,`y`,`w`,`h` OR with `pos` and `size`, and `uv` with options */\n    public function texture( options:DrawTextureOptions ) {\n\n        def(options.id, 'texture.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        var _x : Float = 0;\n        var _y : Float = 0;\n        var _w : Float = 0;\n        var _h : Float = 0;\n\n            //this is an arbitrary default\n        var _tw : Int = 64;\n        var _th : Int = 64;\n\n            if(options.texture != null) {\n                _tw = options.texture.width;\n                _th = options.texture.height;\n\n                if(options.size == null) {\n                    _w = _tw;\n                    _h = _th;\n                }\n            }\n\n            if(options.pos != null) {\n                _x = options.pos.x;\n                _y = options.pos.y;\n            }\n            if(options.size != null) {\n                _w = options.size.x;\n                _h = options.size.y;\n            }\n\n            def(options.x, _x);\n            def(options.y, _y);\n            def(options.w, _w);\n            def(options.h, _h);\n\n            var _quad = new QuadGeometry(options);\n\n            var _ux : Float = 0;\n            var _uy : Float = 0;\n            var _uw : Float = _tw;\n            var _uh : Float = _th;\n\n            if(options.uv != null) {\n                _ux = options.uv.x;\n                _uy = options.uv.y;\n                _uw = options.uv.w;\n                _uh = options.uv.h;\n            }\n\n            _quad.uv( new Rectangle(_ux, _uy, _uw, _uh) );\n\n        return _quad;\n\n    } //texture\n\n        /** Draw `text` with options (default font used if none specified) */\n    public function text( options:TextGeometryOptions ) {\n\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new TextGeometry(options);\n\n    } //text\n\n        //hidden as 3D specifics aren't in the API yet.\n        /** Draw a plane (three dimensional quad) with options */\n    @:noCompletion public function plane( ?options:DrawPlaneOptions ) {\n\n        def(options.id, 'plane.geometry');\n        def(options.batcher, Luxe.renderer.batcher);\n\n        return new PlaneGeometry( options );\n\n    } //_plane\n\n\n//Internal API\n\n    var core : Core;\n    @:allow(luxe.Core)\n    function new( _core:Core ) {\n\n        core = _core;\n\n    } //new\n\n\n} //Draw\n","package luxe;\n\nimport luxe.Core;\nimport luxe.Log.*;\n\n\n/** An event system that handles queued, immediate or\n    scheduled event id's to be fired and listened for.\n    Multiple listeners can be connected to a single event id,\n    and when fired all listeners are informed. Events are not\n    retroactive, only listeners that are attached at the time\n    will recieve the event notifications. Don't forget to disconnect events. */\nclass Events {\n\n    @:noCompletion public var event_queue : Map< String, EventObject>;\n    @:noCompletion public var event_connections : Map< String, EventConnection>; //event id, connect\n    @:noCompletion public var event_slots : Map< String, Array<EventConnection> >; //event name, array of connections\n    @:noCompletion public var event_filters : Map< String, Array<EventConnection> >; //event name, array of connections\n    @:noCompletion public var event_schedules : Map< String, snow.api.Timer >; //event id, timer\n\n        /** Create a new instance for sending/receiving events. */\n    public function new( ) {\n\n            //create the queue, lists and map\n        event_connections = new Map();\n        event_slots = new Map();\n        event_filters = new Map();\n        event_queue = new Map();\n        event_schedules = new Map();\n\n    } //new\n\n        /** Destroy this `Events` instance */\n    public function destroy() {\n\n        clear();\n\n    } //destroy\n\n        /** Clear any scheduled or bound events. Called on destroy. */\n    public function clear() {\n\n        for(schedule in event_schedules) {\n            schedule.stop();\n            schedule = null;\n        }\n\n        for(connection in event_connections.keys()) {\n            event_connections.remove(connection);\n        }\n\n        for(filter in event_filters.keys()) {\n            event_filters.remove(filter);\n        }\n\n        for(slot in event_slots.keys()) {\n            event_slots.remove(slot);\n        }\n\n        for(event in event_queue.keys()) {\n            event_queue.remove(event);\n        }\n\n    }\n\n        /** Convenience. Exposed for learning/testing the filtering API. */\n    public function does_filter_event( _filter:String, _event:String ) {\n\n        var _replace_stars : EReg = ~/\\*/gi;\n        var _final_filter : String = _replace_stars.replace( _filter, '.*?' );\n        var _final_search : EReg = new EReg(_final_filter, 'gi');\n\n        return _final_search.match( _event );\n\n    } //does_filter_event\n\n\n        /** Bind a signal (listener) to a slot (event_name)   \n            event_name : The event id   \n            listener : A function handler that should get called on event firing */\n    public function listen<T>( _event_name : String, _listener : T -> Void ):String {\n\n            //we need an ID and a connection to store\n        var id : String = Luxe.utils.uniqueid();\n        var connection : EventConnection = new EventConnection( id, _event_name, _listener );\n\n            //now we store it in the map\n        event_connections.set( id, connection );\n\n            //first check if the event name in question has a * wildcard,\n            //if it does we have to store it as a filtered event so it's more optimal\n            //to search through when events are fired\n        var _has_stars : EReg = ~/\\*/gi;\n        if(_has_stars.match(_event_name)) {\n\n                //also store the listener inside the slots\n            if(!event_filters.exists(_event_name)) {\n                    //no slot exists yet? make one!\n                event_filters.set(_event_name, [] );\n            }\n\n                //it should exist by now, lets store the connection by event name\n            event_filters.get(_event_name).push( connection );\n\n        } else {\n\n                //also store the listener inside the slots\n            if(!event_slots.exists(_event_name)) {\n                    //no slot exists yet? make one!\n                event_slots.set(_event_name, [] );\n            }\n\n                //it should exist by now, lets store the connection by event name\n            event_slots.get(_event_name).push( connection );\n\n        }\n\n            //return the id for unlistening\n        return id;\n\n    } //listen\n\n        /**Disconnect a bound signal   \n            The event connection id is returned from listen()   \n            and returns true if the event existed and was removed. */\n    public function unlisten( event_id : String ) : Bool {\n\n        if(event_connections.exists(event_id)) {\n\n            var connection = event_connections.get(event_id);\n            var event_slot = event_slots.get(connection.event_name);\n\n            if(event_slot != null) {\n                event_slot.remove(connection);\n                return true;\n            } else {\n                var event_filter = event_filters.get(connection.event_name);\n                if(event_filter != null) {\n                    event_filter.remove(connection);\n                    return true;\n                } else {\n                    return false;\n                } //event_filter != null\n            } //event_slot != null\n\n            return true;\n\n        } else {\n            return false;\n        }\n\n    } //unlisten\n\n        /*Queue an event in the next update loop   \n            event_name : The event (register listeners with listen())   \n            properties : A dynamic pass-through value to hand off data   \n            returns : a String, the unique ID of the event */\n    public function queue<T>( event_name : String, ?properties : T ) : String {\n\n        var id : String = Luxe.utils.uniqueid();\n\n                //store it in case we want to manipulate it\n            var event:EventObject = new EventObject(id, event_name, properties);\n\n                //stash it away\n            event_queue.set(id, event);\n\n            //return the user the id\n        return id;\n\n    } //queue\n\n        /** Remove an event from the queue by id returned from queue. */\n    public function dequeue( event_id: String ) {\n\n        if(event_queue.exists(event_id)) {\n\n            var event = event_queue.get(event_id);\n                event = null;\n\n            event_queue.remove( event_id );\n\n            return true;\n\n        } //if exists in the queue\n\n        return false;\n\n    } //dequeue\n\n        /** Process/update the events, firing any events in the queue.\n            if you create a custom instance, call this when you want to process. */\n    public function process() {\n\n            //fire each event in the queue\n        for(event in event_queue) {\n            fire( event.name, event.properties );\n        }\n\n            //if we actually have any events, clear the queue\n        if(event_queue.keys().hasNext()) {\n                //clear out the queue\n            event_queue = null;\n            event_queue = new Map();\n        }\n\n    } //update\n\n        /** Fire an event immediately, calling all listeners.\n            properties : An optional pass-through value to hand to the listener.\n            Returns true if event existed, false otherwise.\n            If the optional tag flag is set (default:false), the properties object will be modified\n            with some debug information, like _event_name_ and _event_connection_count_ */\n    public function fire<T>( _event_name : String, ?_properties : T, ?_tag:Bool=false ) : Bool {\n\n        var _fired = false;\n\n        //we have to check against our filters if this event matches anything\n        for(_filter in event_filters) {\n\n            if(_filter.length > 0) {\n\n                var _filter_name = _filter[0].event_name;\n                if(does_filter_event(_filter_name, _event_name)) {\n\n                    if(_tag) {\n                        _properties = tag_properties(_properties, _event_name, _filter.length);\n                    }\n\n                    for(_connection in _filter) {\n                        _connection.listener( cast _properties );\n                    } //each connection to this filter\n\n                    _fired = true;\n\n                } //if it actually fits this event filter\n            } //if there are any connections\n\n        } //for each of our filters\n\n        if(event_slots.exists( _event_name )) {\n\n                //we have an event by this name\n            var connections:Array<EventConnection> = event_slots.get(_event_name);\n\n            if(_tag) {\n                _properties = tag_properties(_properties, _event_name, connections.length);\n            }\n\n                //call each listener\n            for(connection in connections) {\n                connection.listener( cast _properties );\n            }\n\n            _fired = true;\n\n        }\n\n        return _fired;\n\n    } //fire\n\n        /** Schedule and event in the future\n            event_name : The event (register listeners with listen())\n            properties : An optional pass-through value to hand to the listeners\n            Returns the ID of the schedule (for unschedule) */\n    public function schedule<T>( time:Float, event_name : String, ?properties : T ) : String {\n\n        var id : String = Luxe.utils.uniqueid();\n\n            var _timer = Luxe.timer.schedule(time, fire.bind(event_name, properties));\n\n            event_schedules.set( id, _timer );\n\n        return id;\n\n    } //schedule\n\n        /** Unschedule a previously scheduled event\n            schedule_id : The id of the schedule (returned from schedule)\n            Returns false if fails, or event doesn't exist */\n    public function unschedule( schedule_id : String ) : Bool {\n\n        if(event_schedules.exists(schedule_id)) {\n                //find the timer\n            var timer = event_schedules.get(schedule_id);\n                //kill it\n            timer.stop();\n                //remove it from the list\n            event_schedules.remove(schedule_id);\n                //done\n            return true;\n        }\n\n        return false;\n\n    } //unschedule\n\n//Internal\n\n    function tag_properties(_properties:Dynamic, _name:String,_count:Int) {\n\n        def(_properties, {});\n\n            //tag these information slots, with _ so they don't clobber other stuff\n        Reflect.setField(_properties,'_event_name_', _name);\n            //tag a listener count\n        Reflect.setField(_properties,'_event_connection_count_', _count);\n\n        return _properties;\n\n    } //tag_properties\n\n} // Events\n\nprivate class EventConnection {\n\n\n    public var listener : Dynamic -> Void;\n    public var id : String;\n    public var event_name : String;\n\n\n    public function new( _id:String, _event_name:String, _listener : Dynamic -> Void ) {\n\n        id = _id;\n        listener = _listener;\n        event_name = _event_name;\n\n    } //new\n\n\n} //EventConnection\n\nprivate class EventObject {\n\n\n    public var id : String;\n    public var name:String;\n    public var properties : Dynamic;\n\n\n    public function new(_id:String, _event_name:String, _event_properties:Dynamic ) {\n\n        id = _id;\n        name = _event_name;\n        properties = _event_properties;\n\n    } //new\n\n\n} //EventObject\n","package luxe;\n\nimport luxe.Core;\n\n@:allow(luxe.Core)\nclass IO {\n\n    public var core : Core;\n\n    function new( _core:Core ) {\n        core = _core;\n    } //new\n\n//Path specifics\n#if luxe_native\n    public var app_path (get,never) : String;\n    public var app_path_prefs (get,never) : String;\n#end\n\n//Utility features\n\n        /** Open the system default browser with the given URL.\n            supported: mac/window/linux/iOS/web\n            pending: android https://github.com/underscorediscovery/snow/issues/25 */\n    public inline function url_open( _url:String ) {\n\n        core.app.io.url_open( _url );\n\n    } //url_open\n\n        /** Save a string value by key, with an optional slot.\n            To remove a saved key, pass value in as null.\n            Works on all targets as a simple save/load mechanism.\n            Data saved is plain text but obscured with basic encoding.\n            Any further obfuscation can be done on the value prior to saving.\n            Returns false if the save failed, errors being logged. */\n    public inline function string_save( _key:String, _value:String, _slot:Int = 0 ) : Bool {\n\n        return core.app.io.string_save(_key, _value, _slot);\n\n    } //string_save\n\n        /** Load a string value by key, with an optional slot.\n            Works on all targets as a simple save/load mechanism.\n            Returns the string or null if the key was invalid, or the slot was not found. */\n    public inline function string_load( _key:String, _slot:Int = 0 ) : String {\n\n        return core.app.io.string_load(_key, _slot);\n\n    } //string_load\n\n        /** Destroy a specific string slot, removing all values stored.\n            Does not ask for confirmation. Returns true if successful, false otherwise. */\n    public inline function string_destroy( _slot:Int = 0 ) : Bool {\n\n        return core.app.io.string_destroy(_slot);\n\n    } //string_destroy\n\n//Internal\n\n#if luxe_native\n\n    function get_app_path() {\n\n        return core.app.io.module.app_path();\n\n    } //get_app_path\n\n    function get_app_path_prefs() {\n\n        return core.app.io.module.app_path_prefs();\n\n    } //get_app_path\n\n#end\n\n    function init() {\n\n    } //init\n\n} //IO\n","package luxe;\n\nimport luxe.Core;\nimport luxe.Log._debug;\nimport snow.types.Types;\n\n    /** A modifier state for key events */\ntypedef ModState        =   snow.types.Types.ModState;\n    /** A named list of keycodes. Use to compare against key event `keycode` values */\ntypedef Key             =   snow.system.input.Keycodes.Keycodes;\n    /** A named list of scancodes. Use to compare against key event `scancode` values */\ntypedef Scan            =   snow.system.input.Keycodes.Scancodes;\n\n/** A typed mouse button id */\n@:enum abstract MouseButton(Int) from Int to Int {\n\n/** no mouse buttons */\n    var none = 0;\n/** left mouse button */\n    var left = 1;\n/** middle mouse button */\n    var middle = 2;\n/** right mouse button */\n    var right = 3;\n/** extra button pressed (4) */\n    var extra1 = 4;\n/** extra button pressed (5) */\n    var extra2 = 5;\n\n} //MouseButton\n\n/** A typed state for mouse, touch, or pressed/similar */\nenum InteractState {\n\n/** An unknown state */\n    unknown;\n/** An none state */\n    none;\n/** In a pressed state */\n    down;\n/** In a released state */\n    up;\n/** In a moving state */\n    move;\n/** A mouse wheel state */\n    wheel;\n/** A gamepad axis state */\n    axis;\n\n} //MouseState\n\n/** A typed text event type */\nenum TextEventType {\n\n/** An unknown event */\n    unknown;\n/** An edit text typing event */\n    edit;\n/** An input text typing event */\n    input;\n\n} //TextEventType\n\n/** Information about a keyboard event */\ntypedef KeyEvent = {\n\n        /** The `Scan` code value for this event */\n    var scancode : Int;\n        /** The `Key` code value for this event */\n    var keycode : Int;\n        /** The state of the key in this event */\n    var state : InteractState;\n        /** The modifier state of this event */\n    var mod : ModState;\n        /** If this value is bigger than 0 this is a key repeat event of a key held down */\n    var repeat : Bool;\n        /** The time in seconds when this touch event occurred, use for deltas */\n    var timestamp : Float;\n        /** The window id this event originated from */\n    var window_id : Int;\n\n} //KeyEvent\n\n/** Information about a touch event */\ntypedef TouchEvent = {\n\n        /** The state this touch event is in */\n    var state : InteractState;\n        /** The time in seconds when this touch event occurred, use for deltas */\n    var timestamp : Float;\n        /** The id of the touch that this event comes from, a finger id */\n    var touch_id : Int;\n        /** The x position in the window of the touch event */\n    var x : Float;\n        /** The x position in the window of the touch event */\n    var y : Float;\n        /** The delta x value of the touch event, if the state is `moving` */\n    var dx : Float;\n        /** The delta y value of the touch event, if the state is `moving` */\n    var dy : Float;\n        /** A convenience vector access of the x and y position */\n    var pos : luxe.Vector;\n\n} //TouchEvent\n\n/** Information about a text input event */\ntypedef TextEvent = {\n\n        /** The text that this event has generated */\n    var text : String;\n        /** The type of text event */\n    var type : TextEventType;\n        /** The time in seconds when this touch event occurred, use for deltas */\n    var timestamp : Float;\n        /** The window id this event originated from */\n    var window_id : Int;\n        /** The start position, if the `type` is `edit` */\n    var start : Int;\n        /** The length position, if the `type` is `edit` */\n    var length : Int;\n\n} //TextEvent\n\n/** A typed gamepad event type */\nenum GamepadEventType {\n\n/** An unknown event */\n    unknown;\n/** An axis change event */\n    axis;\n/** A button event */\n    button;\n/** A device added event */\n    device_added;\n/** A device removed event */\n    device_removed;\n/** A device was remapped */\n    device_remapped;\n\n} //GamepadEventType\n\n/** Information about a gamepad event */\ntypedef GamepadEvent = {\n\n        /** The time in seconds when this gamepad event occurred, use for deltas */\n    var timestamp : Float;\n        /** The type of gamepad event that this corresponds with */\n    var type : GamepadEventType;\n        /** The state this event is in */\n    var state : InteractState;\n        /** The id of the gamepad this event comes from */\n    var gamepad : Int;\n        /** The button id, if the event `type` is `button` */\n    var button : Int;\n        /** The axis id, if the event `type` is `axis` */\n    var axis : Int;\n        /** The axis value, if the event `type` is `axis` */\n    var value : Float;\n        /** The system id / name of the device, **only** if the event `type` is `device_added`,`device_removed` or `device_remapped` */\n    var id : String;\n\n} //GamepadEvent\n\n/** Information about a mouse event */\ntypedef MouseEvent = {\n\n        /** The time in seconds when this touch event occurred, use for deltas */\n    var timestamp : Float;\n        /** The window id this event originated from */\n    var window_id : Int;\n        /** The state this event is in */\n    var state : InteractState;\n        /** The button id, if the event `state` is `down` or `up` */\n    var button : MouseButton;\n        /** The x position in the window of the mouse event */\n    var x : Int;\n        /** The y position in the window of the mouse event */\n    var y : Int;\n        /** The relative x position if `state` is `move` or a window has grabbed state */\n    var xrel : Int;\n        /** The relative y position if `state` is `move` or a window has grabbed state */\n    var yrel : Int;\n        /** A convenience vector access of the x and y position */\n    var pos : luxe.Vector;\n\n} //MouseEvent\n\n/** A type for a named input event */\nenum InputType {\n\n        /** A mouse input event */\n    mouse;\n        /** A touch input event */\n    touch;\n        /** A key input event */\n    keys;\n        /** A gampad input event */\n    gamepad;\n\n} //InputType\n\n/** Information about a named input event */\ntypedef InputEvent = {\n\n        /** the name of the input event */\n    var name : String;\n        /** the type of input this event was generated for */\n    var type  : InputType;\n        /** The state of the event */\n    var state : InteractState;\n        /** null, unless type is `touch` */\n    @:optional var touch_event : TouchEvent;\n        /** null, unless type is `mouse` */\n    @:optional var mouse_event : MouseEvent;\n        /** null, unless type is `keys` */\n    @:optional var key_event : KeyEvent;\n        /** null, unless type is `gamepad` */\n    @:optional var gamepad_event : GamepadEvent;\n\n}\n\nclass Input {\n\n    @:noCompletion public var core : Core;\n    @:noCompletion public function new( _core:Core ) { core = _core; }\n\n    var key_bindings : Map<String, Map<Int,Bool> >;\n    var mouse_bindings : Map<String, Map<Int,Bool> >;\n    var gamepad_bindings: Map<String, Map<Int, Null<Int>> >;\n\n    var _named_input_released : Map<String, Bool>;\n    var _named_input_pressed : Map<String, Bool>;\n    var _named_input_down : Map<String, Bool>;\n\n    @:noCompletion public function init() {\n\n        key_bindings = new Map();\n        mouse_bindings = new Map();\n        gamepad_bindings = new Map();\n\n        _named_input_down = new Map();\n        _named_input_pressed = new Map();\n        _named_input_released = new Map();\n\n        _debug('\\t input initialized.');\n\n    } //init\n\n    @:noCompletion public function destroy() {\n        _debug('\\t input shut down.');\n    } //destroy\n\n    @:noCompletion public function process() {\n\n           //remove any stale named pressed value\n            //unless it wasn't alive for a full frame yet,\n            //then flag it so that it may be\n        for(_event in _named_input_pressed.keys()){\n\n            if(_named_input_pressed.get(_event)){\n                _named_input_pressed.remove(_event);\n            } else {\n                _named_input_pressed.set(_event, true);\n            }\n\n        } //each _named_input_pressed\n\n            //remove any stale key released value\n            //unless it wasn't alive for a full frame yet,\n            //then flag it so that it may be\n        for(_event in _named_input_released.keys()){\n\n            if(_named_input_released.get(_event)){\n                _named_input_released.remove(_event);\n            } else {\n                _named_input_released.set(_event, true);\n            }\n\n        } //each _named_input_released\n\n    } //process\n\n//Input query\n\n        /** immediate query of the pressed state of a named input. only true if pressed within one frame */\n    public function inputpressed( _event:String ) : Bool {\n        return _named_input_pressed.exists( _event );\n    } //inputpressed\n\n        /** immediate query of the released state of a named input. only true if released within one frame */\n    public function inputreleased( _event:String ) : Bool{\n        return _named_input_released.exists( _event );\n    } //inputreleased\n\n        /** immediate query of the down state of a named input. only true while the key is down */\n    public function inputdown( _event:String ) : Bool{\n        return _named_input_down.exists( _event );\n    } //inputdown\n\n//Keys\n\n        /** immediate query of the pressed state of a `keycode`, use `Key` for named keycodes. only true if pressed within one frame */\n    public function keypressed( _code:Int ) : Bool {\n        return core.app.input.keypressed( _code );\n    } //keypressed\n\n        /** immediate query of the released state of a `keycode`, use `Key` for named keycodes. only true if released within one frame */\n    public function keyreleased( _code:Int ) : Bool{\n        return core.app.input.keyreleased( _code );\n    } //keyreleased\n\n        /** immediate query of the down state of a `keycode`, use `Key` for named keycodes. only true while the key is down */\n    public function keydown( _code:Int ) : Bool{\n        return core.app.input.keydown( _code );\n    } //keydown\n\n\n        /** immediate query of the pressed state of a `scancode`, use `Scan` for named scancodes. only true if pressed within one frame */\n    public function scanpressed( _code:Int ) : Bool {\n        return core.app.input.scanpressed( _code );\n    } //scanpressed\n\n        /** immediate query of the released state of a `scancode`, use `Scan` for named scancodes. only true if released within one frame */\n    public function scanreleased( _code:Int ) : Bool{\n        return core.app.input.scanreleased( _code );\n    } //scanreleased\n\n        /** immediate query of the down state of a `scancode`, use `Scan` for named scancodes. only true while the key is down */\n    public function scandown( _code:Int ) : Bool{\n        return core.app.input.scandown( _code );\n    } //scandown\n\n//Mouse\n\n        /** immediate query of the pressed state of a mouse button. only true if pressed within one frame */\n    public function mousepressed( _button:MouseButton ) : Bool {\n        return core.app.input.mousepressed( _button );\n    } //mousepressed\n\n        /** immediate query of the released state of a mouse button. only true if released within one frame */\n    public function mousereleased( _button:MouseButton ) : Bool{\n        return core.app.input.mousereleased( _button );\n    } //mousereleased\n\n        /** immediate query of the down state of a mouse button. only true while the button is down. */\n    public function mousedown( _button:MouseButton ) : Bool{\n        return core.app.input.mousedown( _button );\n    } //mousedown\n\n//Gamepad\n\n        /** immediate query of the pressed state of a gamepad button. only true if pressed within one frame */\n    public function gamepadpressed( _gamepad:Int, _button:Int ) : Bool {\n        return core.app.input.gamepadpressed( _gamepad, _button );\n    } //gamepadpressed\n\n        /** immediate query of the released state of a gamepad button. only true if released within one frame */\n    public function gamepadreleased( _gamepad:Int, _button:Int ) : Bool{\n        return core.app.input.gamepadreleased( _gamepad, _button );\n    } //gamepadreleased\n\n        /** immediate query of the down state of a gamepad button. only true while the button is down */\n    public function gamepaddown( _gamepad:Int, _button:Int ) : Bool{\n        return core.app.input.gamepaddown( _gamepad, _button );\n    } //gamepaddown\n\n        /** immediate query of the axis value of a gamepad axis. */\n    public function gamepadaxis( _gamepad:Int, _axis:Int ) : Float {\n        return core.app.input.gamepadaxis( _gamepad, _axis );\n    } //gamepadaxis\n\n\n//Named event handlers\n\n        /** Bind a named input binding to a `Key` */\n    public function bind_key( _name:String, _key:Int ) {\n\n        if( !key_bindings.exists(_name) ) {\n            key_bindings.set(_name, new Map<Int,Bool>() );\n        } //if the map doesn't exist yet\n\n        var kb = key_bindings.get(_name);\n            kb.set( _key, true );\n\n    } //bind_key\n\n        /** Bind a named input binding to a `MouseButton` */\n    public function bind_mouse( _name:String, _button:MouseButton ) {\n\n        if( !mouse_bindings.exists(_name) ) {\n            mouse_bindings.set(_name, new Map<Int,Bool>());\n        } //if the map doesn't exist yet\n\n        var mb = mouse_bindings.get(_name);\n            mb.set( _button, true );\n\n    } //bind_mouse\n\n    /** Bind a named input binding to a `Gamepad Button`. If no `Gamepad Id` is specified, any gamepad fires the named binding.*/\n    public function bind_gamepad( _name:String, _gamepad_button:Int, ?_gamepad_id:Null<Int> = null) {\n        if ( !gamepad_bindings.exists(_name) ) {\n            gamepad_bindings.set(_name, new Map<Int, Null<Int>>());\n        }\n\n        var gp = gamepad_bindings.get(_name);\n        gp.set ( _gamepad_button, _gamepad_id);\n    } //bind_gamepad\n\n    @:noCompletion public function check_named_keys( e:KeyEvent, _down:Bool=false ) {\n\n        var _fired : Array<String> = [];\n        for(_name in key_bindings.keys()) {\n\n            var _b = key_bindings.get(_name);\n            var _is_down_repeat = _down && e.repeat;\n            if(_b.exists(e.keycode) && !_is_down_repeat) {\n                if( !Lambda.has(_fired, _name)) {\n                    _fired.push(_name);\n                }\n            } //if the key fired is stored in a named binding\n\n        } //for each binding\n\n        for(_f in _fired) {\n            if(_down) {\n\n                    //down but not yet processed\n                _named_input_pressed.set( _f, false);\n                    //down is true immediate, cos up removes it\n                _named_input_down.set( _f, true);\n\n                core.oninputdown( _f, {\n                    name : _f,\n                    type : InputType.keys,\n                    state : InteractState.down,\n                    key_event : e\n                });\n\n            } else {\n\n                    //up but not yet processed\n                _named_input_released.set( _f, false);\n                    //remove down state\n                _named_input_down.remove( _f );\n\n                core.oninputup( _f, {\n                    name : _f,\n                    type : InputType.keys,\n                    state : InteractState.up,\n                    key_event : e\n                });\n\n            } //if _down\n        } //_f in _fired\n\n    } //check_named_keys\n\n    @:noCompletion public function check_named_mouse( e:MouseEvent, _down:Bool=false ) {\n\n        var _fired : Array<String> = [];\n        for(_name in mouse_bindings.keys()) {\n\n            var _b = mouse_bindings.get(_name);\n            if(_b.exists(e.button)) {\n                if( !Lambda.has(_fired, _name)) {\n                    _fired.push(_name);\n                }\n            } //if the key fired is stored in a named binding\n\n        } //for each binding\n\n        for(_f in _fired) {\n            if(_down) {\n\n                    //down but not yet processed\n                _named_input_pressed.set( _f, false);\n                    //down is true immediate, cos up removes it\n                _named_input_down.set( _f, true);\n\n                core.oninputdown( _f, {\n                    name : _f,\n                    type : InputType.mouse,\n                    state : InteractState.down,\n                    mouse_event : e\n                });\n\n            } else {\n\n                    //up but not yet processed\n                _named_input_released.set( _f, false);\n                    //remove down state\n                _named_input_down.remove( _f );\n\n                core.oninputup( _f, {\n                    name : _f,\n                    type : InputType.mouse,\n                    state : InteractState.up,\n                    mouse_event : e\n                });\n            }\n        } //_f in _fired\n\n    } //check_named_keys\n\n    @:noCompletion public function check_named_gamepad_buttons( e:GamepadEvent, _down:Bool=false ) {\n\n        var _fired : Array<String> = [];\n        for (_name in gamepad_bindings.keys()) {\n\n            var _b = gamepad_bindings.get(_name);\n            if (_b.exists(e.button)) {\n                var _kb = _b.get(e.button);\n                var _accepted_gamepad = _kb == null || _kb == e.gamepad;\n                if ( !Lambda.has(_fired, _name) && _accepted_gamepad) {\n                    _fired.push(_name);\n                }\n            } // if the button fired is stored in a named binding\n        }\n\n        for(_f in _fired) {\n            if (_down) {\n\n                //down but now yet processed\n                _named_input_pressed.set( _f, false);\n                // down is true immediate, because up removes it\n                _named_input_down.set( _f, true);\n\n                core.oninputdown( _f, {\n                    name: _f,\n                    type: InputType.gamepad,\n                    state: InteractState.down,\n                    gamepad_event: e\n                });\n\n            } else {\n\n                // up but not yet processed\n                _named_input_released.set( _f, false);\n                // remove down state\n                _named_input_down.remove( _f );\n\n                core.oninputup( _f, {\n                    name: _f,\n                    type: InputType.gamepad,\n                    state: InteractState.up,\n                    gamepad_event: e\n                });\n\n            }\n        } //_f in _fired\n    } //check_named_gamepad_buttons\n\n} //Input\n","package luxe;\n\nimport luxe.Color;\nimport luxe.Rectangle;\nimport luxe.Sprite;\nimport luxe.Vector;\nimport phoenix.Batcher;\nimport phoenix.geometry.QuadPackGeometry;\nimport phoenix.geometry.QuadGeometry;\nimport phoenix.geometry.TextureCoord;\n\nimport luxe.options.NineSliceOptions;\n\nprivate typedef Slice = {\n    pos : Vector,\n    width : Float,\n    height : Float,\n    source_x : Float,\n    source_y : Float,\n    source_width : Float,\n    source_height : Float,\n    geometry_id : Int\n};\n\n/** A nineslice based sprite, for scaling */\nclass NineSlice extends luxe.Visual {\n\n    public var top : Float = 32;\n    public var left : Float = 32;\n    public var right : Float = 32;\n    public var width : Float = 0.0;\n    public var bottom : Float = 32;\n    public var height : Float = 0.0;\n    public var source_x : Float = 0.0;\n    public var source_y : Float = 0.0;\n    public var source_w : Float = 0.0;\n    public var source_h : Float = 0.0;\n    public var is_set : Bool = false;\n\n    @:noCompletion public var midwidth : Float = 0.0;\n    @:noCompletion public var midheight : Float = 0.0;\n    @:noCompletion public var slices : Array<Slice>;\n    @:noCompletion public var added : Bool = false;\n    @:noCompletion public var nineslice_options : NineSliceOptions;\n    @:noCompletion public var _geometry : QuadPackGeometry;\n\n    var _batcher : Batcher;\n\n        /** create a new nineslice with given options */\n    public function new( _options:NineSliceOptions ) {\n\n            //default to internal batcher\n        slices = new Array<Slice>();\n\n            //we need to tell the visual not to create geometry ,\n            //because we create our own from here.\n        if(_options == null) {\n            _options = {\n                no_geometry : true,\n            }\n        } else {\n            _options.no_geometry = true;\n        }\n\n        nineslice_options = _options;\n\n        if(_options.batcher != null) {\n            _batcher = _options.batcher;\n        } else {\n            _batcher = Luxe.renderer.batcher;\n        }\n\n            //visual options to parent\n        super(_options);\n\n            //now local options\n        if(_options.top != null) top = _options.top;\n        if(_options.left != null) left = _options.left;\n        if(_options.right != null) right = _options.right;\n        if(_options.bottom != null) bottom = _options.bottom;\n\n        if(_options.source_x != null) { source_x = _options.source_x; }\n        if(_options.source_y != null) { source_y = _options.source_y; }\n        if(_options.source_w != null) {\n            source_w = _options.source_w;\n        } else {\n            source_w = texture.width;\n        }\n\n        if(_options.source_h != null) {\n            source_h = _options.source_h;\n        } else {\n            source_h = texture.height;\n        }\n\n        geometry = null;\n\n    } //new\n\n    public function lock() {\n        if(is_set && _geometry != null) {\n            _geometry.locked = true;\n        }\n    } //lock\n\n    public function dirty() {\n        if(is_set && _geometry != null) {\n            _geometry.dirty = true;\n        }\n    } //dirty\n\n    @:noCompletion public function update_size(_width:Float, _height:Float) {\n\n        width = _width;\n        height = _height;\n\n        midwidth = Math.abs(width - left - right);\n        midheight = Math.abs(height - top - bottom);\n\n        //top left\n        slices[0].source_width  = left;\n        slices[0].source_height = top;\n        slices[0].source_x = source_x;\n        slices[0].source_y = source_y;\n        slices[0].pos.set_xy(0,0);\n        slices[0].width = left;\n        slices[0].height = top;\n\n        //top middle\n        slices[1].source_width  = source_w - left - right;\n        slices[1].source_height = top;\n        slices[1].source_x = source_x+left;\n        slices[1].source_y = source_y;\n        slices[1].pos.set_xy(left,0);\n        slices[1].width = width - left - right;\n        slices[1].height = top;\n\n        //top right\n        slices[2].source_width  = right;\n        slices[2].source_height = top;\n        slices[2].source_x = source_x+ (source_w - right);\n        slices[2].source_y = source_y;\n        slices[2].pos.set_xy(left + midwidth,0);\n        slices[2].width = right;\n        slices[2].height = top;\n\n\n        //middle left\n        slices[3].source_width  = left;\n        slices[3].source_height = source_h - top - bottom;\n        slices[3].source_x = source_x;\n        slices[3].source_y = source_y+top;\n        slices[3].pos.set_xy(0,top);\n        slices[3].width = left;\n        slices[3].height = height - top - bottom;\n\n        //middle middle\n        slices[4].source_width  = source_w - left - right;\n        slices[4].source_height = source_h - top - bottom;\n        slices[4].source_x = source_x+left;\n        slices[4].source_y = source_y+top;\n        slices[4].pos.set_xy(left,top);\n        slices[4].width = width - left - right;\n        slices[4].height = height - top - bottom;\n\n        //middle right\n        slices[5].source_width  = right;\n        slices[5].source_height = source_h - top - bottom;\n        slices[5].source_x = source_x+(source_w - right);\n        slices[5].source_y = source_y+top;\n        slices[5].pos.set_xy(left + midwidth,top);\n        slices[5].width = right;\n        slices[5].height = height - top - bottom;\n\n\n        //bottom left\n        slices[6].source_width  = left;\n        slices[6].source_height = bottom;\n        slices[6].source_x = source_x;\n        slices[6].source_y = source_y+ (source_h - bottom);\n        slices[6].pos.set_xy(0,top + midheight);\n        slices[6].width = left;\n        slices[6].height = bottom;\n\n        //bottom middle\n        slices[7].source_width  = source_w - left - right;\n        slices[7].source_height = bottom;\n        slices[7].source_x = source_x+left;\n        slices[7].source_y = source_y+(source_h - bottom);\n        slices[7].pos.set_xy(left,top + midheight);\n        slices[7].width = width - left - right;\n        slices[7].height = bottom;\n\n        //bottom right\n        slices[8].source_width  = right;\n        slices[8].source_height = bottom;\n        slices[8].source_x = source_x+(source_w - right);\n        slices[8].source_y = source_y+(source_h - bottom);\n        slices[8].pos.set_xy(left + midwidth, top + midheight);\n        slices[8].width = right;\n        slices[8].height = bottom;\n\n    } //update_size\n\n    @:noCompletion public function set(_width:Float, _height:Float) {\n\n        if(added) {\n            _geometry.drop();\n            added = false;\n        }\n\n            //clear the slices\n        slices.splice(0,slices.length);\n        width = _width;\n        height = _height;\n\n        midwidth = Math.abs(width - left - right);\n        midheight = Math.abs(height - top - bottom);\n\n            //top left\n        slices.push({\n            source_width  : left,\n            source_height : top,\n            source_x : source_x,\n            source_y : source_y,\n            pos : new Vector(0,0),\n            width : left,\n            height : top,\n            geometry_id : 0\n        });\n            //top middle\n        slices.push({\n            source_width  : source_w - left - right,\n            source_height : top,\n            source_x : source_x+left,\n            source_y : source_y,\n            pos : new Vector(left,0),\n            width : width - left - right,\n            height : top,\n            geometry_id : 0\n        });\n            //top right\n        slices.push({\n            source_width  : right,\n            source_height : top,\n            source_x : source_x+ (source_w - right),\n            source_y : source_y,\n            pos : new Vector(left + midwidth,0),\n            width : right,\n            height : top,\n            geometry_id : 0\n        });\n\n\n            //middle left\n        slices.push({\n            source_width  : left,\n            source_height : source_h - top - bottom,\n            source_x : source_x,\n            source_y : source_y+top,\n            pos : new Vector(0,top),\n            width : left,\n            height : height - top - bottom,\n            geometry_id : 0\n        });\n            //middle middle\n        slices.push({\n            source_width  : source_w - left - right,\n            source_height : source_h - top - bottom,\n            source_x : source_x+left,\n            source_y : source_y+top,\n            pos : new Vector(left,top),\n            width : width - left - right,\n            height : height - top - bottom,\n            geometry_id : 0\n        });\n            //middle right\n        slices.push({\n            source_width  : right,\n            source_height : source_h - top - bottom,\n            source_x : source_x+(source_w - right),\n            source_y : source_y+top,\n            pos : new Vector(left + midwidth,top),\n            width : right,\n            height : height - top - bottom,\n            geometry_id : 0\n        });\n\n\n            //bottom left\n        slices.push({\n            source_width  : left,\n            source_height : bottom,\n            source_x : source_x,\n            source_y : source_y+ (source_h - bottom),\n            pos : new Vector(0,top + midheight),\n            width : left,\n            height : bottom,\n            geometry_id : 0\n        });\n            //bottom middle\n        slices.push({\n            source_width  : source_w - left - right,\n            source_height : bottom,\n            source_x : source_x+left,\n            source_y : source_y+(source_h - bottom),\n            pos : new Vector(left,top + midheight),\n            width : width - left - right,\n            height : bottom,\n            geometry_id : 0\n        });\n            //bottom right\n        slices.push({\n            source_width  : right,\n            source_height : bottom,\n            source_x : source_x+(source_w - right),\n            source_y : source_y+(source_h - bottom),\n            pos : new Vector(left + midwidth, top + midheight),\n            width : right,\n            height : bottom,\n            geometry_id : 0\n        });\n\n        is_set = true;\n\n    } //set\n\n    override function set_size( _v : Vector ) {\n\n        if(!is_set) return _v;\n            //update the values\n        update_size(_v.x, _v.y);\n            //update the vertices\n        for(slice in slices) {\n            if(_geometry != null) {\n                _geometry.quad_resize(slice.geometry_id , new Rectangle( slice.pos.x, slice.pos.y, slice.width, slice.height ));\n            } //_geometry\n        }\n\n        return _v;\n\n    } //set_size\n\n    function _create(_pos:Vector, _w:Float, _h:Float, ?_reset:Bool = false) {\n\n        if(!is_set || _reset) {\n            set(_w, _h);\n        }\n\n        var _color = new Color();\n\n        _geometry = new QuadPackGeometry({\n            texture : texture,\n            color : _color,\n            depth : nineslice_options.depth,\n            visible : nineslice_options.visible,\n            batcher : _batcher\n        });\n\n        for(slice in slices) {\n\n            slice.geometry_id = _geometry.quad_add({\n                x: slice.pos.x,\n                y: slice.pos.y,\n                w: slice.width,\n                h: slice.height,\n                color: nineslice_options.color,\n                uv: new Rectangle(slice.source_x, slice.source_y, slice.source_width, slice.source_height)\n            });\n\n            // _geometry.quad_pos( slice.geometry_id, new Vector(slice.pos.x, slice.pos.y) );\n\n        } //each slice\n\n        _geometry.id = 'NineSlice' + _geometry.id;\n        geometry = _geometry;\n        pos = _pos;\n\n        added = true;\n        is_set = true;\n\n    } // _create\n\n    public function create( _pos:Vector, _w:Float, _h:Float, ?_reset:Bool = false ) {\n\n        if(texture != null) {\n            _create(_pos,_w,_h,_reset);\n        }\n\n    } //create\n\n\n} //NineSlice\n","package luxe;\n\nimport luxe.Emitter;\nimport luxe.Resources;\nimport luxe.resource.Resource;\nimport luxe.options.ResourceOptions;\nimport luxe.options.ParcelOptions;\nimport snow.api.Promise;\nimport phoenix.Texture;\nimport luxe.Log.*;\n\n@:enum abstract ParcelEvent(Int) from Int to Int {\n    var unknown = 0;\n    var progress = 1;\n    var complete = 2;\n    var failed = 3;\n}\n\ntypedef ParcelChange = {\n    load_id: String,\n    id: String,\n    index: Int,\n    total: Int,\n    ? error: Dynamic,\n    ? resource: Resource,\n}\n\ntypedef ItemInfo = {\n    id: String\n}\n\ntypedef BytesInfo = ItemInfo;\ntypedef TextInfo = ItemInfo;\ntypedef JSONInfo = ItemInfo;\n\ntypedef TextureInfo = {\n    > ItemInfo,\n    > LoadTextureOptions,\n}\n\ntypedef ShaderInfo = {\n    > ItemInfo,\n    > LoadShaderOptions,\n}\n\ntypedef SoundInfo = {\n    > ItemInfo,\n    name: String,\n    is_stream: Bool\n}\n\ntypedef BitmapFontInfo = {\n    > ItemInfo,\n    > LoadFontOptions,\n}\n\ntypedef ParcelList = {\n    bytes: Array<BytesInfo>,\n    texts: Array<TextInfo>,\n    jsons: Array<JSONInfo>,\n    textures: Array<TextureInfo>,\n    fonts: Array<BitmapFontInfo>,\n    shaders: Array<ShaderInfo>,\n    sounds: Array<SoundInfo>,\n}\n\n@:enum abstract ParcelState(Int) from Int to Int {\n    var unloaded = 0;\n    var loading = 1;\n    var loaded = 2;\n}\n\nclass Parcel {\n\n        /** The parent Resources system this Parcel is contained by. */\n    public var system: Resources;\n        /** The id of this `Parcel`. */\n    public var id : String;\n        /** The list of the resource infos within this parcel, used at load/unload time. */\n    public var list: ParcelList;\n        /** A list of resource ids that are loaded in this parcel, i.e that have a reference to the resource id */\n    public var loaded: Array<String>;\n        /** A list of resource ids that are known to this parcel */\n    public var listed (get, never): Array<String>;\n        /** Return the number of resources listed in this Parcel */\n    public var length (get, never) : Int;\n        /** The time in seconds the last load took */\n    public var time_to_load : Float = 0.0;\n        /** The current parcel state.\n            Set to unloaded by default,\n            changed to loading when calling `load`,\n            changed to loaded when complete,\n            changed to unloaded when `unload` completes */\n    public var state : ParcelState;\n\n    var emitter: Emitter<ParcelEvent>;\n    var oncomplete: Parcel->Void;\n    var onprogress: ParcelChange->Void;\n    var onfailed: ParcelChange->Void;\n    var start_load: Float = 0.0;\n    var load_time_spacing: Float = 1/20;\n    var load_start_delay: Float = 0.2;\n\n    public function new( ?_options:ParcelOptions ) {\n\n        def(_options, {});\n        def(_options.system, Luxe.resources);\n        def(_options.id, Luxe.utils.uniqueid());\n\n        if(_options.oncomplete != null)         oncomplete = _options.oncomplete;\n        if(_options.onprogress != null)         onprogress = _options.onprogress;\n        if(_options.onfailed != null)           onfailed = _options.onfailed;\n\n        if(_options.load_time_spacing != null)  load_time_spacing = _options.load_time_spacing;\n        if(_options.load_start_delay != null)   load_start_delay = _options.load_start_delay;\n\n        state = ParcelState.unloaded;\n        loaded = [];\n        emitter = new Emitter();\n        system = _options.system;\n        id = _options.id;\n        list = empty_list();\n\n            if(_options.bytes    != null) list.bytes    = _options.bytes;\n            if(_options.texts    != null) list.texts    = _options.texts;\n            if(_options.jsons    != null) list.jsons    = _options.jsons;\n            if(_options.textures != null) list.textures = _options.textures;\n            if(_options.fonts    != null) list.fonts    = _options.fonts;\n            if(_options.shaders  != null) list.shaders  = _options.shaders;\n            if(_options.sounds   != null) list.sounds   = _options.sounds;\n\n        system.track(this);\n\n    } //new\n\n//Public event handling\n\n    public function on<T>( ev:ParcelEvent, handler:T->Void ) emitter.on(ev, handler);\n    public function off<T>( ev:ParcelEvent, handler:T->Void ) emitter.off(ev, handler);\n    public function emit<T>( ev:ParcelEvent, data:T ) emitter.emit(ev, data);\n\n//Public load API\n\n    public inline function is_loaded( _id:String ) return loaded.indexOf(_id) != -1;\n\n        /** Load this parcel contents with the optional load id, which is added to events. */\n    public function load( ?_load_id:String ) {\n\n        state = ParcelState.loading;\n\n        Luxe.timer.schedule(load_start_delay, function() {\n\n            start_load = Luxe.time;\n\n            def(_load_id, id);\n\n            _debug('$id / $_load_id / loading $length items');\n            _debug('   bytes: ${list.bytes.length}');\n            _debug('   texts: ${list.texts.length}');\n            _debug('   jsons: ${list.jsons.length}');\n            _debug('   textures: ${list.textures.length}');\n            _debug('   fonts: ${list.fonts.length}');\n            _debug('   shaders: ${list.shaders.length}');\n            _debug('   sounds: ${list.sounds.length}');\n\n            if(length == 0) {\n                do_complete(_load_id);\n                return;\n            }\n\n            var _index = 0;\n\n            inline function _handle(_item_id:String, _load:Promise) {\n                _load.then(function(_res) {\n                    one_loaded(_item_id, _load_id, _res, ++_index, length);\n                }, function(_err:Dynamic){\n                    one_failed(_item_id, _load_id, _err, ++_index, length);\n                });\n            }\n\n            //bytes\n\n                for(_bytes in list.bytes) {\n\n                    if(!is_loaded(_bytes.id)) {\n\n                        loaded.push(_bytes.id);\n                        Luxe.timer.schedule(load_time_spacing, function() {\n\n                            _handle( _bytes.id, system.load_bytes( _bytes.id ) );\n\n                        }); //timer\n\n                    } else { //!loaded\n                        log('$id / already had ${_bytes.id} loaded, skipped');\n                        one_loaded(_bytes.id, _load_id, system.get(_bytes.id), ++_index, length);\n                    }\n\n                } //each bytes\n\n            //text\n\n                for(_text in list.texts) {\n\n                    if(!is_loaded(_text.id)) {\n\n                        loaded.push(_text.id);\n                        Luxe.timer.schedule(load_time_spacing*_index, function() {\n\n                            _handle( _text.id, system.load_text( _text.id ) );\n\n                        }); //timer\n\n                    } else { //!loaded\n                        log('$id / already had ${_text.id} loaded, skipped');\n                        one_loaded(_text.id, _load_id, system.get(_text.id), ++_index, length);\n                    }\n\n                } //each texts\n\n            //json\n\n                for(_json in list.jsons) {\n\n                    if(!is_loaded(_json.id)) {\n\n                        loaded.push(_json.id);\n                        Luxe.timer.schedule(load_time_spacing*_index, function() {\n\n                            _handle( _json.id, system.load_json( _json.id ) );\n\n                        });\n\n                    } else { //!loaded\n                        log('$id / already had ${_json.id} loaded, skipped');\n                        one_loaded(_json.id, _load_id, system.get(_json.id), ++_index, length);\n                    }\n\n                } //each jsons\n\n            //texture\n\n                for(_texture in list.textures) {\n\n                    if(!is_loaded(_texture.id)) {\n\n                        loaded.push(_texture.id);\n                        Luxe.timer.schedule(load_time_spacing*_index, function() {\n\n                            var _load = system.load_texture( _texture.id, {\n                                load_premultiply_alpha:_texture.load_premultiply_alpha,\n                                filter_min:_texture.filter_min,\n                                filter_mag:_texture.filter_mag,\n                                clamp_s:_texture.clamp_s,\n                                clamp_t:_texture.clamp_t\n                            });\n\n                            _handle(_texture.id, _load);\n\n                        }); //timer\n\n                    } else { //!loaded\n                        log('$id / already had ${_texture.id} loaded, skipped');\n                        one_loaded(_texture.id, _load_id, system.get(_texture.id), ++_index, length);\n                    }\n\n                } //each textures\n\n            //font\n\n                for(_font in list.fonts) {\n\n                    if(!is_loaded(_font.id)) {\n\n                        loaded.push(_font.id);\n                        Luxe.timer.schedule(load_time_spacing*_index, function() {\n\n                            var _load = system.load_font( _font.id, {\n                                texture_path:_font.texture_path\n                            });\n\n                            _handle(_font.id, _load);\n\n                        }); //timer\n\n                    } else { //!loaded\n                        log('$id / already had ${_font.id} loaded, skipped');\n                        one_loaded(_font.id, _load_id, system.get(_font.id), ++_index, length);\n                    }\n\n                } //each fonts\n\n            //shader\n\n                for(_shader in list.shaders) {\n\n                    if(!is_loaded(_shader.id)) {\n\n                        loaded.push(_shader.id);\n                        Luxe.timer.schedule(load_time_spacing*_index, function() {\n\n                            var _load = system.load_shader( _shader.id, {\n                                frag_id: _shader.frag_id,\n                                vert_id: _shader.vert_id\n                            });\n\n                            _handle(_shader.id, _load);\n\n                        }); //timer\n\n                    } else { //!loaded\n                        log('$id / already had ${_shader.id} loaded, skipped');\n                        one_loaded(_shader.id, _load_id, system.get(_shader.id), ++_index, length);\n                    }\n\n                } //each shaders\n\n            //sound\n\n                for(_sound in list.sounds) {\n\n                    if(!Luxe.audio.exists(_sound.name)) {\n\n                        // loaded.push(_sound.id); //:todo: this is not a resource, so it gets weird\n                        Luxe.timer.schedule(load_time_spacing*_index, function() {\n\n                            var _load = Luxe.audio.create(\n                                _sound.id,\n                                _sound.name,\n                                _sound.is_stream\n                            );\n\n                            _load.then(function(_) {\n                                one_loaded(_sound.id, _load_id, null, ++_index, length);\n                            }, function(_err:Dynamic){\n                                one_failed(_sound.id, _load_id, _err, ++_index, length);\n                            });\n\n                        }); //timer\n\n                    } else { //!loaded\n                        log('$id / already had ${_sound.id} (${_sound.name}) loaded, skipped');\n                        one_loaded(_sound.id, _load_id, null, ++_index, length);\n                    }\n\n                } //each sounds\n\n        }); //start delay timer\n\n    } //load\n\n        /** Unload this parcel contents, telling the system to remove the reference we have to them.\n            Optionally the list can be emptied out, but will be kept around for reloading the parcel again. */\n    public function unload( ?_empty_list:Bool = false ) {\n\n        inline function _remove(_id) {\n            system.destroy(_id);\n            loaded.remove(_id);\n        }\n\n        for(item in list.bytes)     _remove(item.id);\n        for(item in list.texts)     _remove(item.id);\n        for(item in list.jsons)     _remove(item.id);\n        for(item in list.textures)  _remove(item.id);\n        for(item in list.fonts)     _remove(item.id);\n        for(item in list.shaders)   _remove(item.id);\n        for(item in list.sounds)    Luxe.audio.uncreate(item.name);\n\n        if(_empty_list) {\n            list = null;\n            list = empty_list();\n        }\n\n        state = ParcelState.unloaded;\n\n    } //unload\n\n    public function from_json( _json_object:Dynamic ) {\n\n        assertnull(_json_object);\n\n        if(_json_object.bytes != null) {\n            var _bytes : Array<BytesInfo> = cast _json_object.bytes;\n            for(item in _bytes) {\n                if(item != null) {\n                    assertnull(item);\n                    assertnull(item.id);\n\n                    list.bytes.push(item);\n                } //item != null\n            } //each bytes\n        } //json object bytes\n\n        if(_json_object.text != null) {\n            var _texts : Array<TextInfo> = cast _json_object.text;\n            for(item in _texts) {\n                if(item != null) {\n                    assertnull(item);\n                    assertnull(item.id);\n\n                    list.texts.push(item);\n                } //item != null\n            } //each text\n        } //json object text\n\n        if(_json_object.json != null) {\n            var _jsons : Array<JSONInfo> = cast _json_object.json;\n            for(item in _jsons) {\n                if(item != null) {\n                    assertnull(item);\n                    assertnull(item.id);\n\n                    list.jsons.push(item);\n                } //item != null\n            } //each json\n        } //json object json\n\n        if(_json_object.textures != null) {\n            var _textures : Array<Dynamic> = cast _json_object.textures;\n            for(item in _textures) {\n                assertnull(item);\n                assertnull(item.id);\n\n                inline function _get_filter(_filter_type:String) : Null<FilterType> {\n                    if(_filter_type == null) return null;\n                    assert(_filter_type == 'nearest' || _filter_type == 'linear');\n                    return switch(_filter_type) {\n                        case 'nearest': FilterType.nearest;\n                        case 'linear': FilterType.linear;\n                        default: null;\n                    }\n                }\n\n                inline function _get_clamp(_clamp_type:String) : Null<ClampType> {\n                    if(_clamp_type == null) return null;\n                    assert(_clamp_type == 'edge' || _clamp_type == 'repeat' || _clamp_type == 'mirror');\n                    return switch(_clamp_type) {\n                        case 'edge':    ClampType.edge;\n                        case 'mirror':  ClampType.mirror;\n                        case 'repeat':  ClampType.repeat;\n                        default: null;\n                    }\n                }\n\n                list.textures.push({\n                    id: item.id,\n                    filter_min: _get_filter(item.filter_min),\n                    filter_mag: _get_filter(item.filter_mag),\n                    clamp_s: _get_clamp(item.clamp_s),\n                    clamp_t: _get_clamp(item.clamp_t),\n                    load_premultiply_alpha: item.load_premultiply_alpha\n                });\n\n            } //item in textures\n        } //json object textures\n\n        if(_json_object.fonts != null) {\n            var _fonts : Array<BitmapFontInfo> = cast _json_object.fonts;\n            for(item in _fonts) {\n                if(item != null) {\n                    assertnull(item);\n                    assertnull(item.id);\n\n                    list.fonts.push(item);\n                } //item != null\n            } //item in fonts\n        } //json object fonts\n\n        if(_json_object.shaders != null) {\n            var _shaders : Array<ShaderInfo> = cast _json_object.shaders;\n            for(item in _shaders) {\n                if(item != null) {\n                    assertnull(item);\n                    assertnull(item.id);\n                    assertnull(item.frag_id);\n                    assertnull(item.vert_id);\n\n                    list.shaders.push(item);\n                } //item != null\n            } //item in shaders\n        } //json object shaders\n\n        if(_json_object.sounds != null) {\n            var _sounds : Array<SoundInfo> = cast _json_object.sounds;\n            for(item in _sounds) {\n                if(item != null) {\n                    assertnull(item);\n                    assertnull(item.id);\n                    assertnull(item.name);\n\n                    // if(item.is_stream == null) item.is_stream = false;\n\n                    list.sounds.push(item);\n                } //item != null\n            } //each sounds\n        } //json object sounds\n\n    } //from_json\n\n//Internal\n\n    function one_loaded( _item_id:String, _load_id:String, _resource:Resource, _index:Int, _total:Int ) {\n\n        _debug('loaded $_index / $_item_id / $_total for $_load_id / ' + (_resource == null ? 'sound' : Std.string(_resource)) );\n\n        var _state : ParcelChange = {\n            id: _item_id,\n            load_id: _load_id,\n            resource: _resource,\n            index: _index,\n            total: _total\n        };\n\n        emitter.emit(ParcelEvent.progress, _state);\n\n        if(onprogress != null) {\n            onprogress(_state);\n        }\n\n        if(_index == _total) {\n            do_complete(_load_id);\n        }\n\n    } //one_loaded\n\n    function one_failed( _item_id:String, _load_id:String, _error:Dynamic, _index:Int, _total:Int ) {\n\n        _debug('failed $_index / $_item_id / $_total for $_load_id / ${_error}');\n\n        var _state : ParcelChange = {\n            id: _item_id,\n            load_id: _load_id,\n            error: _error,\n            index: _index,\n            total: _total\n        };\n\n        emitter.emit(ParcelEvent.failed, _state);\n\n        if(onfailed != null) {\n            onfailed(_state);\n        }\n\n    } //one_failed\n\n        //\n    inline function get_listed() : Array<String> {\n        var _result = [];\n\n        for(item in list.bytes)     _result.push(item.id);\n        for(item in list.texts)     _result.push(item.id);\n        for(item in list.jsons)     _result.push(item.id);\n        for(item in list.textures)  _result.push(item.id);\n        for(item in list.fonts)     _result.push(item.id);\n        for(item in list.shaders)   _result.push(item.id);\n            //:todo: this is a list of resources, sounds aren't resources...\n        // for(item in list.sounds)    _result.push(item.id);\n\n        return _result;\n    }\n\n    inline function get_length() {\n        return\n            list.bytes.length +\n            list.texts.length +\n            list.jsons.length +\n            list.textures.length +\n            list.shaders.length +\n            list.fonts.length +\n            list.sounds.length;\n    }\n\n        //do_complete\n    inline function do_complete( _load_id:String ) {\n\n        state = ParcelState.loaded;\n        time_to_load = Luxe.time - start_load;\n\n        _debug('completed load $_load_id in $time_to_load');\n\n        emitter.emit(ParcelEvent.complete, this);\n\n        if(oncomplete != null) {\n            oncomplete(this);\n        }\n\n    } //do_complete\n\n    function empty_list() : ParcelList {\n        return {\n            bytes:[],\n            texts:[],\n            jsons:[],\n            textures:[],\n            fonts:[],\n            shaders:[],\n            sounds:[],\n        };\n    }\n\n} //Parcel\n","package luxe;\n\nimport luxe.resource.Resource;\n\nimport luxe.Log.*;\nimport luxe.Parcel;\nimport luxe.Sprite;\nimport luxe.Color;\nimport luxe.options.ParcelProgressOptions;\n\nclass ParcelProgress {\n\n    var parcel : Parcel;\n\n        //Parcel progress will create a fullscreen overlay\n        //color background, logo image, and a progress bar\n        //unless no_visuals option was provided as true. if so these are null\n    var progress_bar        : Sprite;\n    var progress_border     : Visual;\n    var background          : Sprite;\n\n    var image_logo          : Sprite;\n    var options             : ParcelProgressOptions;\n\n        //for now,\n    var width : Float = 0;\n    var height : Float = 0;\n\n    public function new( _options:ParcelProgressOptions ) {\n\n        var _view_width:Float = Luxe.screen.w;\n        var _view_height:Float = Luxe.screen.h;\n\n        if(Luxe.camera.size != null) {\n            _view_width = Luxe.camera.size.x;\n            _view_height = Luxe.camera.size.y;\n        }\n\n        var _view_mid_x = Math.floor(_view_width/2);\n        var _view_mid_y = Math.floor(_view_height/2);\n\n        width = Math.max(Math.floor(_view_width * 0.75), 2);\n        height = Math.max(Math.floor(_view_height * 0.002), 2);\n\n        options = _options;\n\n        def(options.no_visuals, false);\n        def(options.bar, new Color().rgb(0x343434));\n        def(options.bar_border, new Color().rgb(0x161616));\n        def(options.background, new Color().rgb(0x090909));\n        def(options.fade_in, true);\n        def(options.fade_out, true);\n        def(options.fade_time, 0.3);\n\n        var fade_alpha : Float = options.background.a;\n\n        if(options.fade_in) {\n\n            options.background.a = 0;\n            options.bar.a = 0;\n            options.bar_border.a = 0;\n\n        } //fade in\n\n        if(!options.no_visuals) {\n\n            var ypos = Math.floor(_view_height * 0.60);\n            var half_width = Math.floor(width/2);\n            var half_height = Math.floor(height/2);\n\n            background = new Sprite({\n                no_scene : true,\n                size : new Vector( _view_width, _view_height ),\n                centered : false,\n                color : options.background,\n                depth : 998,\n                visible: true,\n            });\n\n            progress_bar = new Sprite({\n                pos : new Vector(_view_mid_x - half_width, ypos - half_height),\n                size : new Vector( 2, height ),\n                no_scene : true,\n                centered : false,\n                color : options.bar,\n                depth : 998\n            });\n\n            progress_border = new Visual({\n                color : options.bar,\n                no_scene : true,\n                pos : new Vector(_view_mid_x - half_width, ypos - half_height),\n                geometry : Luxe.draw.rectangle({\n                    w : width,\n                    h : height,\n                    depth : 998.1\n                }),\n                depth : 998.1\n            });\n\n            if(options.fade_in) {\n\n                    //fade in the progress bar\n                background.color.tween(options.fade_time,{a:fade_alpha},true);\n                progress_bar.color.tween(options.fade_time,{a:1},true);\n                progress_border.color.tween(options.fade_time,{a:1},true);\n\n            } //fade_in\n\n        } //no visuals?\n\n            //we intercept the onprogress and oncomplete of the parcel\n        options.parcel.on(ParcelEvent.progress, onprogress);\n        options.parcel.on(ParcelEvent.complete, oncomplete);\n\n    } //new\n\n    public function set_progress( amount : Float ) {\n\n        if(amount < 0) amount = 0;\n        if(amount > 1) amount = 1;\n\n        progress_bar.size.x = Math.ceil(width * amount);\n\n    } //set_progress\n\n    public function onprogress( _state:ParcelChange ) {\n\n            //work out where we are out\n        var amount = _state.index / _state.total;\n\n            //update the progress bar\n        set_progress( amount );\n\n    } //onprogress\n\n    public function oncomplete( p:Parcel ) {\n\n        if(!options.no_visuals && options.fade_out) {\n\n            do_complete();\n\n            background.color.tween( options.fade_time, {a:0}, true);\n            progress_bar.color.tween( options.fade_time, {a:0}, true);\n            progress_border.color.tween( options.fade_time, {a:0}, true);\n\n        } else {\n\n            do_complete();\n\n        } //fade out\n\n    } //oncomplete\n\n    function do_complete() {\n\n        if(options.oncomplete != null) {\n            options.oncomplete( options.parcel );\n        }\n\n    } //do_complete\n\n} //Parcel Progress\n","package luxe;\n\nimport Luxe.Ev;\nimport luxe.Core;\nimport luxe.Vector;\nimport snow.api.Timer;\n\n#if deflect\n    import luxe.physics.deflect.PhysicsDeflect;\n#end //deflect\n\n#if nape\n    import luxe.physics.nape.PhysicsNape;\n#end //nape\n\n\nclass Physics {\n\n\n    #if deflect\n        public var deflect : PhysicsDeflect;\n    #end //deflect\n\n    #if nape\n        public var nape : PhysicsNape;\n    #end //nape\n\n    public var core : Core;\n    public var engines : Array<PhysicsEngine>;\n\n        //how often to update\n    public var step_rate (default,set) : Float = 1/60;\n        //how much is a single step. This is set from step_rate initially, but can be changed manually\n    public var step_delta : Float = 1/60;\n\n//Physics fixed updates\n    @:noCompletion public var timer : Timer;\n\n    public function new( _core:Core ) {\n\n        core = _core;\n\n    } //new\n\n    public function init() {\n\n        engines = [];\n\n        #if deflect\n            deflect = add_engine(PhysicsDeflect);\n        #end //deflect\n\n        #if nape\n            nape = add_engine(PhysicsNape);\n        #end //nape\n\n    } //init\n\n    public function reset() {\n\n            //stop any existing loop\n        if(timer != null) {\n            timer.stop();\n            timer = null;\n        }\n\n        if(step_rate != 0) {\n\n                //Start the physics update loop\n            timer = Luxe.timer.schedule( step_rate, fixed_update, true );\n\n        } //only if there is a step rate\n\n    } //reset\n\n    static var tag_physics : String = 'physics';\n\n        //called by the timer at a fixed rate\n    function fixed_update() {\n\n            Luxe.debug.start(tag_physics);\n\n        update();\n\n            Luxe.debug.end(tag_physics);\n\n    } //fixed_update\n\n        /** Add a physics engine type to be run by this class. */\n    public function add_engine<T1,T2>( type:Class<T1>, ?_data:T2 ) : T1 {\n\n        var _engine_instance = Type.createInstance( type, [ _data ] );\n        var _physics_engine : PhysicsEngine = cast _engine_instance;\n\n            //start with init\n        _physics_engine.init();\n\n            //push the engine into the list to be updated\n        engines.push( _physics_engine );\n\n            //return typed instance\n        return _engine_instance;\n\n    } //add_engine\n\n        /** Only call this manually if step_rate is 0! */\n    public function update() {\n        for(engine in engines) {\n            engine.update();\n        }\n    }\n\n    public function process() {\n        for(engine in engines) {\n            engine.process();\n        }\n    } //process\n\n    public function render() {\n        for(engine in engines) {\n            engine.render();\n        }\n    } //render\n\n    public function destroy() {\n\n        if(timer != null) {\n            timer.stop();\n        }\n\n        timer = null;\n\n        for(engine in engines) {\n            engine.destroy();\n        }\n\n    } //destroy\n\n        //on changing the fixed rate, update the physics timer\n    function set_step_rate( _rate:Float ) {\n\n            //update the step size\n        step_rate = _rate;\n        step_delta = step_rate;\n\n            //reset the timer so it runs at the new rate\n        reset();\n\n        return step_rate;\n\n    } //set_step_rate\n\n\n} //Physics\n\n\n\n    //base class for simple physics world\n    //updates and access\nclass PhysicsEngine {\n\n    public var name : String = 'engine';\n\n    @:isVar public var paused (get,set) : Bool = false;\n    @:isVar public var gravity (get,set) : Vector;\n    @:isVar public var draw (get,set) : Bool = true;\n\n    public function new() {\n\n        gravity = new Vector(0, -9.8, 0);\n        Luxe.on(Ev.render, _render);\n\n    } //new\n\n    public function init() {\n\n    } //init\n\n    function _render(_) {\n\n        render();\n\n    } //_render\n\n    public function process() {\n\n    } //process\n\n    public function update() {\n\n    } //update\n\n    public function render() {\n\n    } //render\n\n    public function destroy() {\n\n    } //destroy\n\n//Properties\n\n    function get_paused() : Bool {\n\n        return paused;\n\n    } //get_paused\n\n    function set_paused( ?_pause:Bool ) {\n\n        return paused = _pause;\n\n    } //set_paused\n\n    function get_draw() : Bool {\n\n        return draw;\n\n    } //get_draw\n\n    function set_draw( _draw:Bool ) : Bool {\n\n        return draw = _draw;\n\n    } //set_draw\n\n    function get_gravity() : Vector {\n\n        return gravity;\n\n    } //get_gravity\n\n    function set_gravity( _gravity:Vector ) {\n\n        return gravity = _gravity;\n\n    } //set_gravity\n\n} //PhysicsEngine\n","package luxe;\n\nimport luxe.Log.*;\nimport luxe.resource.Resource;\nimport luxe.Parcel;\nimport luxe.options.ResourceOptions;\nimport phoenix.Texture;\nimport phoenix.BitmapFont;\nimport phoenix.Shader;\nimport snow.api.Promise;\n\nclass Resources {\n\n        /** The Parcel set that this system contains. */\n    public var parcels : Array<Parcel>;\n        /** The resource cache, stored by `Resource` id.\n            All resources in a `Parcel` contained by this system, will be here. */\n    public var cache: Map<String, Resource>;\n\n        /** General statistics about this system. */\n    public var stats : ResourceStats;\n\n//Internal vars\n\n    @:allow(luxe.Parcel)\n    var emitter: Emitter<ResourceEvent>;\n\n//\n\n    public function new() {\n        parcels = [];\n        emitter = new Emitter();\n        cache = new Map();\n        stats = new ResourceStats();\n    }\n\n//Public `Parcel` tracking\n\n    public function track( _cache:Parcel ) {\n\n        assertnull(_cache);\n        assert(parcels.indexOf(_cache) == -1);\n\n        parcels.push(_cache);\n        emit(ResourceEvent.cache_tracked, _cache);\n\n    } //track\n\n    public function untrack( _cache:Parcel ) {\n\n        assertnull(_cache);\n\n        var removed = parcels.remove(_cache);\n\n        if(removed) {\n            emit(ResourceEvent.cache_untracked, _cache);\n        }\n\n    } //untrack\n\n//Public Resource list\n\n        /** Add a resource to be tracked by this system. */\n    public function add( resource:Resource ) {\n\n        assert(!cache.exists(resource.id));\n\n        cache.set(resource.id, resource);\n\n        emit(ResourceEvent.listed, resource);\n\n        update_stats(resource, 1);\n\n    } //add\n\n        /** Remove a resource being tracked by this system. */\n    public function remove( resource:Resource #if debug, ?_pos:haxe.PosInfos #end ) : Bool {\n\n        assert(cache.exists(resource.id));\n\n        emit(ResourceEvent.unlisted, resource);\n\n        update_stats(resource, -1);\n\n        return cache.remove(resource.id);\n\n    } //remove\n\n        /** Destroy a resource by id. Returns false if the resource wasn't found. */\n    public function destroy( _id:String, ?_force:Bool=false ) : Bool {\n\n        var resource = get(_id);\n\n        if(resource == null) return false;\n\n        resource.destroy(_force);\n\n        return true;\n\n    } //destroy\n\n        /** Invalidate a resource by id. Returns false if the resource wasn't found. */\n    public function invalidate( _id:String ) : Bool {\n\n        var resource = get(_id);\n\n        if(resource == null) return false;\n\n        resource.invalidate();\n\n        return true;\n\n    } //invalidate\n\n//Public event handling\n\n    public function on<T>( ev:ResourceEvent, handler:T->Void ) {\n\n        emitter.on(ev, handler);\n\n    } //on\n\n    public function off<T>( ev:ResourceEvent, handler:T->Void ) {\n\n        emitter.off(ev, handler);\n\n    } //off\n\n    public function emit<T>( ev:ResourceEvent, data:T ) {\n\n        emitter.emit(ResourceEvent.any, data);\n        emitter.emit(ev, data);\n\n    } //emit\n\n\n//Public load api\n\n    public function load_bytes( _id:String ) : Promise {\n\n        assertnull(_id);\n\n        var _resource = bytes(_id);\n\n        if(_resource != null) {\n            _debug('bytes / existed / $_id');\n            _resource.ref++;\n            return Promise.resolve(_resource);\n        }\n\n        _debug('bytes / loading / $_id');\n\n        _resource = new BytesResource({\n            id: _id,\n            system: this,\n            asset: null\n        });\n\n        add(_resource);\n\n        return _resource.reload();\n\n    } //load_bytes\n\n    public function load_text( _id:String ) : Promise {\n\n        assertnull(_id);\n\n        var _resource = text(_id);\n\n        if(_resource != null) {\n            _debug('text / existed / $_id');\n            _resource.ref++;\n            return Promise.resolve(_resource);\n        }\n\n        _debug('text / loading / $_id');\n\n        _resource = new TextResource({\n            id: _id,\n            system: this,\n            asset: null\n        });\n\n        add(_resource);\n\n        return _resource.reload();\n\n    } //load_text\n\n    public function load_json( _id:String ) : Promise {\n\n        assertnull(_id);\n\n        var _resource = json(_id);\n\n        if(_resource != null) {\n            _debug('json / existed / $_id');\n            _resource.ref++;\n            return Promise.resolve(_resource);\n        }\n\n        _debug('json / loading / $_id');\n\n        _resource = new JSONResource({\n            id: _id,\n            system: this,\n            asset: null\n        });\n\n        add(_resource);\n\n        return _resource.reload();\n\n    } //load_json\n\n    public function load_texture( _id:String, ?_options:LoadTextureOptions ) : Promise {\n\n        assertnull(_id);\n\n        var _resource = texture(_id);\n\n        if(_resource != null) {\n            _debug('texture / existed / $_id');\n            _resource.ref++;\n            return Promise.resolve(_resource);\n        }\n\n        _debug('texture / loading / $_id');\n\n        //options\n\n            var _filter_min = null;\n            var _filter_mag = null;\n            var _clamp_s = null;\n            var _clamp_t = null;\n            var _premultiply = null;\n\n            if(_options != null) {\n                _filter_min  = _options.filter_min;\n                _filter_mag  = _options.filter_mag;\n                _clamp_s     = _options.clamp_s;\n                _clamp_t     = _options.clamp_t;\n                _premultiply = _options.load_premultiply_alpha;\n            }\n\n        _resource = new Texture({\n            id: _id,\n            system: this,\n            filter_min: _filter_min,\n            filter_mag: _filter_mag,\n            clamp_s: _clamp_s,\n            clamp_t: _clamp_t,\n            load_premultiply_alpha: _premultiply\n        });\n\n        add(_resource);\n\n        return _resource.reload();\n\n    } //load_texture\n\n    public function load_font( _id:String, ?_options:LoadFontOptions ) : Promise {\n\n        assertnull(_id);\n\n        var _resource = font(_id);\n\n        if(_resource != null) {\n            _debug('font / existed / $_id');\n            _resource.ref++;\n            return Promise.resolve(_resource);\n        }\n\n        _debug('font / loading / $_id');\n\n        var _texture_path = null;\n        if(_options != null) {\n            _texture_path = _options.texture_path;\n        }\n\n        _resource = new BitmapFont({\n            id: _id,\n            system: this,\n            texture_path: _texture_path\n        });\n\n        add(_resource);\n\n        return _resource.reload();\n\n    } //load_font\n\n    public function load_shader( _id:String, _options:LoadShaderOptions ) : Promise {\n\n        assertnull(_id);\n\n        var _resource = shader(_id);\n\n        if(_resource != null) {\n            _debug('shader / existed / $_id');\n            _resource.ref++;\n            return Promise.resolve(_resource);\n        }\n\n        _debug('shader / loading / $_id');\n\n        _resource = new Shader({\n            id: _id,\n            system: this,\n            frag_id: _options.frag_id,\n            vert_id: _options.vert_id\n        });\n\n        add(_resource);\n\n        return _resource.reload();\n\n    } //load_shader\n\n\n//Public fetch API\n\n    public inline function has( _id:String ) : Bool             return cache.exists(_id);\n    public inline function get( _id:String ) : Resource         return fetch(_id);\n    public inline function bytes( _id:String ) : BytesResource  return fetch(_id);\n    public inline function text( _id:String ) : TextResource    return fetch(_id);\n    public inline function json( _id:String ) : JSONResource    return fetch(_id);\n    public inline function texture( _id:String ) : Texture      return fetch(_id);\n    public inline function font( _id:String ) : BitmapFont      return fetch(_id);\n    public inline function shader( _id:String ) : Shader        return fetch(_id);\n\n//Internal\n\n    inline function fetch<T>(_id:String) : T {\n        return cast cache.get(_id);\n    } //fetch\n\n    inline function update_stats( _res:Resource, _offset:Int ) {\n\n        switch(_res.resource_type) {\n            case ResourceType.unknown:          stats.unknown   += _offset;\n            case ResourceType.bytes:            stats.bytes     += _offset;\n            case ResourceType.text:             stats.texts     += _offset;\n            case ResourceType.json:             stats.jsons     += _offset;\n            case ResourceType.texture:          stats.textures  += _offset;\n            case ResourceType.render_texture:   stats.render_textures += _offset;\n            case ResourceType.font:             stats.fonts     += _offset;\n            case ResourceType.shader:           stats.shaders   += _offset;\n        }\n\n        stats.total += _offset;\n\n    }\n\n} //Resources\n\n\n\n/** The state a resource can be in. The state is\n    mutually exclusive (only one at a time), and states\n    that lead to other states should always change in a fixed order.\n    In other words, state can never go from unknown to loaded, without\n    first passing through listed and loading. */\n@:enum abstract ResourceState(Int) from Int to Int {\n    //\n        /** This resource id is not known to the system,\n            either it wasn't added or was subsequently removed */\n    var unknown     = 0;\n\n        /** This id is known, but is not loaded.\n            unloaded resources go back to this state unless removed. */\n    var listed      = 1;\n\n        /** The resource is pending a load completion or timeout. */\n    var loading     = 2;\n\n        /** The resource is loaded and stored for query/fetching. */\n    var loaded      = 3;\n\n        /** The resource has failed to be created. */\n    var failed      = 4;\n\n        /** The resource has been invalidated, either manually or\n            from an event (change on disk, graphics context lost, etc)\n            and needs to be reloaded from the source data if desired. */\n    var invalidated = 5;\n\n        /** The resource has been destroyed. If the asset is in this\n            state it should not be considered for reuse and will assert on use it */\n    var destroyed   = 6;\n\n} //ResourceState\n\n@:enum abstract ResourceEvent(Int) from Int to Int {\n\n    var unknown             = 0;\n    var any                 = 1;\n    var listed              = 2;\n    var loading             = 3;\n    var loaded              = 4;\n    var failed              = 5;\n    var invalidated         = 6;\n    var unlisted            = 7;\n    var destroyed           = 8;\n    var reference           = 9;\n    var dereference         = 10;\n    var cache_tracked       = 11;\n    var cache_untracked     = 12;\n\n} //ResourceEvent\n\n\n@:enum\nabstract ResourceType(Int) from Int to Int {\n    var unknown         = 0;\n    var text            = 1;\n    var json            = 2;\n    var bytes           = 3;\n    var texture         = 4;\n    var render_texture  = 5;\n    var font            = 6;\n    var shader          = 7;\n}\n\n\nclass ResourceStats {\n\n    public var total : Int = 0;\n    public var fonts : Int = 0;\n    public var textures : Int = 0;\n    public var render_textures : Int = 0;\n    public var shaders : Int = 0;\n    public var texts : Int = 0;\n    public var jsons : Int = 0;\n    public var bytes : Int = 0;\n    public var unknown : Int = 0;\n\n    public function new() {\n\n    } //new\n\n    function toString() {\n\n        return\n            'Resource Statistics\\n' +\n            '\\ttotal : ' + total + '\\n' +\n            '\\ttexture : ' + textures + ' \\n' + '' +\n            '\\trender texture : ' + render_textures + ' \\n' +\n            '\\tfont : ' + fonts + '\\n' +\n            '\\tshader : ' + shaders + '\\n' +\n            '\\ttext : ' + texts + '\\n' +\n            '\\tjson : ' + jsons + '\\n' +\n            '\\tbytes : ' + bytes + '\\n' +\n            '\\tunknown : ' + unknown;\n\n    } //toString\n\n    public function reset() {\n\n        total = 0;\n        fonts = 0;\n        textures = 0;\n        render_textures = 0;\n        shaders = 0;\n        texts = 0;\n        jsons = 0;\n        bytes = 0;\n        unknown = 0;\n\n    } //reset\n\n\n} //ResourceStats\n","package luxe;\n\nimport Luxe.Ev;\nimport luxe.Input;\nimport luxe.Screen;\nimport luxe.options.EntityOptions;\n\nimport luxe.Log.*;\n\nclass Scene extends Objects {\n\n        /** The list of entities within this `Scene` */\n    public var entities : Map<String,Entity>;\n        /** Whether or not the `Scene` has called init */\n    public var inited : Bool = false;\n        /** Whether or not the `Scene` has called reset */\n    public var started : Bool = false;\n        /** The number of entities in this `Scene` */\n    public var length(get, null) : Int = 0;\n\n//internal\n\n    var _delayed_init_entities : Array<Entity>;\n    var _delayed_reset_entities : Array<Entity>;\n\n    @:allow(luxe.Entity)\n    @:allow(luxe.debug.SceneDebugView)\n    var _has_changed: Bool = false;\n\n//\n\n    public function new( ?_name:String='untitled scene' ) {\n\n        super(_name);\n\n        entities = new Map<String,Entity>();\n\n        _delayed_init_entities = [];\n        _delayed_reset_entities = [];\n\n        Luxe.core.on(Ev.init, init);\n        Luxe.core.on(Ev.destroy, _destroy);\n        Luxe.core.on(Ev.update, update);\n\n        Luxe.core.on(Ev.prerender, prerender);\n        Luxe.core.on(Ev.postrender, postrender);\n        Luxe.core.on(Ev.render, render);\n\n        Luxe.core.on(Ev.keydown, keydown);\n        Luxe.core.on(Ev.keyup, keyup);\n        Luxe.core.on(Ev.textinput, textinput);\n\n        Luxe.core.on(Ev.inputup, inputup);\n        Luxe.core.on(Ev.inputdown, inputdown);\n\n        Luxe.core.on(Ev.mouseup, mouseup);\n        Luxe.core.on(Ev.mousedown, mousedown);\n        Luxe.core.on(Ev.mousemove, mousemove);\n        Luxe.core.on(Ev.mousewheel, mousewheel);\n\n        Luxe.core.on(Ev.touchup, touchup);\n        Luxe.core.on(Ev.touchdown, touchdown);\n        Luxe.core.on(Ev.touchmove, touchmove);\n\n        Luxe.core.on(Ev.gamepadup, gamepadup);\n        Luxe.core.on(Ev.gamepaddown, gamepaddown);\n        Luxe.core.on(Ev.gamepadaxis, gamepadaxis);\n        Luxe.core.on(Ev.gamepaddevice, gamepaddevice);\n\n        Luxe.core.on(Ev.windowmoved, windowmoved);\n        Luxe.core.on(Ev.windowresized, windowresized);\n        Luxe.core.on(Ev.windowsized, windowsized);\n        Luxe.core.on(Ev.windowminimized, windowminimized);\n        Luxe.core.on(Ev.windowrestored, windowrestored);\n\n            //if we have already missed the internal init\n        if(Luxe.core.inited) {\n            init(null);\n        }\n\n        var _view:luxe.debug.SceneDebugView = Luxe.core.debug.get_view('Scenes');\n        if(_view != null) {\n            _view.add_scene(this);\n        }\n\n    } //new\n\n    @:allow(luxe.Entity)\n    inline function handle_duplicate_warning(_name:String) {\n        if(entities.exists(_name)) {\n            log('${name} / adding a second entity named $_name!\n                This will replace the existing one, possibly leaving the previous one in limbo.');\n        }\n    }\n\n        /** add given entity to this scene */\n    var entity_count : Int = 0;\n    public function add( entity:Entity #if debug, ?pos:haxe.PosInfos #end ) {\n\n        assertnull(entity, 'can\\'t put entity in a scene if the entity is null.');\n\n            _debug('${name} / adding ${entity.name} with id : ${entity.id}');\n\n        handle_duplicate_warning(entity.name);\n\n        entity.scene = this;\n        entities.set( entity.name, entity );\n        entity_count++;\n\n\n            if(inited) {\n                _debug('adding a delayed entity to init list ' + entity.name);\n                _delayed_init_entities.push(entity);\n            } //inited\n\n            if(started) {\n                _debug('adding a delayed entity to reset list ' + entity.name);\n                _delayed_reset_entities.push(entity);\n            } //started\n\n        _has_changed = true;\n\n    } //add\n\n        /** removes given entity from this scene */\n    public function remove( entity:Entity ) : Bool {\n\n        assertnull(entity, 'can\\'t remove entity from a scene if the entity is null.');\n\n        _has_changed = true;\n\n        if(entity.scene == this) {\n\n            entity.scene = null;\n            entity_count--;\n            return entities.remove( entity.name );\n\n        } else {\n\n            log(\"can't remove the entity from this scene, it is not mine (entity.scene != this)\");\n            return false;\n\n        }\n\n        return false;\n\n    } //remove\n\n    public inline function get<T:(Entity)>(_name:String) : T {\n\n        return cast entities.get(_name);\n\n    } //get\n\n        /** Destroy all entities in this scene.\n            There is one exception: If `entity == Luxe.camera`,\n            it will not be destroyed. Call Luxe.camera.destroy()\n            explicitly. This exception will change in future,\n            but saves a lot of confusion for and improves workflow. */\n    public function empty() {\n\n        if(entity_count > 0) {\n            #if luxe_camera_is_not_special\n                for(entity in entities) {\n                    if(entity != null) {\n                        remove( entity );\n                        entity.destroy();\n                        entity = null;\n                    }\n                } //each entity\n            #else\n                for(entity in entities) {\n                    if(entity != null && entity != Luxe.camera) {\n                        remove( entity );\n                        entity.destroy();\n                        entity = null;\n                    }\n                } //each entity\n            #end\n        } //entity_count > 0\n\n    } //empty\n\n        /**\n            Return a list of similarly named entities in the scene.\n            For example, enemy.1 enemy.2 enemy.3 with 'enemy' will return all of these.\n            Useful for the EntityOptions name_unique flag.\n            Iterates all entities in the scene, use carefully.\n            Note that this is a function that will likely become a part of a set of functions so it may change slightly.\n            Current behavior works based on (name.)* from the beginning of the name only.\n            `enemy.1` will match, `enemy` will not (no .), `this.enemy.name` will not.\n            `^((?:enemy)[.]{1})`\n        */\n    public function get_named_like(_name:String, into:Array<Entity> ) {\n\n        if(entity_count > 0) {\n            var _filter : EReg = new EReg('^((?:' + _name + ')[.]{1})', 'g');\n            for(_entity in entities) {\n                if( _filter.match(_entity.name) ) {\n                    into.push(_entity);\n                }\n            }\n        }\n\n        return into;\n\n    } //get_named_like\n\n//render\n\n    function render(_) {\n\n        emit(Ev.render);\n\n    } //render\n\n    function prerender(_) {\n\n        emit(Ev.prerender);\n\n    } //prerender\n\n    function postrender(_) {\n\n        emit(Ev.postrender);\n\n    } //postrender\n\n//Keys\n\n    function keydown(e:KeyEvent) {\n\n        _verboser('$name / key down / $e');\n\n        emit(Ev.keydown, e);\n\n    } //keydown\n\n    function keyup(e:KeyEvent) {\n\n        _verboser('$name / key up / $e');\n\n        emit(Ev.keyup, e);\n\n    } //keyup\n\n    function textinput(e:TextEvent) {\n\n        _verboser('$name / text event / $e');\n\n        emit(Ev.textinput, e);\n\n    } //textinput\n\n//Mouse\n\n    function mousedown(e:MouseEvent) {\n\n        _verboser('$name / mousedown / $e');\n\n        emit(Ev.mousedown, e);\n\n    } //onmousedown\n\n    function mousewheel(e:MouseEvent) {\n\n        _verboser('$name / mousewheel / $e');\n\n        emit(Ev.mousewheel, e);\n\n    } //onmousewheel\n\n    function mouseup(e:MouseEvent) {\n\n        _verboser('$name / mouseup / $e');\n\n        emit(Ev.mouseup, e);\n\n    } //onmouseup\n\n    function mousemove(e:MouseEvent) {\n\n        _verboser('$name / mousemove / $e');\n\n        emit(Ev.mousemove, e);\n\n    } //onmousemove\n\n//Touch\n\n    function touchdown( event : TouchEvent ) {\n\n        emit(Ev.touchdown, event);\n\n    } //ontouchdown\n\n    function touchup( event : TouchEvent ) {\n\n        emit(Ev.touchup, event);\n\n    } //ontouchup\n\n    function touchmove( event : TouchEvent ) {\n\n        emit(Ev.touchmove, event);\n\n    } //ontouchmove\n\n//Gamepad\n\n    function gamepadaxis( event:GamepadEvent ) {\n\n        emit(Ev.gamepadaxis, event);\n\n    } //gamepadaxis\n\n    function gamepadup( event:GamepadEvent ) {\n\n        emit(Ev.gamepadup, event);\n\n    } //gamepadup\n\n    function gamepaddown( event:GamepadEvent ) {\n\n        emit(Ev.gamepaddown, event);\n\n    } //gamepaddown\n\n    function gamepaddevice( event:GamepadEvent ) {\n\n        emit(Ev.gamepaddevice, event);\n\n    } //gamepaddown\n\n\n//windowing\n\n    function windowmoved( event:WindowEvent ) {\n\n        emit(Ev.windowmoved, event);\n\n    } //windowmoved\n\n    function windowresized( event:WindowEvent ) {\n\n        emit(Ev.windowresized, event);\n\n    } //windowresized\n\n    function windowsized( event:WindowEvent ) {\n\n        emit(Ev.windowsized, event);\n\n    } //windowsized\n\n    function windowminimized( event:WindowEvent ) {\n\n        emit(Ev.windowminimized, event);\n\n    } //windowminimized\n\n    function windowrestored( event:WindowEvent ) {\n\n        emit(Ev.windowrestored, event);\n\n    } //windowrestored\n\n//Input\n\n    function inputdown( event:{ _name:String, event:InputEvent } ) {\n\n        emit(Ev.inputdown, event);\n\n    } //oninputdown\n\n    function inputup( event:{ _name:String, event:InputEvent }) {\n\n        emit(Ev.inputup, event);\n\n    } //oninputup\n\n//Cleanup\n\n    function _destroy(_) {\n\n        destroy();\n\n    } //destroy\n\n    public function destroy() {\n\n        Luxe.core.off(Ev.init, init);\n        Luxe.core.off(Ev.destroy, _destroy);\n        Luxe.core.off(Ev.update, update);\n\n        Luxe.core.off(Ev.prerender, prerender);\n        Luxe.core.off(Ev.postrender, postrender);\n        Luxe.core.off(Ev.render, render);\n\n        Luxe.core.off(Ev.keydown, keydown);\n        Luxe.core.off(Ev.keyup, keyup);\n        Luxe.core.off(Ev.textinput, textinput);\n\n        Luxe.core.off(Ev.inputup, inputup);\n        Luxe.core.off(Ev.inputdown, inputdown);\n\n        Luxe.core.off(Ev.mouseup, mouseup);\n        Luxe.core.off(Ev.mousedown, mousedown);\n        Luxe.core.off(Ev.mousemove, mousemove);\n        Luxe.core.off(Ev.mousewheel, mousewheel);\n\n        Luxe.core.off(Ev.touchup, touchup);\n        Luxe.core.off(Ev.touchdown, touchdown);\n        Luxe.core.off(Ev.touchmove, touchmove);\n\n        Luxe.core.off(Ev.gamepadup, gamepadup);\n        Luxe.core.off(Ev.gamepaddown, gamepaddown);\n        Luxe.core.off(Ev.gamepadaxis, gamepadaxis);\n        Luxe.core.off(Ev.gamepaddevice, gamepaddevice);\n\n        Luxe.core.off(Ev.windowmoved, windowmoved);\n        Luxe.core.off(Ev.windowresized, windowresized);\n        Luxe.core.off(Ev.windowsized, windowsized);\n        Luxe.core.off(Ev.windowminimized, windowminimized);\n        Luxe.core.off(Ev.windowrestored, windowrestored);\n\n        emit(Ev.destroy);\n\n        var _view : luxe.debug.SceneDebugView = Luxe.core.debug.get_view('Scenes');\n        if(_view != null) {\n            _view.remove_scene(this);\n        }\n\n    } //destroy\n\n    function _do_init() : Bool {\n\n        var _before_count = length;\n\n        if(entity_count > 0) {\n            for(entity in entities) {\n                if(entity != null) {\n                    if(!entity.inited) {\n                        _verbose('calling init on an entity : ' + entity.name);\n                        entity._init();\n                    }\n                }\n            }\n        }\n\n        var _after_count = length;\n\n        return _before_count != _after_count;\n\n    } // _do_init\n\n        //Entities themselves can create entities\n        //inside of their init so we have to keep checking\n    public function init(_) {\n\n        var keep_going : Bool = true;\n        while(keep_going) {\n            keep_going = _do_init();\n        }\n\n        inited = true;\n\n        emit(Ev.init);\n\n        reset();\n\n    } //init\n\n        /** reset this scene, allowing all entities, children and attached components to be notified of the reset */\n    public function reset() {\n\n        started = false;\n\n            emit(Ev.reset);\n\n        started = true;\n\n    } //reset\n\n    function update(dt:Float) {\n\n        Luxe.core.debug.start('scene.' + name);\n\n            //late scene additions get init'ed and start'ed\n        handle_delayed_additions();\n            //just in case, as the entities are called directly\n        emit(Ev.update, dt);\n\n            //finally update them\n        if(entity_count > 0) {\n            for(entity in entities) {\n                if(entity != null) {\n                    entity._update(dt);\n                }\n            } //for each entity\n        }\n\n        Luxe.core.debug.end('scene.' + name);\n\n    } //update\n\n    function handle_delayed_additions() {\n\n        if(_delayed_init_entities.length != 0 || _delayed_reset_entities.length != 0) {\n            _debug(\"delayed entities in scene will init/reset now! \" + _delayed_init_entities.length + ' / ' + _delayed_reset_entities.length);\n        }\n\n        if(_delayed_init_entities.length > 0) {\n            for(entity in _delayed_init_entities) {\n                if(!entity.inited) {\n                    _debug('\\t handling late entity init ' + entity.name);\n                    entity._init();\n                } else {\n                    _debug('\\t skipped late entity init, already inited ' + entity.name);\n                }\n            }\n            _delayed_init_entities.splice(0, _delayed_init_entities.length);\n        }\n\n        if(_delayed_reset_entities.length > 0) {\n            for(entity in _delayed_reset_entities) {\n                _debug('\\t handling late entity reset ' + entity.name);\n                entity._reset(null);\n            }\n            _delayed_reset_entities.splice(0, _delayed_reset_entities.length);\n        }\n\n    } //handle_delayed_additions\n\n    function get_length() : Int {\n\n        return Lambda.count(entities);\n\n    } //get_length\n\n    function toString() {\n\n        return 'luxe Scene: $name / $length entities / id: $id';\n\n    } //toString\n\n\n} //Scene\n","package luxe;\n\nimport luxe.Rectangle;\nimport luxe.Vector;\n\n\ntypedef WindowEventType = snow.types.Types.WindowEventType;\n\n/** The data related to the specific window event. */\ntypedef WindowEventData = {\n        /** The x data for the event, if applicable */\n    @:optional var x:Int;\n        /** The y data for the event, if applicable */\n    @:optional var y:Int;\n\n} //WindowEventData\n\n\n/** A window event */\ntypedef WindowEvent = {\n\n        /** The type of window event this was. Use WindowEventType */\n    @:optional var type : WindowEventType;\n        /** The time in seconds that this event occured, useful for deltas */\n    @:optional var timestamp : Float;\n        /** The window id from which this event originated */\n    @:optional var window_id : Int;\n        /** The event data, where applicable. For example, with move, resized or sized events the data contains the new information as a result of the event. */\n    @:optional var event : WindowEventData;\n\n} //WindowEvent\n\n\n\n@:allow(luxe.Core)\n@:allow(luxe.Cursor)\nclass Screen {\n\n        /** Convenience: Returns *a new vector*, the middle of the screen, rounded as (w/2, h/2) */\n    public var mid (get,null) : Vector;\n        /** Convenience: Returns *a new vector*, the size of the screen */\n    public var size (get,null) : Vector;\n        /** Convenience: Returns *a new rectangle*, the bounds of the screen (0, 0, w, h) */\n    public var bounds (get,null) : Rectangle;\n\n        /** Returns the screen width as an Int */\n    public var w (get,null) : Int;\n        /** Returns the screen height as an Int */\n    public var h (get,null) : Int;\n        /** Convenience: Returns the screen width as a Float */\n    @:isVar public var width (default,null) : Float;\n        /** Convenience: Returns the screen height as a Float */\n    @:isVar public var height (default,null) : Float;\n\n        /** Access to the mouse cursor, position, visibility, locking etc. */\n    public var cursor : Cursor;\n\n    var core : Core;\n\n    @:allow(luxe.Core)\n    function new( ?_core:Core, _w:Int, _h:Int ) {\n\n        core = _core;\n        cursor = new Cursor(this);\n\n        width = _w;\n        height = _h;\n\n    } //new\n\n    function toString() {\n        return 'luxe.Screen({ w:$w, h:$h })';\n    }\n\n//Public API\n\n        /** Returns true if the given point falls within the bounds of the w/h of the screen. */\n    public function point_inside( _p:Vector ) {\n\n        if( _p.x < 0 )  return false;\n        if( _p.y < 0 )  return false;\n        if( _p.x > width )  return false;\n        if( _p.y > height )  return false;\n\n        return true;\n\n    } //point_inside\n\n        /** Returns true if the given point as floats fall within the bounds of the w/h of the screen. */\n    public function point_inside_xy( _x:Float, _y:Float ) {\n\n        if( _x < 0 )  return false;\n        if( _y < 0 )  return false;\n        if( _x > width )  return false;\n        if( _y > height )  return false;\n\n        return true;\n\n    } //point_inside_xy\n\n//Internal\n\n    function internal_resized(_w:Float, _h:Float) {\n\n        width = _w;\n        height = _h;\n\n    } //set_size\n\n//getters/setters\n\n        //:todo:immutable: create immutable types, that way these can be cached instead of new\n\n    function get_mid() : Vector return new Vector( Math.round(w/2), Math.round(h/2) );\n    function get_size() : Vector return new Vector( w, h );\n    function get_bounds() : Rectangle return new Rectangle( 0, 0, w, h );\n    function get_w() : Int return Std.int(width);\n    function get_h() : Int return Std.int(height);\n\n} //Screen\n\n\n\n\n\n\nclass Cursor {\n\n        /** The visibility of the cursor. (get/set) */\n    @:isVar public var visible (get,set): Bool = true;\n        /** Grabbing the cursor locks it to the window bounds. On web this is analogous to `lock`. (get/set) */\n    @:isVar public var grab (get,set): Bool = false;\n        /** Locking the cursor hides it, and enables the `xrel`/`yrel`   \n            values on the mouse move events. This changes the mouse to   \n            allow movement without it stopping at the bounds.   \n            On `web`, this must come from a user initiated action, and asks their permission. (get/set) */\n    @:isVar public var lock (get,set): Bool = false;\n        /** The current mouse position. Setting this has no effect on `web` (and cannot). */\n    @:isVar public var pos (get,set): Vector;\n\n        /** The screen this cursor relates to. */\n    var screen : Screen;\n    var ignore : Bool = false;\n\n    @:allow(luxe.Screen)\n    function new( _screen:Screen ) {\n\n        screen = _screen;\n        pos = new Vector();\n\n    } //new\n\n    @:allow(luxe.Core)\n    function set_internal( _pos:Vector ) {\n\n        ignore = true;\n            pos = _pos;\n        ignore = false;\n\n    } //set_internal\n\n//getters/setters\n\n    function get_visible() : Bool {\n\n        return visible;\n\n    } //get_visible\n\n    function set_visible( _visible:Bool ) : Bool {\n\n        screen.core.app.windowing.enable_cursor( _visible );\n\n        return visible = _visible;\n\n    } //set_visible\n\n    function get_grab() : Bool {\n\n        return grab;\n\n    } //get_grab\n\n    function get_lock() : Bool {\n\n        return lock;\n\n    } //get_lock\n\n    function set_grab( _grab:Bool ) : Bool {\n\n        screen.core.app.window.grab = _grab;\n\n        return grab = _grab;\n\n    } //set_grab\n\n    function set_lock( _lock:Bool ) : Bool {\n\n        screen.core.app.windowing.enable_cursor_lock(_lock);\n\n        return lock = _lock;\n\n    } //set_lock\n\n    function get_pos() : Vector {\n\n        return pos;\n\n    } //get_pos\n\n    function set_pos( _p:Vector ) : Vector {\n\n        if(pos != null && _p != null && !ignore) {\n            screen.core.app.window.set_cursor_position( Std.int(_p.x), Std.int(_p.y) );\n        }\n\n        return pos = _p;\n\n    } //set_pos\n\n\n} //Cursor\n","package luxe;\n\nimport luxe.Log.*;\nimport luxe.Visual;\nimport luxe.Vector;\nimport luxe.Rectangle;\n\nimport luxe.Resources;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.QuadGeometry;\n\nimport luxe.options.SpriteOptions;\n\nclass Sprite extends Visual {\n\n\n    @:isVar public var centered     (default, set) : Bool = true;\n    @:isVar public var flipx        (default, set) : Bool = false;\n    @:isVar public var flipy        (default, set) : Bool = false;\n    @:isVar public var uv           (default, set) : Rectangle;\n\n    public var geometry_quad : QuadGeometry;\n\n\n    public function new( options:SpriteOptions ) {\n\n        uv = new Rectangle();\n\n        assertnull(options, 'Sprite requires non-null options');\n\n            //centered\n        if(options.centered != null) {\n            centered = options.centered;\n        }\n\n            //flipx\n        if(options.flipx != null) {\n            flipx = options.flipx;\n        }\n\n            //flipy\n        if(options.flipy != null) {\n            flipy = options.flipy;\n        }\n\n            //create visual\n        super( options );\n\n    }\n\n    override function on_geometry_created() {\n\n        super.on_geometry_created();\n\n        if(texture != null) {\n\n                //because the default is 0,0,1,1 uv for the quad, we don't want that when\n                //textures are padded (like on web)\n            uv = def(options.uv, new Rectangle(0,0,texture.width,texture.height));\n\n                //if texture is render target, flipy\n            if(texture.resource_type == ResourceType.render_texture) {\n                flipy = true;\n            }\n\n        } //texture !null\n\n            //set the origin and centered once created\n        centered = !!centered;\n            //and re assign the flip values\n        flipx = !!flipx;\n        flipy = !!flipy;\n\n    } //on_geometry_created\n\n    override function set_geometry( _g:Geometry ) {\n\n        geometry_quad = cast _g;\n        return super.set_geometry(_g);\n\n    } //set_geometry\n\n//Helper functions\n\n        /** Returns true if a point is inside the sprite, takes into account the sprite transform,\n            which includes more cost than simple AABB like `point_inside_AABB` */\n    public function point_inside( _p:Vector ) : Bool {\n\n        if(geometry == null) return false;\n\n        return Luxe.utils.geometry.point_in_geometry(_p, geometry);\n\n    } //point_inside\n\n        /** Returns true if a point is inside the AABB unrotated */\n    public function point_inside_AABB(_p:Vector) : Bool {\n\n        if(pos == null) return false;\n        if(size == null) return false;\n\n            //scaled size\n        var _s_x = size.x * scale.x;\n        var _s_y = size.y * scale.y;\n\n        if(centered) {\n            var _hx = _s_x / 2;\n            var _hy = _s_y / 2;\n            if(_p.x < pos.x - _hx) return false;\n            if(_p.y < pos.y - _hy) return false;\n            if(_p.x > pos.x+_s_x - _hx) return false;\n            if(_p.y > pos.y+_s_y - _hy) return false;\n        } else {\n            if(_p.x < pos.x) return false;\n            if(_p.y < pos.y) return false;\n            if(_p.x > pos.x+_s_x) return false;\n            if(_p.y > pos.y+_s_y) return false;\n        }\n\n        return true;\n\n    } //point_inside_AABB\n\n//Properties\n\n\n//UV / source rect\n\n    function set_uv(_uv:Rectangle) : Rectangle {\n\n        if(geometry_quad != null) {\n            geometry_quad.uv(_uv);\n        }\n\n        uv = _uv;\n\n        Rectangle.listen( uv, _uv_change );\n\n        return uv;\n    }\n\n//Flipping\n\n    function set_flipy(_v:Bool) {\n\n        if(_v == flipy) {\n            return flipy;\n        }\n\n        if(geometry_quad != null) {\n            geometry_quad.flipy = _v;\n        }\n\n        return flipy = _v;\n\n    } //set_flipy\n\n    function set_flipx(_v:Bool) {\n\n        if(_v == flipx) {\n            return flipx;\n        }\n\n        if(geometry_quad != null) {\n            geometry_quad.flipx = _v;\n        }\n\n        return flipx = _v;\n\n    } //set_flipv\n\n//Size\n\n    override function set_size( _v:Vector ) : Vector {\n\n            //resize the mesh vertices themselves, as scale is relative to this size\n            //if explicitly set\n        if(geometry_quad != null) {\n\n            geometry_quad.resize( new Vector( _v.x, _v.y ) );\n\n                //If the user doesn't specify a custom origin, we try and work with the center\n            if(!_has_custom_origin) {\n                if(centered) {\n                        //half of the new size\n                    origin = _v.clone().divideScalar(2);\n                }\n            }\n\n        }\n\n            //done\n        return super.set_size(_v);\n\n    } //set_size\n\n//Centered\n\n    function set_centered(_c:Bool) : Bool {\n\n            //centered geometry affects the origin directly\n        if(size != null) {\n            if(_c) {\n                origin = new Vector(size.x/2, size.y/2);\n            } else {\n                origin = new Vector();\n            }\n        } //size != null\n\n        return centered = _c;\n\n    } //set_centered\n\n\n        //An internal callback for when x y or w or h on a transform changes\n    function _uv_change(_v:Float) { this.set_uv(uv); }\n\n} //Sprite\n","package luxe;\n\nimport luxe.Rectangle;\nimport luxe.Vector;\nimport luxe.Visual;\nimport luxe.options.VisualOptions;\nimport luxe.options.TextOptions;\n\nimport phoenix.Batcher;\nimport phoenix.BitmapFont;\nimport phoenix.geometry.TextGeometry;\n\ntypedef TextAlign = phoenix.BitmapFont.TextAlign;\n\nclass Text extends Visual {\n\n        public var geom : TextGeometry;\n\n    //regular font stuff\n\n        public var text (get,set) : String;\n            function get_text() return geom.text;\n            function set_text(_s) return geom.text = _s;\n        public var font (get,set) : BitmapFont;\n            function get_font() return geom.font;\n            function set_font(_f) return geom.font = _f;\n        public var point_size (get,set) : Float;\n            function get_point_size() return geom.point_size;\n            function set_point_size(_s) return geom.point_size = _s;\n        public var letter_spacing (get,set) : Float;\n            function get_letter_spacing() return geom.letter_spacing;\n            function set_letter_spacing(_s) return geom.letter_spacing = _s;\n        public var line_spacing (get,set) : Float;\n            function get_line_spacing() return geom.line_spacing;\n            function set_line_spacing(_s) return geom.line_spacing = _s;\n\n        public var bounds (get,set) : Rectangle;\n            function get_bounds() return geom.bounds;\n            function set_bounds(_b) return geom.bounds = _b;\n        public var bounds_wrap (get,set) : Bool;\n            function get_bounds_wrap() return geom.bounds_wrap;\n            function set_bounds_wrap(_b) return geom.bounds_wrap = _b;\n\n        public var align (get,set) : TextAlign;\n            function get_align() return geom.align;\n            function set_align(_a) return geom.align = _a;\n        public var align_vertical (get,set) : TextAlign;\n            function get_align_vertical() return geom.align_vertical;\n            function set_align_vertical(_a) return geom.align_vertical = _a;\n\n    //distance field specific\n\n        public var sdf (get,set) : Bool;\n            function get_sdf() return geom.sdf;\n            function set_sdf(_s) return geom.sdf = _s;\n\n        public var smoothness (get,set) : Float;\n            function get_smoothness() return geom.smoothness;\n            function set_smoothness(_s) return geom.smoothness = _s;\n        public var thickness (get,set) : Float;\n            function get_thickness() return geom.thickness;\n            function set_thickness(_t) return geom.thickness = _t;\n\n        public var outline (get,set) : Float;\n            function get_outline() return geom.outline;\n            function set_outline(_o) return geom.outline = _o;\n        public var outline_color (get,set) : Color;\n            function get_outline_color() return geom.outline_color;\n            function set_outline_color(_c) return geom.outline_color = _c;\n\n        public var glow_threshold (get,set) : Float;\n            function get_glow_threshold() return geom.glow_threshold;\n            function set_glow_threshold(_s) return geom.glow_threshold = _s;\n        public var glow_amount (get,set) : Float;\n            function get_glow_amount() return geom.glow_amount;\n            function set_glow_amount(_e) return geom.glow_amount = _e;\n        public var glow_color (get,set) : Color;\n            function get_glow_color() return geom.glow_color;\n            function set_glow_color(_c) return geom.glow_color = _c;\n\n    public var text_options : TextOptions;\n\n    public function new( _options : TextOptions #if debug, ?_pos_info:haxe.PosInfos #end ) {\n\n            //store for later\n        text_options = _options;\n        text_bounds = new Rectangle();\n\n    \tvar _batcher : Batcher = null;\n    \tif(_options.no_batcher_add == null || _options.no_batcher_add == false) {\n    \t\tif(_options.batcher != null) {\n    \t\t\t_batcher = _options.batcher;\n    \t\t} else {\n    \t\t\t_batcher = Luxe.renderer.batcher;\n    \t\t}\n    \t}\n\n            //create the text geometry\n        geom = new TextGeometry({\n\n                //render properties\n            batcher: _batcher,\n            depth : _options.depth,\n            visible : _options.visible,\n            immediate : _options.immediate,\n                //transform properties\n            // pos : _options.pos,\n            // rotation : _options.rotation,\n            // scale : _options.scale,\n            // origin : _options.origin,\n                //geometry specific\n            color : _options.color,\n            shader : _options.shader,\n            texture : _options.texture,\n                //text geometry specific\n            text: _options.text,\n            font: _options.font,\n            point_size: _options.point_size,\n            line_spacing: _options.line_spacing,\n            letter_spacing: _options.letter_spacing,\n\n            bounds : _options.bounds,\n            bounds_wrap : _options.bounds_wrap,\n            align : _options.align,\n            align_vertical : _options.align_vertical,\n\n            sdf: _options.sdf,\n            smoothness: _options.smoothness,\n            thickness: _options.thickness,\n\n            outline: _options.outline,\n            outline_color: _options.outline_color,\n\n            glow_threshold: _options.glow_threshold,\n            glow_amount: _options.glow_amount,\n            glow_color: _options.glow_color\n\n        });\n\n        geom.emitter.on(EvTextGeometry.update_text, on_geom_text_update);\n\n        _options.geometry = geom;\n        _options.shader = geom.shader;\n\n            //create the visual\n        super(_options #if debug, _pos_info #end);\n            //flush\n        _update_bounds();\n\n    } //new\n\n//Public API\n\n    public function point_inside( p:Vector ) {\n\n        _update_bounds();\n        return text_bounds.point_inside(p);\n\n    } //point_inside\n\n//Internal\n\n    override function set_pos_from_transform( _p:Vector ) {\n\n        super.set_pos_from_transform(_p);\n        _update_bounds();\n        text_options.pos = pos;\n\n    } //set_pos_from_transform\n\n//\n\n        //:todo: This is being considered overall, for the best fit.\n        //for now, for basic behavior that was there before, it'll do.\n    @:noCompletion\n    public var text_bounds : Rectangle;\n\n    function on_geom_text_update(_) {\n        _update_bounds();\n    }\n\n    @:noCompletion\n    inline function _update_bounds() {\n\n        var _x = pos.x;\n        var _y = pos.y;\n        var _tw = geom.text_width;\n        var _th = geom.text_height;\n        var _bw = geom.text_width;\n        var _bh = geom.text_height;\n\n        if(bounds != null) {\n            _bh = bounds.h;\n            _bw = bounds.w;\n            _x = bounds.x;\n            _y = bounds.y;\n\n            _x += switch(align) {\n                case center: _tw/2;\n                case right: _tw;\n                case _: 0.0;\n            }\n\n            _y += switch(align_vertical) {\n                case center: (_bh/2)-(_th/2);\n                case bottom: _bh - _th;\n                case _: 0.0;\n            }\n\n        } else {\n\n            _x -= switch(align) {\n                case center: _tw/2;\n                case right: _tw;\n                case _: 0.0;\n            }\n\n            _y -= switch(align_vertical) {\n                case center: _th/2;\n                case bottom: _th;\n                case _: 0.0;\n            }\n\n        } //bounds based\n\n        text_bounds.set( _x, _y, _tw, _th );\n\n    } //_update_bounds\n\n\n\n} //Text\n","package luxe;\n\nimport luxe.Core;\nimport haxe.Timer;\nimport luxe.Log._debug;\n\nclass Timer {\n\n\n    @:noCompletion public var core : Core;\n    @:noCompletion public var timers : Array<snow.api.Timer>;\n\n\n    @:noCompletion public function new( _core:Core ) {\n        core = _core;\n        timers = [];\n    } //new\n\n    @:noCompletion public function init() {\n\n        _debug('\\t timer initialized.');\n\n    } //init\n\n    @:noCompletion public function destroy() {\n\n        reset();\n        _debug('\\t timer shut down.');\n\n    } //destroy\n\n    @:noCompletion public function process() {\n\n    } //process\n\n        /** Kill all existing scheduled timers created through `schedule` */\n    public function reset() {\n\n        for( t in timers ) {\n            t.stop();\n            t = null;\n        }\n\n        timers = null;\n        timers = [];\n\n    } //reset\n\n    public function schedule( _time_in_seconds:Float, _on_time:Void->Void, ?repeat:Bool = false ) : snow.api.Timer {\n\n        var t = new snow.api.Timer( _time_in_seconds );\n\n        t.run = function () {\n            if(!repeat) {\n                t.stop ();\n                timers.remove(t);\n            }\n            _on_time();\n        };\n\n        timers.push(t);\n\n        return t;\n\n    } //schedule\n\n\n} //Timer\n","package luxe.collision;\n\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\nimport luxe.Vector;\n\n/** To implement your own debug drawing class, you only need to override drawLine function and implement it\n    the rest is handled internally. You can override specifics if you want, but it's not required */\nclass ShapeDrawer {\n\n//Public API\n\n    public function new() {\n\n    } //new\n\n        /** Draw a line between p0 and p1. Implement this function at minimum in custom drawing handlers */\n    public function drawLine( p0:Vector, p1:Vector, ?startPoint:Bool = true ) {\n\n    } //drawLine\n\n        /** Draw a `Shape`, it will determine the type and draw it for you. */\n    public function drawShape( shape:Shape ) {\n\n        if(Std.is(shape, Polygon)) {\n            drawPolygon(cast(shape, Polygon));\n            return;\n        } else { //circle\n            drawCircle(cast(shape, Circle));\n            return;\n        }\n\n    } //drawShape\n\n        /** Draw a `Polygon` */\n    public function drawPolygon( poly:Polygon ) {\n\n        var v : Array<Vector> = poly.transformedVertices.copy();\n\n        drawVertList( v );\n\n    } //drawPolygon\n\n        /** Draw a `Vector` (with magnitude) */\n    public function drawVector( v:Vector, start:Vector, ?startPoint:Bool = true ) {\n\n        drawLine( start, v );\n\n    } //drawVector\n\n        /** Draw a circle `Shape` */\n    public function drawCircle( circle:Circle ) {\n            //from :\n        //http://slabode.exofire.net/circle_draw.shtml\n\n        var _smooth : Float = 10;\n        var _steps : Int = Std.int(_smooth * Math.sqrt( circle.transformedRadius ));\n\n            //Precompute the value based on segments\n        var theta = 2 * 3.1415926 / _steps;\n\n        var tangential_factor = Math.tan( theta );\n        var radial_factor = Math.cos( theta );\n\n        var x : Float = circle.transformedRadius;\n        var y : Float = 0;\n\n        var _verts : Array<Vector> = [];\n\n        for( i in 0 ... _steps ) {\n\n            var __x = x + circle.x;\n            var __y = y + circle.y;\n\n            _verts.push( new Vector(__x,__y));\n\n                var tx = -y;\n                var ty = x;\n\n                x += tx * tangential_factor;\n                y += ty * tangential_factor;\n\n                x *= radial_factor;\n                y *= radial_factor;\n\n        } //for\n\n            //now draw it\n        drawVertList( _verts );\n\n    } //drawCircle\n\n    public function drawPoint( point:Vector, size:Float = 4 ) {\n\n        var xs = point.x - size;\n        var xe = point.x + size;\n        var ys = point.y;\n        var ye = point.y;\n\n        drawLine( new Vector(xs, ys), new Vector(xe, ye) );\n\n        xs = xe = point.x;\n        ys = point.y - size;\n        ye = point.y + size;\n\n        drawLine( new Vector(xs, ys), new Vector(xe, ye) );\n\n    } //drawPoint\n\n    public function drawShapeCollision( data:ShapeCollision, ?length:Float = 30 ) {\n\n        var shape1_o = new Vector(data.shape1.position.x, data.shape1.position.y);\n        var shape2_o = new Vector(data.shape2.position.x, data.shape2.position.y);\n\n        //origins\n\n        drawPoint(shape1_o);\n        drawPoint(shape2_o);\n\n        //unit vectors\n\n        var unit_line_end = new Vector( shape1_o.x + (data.unitVector.x * length), shape1_o.y + (data.unitVector.y * length) );\n\n        drawLine( shape1_o, unit_line_end );\n\n        //ghosts\n\n        var shape1p = shape1_o.clone().add(data.separation);\n\n        drawPoint(shape1p);\n\n    } //drawShapeCollision\n\n\n//Internal API\n\n\n        /** Draw a list of points as lines */\n    function drawVertList( _verts : Array<Vector> ) {\n\n        var _count : Int = _verts.length;\n        if(_count < 3) {\n            throw \"cannot draw polygon with < 3 verts as this is a line or a point.\";\n        }\n\n            //start the polygon by drawing this start point\n        drawLine( _verts[0], _verts[1], true );\n\n            //draw the rest of the points\n        for(i in 1 ... _count-1) {\n            drawLine( _verts[i], _verts[i+1], false );\n        }\n            //join last point to first point\n        drawLine( _verts[_count-1], _verts[0], false );\n\n    } //drawVertList\n\n\n} //ShapeDrawer\n","package phoenix;\n\nimport luxe.tween.Actuate;\nimport luxe.tween.actuators.SimpleActuator;\n\n//Pieces of the color conversion code come from\n// http://haxe.org/doc/snip/colorconverter\nimport luxe.options.ColorOptions;\n\nclass Color {\n\n    @:isVar public var r (default, set) : Float = 1.0;\n    @:isVar public var g (default, set) : Float = 1.0;\n    @:isVar public var b (default, set) : Float = 1.0;\n\n    public var a : Float = 1.0;\n\n    var is_hsl : Bool = false;\n    var is_hsv : Bool = false;\n    var refreshing : Bool = false;\n\n    public function new( _r:Float = 1.0, _g:Float = 1.0, _b:Float = 1.0, _a:Float = 1.0 ) {\n\n        r = _r;\n        g = _g;\n        b = _b;\n        a = _a;\n\n    }\n\n    function set_r(_r:Float) {\n        r = _r;\n\n        if(!refreshing) {\n            if(is_hsl) {\n                var colorhsl : ColorHSL = cast this;\n                colorhsl.fromColor(this);\n            } else if(is_hsv) {\n                var colorhsv : ColorHSV = cast this;\n                colorhsv.fromColor(this);\n            }\n        } //refreshing\n\n        return r;\n    }\n    function set_g(_g:Float) {\n        g = _g;\n\n        if(!refreshing) {\n            if(is_hsl) {\n                var colorhsl : ColorHSL = cast this;\n                colorhsl.fromColor(this);\n            } else if(is_hsv) {\n                var colorhsv : ColorHSV = cast this;\n                colorhsv.fromColor(this);\n            }\n        } //!refreshing\n\n        return g;\n    }\n    function set_b(_b:Float) {\n        b = _b;\n\n        if(!refreshing) {\n            if(is_hsl) {\n                var colorhsl : ColorHSL = cast this;\n                colorhsl.fromColor(this);\n            } else if(is_hsv) {\n                var colorhsv : ColorHSV = cast this;\n                colorhsv.fromColor(this);\n            }\n        } //refreshing\n\n        return b;\n    }\n\n\n    public static function random(?_include_alpha:Bool=false) : Color {\n        return new Color(Math.random(), Math.random(), Math.random(), _include_alpha ? Math.random() : 1.0 );\n    }\n\n    public function set( ?_r : Float, ?_g : Float, ?_b : Float, ?_a : Float ) : Color {\n\n        var _setr = r;\n        var _setg = g;\n        var _setb = b;\n        var _seta = a;\n\n            //assign new values\n        if(_r != null) _setr = _r;\n        if(_g != null) _setg = _g;\n        if(_b != null) _setb = _b;\n        if(_a != null) _seta = _a;\n\n        r = _setr;\n        g = _setg;\n        b = _setb;\n        a = _seta;\n\n        return this;\n    }\n\n    public function maxRGB() : Float {\n        return Math.max(r, Math.max(g, b));\n    }\n\n    public function minRGB() : Float {\n        return Math.min(r, Math.min(g, b));\n    }\n\n    public function tween( ?_time_in_seconds:Float = 0.5, ?_properties_to_tween:ColorOptions = null, _override:Bool = true ) {\n\n        if(_properties_to_tween != null) {\n\n            var _dest_r = r;\n            var _dest_g = g;\n            var _dest_b = b;\n            var _dest_a = a;\n\n            var _change_r = false;\n            var _change_g = false;\n            var _change_b = false;\n            var _change_a = false;\n\n            if(Std.is(_properties_to_tween, Color)) {\n\n                _dest_r = _properties_to_tween.r;\n                _dest_g = _properties_to_tween.g;\n                _dest_b = _properties_to_tween.b;\n                _dest_a = _properties_to_tween.a;\n\n                _change_r = true;\n                _change_g = true;\n                _change_b = true;\n                _change_a = true;\n\n            } else {\n\n                if(_properties_to_tween.r != null) { _dest_r = _properties_to_tween.r; _change_r = true; }\n                if(_properties_to_tween.g != null) { _dest_g = _properties_to_tween.g; _change_g = true; }\n                if(_properties_to_tween.b != null) { _dest_b = _properties_to_tween.b; _change_b = true; }\n                if(_properties_to_tween.a != null) { _dest_a = _properties_to_tween.a; _change_a = true; }\n\n            }\n\n            var _properties : Dynamic = {};\n\n            if(_change_r) _properties.r = _dest_r;\n            if(_change_g) _properties.g = _dest_g;\n            if(_change_b) _properties.b = _dest_b;\n            if(_change_a) _properties.a = _dest_a;\n\n            return Actuate.tween( this, _time_in_seconds, _properties, _override );\n\n        } else { //dest is null?\n            throw \" Warning: Color.tween passed a null destination \";\n        }\n\n    } //tween\n\n    public function clone() : Color {\n        return new Color(r,g,b,a);\n    } //clone\n\n    public function rgb(_rgb:Int = 0xFFFFFF) : Color {\n        from_int(_rgb);\n        return this;\n    } //rgb\n\n    public function toColorHSL() : ColorHSL {\n        return new ColorHSL().fromColor(this);\n    } //toColorHSL\n\n    public function toColorHSV() : ColorHSV {\n        return new ColorHSV().fromColor(this);\n    } //toColorHSV\n\n    public function fromColorHSV( _color_hsv:ColorHSV ) {\n\n        var d:Float = (_color_hsv.h%360) / 60;\n\n        if (d < 0) {\n            d += 6;\n        }\n\n        var hf:Int = Math.floor(d);\n        var hi:Int = hf % 6;\n        var f:Float = d - hf;\n\n        var v:Float = _color_hsv.v;\n        var p:Float = _color_hsv.v * (1 - _color_hsv.s);\n        var q:Float = _color_hsv.v * (1 - f * _color_hsv.s);\n        var t:Float = _color_hsv.v * (1 - (1 - f) * _color_hsv.s);\n\n        switch(hi) {\n            case 0: { r = v; g = t; b = p; };\n            case 1: { r = q; g = v; b = p; };\n            case 2: { r = p; g = v; b = t; };\n            case 3: { r = p; g = q; b = v; };\n            case 4: { r = t; g = p; b = v; };\n            case 5: { r = v; g = p; b = q; };\n        }\n\n        a = _color_hsv.a;\n\n    } //fromColorHSV\n\n    public function fromColorHSL( _color_hsl:ColorHSL ) : Color {\n\n        var q:Float = 1;\n\n        if (_color_hsl.l < 1 / 2) {\n            q = _color_hsl.l * (1 + _color_hsl.s);\n        } else {\n            q = _color_hsl.l + _color_hsl.s - (_color_hsl.l * _color_hsl.s);\n        }\n\n        var p:Float = 2 * _color_hsl.l - q;\n        var hk:Float = (_color_hsl.h % 360) / 360;\n\n        var tr:Float = hk + 1 / 3;\n        var tg:Float = hk;\n        var tb:Float = hk - 1 / 3;\n\n        var tc:Array<Float> = [ tr, tg, tb ];\n\n            for (n in 0...tc.length) {\n\n                var t:Float = tc[n];\n\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n\n                tc[n] = if (t < 1 / 6) {\n                    p + ((q - p) * 6 * t);\n                } else if (t < 1 / 2) {\n                    q;\n                } else if (t < 2 / 3) {\n                    p + ((q - p) * 6 * (2 / 3 - t));\n                } else {\n                    p;\n                }\n\n            } //for each in tc\n\n            //store in rgb\n        r = tc[0];\n        g = tc[1];\n        b = tc[2];\n            //alpha is passed straight through\n        a = _color_hsl.a;\n\n        return this;\n\n    } // fromColorHSL\n\n        //make it traceable\n    function toString() : String {\n        return \"{ r:\"+r+\" , g:\"+g+\" , b:\"+b+\" , a:\"+a+\" }\";\n    }\n\n    function from_int(_i:Int) {\n\n        var _r = _i >> 16;\n        var _g = _i >> 8 & 0xFF;\n        var _b = _i & 0xFF;\n\n            //convert to 0-1\n        r = _r / 255;\n        g = _g / 255;\n        b = _b / 255;\n\n            //alpha not specified in 0xFFFFFF\n            //but we don't need to clobber it,\n            //it was set in the member list\n        // a = 1.0;\n    }\n\n} //Color\n\nclass ColorHSL extends Color {\n\n    @:isVar public var h (default,set) : Float = 0.0;\n    @:isVar public var s (default,set) : Float = 1.0;\n    @:isVar public var l (default,set) : Float = 1.0;\n\n    function set_h(_h:Float) {\n        h = _h;\n        _refresh();\n        return _h;\n    }\n    function set_s(_s:Float) {\n        s = _s;\n        _refresh();\n        return _s;\n    }\n    function set_l(_l:Float) {\n        l = _l;\n        _refresh();\n        return _l;\n    }\n\n    public function new( _h:Float = 0.0, _s:Float = 1.0, _l:Float = 1.0, _a:Float = 1.0 ) {\n\n        super();\n\n        is_hsl = true;\n\n        h = _h;\n        s = _s;\n        l = _l;\n        a = _a;\n\n        _refresh();\n\n    } //new\n\n    public override function set( ?_h : Float, ?_s : Float, ?_l : Float, ?_a : Float ) : ColorHSL {\n\n        var _seth = h;\n        var _sets = s;\n        var _setl = l;\n        var _seta = a;\n\n            //assign new values\n        if(_h != null) _seth = _h;\n        if(_s != null) _sets = _s;\n        if(_l != null) _setl = _l;\n        if(_a != null) _seta = _a;\n\n            h = _seth;\n            s = _sets;\n            l = _setl;\n            a = _seta;\n\n        _refresh();\n\n        return this;\n\n    } //set\n\n    public override function tween( ?_time_in_seconds:Float = 0.5, ?_dest:ColorOptions = null, _override:Bool = true ) {\n\n        super.tween(_time_in_seconds, _dest, _override);\n\n        if(_dest != null) {\n\n            var _dest_h = h;\n            var _dest_s = s;\n            var _dest_l = l;\n            var _dest_a = a;\n\n            var _change_h = false;\n            var _change_s = false;\n            var _change_l = false;\n            var _change_a = false;\n\n            if(Std.is(_dest, ColorHSL)) {\n\n                _dest_h = _dest.h;\n                _dest_s = _dest.s;\n                _dest_l = _dest.l;\n                _dest_a = _dest.a;\n\n                _change_h = true;\n                _change_s = true;\n                _change_l = true;\n                _change_a = true;\n\n            } else {\n\n                if(_dest.h != null) { _dest_h = _dest.h; _change_h = true; }\n                if(_dest.s != null) { _dest_s = _dest.s; _change_s = true; }\n                if(_dest.l != null) { _dest_l = _dest.l; _change_l = true; }\n                if(_dest.a != null) { _dest_a = _dest.a; _change_a = true; }\n\n            }\n\n            var _properties : Dynamic = {};\n\n            if(_change_h) _properties.h = _dest_h;\n            if(_change_s) _properties.s = _dest_s;\n            if(_change_l) _properties.l = _dest_l;\n            if(_change_a) _properties.a = _dest_a;\n\n            return Actuate.tween( this, _time_in_seconds, _properties, _override );\n\n        } else { //dest is null?\n            throw \" Warning: Color.tween passed a null destination \";\n        }\n\n    } //tween\n\n    public function _refresh() : ColorHSL {\n\n        refreshing = true;\n            super.fromColorHSL(this);\n        refreshing = false;\n\n        return this;\n    } //_refresh\n\n    public override function clone() : ColorHSL {\n        return new ColorHSL(h,s,l,a);\n    } //clone\n\n    public function toColor() : Color {\n        return cast _refresh();\n    } //toColor\n\n    public function fromColor( _color:Color ) : ColorHSL {\n\n        var max:Float = _color.maxRGB();\n        var min:Float = _color.minRGB();\n        var add:Float = max + min;\n        var sub:Float = max - min;\n\n        var _h:Float = 0;\n        if (max == min) {\n            _h = 0;\n        } else if (max == _color.r) {\n            _h = ((60 * (_color.g - _color.b) / sub + 360) % 360);\n        } else if (max == _color.g) {\n            _h = (60 * (_color.b - _color.r) / sub + 120);\n        } else if (max == _color.b) {\n            _h = (60 * (_color.r - _color.g) / sub + 240);\n        }\n\n        var _l:Float = add / 2;\n\n        var _s:Float = if (max == min) {\n            0;\n        } else if (l <= 1 / 2) {\n            sub / add;\n        } else {\n            sub / (2 - add);\n        }\n\n            h = _h;\n            s = _s;\n            l = _l;\n            a = _color.a;\n\n        return this;\n\n    } //fromColor\n\n    public override function toString() : String {\n        return \"{ h:\"+h+\" , s:\"+s+\" , l:\"+l+\" , a:\"+a+\" }\";\n    }\n\n\n} //ColorHSL\n\n\nclass ColorHSV extends Color {\n\n    @:isVar public var h (default,set) : Float = 0.0;\n    @:isVar public var s (default,set) : Float = 0.0;\n    @:isVar public var v (default,set) : Float = 1.0;\n\n    function set_h(_h:Float) {\n        h = _h;\n        _refresh();\n        return _h;\n    }\n    function set_s(_s:Float) {\n        s = _s;\n        _refresh();\n        return s;\n    }\n    function set_v(_v:Float) {\n        v = _v;\n        _refresh();\n        return v;\n    }\n\n    public function new( _h:Float = 0.0, _s:Float = 0.0, _v:Float = 1.0, _a:Float = 1.0 ) {\n\n        super();\n\n        is_hsv = true;\n\n        h = _h;\n        s = _s;\n        v = _v;\n        a = _a;\n\n        _refresh();\n\n    } //new\n\n    public override function set( ?_h : Float, ?_s : Float, ?_v : Float, ?_a : Float ) : Color {\n\n        var _seth = h;\n        var _sets = s;\n        var _setv = v;\n        var _seta = a;\n\n            //assign new values\n        if(_h != null) _seth = _h;\n        if(_s != null) _sets = _s;\n        if(_v != null) _setv = _v;\n        if(_a != null) _seta = _a;\n\n            h = _seth;\n            s = _sets;\n            v = _setv;\n            a = _seta;\n\n            //update parent rgba values\n        _refresh();\n\n        return this;\n\n    } //set\n\n    public override function tween( ?_time_in_seconds:Float = 0.5, ?_dest:ColorOptions = null, _override:Bool = true ) {\n\n        super.tween(_time_in_seconds, _dest, _override);\n\n        if(_dest != null) {\n\n            var _dest_h = h;\n            var _dest_s = s;\n            var _dest_v = v;\n            var _dest_a = a;\n\n            var _change_h = false;\n            var _change_s = false;\n            var _change_v = false;\n            var _change_a = false;\n\n            if(Std.is(_dest, ColorHSV)) {\n\n                _dest_h = _dest.h;\n                _dest_s = _dest.s;\n                _dest_v = _dest.v;\n                _dest_a = _dest.a;\n\n                _change_h = true;\n                _change_s = true;\n                _change_v = true;\n                _change_a = true;\n\n            } else {\n\n                if(_dest.h != null) { _dest_h = _dest.h; _change_h = true; }\n                if(_dest.s != null) { _dest_s = _dest.s; _change_s = true; }\n                if(_dest.v != null) { _dest_v = _dest.v; _change_v = true; }\n                if(_dest.a != null) { _dest_a = _dest.a; _change_a = true; }\n\n            }\n\n            var _properties : Dynamic = {};\n\n            if(_change_h) _properties.h = _dest_h;\n            if(_change_s) _properties.s = _dest_s;\n            if(_change_v) _properties.v = _dest_v;\n            if(_change_a) _properties.a = _dest_a;\n\n            return Actuate.tween( this, _time_in_seconds, _properties, _override );\n\n        } else { //dest is null?\n            throw \" Warning: Color.tween passed a null destination \";\n        }\n\n    } //tween\n\n    public function _refresh() {\n\n        refreshing = true;\n            super.fromColorHSV(this);\n        refreshing = false;\n\n        return this;\n    }\n\n    public override function clone() : ColorHSV {\n        return new ColorHSV(h,s,v,a);\n    } //clone\n\n    public function toColor() : Color {\n        //make sure the values are passed up to parent color\n        return cast _refresh();\n    } //toColor\n\n    public override function toColorHSL() : ColorHSL {\n        _refresh();\n        return super.toColorHSL();\n    } //to hsl\n\n    public override function fromColorHSL( _color_hsl:ColorHSL ) : ColorHSV {\n            //make sure that it it's updated in the parent\n        _color_hsl._refresh();\n        return fromColor( cast _color_hsl );\n    } //from hsl\n\n    public function fromColor( _color:Color ) : ColorHSV {\n\n        var max:Float = _color.maxRGB();\n        var min:Float = _color.minRGB();\n        var add:Float = max + min;\n        var sub:Float = max - min;\n\n        var _h:Float = 0;\n\n        if (max == min) {\n            _h = 0;\n        } else if (max == _color.r) {\n            _h = (60 * (_color.g - _color.b) / sub + 360) % 360;\n        } else if (max == _color.g) {\n            _h = 60 * (_color.b - _color.r) / sub + 120;\n        } else if (max == _color.b) {\n            _h = 60 * (_color.r - _color.g) / sub + 240;\n        }\n\n        var _s:Float = if (max == 0) {\n            0;\n        } else {\n            1 - min / max;\n        }\n\n        h = _h;\n        s = _s;\n        v = max;\n        a = _color.a;\n\n        return this;\n\n    } //fromColor\n\n    public override function toString() : String {\n        return \"{ h:\"+h+\" , s:\"+s+\" , v:\"+v+\" , a:\"+a+\" }\";\n    }\n\n} //ColorHSV\n","package luxe.collision;\n\nimport luxe.collision.ShapeDrawer;\nimport luxe.collision.shapes.Circle;\nimport luxe.Vector;\nimport luxe.Log.*;\n\nimport luxe.options.RenderProperties;\n\nclass ShapeDrawerLuxe extends ShapeDrawer {\n\n    static var color = new luxe.Color().rgb(0xf6007b); //0xff4b03\n\n    var options : RenderProperties;\n\n    public function new( ?_options:RenderProperties ) {\n\n        super();\n        options = _options;\n\n        def(options, {});\n        def(options.immediate, true);\n        def(options.depth, 100);\n\n    }\n\n    override public function drawCircle( circle:Circle ) {\n\n        assertnull(circle);\n\n        Luxe.draw.ring({\n            x: circle.position.x,\n            y: circle.position.y,\n            r: circle.transformedRadius,\n            color: color,\n            depth: options.depth,\n            immediate: options.immediate,\n            batcher: options.batcher,\n        });\n\n    }\n\n    override public function drawLine( p0:Vector, p1:Vector, ?startPoint:Bool = true ) {\n\n        assertnull(p0);\n        assertnull(p1);\n\n        Luxe.draw.line({\n            p0 : new luxe.Vector(p0.x, p0.y),\n            p1 : new luxe.Vector(p1.x, p1.y),\n            color : color,\n            depth: options.depth,\n            immediate: options.immediate,\n            batcher: options.batcher\n        });\n\n    } //drawLine\n\n} //ShapeDrawerLuxe\n","package luxe.collision.data;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\n\n/** Ray collision intersection data, obtained by testing a shape and a ray. */\nclass RayCollision {\n\n        /** Shape the intersection was with. */\n    public var shape:Shape;\n        /** The ray involved in the intersection. */\n    public var ray:Ray;\n\n        /** Distance along ray that the intersection start at. */\n    public var start:Float;\n        /** Distance along ray that the intersection ended at. */\n    public var end:Float;\n\n    public function new( _shape:Shape, _ray:Ray, _start:Float, _end:Float ) {\n\n        ray = _ray;\n        shape = _shape;\n        start = _start;\n        end = _end;\n\n    } //new\n\n} //RayCollision\n\n\n/** A static extension class helper for RayCollision */\nclass RayCollisionHelper {\n\n        /** Convenience: get the start point along the line as a vector.\n            It is possible the start point is not along the ray itself, when\n            the `start` value is < 0, the ray start is inside the shape.\n            If you need that point, use the ray.start point,\n            i.e `if(data.start < 0) point = data.ray.start; else point = data.hitStart();  ` */\n    public static function hitStart( data:RayCollision ) : Vector {\n        var dir = data.ray.dir;\n        var offsetx = dir.x * data.start;\n        var offsety = dir.y * data.start;\n        return new Vector( data.ray.start.x + offsetx, data.ray.start.y + offsety );\n    }\n\n        /** Convenience: get the end point along the line as a vector.\n            Note that it is possible that this extends beyond the length of the ray,\n            when RayCollision `end` value is > 1, i.e the end of the ray is inside the shape area.\n            If you need that point, you would use ray.end as the point,\n            i.e `if(data.end > 1) point = data.ray.end; else point = data.hitEnd();` */\n    public static function hitEnd( data:RayCollision ) : Vector {\n        var dir = data.ray.dir;\n        var offsetx = dir.x * data.end;\n        var offsety = dir.y * data.end;\n        return new Vector( data.ray.start.x + offsetx, data.ray.start.y + offsety );\n    }\n\n} //RayCollisionHelper\n","package luxe.collision.data;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\n\n/** Ray intersection data obtained by testing two rays for intersection. */\nclass RayIntersection {\n\n        /** The first ray in the test */\n    public var ray1:Ray;\n        /** The second ray in the test */\n    public var ray2:Ray;\n\n        /** u value for ray1. */\n    public var u1:Float;\n        /** u value for ray2. */\n    public var u2:Float;\n\n    public function new(ray1:Ray, u1:Float, ray2:Ray, u2:Float) {\n\n        this.ray1 = ray1;\n        this.ray2 = ray2;\n\n        this.u1 = u1;\n        this.u2 = u2;\n\n    } //new\n\n} //RayIntersection","package luxe.collision.data;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\n\n/** Collision data, obtained by testing two shapes for a collision. */\nclass ShapeCollision {\n\n        /** the overlap amount */\n    public var overlap : Float = 0;\n        /** a vector that when subtracted to shape 1 will separate it from shape 2 */\n    public var separation : Vector;\n\n        /** the first shape */\n    public var shape1 : Shape;\n        /** the second shape */\n    public var shape2 : Shape;\n        /** unit vector on the axis of the collision (the normal of the face that was collided with) */\n    public var unitVector : Vector;\n\n    @:noCompletion\n    public function new() {\n\n        separation = new Vector();\n        unitVector = new Vector();\n\n    } //new\n\n} //ShapeCollision\n","package luxe.collision.sat;\n\nimport luxe.Vector;\n\n/** Common math utilities used internally */\nclass Common {\n\n       /** Internal api - find the normal axis of a vert in the list at index */\n    public static function findNormalAxis(vertices:Array<Vector>, index:Int):Vector {\n\n        var vector1 = vertices[index];\n            //make sure you get a real vertex, not one that is outside the length of the vector.\n        var vector2 = (index >= vertices.length - 1) ? vertices[0] : vertices[index + 1];\n            //take the two vertices, make a line out of them, and find the normal of the line\n        var normalAxis = new Vector(-(vector2.y - vector1.y), vector2.x - vector1.x);\n\n        return normalAxis.normalize();\n\n    } //findNormalAxis\n\n} //Common","package luxe.collision.sat;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\nimport luxe.collision.sat.Common;\n\n/** Implementation details for the 2D SAT collision queries.\n    Used by the various shapes, and Collision API, mostly internally.  */\nclass SAT2D {\n\n        /** Internal api - test a circle against a polygon */\n    public static function testCircleVsPolygon( circle:Circle, polygon:Polygon, flip:Bool=false ) : ShapeCollision {\n\n        var ep : Float = 0.0000000001;\n        var test1 : Float; //numbers for testing max/mins\n        var test2 : Float;\n        var test : Float;\n\n        var min1 : Float = 0; //same as above\n        var max1 : Float = 0x3FFFFFFF;\n        var min2 : Float = 0;\n        var max2 : Float = 0x3FFFFFFF;\n        var normalAxis:Vector = new Vector();\n        var offset : Float;\n        var vectorOffset:Vector = new Vector();\n        var vectors:Array<Vector>;\n        var shortestDistance : Float = 0x3FFFFFFF;\n        var collisionData = new ShapeCollision();\n        var distMin : Float;\n\n        var distance : Float = 0xFFFFFFFF;\n        var testDistance : Float = 0x3FFFFFFF;\n        var closestVector:Vector = new Vector(); //the vector to use to find the normal\n\n        // find offset\n        vectorOffset = new Vector(-circle.x,-circle.y);\n        vectors = polygon.transformedVertices.copy();\n\n        //adds some padding to make it more accurate\n        if(vectors.length == 2) {\n            var temp:Vector = new Vector(-(vectors[1].y - vectors[0].y), vectors[1].x - vectors[0].x);\n            temp.truncate(ep);\n            vectors.push( vectors[1].clone().add(temp) );\n        }\n\n        // find the closest vertex to use to find normal\n        for(i in 0 ... vectors.length) {\n\n            // trace(i + ' @ ' + vectors[i]);\n\n            distance =  (circle.x - (vectors[i].x)) * (circle.x - (vectors[i].x)) +\n                        (circle.y - (vectors[i].y)) * (circle.y - (vectors[i].y));\n\n            if(distance < testDistance) { //closest has the lowest distance\n                testDistance = distance;\n                closestVector.x = vectors[i].x;\n                closestVector.y = vectors[i].y;\n            }\n\n        } //for\n\n        //get the normal vector\n        normalAxis = new Vector(closestVector.x - circle.x, closestVector.y - circle.y);\n        normalAxis.normalize(); //normalize is(set its length to 1)\n\n        // project the polygon's points\n        min1 = normalAxis.dot(vectors[0]);\n        max1 = min1; //set max and min\n\n        for(j in 1 ... vectors.length) { //project all its points, starting with the first(the 0th was done up there^)\n            test = normalAxis.dot(vectors[j]); //dot to project\n            if(test < min1) {\n                min1 = test;\n            } //smallest min is wanted\n            if(test > max1) {\n                max1 = test;\n            } //largest max is wanted\n        }\n\n        // project the circle\n        max2 = circle.transformedRadius; //max is radius\n        min2 -= circle.transformedRadius; //min is negative radius\n\n        // offset the polygon's max/min\n        offset = normalAxis.dot(vectorOffset);\n        min1 += offset;\n        max1 += offset;\n\n        // do the big test\n        test1 = min1 - max2;\n        test2 = min2 - max1;\n\n        if(test1 > 0 || test2 > 0) { //if either test is greater than 0, there is a gap, we can give up now.\n            return null;\n        }\n\n            // circle distance check\n        distMin = -(max2 - min1);\n        if(flip) distMin *= -1;\n        if(Math.abs(distMin) < shortestDistance) {\n            collisionData.unitVector = normalAxis;\n            collisionData.overlap = distMin;\n            shortestDistance = Math.abs(distMin);\n        }\n\n            // find the normal axis for each point and project\n        for(i in 0 ... vectors.length) {\n\n            normalAxis = Common.findNormalAxis(vectors, i);\n\n            // project the polygon(again? yes, circles vs. polygon require more testing...)\n            min1 = normalAxis.dot(vectors[0]); //project\n            max1 = min1; //set max and min\n\n            //project all the other points(see, cirlces v. polygons use lots of this...)\n            for(j in 1 ... vectors.length) {\n                test = normalAxis.dot(vectors[j]); //more projection\n                if(test < min1) {\n                    min1 = test;\n                } //smallest min\n                if(test > max1) {\n                    max1 = test;\n                } //largest max\n            }\n\n            // project the circle(again)\n            max2 = circle.transformedRadius; //max is radius\n            min2 = -circle.transformedRadius; //min is negative radius\n\n            //offset points\n            offset = normalAxis.dot(vectorOffset);\n            min1 += offset;\n            max1 += offset;\n\n            // do the test, again\n            test1 = min1 - max2;\n            test2 = min2 - max1;\n\n                //failed.. quit now\n            if(test1 > 0 || test2 > 0) {\n                return null;\n            }\n\n            distMin = -(max2 - min1);\n            if(flip) distMin *= -1;\n            if(Math.abs(distMin) < shortestDistance) {\n                collisionData.unitVector = normalAxis;\n                collisionData.overlap = distMin;\n                shortestDistance = Math.abs(distMin);\n            }\n\n        } //for\n\n        //if you made it here, there is a collision!!!!!\n\n        collisionData.shape2 = if(flip) polygon else circle;\n        collisionData.shape1 = if(flip) circle else polygon;\n        collisionData.separation = new Vector(-collisionData.unitVector.x * collisionData.overlap,\n                                                -collisionData.unitVector.y * collisionData.overlap); //return the separation distance\n\n        if(flip) collisionData.unitVector.invert();\n\n        return collisionData;\n\n    } //testCircleVsPolygon\n\n        /** Internal api - test a circle against a circle */\n    public static function testCircleVsCircle( circle1:Circle, circle2:Circle ) : ShapeCollision {\n        //\n\n            //add both radii together to get the colliding distance\n        var totalRadius = circle1.transformedRadius + circle2.transformedRadius;\n            //find the distance between the two circles using Pythagorean theorem. No square roots for optimization\n        var distancesq = (circle1.x - circle2.x) * (circle1.x - circle2.x) + (circle1.y - circle2.y) * (circle1.y - circle2.y);\n\n            //if your distance is less than the totalRadius square(because distance is squared)\n        if(distancesq < totalRadius * totalRadius) {\n\n                //find the difference. Square roots are needed here.\n            var difference : Float = totalRadius - Math.sqrt(distancesq);\n\n            var collisionData =  new ShapeCollision();\n\n                collisionData.shape1 = circle1;\n                collisionData.shape2 = circle2;\n                collisionData.unitVector = new Vector(circle1.x - circle2.x, circle1.y - circle2.y);\n                collisionData.unitVector.normalize();\n\n                    //find the movement needed to separate the circles\n                collisionData.separation = new Vector( collisionData.unitVector.x * difference,\n                                                       collisionData.unitVector.y * difference );\n\n                    //the magnitude of the overlap\n                collisionData.overlap = collisionData.separation.length;\n\n            return collisionData;\n\n        } //if distanceSq\n\n        return null;\n\n    } //testCircleVsCircle\n\n        /** Internal api - test a polygon against another polygon */\n    public static function testPolygonVsPolygon( polygon1:Polygon, polygon2:Polygon, flip:Bool=false ) : ShapeCollision {\n\n        var result1 = checkPolygons(polygon1, polygon2, flip);\n\n        if(result1 == null) return null;\n\n        var result2 = checkPolygons(polygon2, polygon1, !flip);\n\n        if (result2 == null) return null;\n\n            //take the closest overlap\n        (Math.abs(result1.overlap) < Math.abs(result2.overlap)) ?\n            return result1:\n            return result2;\n\n    } //testPolygonVsPolygon\n\n        /** Internal api - test a ray against a circle */\n    public static function testRayVsCircle( ray:Ray, circle:Circle ) : RayCollision {\n\n        var delta = ray.end.clone().subtract(ray.start);\n        var ray2circle = ray.start.clone().subtract(circle.position);\n\n        var a = delta.lengthsq;\n        var b = 2 * delta.dot(ray2circle);\n        var c = ray2circle.dot(ray2circle) - circle.radius * circle.radius;\n\n        var d:Float = b * b - 4 * a * c;\n\n        if (d >= 0) {\n\n            d = Math.sqrt(d);\n\n            var t1:Float = (-b - d) / (2 * a);\n            var t2:Float = (-b + d) / (2 * a);\n\n            if (ray.infinite || ((t1 <= 1.0)&&(t1 >=0.0)) ) {\n                return new RayCollision(circle, ray, t1, t2);\n            }\n\n        } //d>=0\n\n        return null;\n\n    } //testRayVsCircle\n\n        /** Internal api - test a ray against a polygon */\n    public static function testRayVsPolygon( ray:Ray, polygon:Polygon ) : RayCollision {\n\n        var delta = ray.end.clone().subtract(ray.start);\n        var vertices = polygon.transformedVertices;\n\n        var min_u:Float = Math.POSITIVE_INFINITY;\n        var max_u:Float = 0.0;\n\n        if (vertices.length > 2) {\n\n            var v1 = vertices[vertices.length - 1];\n            var v2 = vertices[0];\n\n            var r = intersectRayRay(ray.start, delta, v1, v2.clone().subtract(v1));\n\n            if (r != null && r.ub >= 0.0 && r.ub <= 1.0) {\n                if (r.ua < min_u) min_u = r.ua;\n                if (r.ua > max_u) max_u = r.ua;\n            }\n\n            for (i in 1...vertices.length) {\n\n                v1 = vertices[i - 1];\n                v2 = vertices[i];\n\n                r = intersectRayRay(ray.start, delta, v1, v2.clone().subtract(v1));\n\n                if (r != null && r.ub >= 0.0 && r.ub <= 1.0) {\n                    if (r.ua < min_u) min_u = r.ua;\n                    if (r.ua > max_u) max_u = r.ua;\n                }\n\n            } //each vert\n\n            if(ray.infinite || ((min_u <= 1.0) && (min_u >= 0.0)) ) {\n                return new RayCollision(polygon, ray, min_u, max_u);\n            }\n\n        } //vert length > 2\n\n        return null;\n\n    } //testRayVsPolygon\n\n        /** Internal api - test a ray against another ray */\n    public static function testRayVsRay( ray1:Ray, ray2:Ray ) : RayIntersection {\n\n        var delta1 = ray1.end.clone().subtract(ray1.start);\n        var delta2 = ray2.end.clone().subtract(ray2.start);\n\n        var dx = ray1.start.clone().subtract(ray2.start);\n\n        var d = delta2.y * delta1.x - delta2.x * delta1.y;\n\n        if (d == 0.0) return null;\n\n        var u1 = (delta2.x * dx.y - delta2.y * dx.x) / d;\n        var u2 = (delta1.x * dx.y - delta1.y * dx.x) / d;\n\n        if ((ray1.infinite || u1 <= 1.0) && (ray2.infinite || u2 <= 1.0)) return new RayIntersection(ray1, u1, ray2, u2);\n\n        return null;\n\n    } //testRayVsRay\n\n//Helpers\n\n        /** Internal api - generate a bresenham line between given start and end points */\n    public static function bresenhamLine( start:Vector, end:Vector ) : Array<Vector> {\n        //\n\n            //the array of all the points on the line\n        var points:Array<Vector> = [];\n        var steep:Bool = Math.abs(end.y - start.y) > Math.abs(end.x - start.x);\n            //check if rise is greater than run\n        var swapped:Bool = false;\n\n            //reflect the line\n        if(steep) {\n            start = swap(start);\n            end = swap(end);\n        } //if steep\n\n             //make sure the line goes downward\n        if(start.x > end.x) {\n\n            var t:Float = start.x;\n\n            start.x = end.x;\n            end.x = t;\n            t = start.y;\n            start.y = end.y;\n            end.y = t;\n            swapped = true;\n\n        } //if start.x > end.x\n\n            //x slope\n        var deltax:Float = end.x - start.x;\n            //y slope, positive because the lines always go  down\n        var deltay:Float = Math.abs(end.y - start.y);\n            //error is used instead of tracking the y values.\n        var error:Float = deltax / 2;\n        var ystep:Float;\n        var y:Float = start.y;\n\n        if(start.y < end.y) {\n            ystep = 1;\n        } else {\n            ystep = -1;\n        }\n\n        var x:Int = Std.int(start.x);\n        for(x in Std.int(start.x) ... Std.int(end.x)) { //for each point\n\n            if(steep) {\n                points.push(new Vector(y, x)); //if its steep, push flipped version\n            } else {\n                points.push(new Vector(x, y)); //push normal\n            }\n\n            error -= deltay; //change the error\n\n            if(error < 0) {\n                y += ystep; //if the error is too much, adjust the ystep\n                error += deltax;\n            }\n        }\n\n        if(swapped) {\n            points.reverse();\n        }\n\n        return points;\n\n    } //bresenhamLine\n\n//Internal helpers\n\n        /** Internal api - implementation details for testPolygonVsPolygon */\n    static function checkPolygons( polygon1:Polygon, polygon2:Polygon, flip:Bool=false ) : ShapeCollision {\n\n        var ep : Float = 0.0000000001;\n        var test1 : Float; // numbers to use to test for overlap\n        var test2 : Float;\n        var testNum : Float; // number to test if its the new max/min\n        var min1 : Float; //current smallest(shape 1)\n        var max1 : Float; //current largest(shape 1)\n        var min2 : Float; //current smallest(shape 2)\n        var max2 : Float; //current largest(shape 2)\n        var axis:Vector; //the normal axis for projection\n        var offset : Float;\n        var vectors1:Array<Vector>; //the points\n        var vectors2:Array<Vector>; //the points\n        var shortestDistance : Float = 0x3FFFFFFF;\n        var collisionData = new ShapeCollision();\n\n        vectors1 = polygon1.transformedVertices.copy();\n        vectors2 = polygon2.transformedVertices.copy();\n\n            // add a little padding to make the test work correctly for lines\n        if(vectors1.length == 2) {\n            var temp = new Vector(-(vectors1[1].y - vectors1[0].y), vectors1[1].x - vectors1[0].x);\n            temp.truncate(ep);\n            vectors1.push(vectors1[1].add(temp));\n        }\n\n        if(vectors2.length == 2) {\n            var temp = new Vector(-(vectors2[1].y - vectors2[0].y), vectors2[1].x - vectors2[0].x);\n            temp.truncate(ep);\n            vectors2.push(vectors2[1].add(temp));\n        }\n\n            // loop to begin projection\n        for(i in 0 ... vectors1.length) {\n\n                // get the normal axis, and begin projection\n            axis = Common.findNormalAxis(vectors1, i);\n\n                // project polygon1\n            min1 = axis.dot(vectors1[0]);\n            max1 = min1; //set max and min equal\n\n            for(j in 1 ... vectors1.length) {\n                testNum = axis.dot(vectors1[j]); //project each point\n                if(testNum < min1) {\n                    min1 = testNum;\n                } //test for new smallest\n                if(testNum > max1) {\n                    max1 = testNum;\n                } //test for new largest\n            }\n\n            // project polygon2\n            min2 = axis.dot(vectors2[0]);\n            max2 = min2; //set 2's max and min\n\n            for(j in 1 ... vectors2.length) {\n                testNum = axis.dot(vectors2[j]); //project the point\n                if(testNum < min2) {\n                    min2 = testNum;\n                } //test for new min\n                if(testNum > max2) {\n                    max2 = testNum;\n                } //test for new max\n            }\n\n            // and test if they are touching\n            test1 = min1 - max2; //test min1 and max2\n            test2 = min2 - max1; //test min2 and max1\n            if(test1 > 0 || test2 > 0) { //if they are greater than 0, there is a gap\n                return null; //just quit\n            }\n\n            var distMin : Float = -(max2 - min1);\n            if(flip) distMin *= -1;\n            if(Math.abs(distMin) < shortestDistance) {\n                collisionData.unitVector = axis;\n                collisionData.overlap = distMin;\n                shortestDistance = Math.abs(distMin);\n            }\n        }\n\n        //if you're here, there is a collision\n\n        collisionData.shape1 = if(flip) polygon2 else polygon1;\n        collisionData.shape2 = if(flip) polygon1 else polygon2;\n        collisionData.separation = new Vector(-collisionData.unitVector.x * collisionData.overlap,\n                                                -collisionData.unitVector.y * collisionData.overlap); //return the separation, apply it to a polygon to separate the two shapes.\n        if(flip) collisionData.unitVector.invert();\n\n        return collisionData;\n\n    } //checkPolygons\n\n        /** Internal api - swap x and y of a vector, returning a new vector. :todo: this is silly */\n    static inline function swap(v:Vector) : Vector return new Vector(v.y, v.x);\n\n        /** Internal api - same thing as rayRay, except without using Ray objects - saves the construction of a Ray object when testing Polygon/Ray. */\n    static function intersectRayRay(a:Vector, adelta:Vector, b:Vector, bdelta:Vector) : { ua:Float, ub:Float } {\n\n        var dx = a.clone().subtract(b);\n\n        var d = bdelta.y * adelta.x - bdelta.x * adelta.y;\n\n        if (d == 0.0) return null;\n\n        var ua = (bdelta.x * dx.y - bdelta.y * dx.x) / d;\n        var ub = (adelta.x * dx.y - adelta.y * dx.x) / d;\n\n        return { ua : ua, ub : ub };\n\n    } //intersectRayRay\n\n} //SAT2D\n","package luxe.collision.shapes;\n\nimport luxe.Vector;\nimport luxe.Quaternion;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\n\n/** A base collision shape */\nclass Shape {\n\n\n        /** The state of this shape, if inactive can be ignored in results */\n    public var active : Bool = true;\n        /** The name of this shape, to help in debugging */\n    public var name : String = 'shape';\n        /** A generic data object where you can store anything you want, for later use */\n    public var data : Dynamic;\n        /** A list of tags to use for marking shapes with data for later use, by key/value */\n    public var tags : Map<String, String>;\n        /** The position of this shape */\n    public var position ( get, set ) : Vector;\n        /** The x position of this shape */\n    public var x ( get, set ) : Float;\n        /** The y position of this shape */\n    public var y ( get, set ) : Float;\n        /** The rotation of this shape, in degrees */\n    public var rotation ( get, set ) : Float;\n        /** The scale in the x direction of this shape */\n    public var scaleX ( get, set ) : Float;\n        /** The scale in the y direction of this shape */\n    public var scaleY ( get, set ) : Float;\n\n    var _position : Vector;\n    var _rotation : Float = 0;\n    var _rotation_radians : Float = 0;\n    var _rotation_quat : Quaternion;\n    var _scale : Vector;\n\n    var _scaleX : Float = 1;\n    var _scaleY : Float = 1;\n\n    var _transformed : Bool = false;\n    var _transformMatrix : Matrix;\n\n\n//Public API\n\n\n       /** Create a new shape at give position x,y */\n    public function new( _x:Float, _y:Float ) {\n\n        tags = new Map();\n\n        _position = new Vector(_x,_y);\n        _scale = new Vector(1,1);\n        _rotation_quat = new Quaternion();\n        _rotation = 0;\n\n        _scaleX = 1;\n        _scaleY = 1;\n\n        Vector.Listen(_position, _pos_changed);\n\n        _transformMatrix = new Matrix();\n        _transformMatrix.makeTranslation( _position.x, _position.y, 0 );\n\n    } //new\n\n//Implemented in subclasses\n\n        /** Test this shape against another shape. */\n    public function test( shape:Shape ) : ShapeCollision return null;\n        /** Test this shape against a circle. */\n    public function testCircle( circle:Circle, flip:Bool = false ) : ShapeCollision return null;\n        /** Test this shape against a polygon. */\n    public function testPolygon( polygon:Polygon, flip:Bool = false ) : ShapeCollision return null;\n        /** Test this shape against a ray. */\n    public function testRay( ray:Ray ) : RayCollision return null;\n\n        /** clean up and destroy this shape */\n    public function destroy():Void {\n\n        _position = null;\n        _scale = null;\n        _transformMatrix = null;\n        _rotation_quat = null;\n\n    } //destroy\n\n//Getters/Setters\n\n    function refresh_transform() {\n\n        _rotation_quat.setFromEuler( new Vector(0,0,_rotation_radians) );\n\n        _transformMatrix.compose( _position, _rotation_quat, _scale );\n        _transformed = false;\n\n    }\n\n//.position\n\n    inline function get_position() : Vector {\n        return _position;\n    }\n\n    inline function set_position( v : Vector ) : Vector {\n        \n        _position = v;\n        refresh_transform();\n\n        if(_position != null) Vector.Listen(_position, _pos_changed);\n\n        return _position;\n   \n    } //set_position\n\n//.x\n\n    inline function get_x() : Float {\n        return _position.x;\n    }\n\n    inline function set_x(x : Float) : Float {\n        _position.ignore_listeners = true;\n        _position.x = x;\n        refresh_transform();\n        _position.ignore_listeners = false;\n        return _position.x;\n    }\n\n//.y\n\n    inline function get_y() : Float {\n        return _position.y;\n    }\n\n    inline function set_y(y : Float) : Float {\n        _position.ignore_listeners = true;\n        _position.y = y;\n        refresh_transform();\n        _position.ignore_listeners = false;\n        return _position.y;\n    }\n\n//.rotation\n\n    inline function get_rotation() : Float {\n        return _rotation;\n    }\n\n    inline function set_rotation( v : Float ) : Float {\n\n        _rotation_radians = v * (Math.PI / 180);\n\n        refresh_transform();\n\n        return _rotation = v;\n\n    } //set_rotation\n\n//.scaleX\n\n    inline function get_scaleX():Float {\n        return _scaleX;\n    }\n\n    inline function set_scaleX( scale : Float ) : Float {\n        _scaleX = scale;\n        _scale.x = _scaleX;\n        refresh_transform();\n        return _scaleX;\n    }\n\n//.scaleY\n\n    inline function get_scaleY():Float {\n        return _scaleY;\n    }\n\n    inline function set_scaleY(scale:Float) : Float {\n        _scaleY = scale;\n        _scale.y = _scaleY;\n        refresh_transform();\n        return _scaleY;\n    }\n\n\n//internal\n\n    inline function _pos_changed(_)     refresh_transform();\n\n}\n","package luxe.collision.shapes;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\nimport luxe.collision.sat.*;\n\n/** A circle collision shape */\nclass Circle extends Shape {\n\n        /** The radius of this circle. Set on construction */\n    public var radius( get_radius, never ) : Float;\n        /** The transformed radius of this circle, based on the scale/rotation */\n    public var transformedRadius( get_transformedRadius, never ) : Float;\n\n    var _radius:Float;\n\n    public function new(x:Float, y:Float, radius:Float) {\n\n        super( x, y );\n        _radius = radius;\n        name = 'circle ' + _radius;\n\n    } //new\n\n        /** Test for collision against a shape. */\n    override public function test( shape:Shape ) : ShapeCollision {\n\n        return shape.testCircle(this, true);\n\n    } //test\n\n        /** Test for collision against a circle. */\n    override public function testCircle( circle:Circle, flip:Bool = false ) : ShapeCollision {\n\n        var c1 = flip ? circle : this;\n        var c2 = flip ? this : circle;\n\n        return SAT2D.testCircleVsCircle( c1, c2 );\n\n    } //testCircle\n\n        /** Test for collision against a polygon. */\n    override public function testPolygon( polygon:Polygon, flip:Bool = false ) : ShapeCollision {\n\n        return SAT2D.testCircleVsPolygon( this, polygon, flip );\n\n    } //testPolygon\n\n        /** Test for collision against a ray. */\n    override public function testRay( ray:Ray ) : RayCollision {\n\n        return SAT2D.testRayVsCircle(ray, this);\n\n    } //testRay\n\n//Internal API\n\n    function get_radius():Float {\n\n        return _radius;\n\n    } //get_radius\n\n    function get_transformedRadius():Float {\n\n        return _radius * scaleX;\n\n    } //get_transformedRadius\n\n} //Circle\n","package luxe.collision.shapes;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\nimport luxe.collision.sat.*;\n\n/** A polygon collision shape */\nclass Polygon extends Shape {\n\n\n        /** The transformed (rotated/scale) vertices cache */\n    public var transformedVertices ( get, never ) : Array<Vector>;\n        /** The vertices of this shape */\n    public var vertices ( get, never ) : Array<Vector>;\n\n    var _transformedVertices : Array<Vector>;\n    var _vertices : Array<Vector>;\n\n\n        /** Create a new polygon with a given set of vertices at position x,y. */\n    public function new( x:Float, y:Float, vertices:Array<Vector> ) {\n\n        super( x,y );\n\n        name = 'polygon(sides:${vertices.length})';\n\n        _transformedVertices = new Array<Vector>();\n        _vertices = vertices;\n\n    } //new\n\n        /** Test for a collision with a shape. */\n    override public function test( shape:Shape ) : ShapeCollision {\n\n        return shape.testPolygon(this, true);\n\n    } //test\n\n        /** Test for a collision with a circle. */\n    override public function testCircle( circle:Circle, flip:Bool = false ) : ShapeCollision {\n\n        return SAT2D.testCircleVsPolygon( circle, this, flip );\n\n    } //testCircle\n\n        /** Test for a collision with a polygon. */\n    override public function testPolygon( polygon:Polygon, flip:Bool = false ) : ShapeCollision {\n\n        return SAT2D.testPolygonVsPolygon( this, polygon, flip );\n\n    } //testPolygon\n\n        /** Test for a collision with a ray. */\n    override public function testRay( ray:Ray ) : RayCollision {\n\n        return SAT2D.testRayVsPolygon(ray, this);\n\n    } //testRay\n\n        /** Destroy this polygon and clean up. */\n    override public function destroy() : Void {\n\n        var _count : Int = _vertices.length;\n\n        for(i in 0 ... _count) {\n            _vertices[i] = null;\n        }\n\n        _transformedVertices = null;\n        _vertices = null;\n\n        super.destroy();\n\n    } //destroy\n\n//Public static API\n\n        /** Helper to create an Ngon at x,y with given number of sides, and radius.\n            A default radius of 100 if unspecified. Returns a ready made `Polygon` collision `Shape` */\n    public static function create( x:Float, y:Float, sides:Int, radius:Float=100):Polygon {\n\n        if(sides < 3) {\n            throw 'Polygon - Needs at least 3 sides';\n        }\n\n        var rotation:Float = (Math.PI * 2) / sides;\n        var angle:Float;\n        var vector:Vector;\n        var vertices:Array<Vector> = new Array<Vector>();\n\n        for(i in 0 ... sides) {\n            angle = (i * rotation) + ((Math.PI - rotation) * 0.5);\n            vector = new Vector();\n            vector.x = Math.cos(angle) * radius;\n            vector.y = Math.sin(angle) * radius;\n            vertices.push(vector);\n        }\n\n        return new Polygon(x,y,vertices);\n\n    } //create\n\n        /** Helper generate a rectangle at x,y with a given width/height and centered state.\n            Centered by default. Returns a ready made `Polygon` collision `Shape` */\n    public static function rectangle(x:Float, y:Float, width:Float, height:Float, centered:Bool = true):Polygon {\n\n        var vertices:Array<Vector> = new Array<Vector>();\n\n        if(centered) {\n\n            vertices.push( new Vector( -width / 2, -height / 2) );\n            vertices.push( new Vector(  width / 2, -height / 2) );\n            vertices.push( new Vector(  width / 2,  height / 2) );\n            vertices.push( new Vector( -width / 2,  height / 2) );\n\n        } else {\n\n            vertices.push( new Vector( 0, 0 ) );\n            vertices.push( new Vector( width, 0 ) );\n            vertices.push( new Vector( width, height) );\n            vertices.push( new Vector( 0, height) );\n\n        }\n\n        return new Polygon(x,y,vertices);\n\n    } //rectangle\n\n        /** Helper generate a square at x,y with a given width/height with given centered state.\n            Centered by default. Returns a ready made `Polygon` collision `Shape` */\n    public static inline function square(x:Float, y:Float, width:Float, centered:Bool = true) : Polygon {\n\n        return rectangle(x, y, width, width, centered);\n\n    } //square\n\n        /** Helper generate a triangle at x,y with a given radius.\n            Returns a ready made `Polygon` collision `Shape` */\n    public static function triangle(x:Float, y:Float, radius:Float) : Polygon {\n\n        return create(x, y, 3, radius);\n\n    } //triangle\n\n//Internal\n\n    function get_transformedVertices() : Array<Vector> {\n\n        if(!_transformed) {\n            _transformedVertices = new Array<Vector>();\n            _transformed = true;\n\n            var _count : Int = _vertices.length;\n\n            for(i in 0..._count) {\n                _transformedVertices.push( _vertices[i].clone().transform( _transformMatrix ) );\n            }\n        }\n\n        return _transformedVertices;\n    }\n\n    function get_vertices() : Array<Vector> {\n        return _vertices;\n    }\n\n} //Polygon\n","package luxe.collision.shapes;\n\nimport luxe.Vector;\nimport luxe.collision.shapes.*;\nimport luxe.collision.data.*;\n\nclass Ray {\n\n        /** The start point of the ray. */\n    public var start:Vector;\n        /** The end point of the ray. */\n    public var end:Vector;\n        /** The direction of the ray.\n            Returns a cached vector, so modifying it will affect this instance.\n            Updates only when the dir value is accessed. */\n    public var dir (get, never):Vector;\n        /** Whether or not the ray is infinite. */\n    public var infinite:Bool;\n\n        /** Create a new ray with the start and end point,\n            which determine the direction of the ray, and optionally specifying\n            that this ray is an infinite one. */\n    public function new(_start:Vector, _end:Vector, _infinite:Bool = true) {\n\n        start = _start;\n        end = _end;\n        infinite = _infinite;\n\n        //internal\n        dir_cache = new Vector(end.x - start.x, end.y - start.y);\n\n    } //\n\n//properties\n\n    var dir_cache : Vector;\n    function get_dir() {\n        dir_cache.x = end.x - start.x;\n        dir_cache.y = end.y - start.y;\n        return dir_cache;\n    }\n\n}","package luxe.components;\n\nimport luxe.Quaternion;\nimport luxe.structural.OrderedMap;\n\nimport luxe.Log._debug;\nimport luxe.Log._verbose;\n\n\n@:noCompletion class Components {\n\n        //the list of attached components\n    public var components : OrderedMap<String, Component>;\n        //the root entity\n    public var entity : Entity;\n\n    public function new( _entity:Entity ) {\n\n        var _map = new Map<String,Component>();\n        components = new OrderedMap(_map);\n        entity = _entity;\n\n    } //new\n\n    public function add<T:Component>( _component:T ) : T {\n\n        if(_component == null) {\n            trace('attempt to add null component to ${entity.name}' );\n            return _component;\n        }\n\n        _component.entity = entity;\n\n        components.set( _component.name, _component );\n\n            _debug('    entity ${entity.name} added component ${_component.name}, now at ${Lambda.count(components)} components');\n            _debug('    entity ${entity.name} added component, calling added() on ${_component.name}');\n\n        _component.onadded();\n\n            //now check against the entity already being init'ed and reset'ed\n            //and if so, call them manually\n        if(entity.inited) {\n            _debug('\\t entity ${entity.name} adding component after init, so doing init on ${_component.name}' );\n            _component.init();\n        }\n\n        if(entity.started) {\n            _debug('\\t entity ${entity.name} adding component after reset, so doing reset on ${_component.name}' );\n            _component.onreset();\n        }\n\n        return _component;\n\n    } //add component\n\n    public function remove( _name:String ) : Bool {\n\n            //doesn't exist?\n        if(!components.exists(_name)) {\n            trace('attempt to remove $_name from ${entity.name} failed because that component was not attached to this entity');\n            return false;\n        }\n\n        _debug('\\t entity ${entity.name} removing component $_name');\n\n        var _component = components.get( _name );\n            _component.onremoved();\n\n            //we also set the entity to null\n            _component.entity = null;\n\n        return components.remove(_name);\n\n    } //remove\n\n    public function get<T>(_name:String, ?in_children:Bool = false ) : T {\n\n        _debug('looking for all of ' + _name + ' in children : ' + in_children );\n\n        if(!in_children) {\n\n            return cast components.get(_name);\n\n        } else {\n\n                //if found in the root entity\n            var in_this_entity = components.get( _name );\n            if( in_this_entity != null ) {\n                return cast in_this_entity;\n            }\n\n            _debug('check each of our children for the component');\n\n                //check each child of our entity\n            for(_child in entity.children) {\n\n                _debug('looking at ' + _child.name + ' for ' + _name );\n\n                var found : T = _child.get( _name, true );\n\n                if(found != null) {\n                    return cast found;\n                } //found\n\n            } //for each child\n\n            return null;\n\n        } //if in children\n\n        return null;\n\n    } //get\n\n    public function get_any<T>(_name:String, ?in_children:Bool = false, ?first_only:Bool = true ) : Array<T> {\n\n        _debug('looking for all of ' + _name + ' in children : ' + in_children + ' first only ; ' + first_only);\n\n        var results : Array<T> = [];\n\n        if(!in_children) {\n\n            return [cast components.get(_name)];\n\n        } else {\n\n            var in_this_entity = components.get( _name );\n            if( in_this_entity != null ) {\n                if(first_only) {\n                    return [cast in_this_entity];\n                } else {\n                    results.push( cast in_this_entity );\n                }\n            } //if found in the root entity\n\n            _debug('check each of our children for the component');\n\n                //check each child of our entity\n            for(_child in entity.children) {\n\n                _debug('looking at ' + _child.name + ' for ' + _name );\n\n                var found : Array<T> = _child.get_any( _name, true, first_only );\n\n                if(found != null) {\n\n                        //only want the first result, i.e not a list\n                    if(first_only && found.length > 0) {\n                        return [cast found[0]];\n                    } else {\n                        results.concat(found);\n                    } //append to the list\n\n                } //found\n\n            } //for each child\n\n        } //if in children\n\n        return results;\n\n    } //get_any\n\n    public function has(_name:String) : Bool {\n        return components.exists(_name);\n    } //has\n\n} //Components\n","package luxe.debug;\n\nimport luxe.Input.KeyEvent;\nimport luxe.Input.MouseEvent;\nimport luxe.Screen.WindowEvent;\n\n\nclass DebugView extends luxe.Objects {\n    public function new() {\n        super();\n    }\n\n    public var visible : Bool = false;\n\n    public function refresh() {}\n    public function process() {}\n    public function onmousedown(e:MouseEvent) {}\n    public function onmousewheel(e:MouseEvent) {}\n    public function onmouseup(e:MouseEvent) {}\n    public function onmousemove(e:MouseEvent) {}\n    public function onkeydown(e:KeyEvent) {}\n    public function onkeyup(e:KeyEvent) {}\n    public function onwindowsized(e:WindowEvent) {}\n    public function create() {}\n    public function show() {\n        visible = true;\n    }\n    public function hide() {\n        visible = false;\n    }\n}\n","package luxe.debug;\n\nimport luxe.Input.MouseEvent;\nimport luxe.Vector;\nimport phoenix.Batcher;\nimport luxe.structural.BalancedBST.BalancedBSTNode;\nimport phoenix.geometry.Geometry;\n\n\nclass BatcherDebugView extends luxe.debug.DebugView {\n\n    public function new(  ) {\n        super();\n        name = 'Batcher Debug';\n    }\n\n    var batcher : Batcher;\n\n    public override function create() {\n\n        batcher = Luxe.renderer.create_batcher({\n            name:'debug_batcher_view',\n            camera : new phoenix.Camera({ camera_name : 'batcher_debug_view' }),\n            layer : 1000\n        });\n\n    } //create\n\n    public override function refresh() {\n        clear_batcher_tree();\n        draw_batcher_tree();\n    }\n\n    var dragging = false;\n    var dragstart : Vector;\n    var dragmstart : Vector;\n\n    public override function onmousedown(e:MouseEvent) {\n        dragmstart = e.pos.clone();\n        dragstart = batcher.view.pos.clone();\n        dragging = true;\n    }\n    public override function onmouseup(e:MouseEvent) {\n        dragging = false;\n    }\n    public override function onmousemove(e:MouseEvent) {\n        if(dragging) {\n            var diff = Vector.Subtract(e.pos, dragmstart);\n            batcher.view.pos = Vector.Subtract(dragstart, diff);\n        }\n    }\n\n    public override function onmousewheel(e:MouseEvent) {\n        if(e.y < 0) {\n            batcher.view.zoom -= 0.1;\n        } else {\n            batcher.view.zoom += 0.1;\n        }\n    }\n\n    var _tree_geom : Array<Geometry>;\n    var as_immediate : Bool = false;\n\n    public function clear_batcher_tree() {\n        if(_tree_geom != null) {\n            for(_g in _tree_geom) {\n                _g.drop();\n                _g = null;\n            }\n            _tree_geom = null;\n        }\n    }\n\n    function keystr( key:GeometryKey, key2:GeometryKey) {\n         return\n            'ts: '+ key.timestamp + '\\n' +\n            'seq: '+ key.sequence + '\\n' +\n            'primitive_type: '+ key.primitive_type + \" \" + (key.primitive_type) + '\\n' +\n            'texture: '+ (key.texture == null ? 'null' : Std.string(key.texture.texture)) + '\\n' +\n            'texture id: '+ (key.texture == null ? 'null' : key.texture.id) + '\\n' +\n            'shader: '+ (key.shader == null ? 'null' : key.shader.id) + '\\n' +\n            'depth: '+ key.depth + '\\n' +\n            'clip: '+ key.clip;\n    }\n\n    public function draw_geom_node(l:Bool, _leaf : BalancedBSTNode<GeometryKey,Geometry>, _p:Vector, _bbw:Float=20 ) {\n\n        var _bw:Float = 128;\n        var _bwhalf:Float = _bw /2;\n        var _bh:Float = 128;\n\n        var _g : Geometry = _leaf.value;\n\n        var c = new Color(1,1,1,0.4).rgb(0xffffff);\n\n        if(_g.dropped) {\n            c = new Color(1,1,1,1).rgb(0xcc0000);\n        }\n\n        _tree_geom.push(\n            Luxe.draw.rectangle({\n                immediate:as_immediate,\n                x:_p.x-_bwhalf, y:_p.y,\n                w:_bw, h:_bh,\n                color: c,\n                batcher : batcher,\n                depth : 999.4\n            })\n        ); //node square\n\n        _tree_geom.push(\n            Luxe.draw.text({\n                immediate:as_immediate,\n                bounds : new Rectangle(_p.x-_bwhalf, _p.y, _bw, _bh),\n                point_size : 13,\n                color : c,\n                batcher : batcher,\n                depth : 999.4,\n                text : keystr(_leaf.key, _g.key),\n                align : luxe.Text.TextAlign.center,\n                align_vertical : luxe.Text.TextAlign.center\n            })\n        ); //node text\n\n        var t = _p.clone().set_xy( _p.x, _p.y-16 );\n        var t2 = _p.clone().set_xy( _p.x, _p.y+_bw+2 );\n        var talign = luxe.Text.TextAlign.center;\n        // if(l) {\n            // t.x = _p.x - (_bwhalf*1.5);\n            // talign = luxe.Text.TextAlign.right;\n        // }\n\n        _tree_geom.push(\n            Luxe.draw.text({\n                immediate:as_immediate,\n                pos : t,\n                point_size : 13,\n                color : c,\n                batcher : batcher,\n                depth : 999.4,\n                text : _g.id,\n                align : talign\n            })\n        ); //node text\n\n        var c2 = new Color(1,1,1,0.4).rgb(0xff9944);\n        var notes_l = \"none\";\n        var notes_r = \"none\";\n\n        if(_leaf.left != null) {\n            notes_l = 'node';\n            var compare = @:privateAccess Luxe.renderer.batcher.compare_rule(_leaf.key, _leaf.left.key);\n            notes_l = @:privateAccess Luxe.renderer.batcher.compare_rule_to_string(compare);\n        }\n\n        if(_leaf.right != null) {\n            notes_r = 'node';\n            var compare = @:privateAccess Luxe.renderer.batcher.compare_rule(_leaf.key, _leaf.right.key);\n            notes_r = @:privateAccess Luxe.renderer.batcher.compare_rule_to_string(compare);\n        }\n\n        _tree_geom.push(\n            Luxe.draw.text({\n                immediate:as_immediate,\n                pos : t2,\n                point_size : 13,\n                color : c2,\n                batcher : batcher,\n                depth : 999.4,\n                text : notes_l + \" / \" + notes_r,\n                align : talign\n            })\n        ); //node text\n    }\n\n    public function draw_geom_leaf( L:Bool, _leaf : BalancedBSTNode<GeometryKey,Geometry>, _p:Vector ) {\n\n        if(_leaf == null) {\n            return;\n        }\n\n        var _bw:Float = _leaf.nodecount / 20;\n        var _bwb:Float = _leaf.nodecount * 25;\n        var _bh:Float = 128;\n        var _bh2:Float = 148;\n        var _bwhalf:Float = _bw/2;\n\n        var c = new Color(1,1,1,0.4).rgb(0xffffff);\n\n        if(_leaf != null) {\n\n            draw_geom_node(L, _leaf, _p, _bw);\n\n            if(_leaf.left != null) {\n\n                if( @:privateAccess Luxe.renderer.batcher.geometry_compare( _leaf.left.key, _leaf.key ) < 0 ) {\n                    c = new Color(1,1,1,1).rgb(0x00cc00);\n                } else {\n                    c = new Color(1,1,1,1).rgb(0xcc0000);\n                }\n\n                _tree_geom.push(\n                    Luxe.draw.line({\n                        immediate:as_immediate,\n                        p0 : new Vector(_p.x-_bwhalf,_p.y+_bh),\n                        p1 : new Vector(_p.x-_bwb, _p.y+_bh2 ),\n                        color: c,\n                        batcher : batcher,\n                        depth : 999.4\n                    })\n                );\n\n                draw_geom_leaf(true, _leaf.left, new Vector(_p.x-_bwb, _p.y+_bh2 ));\n            }\n            if(_leaf.right != null) {\n\n                if( @:privateAccess Luxe.renderer.batcher.geometry_compare( _leaf.right.key, _leaf.key ) > 0 ) {\n                    c = new Color(1,1,1,1).rgb(0x00cc00);\n                } else {\n                    c = new Color(1,1,1,1).rgb(0xcc0000);\n                }\n\n                _tree_geom.push(\n                    Luxe.draw.line({\n                        immediate:as_immediate,\n                        p0 : new Vector(_p.x+_bwhalf,_p.y+_bh),\n                        p1 : new Vector(_p.x+_bwb, _p.y+_bh2),\n                        color: c,\n                        batcher : batcher,\n                        depth : 999.4\n                    })\n                );\n\n                draw_geom_leaf(false, _leaf.right, new Vector(_p.x+_bwb, _p.y+_bh2));\n            }\n        } //leaf != null\n    }\n\n    public function draw_batcher_tree() {\n\n        _tree_geom = null;\n        _tree_geom = [];\n\n        //draw the root\n        var _p : Vector = new Vector(Luxe.screen.w/2, (Luxe.debug.padding.y*2)+10);\n\n        var _node = Luxe.renderer.batcher.geometry.root;\n\n            draw_geom_leaf(true, _node, _p);\n\n    }\n\n    public override function process() {\n        if(visible) {\n            if(Luxe.renderer.batcher.tree_changed) {\n                refresh();\n            }\n        }\n    }\n\n    public override function show() {\n        super.show();\n        refresh();\n    }\n\n    public override function hide() {\n        super.hide();\n        clear_batcher_tree();\n    }\n\n} //BatcherDebugView\n","package luxe.debug;\n\nimport luxe.Text;\nimport luxe.NineSlice;\nimport phoenix.Batcher;\n\ntypedef DebugInspectorOptions = {\n    ? batcher : Batcher,\n    ? pos : Vector,\n    ? size : Vector,\n}\n\n@:noCompletion class Inspector {\n\n    @:isVar public var pos (default,set): Vector;\n    @:isVar public var size (default,set): Vector;\n\n    public var title : Text;\n    public var version : Text;\n    public var window : Sprite;\n    public var batcher : Batcher;\n\n    public var onrefresh : Void->Void;\n\n    public function new( _options:DebugInspectorOptions ) {\n\n        size = new Vector(Std.int(Luxe.screen.w*0.2), Std.int(Luxe.screen.h*0.6));\n        pos = new Vector((Luxe.screen.w/2) - (size.x/2), (Luxe.screen.h/2) - (size.y/2));\n\n            //default to the internal batcher\n        batcher = Luxe.renderer.batcher;\n\n        if(_options != null) {\n\n            if(_options.batcher != null) batcher = _options.batcher;\n            if(_options.size != null) size = _options.size;\n            if(_options.pos != null) pos = _options.pos;\n\n        } //_options != null\n\n    } //new\n\n    public function refresh() {\n\n        if(window == null) {\n            create_window();\n        }\n\n        if(onrefresh != null) {\n            onrefresh();\n        }\n\n    } //refresh\n\n    public function show() {\n        refresh();\n        window.visible = true;\n        title.visible = true;\n        version.visible = true;\n    }\n\n    public function hide() {\n        window.visible = false;\n        title.visible = false;\n        version.visible = false;\n    }\n\n    function set_size(_size:Vector) {\n\n        if(_size != null && window != null) {\n            window.size = _size;\n            window.geometry.dirty = true;\n        }\n\n        if(version != null) {\n            version.pos = new Vector( pos.x+(_size.x-14), pos.y+6 );\n        }\n\n        return size = _size;\n\n    } //set_size\n\n    function set_pos(_pos:Vector) {\n\n        if(_pos != null && window != null) {\n            window.pos = _pos;\n            window.geometry.dirty = true;\n        }\n\n        if(title != null) {\n            title.pos = new Vector( _pos.x+14, _pos.y+6 );\n        }\n\n        if(version != null) {\n            version.pos = new Vector( _pos.x+(size.x-14), _pos.y+6 );\n        }\n\n        return pos = _pos;\n    \n    } //set_pos\n\n    function create_window() {\n\n        window = new Sprite({\n            name: 'debug.window',\n            batcher: batcher,\n            no_scene: true,\n            depth: 999.1,\n            visible: false,\n            color: new Color().rgb(0x161619),\n            centered: false,\n            size: size,\n            pos: pos,\n        });\n\n        title = new Text({\n            name: 'debug.title',\n            batcher: batcher,\n            no_scene: true,\n            depth: 999.2,\n            visible: false,\n            color: new Color().rgb(0xf6007b),\n            pos: new Vector( pos.x+14, pos.y+6 ),\n\n            text: 'Inspector',\n            point_size: 15,\n            align: TextAlign.left\n        });\n\n        version = new Text({\n            name: 'debug.version',\n            batcher: batcher,\n            no_scene: true,\n            depth: 999.2,\n            visible: false,\n            color: new Color().rgb(0x545459),\n            pos: new Vector( pos.x+(size.x-14), pos.y+6 ),\n\n            text: '${Luxe.core.runtime_info()}',\n            point_size: 13,\n            align: TextAlign.right,\n        });\n\n        window.locked = true;\n        window.geometry.id = 'debug.Inspector';\n        title.geometry.id = 'debug.title.text';\n        version.geometry.id = 'debug.version.text';\n\n    }\n\n}\n","package luxe.debug;\n\nimport luxe.Input.MouseEvent;\nimport luxe.Rectangle;\nimport luxe.Text;\nimport luxe.utils.Maths;\nimport luxe.Vector;\nimport phoenix.Batcher.PrimitiveType;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.QuadGeometry;\nimport phoenix.geometry.Vertex;\n\nclass ProfilerDebugView extends luxe.debug.DebugView {\n\n    public static var lists:Map<String,ProfilerValue>;\n\n    public static var color_red : Color = new Color().rgb(0xcc0000);\n    public static var color_green : Color = new Color().rgb(0x228844);\n    public static var color_normal : Color = new Color().rgb(0xf0f0f0);\n\n    #if cpp\n        public var memgraph:ProfilerGraph;\n        public var memgraph2:ProfilerGraph;\n        public var memgraph3:ProfilerGraph;\n        public var memgraph4:ProfilerGraph;\n        public var memtext:Text;\n    #end //cpp\n\n    public function new() {\n\n        super();\n\n        name = 'Profiler';\n        lists = new Map();\n\n    } //new\n\n    var margin = 32;\n    override function create() {\n\n        #if cpp\n\n            var debug = Luxe.debug;\n\n            var viewrect = new Rectangle(\n                debug.inspector.pos.x + (margin/2),\n                debug.inspector.pos.y + (margin*1.5),\n                debug.inspector.size.x - margin,\n                debug.inspector.size.y - margin - (margin*1.5)\n            );\n\n            memgraph = new ProfilerGraph('usage');\n            memgraph2 = new ProfilerGraph('current',false);\n            memgraph3 = new ProfilerGraph('large',false);\n            memgraph4 = new ProfilerGraph('reserved',false);\n\n            var gh = 48;\n            var gp = new Vector(viewrect.x, viewrect.h );\n            var gw = viewrect.w;//Luxe.screen.w-(Luxe.debug.padding.x*4);\n\n                memgraph.color = new Color().rgb(0xf6007b);\n                memgraph2.color = new Color().rgb(0x007bf6);\n                memgraph3.color = new Color(0,0,0,0.5).rgb(0xf6001a);\n                memgraph4.color = new Color(0,0,0,0.5).rgb(0x00f67b);\n\n                memgraph.history = memgraph2.history = memgraph3.history = memgraph4.history = 256;\n                memgraph.height = memgraph2.height = memgraph3.height = memgraph4.height = gh;\n                memgraph.width = memgraph2.width = memgraph3.width = memgraph4.width = gw;\n\n            memgraph.create();\n            memgraph2.create();\n            memgraph3.create();\n            memgraph4.create();\n\n            memgraph.pos = memgraph2.pos = memgraph3.pos = memgraph4.pos = gp;\n\n            memtext = new Text({\n                no_scene : true,\n                name : 'profiler.memgraph',\n                pos : gp.clone().add_xyz(0, -gh),\n                color : ProfilerDebugView.color_normal.clone(),\n                point_size : 12,\n                depth : 999.3,\n                text : '1 mb',\n                batcher : Luxe.debug.batcher,\n                visible: false,\n            });\n\n            memtext.color.a = 0.4;\n\n        #end //cpp\n\n    } //create\n\n    var tickamount = 0.017;\n    var nexttick = 0.0;\n    var peak = 1.0;\n    var minpeak = 1.0;\n    var _byte_levels = ['bytes', 'Kb', 'MB', 'GB', 'TB'];\n\n    function update_graph(graph:ProfilerGraph, val:Float) {\n\n        var _byte_index = Math.floor( Math.log(val) / Math.log(1024) );\n        var _byte_value = ( val / Math.pow(1024, _byte_index) );\n\n        if(_byte_value > peak) {\n            peak = Math.ceil(_byte_value + (_byte_value*0.1));\n        }\n\n        if(_byte_value < minpeak) {\n            minpeak = Math.floor(_byte_value - (_byte_value*0.1));\n        }\n\n        if(graph.max != peak) {\n            graph.max = peak;\n        }\n\n        graph.ping = Maths.fixed(_byte_value,4);\n\n    } //update_graph\n\n    override function process() {\n\n        #if cpp\n\n            var u = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_USAGE);\n            var c = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_CURRENT);\n            var l = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_LARGE);\n            var r = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_RESERVED);\n\n            update_graph(memgraph,  u);\n            update_graph(memgraph2, c);\n            update_graph(memgraph3, l);\n            update_graph(memgraph4, r);\n\n            var _index = Math.floor( Math.log(u) / Math.log(1024) );\n            var s = _byte_levels[_index];\n\n            memtext.text =\n                '(y axis) ${memgraph.max} $s\\n'+\n                'usage/pink: ${memgraph.ping} $s  |  '+\n                'current/blue: ${memgraph2.ping} $s\\n'+\n                'large/red: ${memgraph3.ping} $s  |  '+\n                'reserved/green: ${memgraph4.ping} $s\\n';\n\n        #end //cpp\n\n    }\n\n    var _setup : Bool = false;\n\n    public static function add_offset(_id:String, _offset:String) {\n        var _item = lists.get(_id);\n        var _offsetitem = lists.get(_offset);\n        if(_item != null && _offsetitem != null) {\n            _item.offsets.push(_offsetitem);\n        } else {\n            trace(\"not found for \" + _id + \" or \" + _offset);\n            trace(_item + \" / \" + _offsetitem);\n        }\n    }\n\n    public static function hide_item(_id:String) {\n        var _item = lists.get(_id);\n        if(_item != null) {\n            _item.hidden = true;\n            _item.bar.hide();\n        }\n    } //hide_item\n\n    public static function show_item(_id:String) {\n        var _item = lists.get(_id);\n        if(_item != null) {\n            _item.hidden = false;\n            _item.bar.show();\n        }\n    } //show_item\n\n    public static function start(_id:String, ?_max:Float) {\n\n        var _item = lists.get(_id);\n\n        if(_item == null) {\n            //create it\n            _item = new ProfilerValue(_id, new ProfilerBar(_id, _max, new Color().rgb(0xf6007b) ));\n            _item.bar.pos = new Vector(Luxe.debug.padding.x*2,(Luxe.debug.padding.y*3) + (Lambda.count(lists) * 20) );\n            lists.set(_id, _item);\n        }\n\n        _item.start = Luxe.time;\n\n    } //start\n\n    public static function end(_id:String) {\n\n        var _item = lists.get(_id);\n\n        if(_item!=null) {\n            _item.set();\n        } else {\n            throw \"Debug / profile end called for \" + _id + \" but no start called\";\n        }\n\n    } //end\n\n    public override function show() {\n\n        for(_item in lists) {\n            if(!_item.hidden) {\n                _item.bar.show();\n            }\n        }\n\n        #if cpp\n            memgraph.show();\n            memgraph2.show();\n            memgraph3.show();\n            memgraph4.show();\n            memtext.visible = true;\n        #end //cpp\n\n        if(!_setup) {\n            // ProfilerDebugView.add_offset('core.render' , 'batch.debug_batcher');\n            // ProfilerDebugView.add_offset('core.render' , 'batch.debug_batcher_view');\n            // ProfilerDebugView.hide_item('batch.debug_batcher');\n            // ProfilerDebugView.hide_item('batch.debug_batcher_view');\n            _setup = true;\n        }\n\n    } //show\n\n    public override function hide() {\n\n        for(_item in lists) {\n            _item.bar.hide();\n        }\n\n        #if cpp\n            memgraph.hide();\n            memgraph2.hide();\n            memgraph3.hide();\n            memgraph4.hide();\n            memtext.visible = false;\n        #end\n\n    } //hide\n\n}\n\nprivate class ProfilerValue {\n\n    public var offsets : Array<ProfilerValue>;\n    public var bar : ProfilerBar;\n    public var name : String;\n    public var start : Float = 0.0;\n    public var history : Array<Float>;\n    public var avg : Int = 10;\n    public var hidden : Bool = false;\n    var count : Int = 0;\n    var accum : Float = 0;\n\n    public function new(_name:String, _bar:ProfilerBar) {\n        name = _name; bar = _bar;\n        history = [];\n        offsets = [];\n    }\n\n    public function set() {\n\n        var _t = Luxe.time - start;\n\n            //adjust by any offsets\n        for(_offset in offsets) {\n            _t -= _offset.history[_offset.history.length-1];\n        }\n\n            //push the value into history\n        history.push(_t);\n            //drop old values\n        if(history.length > avg) {\n            history.shift();\n        }\n\n        count++;\n            //reset if maxed average\n        if(count == avg) {\n            var __t = accum / avg;\n            bar.value = __t;\n            accum = 0;\n            count = 0;\n        }\n\n        accum += _t;\n\n        if(bar.visible) {\n            bar.text = Std.string(Maths.fixed(_t*1000,4));\n        }\n\n    }\n\n}\n\nprivate class ProfilerGraph {\n\n    public var graphbg_geometry : QuadGeometry;\n    public var graph_geometry : Geometry;\n    public var name : String;\n\n    var bg : Bool = true;\n\n    public var width : Float = 128;\n    public var height : Float = 8;\n    public var height2 : Float = 8;\n    public var history:Int = 33;\n    public var visible:Bool = false;\n    public var color:Color;\n\n    @:isVar public var max (default,set) : Float;\n    @:isVar public var ping (default,set) : Float;\n    @:isVar public var pos (default,set) : Vector;\n\n    var segment : Float;\n\n    public function new(_name:String, _bg:Bool=true){\n\n        bg = _bg;\n        name = _name;\n        color = new Color();\n        max = Maths.fixed((1/60) * 1000, 2);\n\n    } //new\n\n    public function create() {\n\n        segment = (width/history);\n        height2 = height*2;\n\n        if(bg) {\n            graphbg_geometry = Luxe.draw.box({\n                color : new Color().rgb(0x101010),\n                depth : 999.3,\n                batcher : Luxe.debug.batcher,\n                x:0, y:0, w:width-segment, h:height2\n            });\n        }\n\n        graph_geometry = new Geometry({\n            color : color,\n            depth : 999.33,\n            batcher : Luxe.debug.batcher\n        });\n\n        for(i in 0 ... history) {\n            var _b = new Vertex(new Vector(segment*i, height2), color);\n            graph_geometry.add( _b );\n        }\n\n        graph_geometry.primitive_type = PrimitiveType.line_strip;\n\n        hide();\n\n    }\n\n        //when changing the max we adjust\n        //all the values in the history to reflect\n    function set_max(_v:Float) {\n\n        var oldmax = max;\n        max = _v;\n\n        if(graph_geometry != null) {\n            var ratio = 1.0;\n            if(oldmax != 0) {\n                ratio = oldmax/_v;\n            }\n            for(v in graph_geometry.vertices) {\n                if(v != null) {\n                    //get the value out as 0 - 1\n                    var vp = 1.0 - (v.pos.y / height2);\n                    //multiply it by the old max to get the value\n                    var vv = vp * oldmax;\n                    //get the new % over new max\n                    vp = vv / max;\n                    //and then set the new y pos\n                    v.pos.y = height2*(1.0-vp);\n                }\n            }\n        }\n\n        return max;\n    }\n\n    function set_ping(_v:Float) {\n\n        var _vv = Maths.fixed(_v,4);\n        var _p = _vv/max;\n\n            //shift every vertex left\n        for(i in 0 ... history) {\n            //copy x from the next one\n            var v = graph_geometry.vertices[i];\n            if(i < (history-1)) {\n                var v1 = graph_geometry.vertices[i+1];\n                if(v1 != null) {\n                    v.pos.y = Math.floor(v1.pos.y);\n                    v.color = v1.color;\n                }\n            }\n        }\n\n        _p = Maths.clamp(_p, 0.001, 1);\n\n        if(_p > 1) {\n            graph_geometry.vertices[history-1].color = ProfilerDebugView.color_red;\n        } else if(_p < 0.2) {\n            graph_geometry.vertices[history-1].color = ProfilerDebugView.color_green;\n        } else {\n            graph_geometry.vertices[history-1].color = color;\n        }\n\n        graph_geometry.vertices[history-1].pos.y = Math.floor(((height2)*(1.0-_p)));\n\n        return ping = _v;\n\n    } //set_ping\n\n    public function hide() {\n        visible = false;\n        graph_geometry.visible = false;\n        if(graphbg_geometry != null) graphbg_geometry.visible = false;\n    }\n\n    public function show() {\n        visible = true;\n        graph_geometry.visible = true;\n        if(graphbg_geometry != null) graphbg_geometry.visible = true;\n    }\n\n    function set_pos(_p:Vector) {\n\n        if(graphbg_geometry != null) graphbg_geometry.transform.pos.copy_from(_p);\n        graph_geometry.transform.pos.copy_from(_p);\n\n        return pos = _p;\n\n    } //set_pos\n\n} //ProfilerGraph\n\nprivate class ProfilerBar {\n\n    public var bar_geometry : QuadGeometry;\n    public var bg_geometry : QuadGeometry;\n    public var graph : ProfilerGraph;\n\n    public var text_item : Text;\n    public var name : String;\n\n    public var visible:Bool = false;\n    public var height : Float = 8;\n    public var max : Float = 16.7;\n\n    @:isVar public var text (default,set) : String;\n    @:isVar public var pos (default,set) : Vector;\n    @:isVar public var value (default,set) : Float;\n\n    public function new(_name:String, ?_max:Float, _color:Color) {\n\n        name = _name;\n\n        graph = new ProfilerGraph(_name);\n        graph.create();\n        if(_max != null) graph.max = _max;\n\n        text_item = new Text({\n            no_scene : true,\n            name : 'profiler.text.' + _name,\n            pos : new Vector(0,0),\n            color : _color,\n            point_size : height*1.8,\n            depth : 999.3,\n            text : '',\n            batcher : Luxe.debug.batcher\n        });\n\n        bg_geometry = Luxe.draw.box({\n            color : new Color().rgb(0x090909),\n            depth : 999.3,\n            batcher : Luxe.debug.batcher,\n            x:0, y:0, w:graph.width, h:graph.height\n        });\n\n        bar_geometry = Luxe.draw.box({\n            color : _color,\n            depth : 999.33,\n            batcher : Luxe.debug.batcher,\n            x:1, y:1, w:graph.width-2, h:graph.height-2\n        });\n\n        hide();\n\n    } //new\n\n    public function hide() {\n        visible = false;\n        bar_geometry.visible = false;\n        bg_geometry.visible = false;\n        text_item.visible = false;\n        graph.hide();\n    }\n\n    public function show() {\n        visible = true;\n        bar_geometry.visible = true;\n        bg_geometry.visible = true;\n        text_item.visible = true;\n        graph.show();\n    }\n\n    function set_value(_v:Float) {\n\n        graph.ping = _v * 1000;\n\n        if(!this.visible) return value = _v;\n\n        var _vv = Maths.fixed(_v*1000,4);\n        var _p = _vv/max;\n\n        _p = Maths.clamp(_p, 0.005, 1);\n\n        if(_p > 1) {\n            bar_geometry.color = ProfilerDebugView.color_red;\n        } else if(_p < 0.15) {\n            bar_geometry.color = ProfilerDebugView.color_green;\n        } else {\n            bar_geometry.color = ProfilerDebugView.color_normal;\n        }\n\n        var nx = (graph.width-2) * _p;\n        bar_geometry.resize_xy(nx, graph.height-2);\n\n        return value = _v;\n\n    } //set_value\n\n    function set_pos(_p:Vector) {\n        bg_geometry.transform.pos = _p;\n        bar_geometry.transform.pos.set_xy(_p.x+1, _p.y+1);\n        text_item.pos.set_xy(_p.x+(graph.width*2)+10, _p.y-6);\n        graph.pos = _p.clone().add_xyz(graph.width+2, -graph.height+4);\n        return pos = _p;\n    }\n\n    function set_text(_t:String) {\n        text_item.text = '$name (${graph.max}ms) | ${_t}ms';\n        return text = _t;\n    }\n\n} //ProfilerBar\n","package luxe.debug;\n\nimport luxe.Text;\nimport luxe.utils.Maths;\nimport luxe.Vector;\nimport luxe.Input;\nimport luxe.Screen.WindowEvent;\nimport luxe.Log.*;\n\nclass SceneDebugView extends luxe.debug.DebugView  {\n\n    var items_list : luxe.Text;\n\n    public function new() {\n\n        super();\n\n        name = 'Scenes';\n        scenes = [];\n\n    }\n\n    var margin = 32;\n    var font_size = 15.0;\n    public override function create() {\n\n        var debug = Luxe.debug;\n\n        items_list = new luxe.Text({\n            name: 'debug.scene.list',\n            depth : 999.3,\n            no_scene : true,\n            color : new Color(0,0,0,1).rgb(0xf6007b),\n            pos : new Vector(0,0),\n            font : Luxe.renderer.font,\n            text : get_list(),\n            point_size : font_size,\n            batcher : debug.batcher,\n            visible : false,\n        });\n\n        items_list.geometry.id = 'debug.scene.list.geometry';\n\n        resize();\n\n    }\n\n    var scenes : Array<luxe.Scene>;\n\n    public function add_scene(_scene:luxe.Scene) : Void {\n\n        assert(scenes.indexOf(_scene) == -1);\n\n        scenes.push(_scene);\n\n    } //add_scene\n\n    public function remove_scene(_scene:luxe.Scene) : Bool {\n\n            //maybe this isn't as handy\n        assert(scenes.indexOf(_scene) != -1);\n\n        var _result = scenes.remove(_scene);\n\n        refresh();\n\n        return _result;\n\n    } //remove_scene\n\n    public override function onkeydown(e:KeyEvent) {\n\n        if(e.keycode == Key.key_2 && visible) {\n            toggle_ids();\n        }\n\n    } //onkeydown\n\n    var hide_ids : Bool = true;\n    function toggle_ids() {\n        hide_ids = !hide_ids;\n        refresh();\n    }\n\n\n    inline function tabs(_d:Int) {\n        var res = '';\n        for(i in 0 ... _d) res += '    ';\n        return res;\n    }\n\n    inline function list_entity(_list:String, e:luxe.Entity, _depth:Int = 1) : String {\n\n        var _active = (e.active) ? '' : '/ inactive';\n        var _pre = (_depth == 1) ? tabs(_depth) : tabs(_depth)+'> ';\n        var _id = hide_ids ? '' : e.id;\n        var _comp_count = Lambda.count(e.components);\n        var _comp = '• ' + _comp_count;\n        var _childs = '> ${e.children.length}';\n\n        _list += '${_pre}$_id ${e.name} $_childs $_comp $_active\\n';\n\n        for(_name in e.components.keys()) {\n            var comp = e.components.get(_name);\n            var _comp_id = hide_ids ? '' : ' '+comp.id;\n            _list += tabs(_depth+1) + '•$_comp_id ${comp.name}\\n';\n        }\n\n        for(_child in e.children) {\n            _list = list_entity(_list, _child, _depth+2);\n        }\n\n        return _list;\n    }\n\n    inline function get_list() : String {\n\n        var _result = '';\n\n            for(_scene in scenes) {\n                var _id = hide_ids ? '' : '${_scene.id} ';\n\n                _result += _id;\n                _result += '${_scene.name} ';\n                _result += '( ${_scene.length} )\\n';\n                for(_entity in _scene.entities) {\n                    _result = list_entity(_result, _entity);\n                }\n            }\n\n        return _result;\n\n    } //get_list\n\n    public override function refresh() {\n\n        items_list.text = get_list();\n\n    } //refresh\n\n    public override function process() {\n\n        if(!visible) return;\n\n        var _has_changed = false;\n\n        for(_scene in scenes) {\n            if(_scene._has_changed) {\n                _has_changed = true;\n                _scene._has_changed = false;\n            }\n        } //each scene\n\n        if(_has_changed) {\n\n            refresh();\n\n        } //_has_changed\n\n    } //process\n\n#if (desktop || web)\n    //:wip:\n    override function onmousewheel(e:MouseEvent) {\n        var h = items_list.text_bounds.h;\n        var vh = Luxe.debug.inspector.size.y - margin;\n        var diff = h - vh;\n\n        var new_y = items_list.pos.y;\n        var max_y = Luxe.debug.padding.y +(margin*1.5);\n        var min_y = max_y;\n\n        if(diff > 0) {\n            min_y = (max_y - (diff+(margin*2)));\n        }\n\n        new_y -= (margin/2) * e.y;\n        new_y = Maths.clamp(new_y, min_y, max_y);\n        items_list.pos.y = new_y;\n    }\n#end\n\n//state\n    public override function show() {\n\n        super.show();\n        refresh();\n        items_list.visible = true;\n\n    } //show\n\n    public override function hide() {\n\n        super.hide();\n        items_list.visible = false;\n\n    } //hide\n\n//sizing\n\n    function resize() {\n\n        var debug = Luxe.debug;\n\n        var viewrect = new Rectangle(\n            debug.inspector.pos.x + (margin/2),\n            debug.inspector.pos.y + (margin*1.5),\n            debug.inspector.size.x - margin,\n            debug.inspector.size.y - margin - (margin*1.5)\n        );\n\n        var left = debug.padding.x + margin;\n        var top = debug.padding.y +(margin*1.5);\n\n        if(items_list != null) {\n            items_list.pos = new Vector(left, top);\n            items_list.clip_rect = viewrect;\n        }\n\n    }\n    override function onwindowsized(e:WindowEvent) resize();\n\n}\n","package luxe.debug;\n\nimport luxe.Input;\nimport luxe.Text;\nimport luxe.Screen.WindowEvent;\nimport luxe.resource.Resource;\nimport luxe.Resources;\nimport luxe.tween.Actuate;\nimport luxe.utils.Maths;\nimport phoenix.Shader;\nimport phoenix.Texture;\n\nclass StatsDebugView extends luxe.debug.DebugView  {\n\n    public var _last_render_stats : RenderStats;\n    public var _render_stats : RenderStats;\n\n    public var debug_draw_call_count : Int = 3;\n    public var debug_geometry_count : Int = 13;\n    public var font_size : Int = 15;\n\n        //stats console\n    public var render_stats_text : luxe.Text;\n    public var resource_list_text : luxe.Text;\n\n    public function new() {\n\n        super();\n\n        name = 'Statistics';\n\n        _last_render_stats = {\n            batchers : 0,\n            geometry_count : 0,\n            dynamic_batched_count : 0,\n            static_batched_count : 0,\n            visible_count : 0,\n            draw_calls : 0,\n            vert_count : 0\n        };\n\n        _render_stats = {\n            batchers : 0,\n            geometry_count : 0,\n            dynamic_batched_count : 0,\n            static_batched_count : 0,\n            visible_count : 0,\n            draw_calls : 0,\n            vert_count : 0\n        };\n\n    } //new\n\n    public function get_resource_stats_string() {\n\n        return Std.string( Luxe.resources.stats );\n\n    } //get_resource_stats_string\n\n    public function get_render_stats_string() {\n\n        return\n            'Renderer Statistics\\n\\n' +\n            'batcher count : ' + _render_stats.batchers + '\\n' +\n            'total geometry : ' + _render_stats.geometry_count + '\\n' +\n            'visible geometry : ' + _render_stats.visible_count + '\\n' +\n            'dynamic batch count : ' + _render_stats.dynamic_batched_count + '\\n' +\n            'static batch count : ' + _render_stats.static_batched_count + '\\n' +\n            'total draw calls : ' + _render_stats.draw_calls + '\\n' +\n            'total vert count : ' + _render_stats.vert_count;\n\n    } //get_render_stats_string\n\n    var margin = 32;\n    public override function create() {\n\n        var debug = Luxe.debug;\n\n        render_stats_text = new luxe.Text({\n            name:'debug.render.stats',\n            depth : 999.3,\n            no_scene : true,\n            color : new Color(0,0,0,1).rgb(0xf6007b),\n            pos : new Vector(0,0),\n            font : Luxe.renderer.font,\n            text : get_render_stats_string(),\n            point_size : font_size,\n            batcher : debug.batcher,\n            visible : false,\n        });\n\n        resource_list_text = new luxe.Text({\n            name:'debug.resource.stats',\n            depth : 999.3,\n            no_scene : true,\n            color : new Color(0,0,0,1).rgb(0xf6007b),\n            pos : new Vector(0,0),\n            font : Luxe.renderer.font,\n            text : '',\n            align : TextAlign.right,\n            point_size : font_size*0.9,\n            batcher : debug.batcher,\n            visible : false,\n        });\n\n        render_stats_text.geometry.id = 'debug.render.stats.geometry';\n        render_stats_text.geometry.id = 'debug.resource.stats.geometry';\n\n        resize();\n\n        Luxe.resources.on(ResourceEvent.any, function(_) if(visible) refresh() );\n\n    } //create\n\n    function resize() {\n\n        if( resource_list_text == null ||\n            render_stats_text == null) {\n            return;\n        }\n\n        var debug = Luxe.debug;\n\n        var viewrect = new Rectangle(\n            debug.inspector.pos.x + (margin/2),\n            debug.inspector.pos.y + (margin*1.5),\n            debug.inspector.size.x - margin,\n            debug.inspector.size.y - margin - (margin*1.5)\n        );\n\n        var left = debug.padding.x + margin;\n        var right = debug.padding.x + debug.inspector.size.x - margin;\n        var top = debug.padding.y +(margin*1.5);\n        var render_w = render_stats_text.text_bounds.w;\n        var render_h = render_stats_text.text_bounds.h;\n\n        if(resource_list_text != null) {\n            resource_list_text.pos = new Vector(right, top);\n            resource_list_text.clip_rect = viewrect;\n        }\n\n        if(render_stats_text != null) {\n            render_stats_text.pos = new Vector(left, top);\n            render_stats_text.clip_rect = viewrect;\n        }\n\n        reset_tween();\n\n    }\n\n    override function onwindowsized(e:WindowEvent) resize();\n\n    public override function refresh() {\n\n        var bytes_lists = '';\n        var text_lists = '';\n        var json_lists = '';\n        var texture_lists = '';\n        var rtt_lists = '';\n        var font_lists = '';\n        var shader_lists = '';\n\n        inline function _res(res:Resource) return '${res.id} • ${res.ref}\\t\\n';\n        inline function _tex(tex:Texture) return '(${tex.width_actual}x${tex.height_actual} ~${Luxe.utils.bytes_to_string(tex.memory_use())})    ${tex.id} • ${tex.ref}\\t\\n';\n        inline function _shd(res:Shader) return '(${res.vert_id}, ${res.frag_id})    ${res.id} • ${res.ref}\\t\\n';\n\n        for(res in Luxe.resources.cache) {\n            switch(res.resource_type) {\n                case ResourceType.bytes:            bytes_lists += _res(res);\n                case ResourceType.text:             text_lists += _res(res);\n                case ResourceType.json:             json_lists += _res(res);\n                case ResourceType.texture:          texture_lists += _tex(cast res);\n                case ResourceType.render_texture:   rtt_lists += _tex(cast res);\n                case ResourceType.font:             font_lists += _res(res);\n                case ResourceType.shader:           shader_lists += _shd(cast res);\n                default:\n            }\n        }\n\n        inline function orblank(v:String) return (v == '') ? '-\\t\\n' : v;\n\n        var lists = 'Resource list (${Luxe.resources.stats.total})\\n\\n';\n\n            lists += 'Bytes (${Luxe.resources.stats.bytes})\\n';\n                lists += orblank(bytes_lists);\n            lists += '\\nText (${Luxe.resources.stats.texts})\\n';\n                lists += orblank(text_lists);\n            lists += '\\nJSON (${Luxe.resources.stats.jsons})\\n';\n                lists += orblank(json_lists);\n            lists += '\\nTexture (${Luxe.resources.stats.textures})\\n';\n                lists += orblank(texture_lists);\n            lists += '\\nRenderTexture (${Luxe.resources.stats.render_textures})\\n';\n                lists += orblank(rtt_lists);\n            lists += '\\nFont (${Luxe.resources.stats.fonts})\\n';\n                lists += orblank(font_lists);\n            lists += '\\nShader (${Luxe.resources.stats.shaders})\\n';\n                lists += orblank(shader_lists);\n\n        //add the sounds, those are not resources in the same manner, but for now\n\n        var sound_list = '';\n        var _sounds:Array<String> = [];\n\n            for(sound in Luxe.snow.audio.sound_list) _sounds.push(sound.name);\n            _sounds.sort(function(a:String,b:String) {\n                if(a == b) return 0;\n                if(a < b) return -1;\n                return 1;\n            });\n            for(sound in _sounds) {\n                sound_list += '$sound •\\n';\n            }\n\n\n            var _count = Lambda.count(Luxe.snow.audio.sound_list);\n            lists += '\\n\\n---\\nAudio list ($_count)\\n\\n';\n                lists += orblank(sound_list);\n\n        resource_list_text.text = lists;\n\n        if(resource_list_text.geometry != null) {\n            resource_list_text.geometry.dirty = true;\n        }\n\n        reset_tween();\n\n    } //refresh\n\n    public override function process() {\n\n        if(!visible) return;\n\n        var dirty = false;\n\n            //Update the local statistics\n        update_render_stats();\n\n        if(_last_render_stats.batchers != _render_stats.batchers)\n            { dirty = true; _last_render_stats.batchers = _render_stats.batchers; }\n        if(_last_render_stats.geometry_count != _render_stats.geometry_count)\n            { dirty = true; _last_render_stats.geometry_count = _render_stats.geometry_count; }\n        if(_last_render_stats.dynamic_batched_count != _render_stats.dynamic_batched_count)\n            { dirty = true; _last_render_stats.dynamic_batched_count = _render_stats.dynamic_batched_count; }\n        if(_last_render_stats.static_batched_count != _render_stats.static_batched_count)\n            { dirty = true; _last_render_stats.static_batched_count = _render_stats.static_batched_count; }\n        if(_last_render_stats.visible_count != _render_stats.visible_count)\n            { dirty = true; _last_render_stats.visible_count = _render_stats.visible_count; }\n        if(_last_render_stats.draw_calls != _render_stats.draw_calls)\n            { dirty = true; _last_render_stats.draw_calls = _render_stats.draw_calls; }\n        if(_last_render_stats.vert_count != _render_stats.vert_count)\n            { dirty = true; _last_render_stats.vert_count = _render_stats.vert_count; }\n\n        if(dirty) {\n            refresh_render_stats();\n        } //dirty\n\n    } //process\n\n#if (desktop || web)\n    //:wip:\n    override function onmousewheel(e:MouseEvent) {\n\n        Actuate.stop(resource_list_text.pos);\n\n        var h = resource_list_text.text_bounds.h;\n        var vh = Luxe.debug.inspector.size.y - margin;\n        var diff = h - vh;\n\n        var new_y = resource_list_text.pos.y;\n        var max_y = Luxe.debug.padding.y +(margin*1.5);\n        var min_y = max_y;\n\n        if(diff > 0) {\n            min_y = (max_y - (diff+(margin*2)));\n        }\n\n        new_y -= (margin/2) * e.y;\n        new_y = Maths.clamp(new_y, min_y, max_y);\n        resource_list_text.pos.y = new_y;\n\n    }\n#end\n\n    public override function onkeydown(e:KeyEvent) {\n\n        if(e.keycode == Key.key_2 && visible) {\n            toggle_debug_stats();\n        }\n\n    } //onkeydown\n\n    public override function show() {\n\n        super.show();\n        refresh();\n        render_stats_text.visible = true;\n        resource_list_text.visible = true;\n\n    } //show\n\n    public override function hide() {\n\n        super.hide();\n        render_stats_text.visible = false;\n        resource_list_text.visible = false;\n        Actuate.stop(resource_list_text.pos);\n\n    } //hide\n\n    function reset_tween() {\n\n        Actuate.stop(resource_list_text.pos);\n\n        var h = resource_list_text.text_bounds.h;\n        var vh = Luxe.debug.inspector.size.y - margin;\n        var diff = h - vh;\n\n        var start_y = Luxe.debug.padding.y +(margin*1.5);\n        resource_list_text.pos.y = start_y;\n\n        if(diff > 0) {\n            var end_y = (start_y - (diff+(margin*2)));\n            Actuate.tween(resource_list_text.pos, 8, { y:end_y }).repeat().delay(4).reflect().ease(luxe.tween.easing.Linear.easeNone);\n        }\n\n    }\n\n   public function refresh_render_stats() {\n\n        if(!visible) {\n            return;\n        }\n\n        render_stats_text.text = get_render_stats_string();\n\n        render_stats_text.locked = true;\n\n        if(render_stats_text.geometry != null) {\n            render_stats_text.geometry.dirty = true;\n        }\n\n    } //refresh_render_stats\n\n    public var hide_debug : Bool = true;\n    public function toggle_debug_stats() {\n\n         hide_debug = !hide_debug;\n\n    } //toggle_debug_stats\n\n    public function update_render_stats() {\n\n        debug_geometry_count = Luxe.debug.batcher.geometry.size();\n        debug_draw_call_count = Luxe.debug.batcher.draw_calls;\n\n        _render_stats.batchers = Luxe.renderer.stats.batchers;\n        _render_stats.geometry_count = Luxe.renderer.stats.geometry_count;\n        _render_stats.visible_count = Luxe.renderer.stats.visible_count;\n        _render_stats.dynamic_batched_count = Luxe.renderer.stats.dynamic_batched_count;\n        _render_stats.static_batched_count = Luxe.renderer.stats.static_batched_count;\n        _render_stats.draw_calls = Luxe.renderer.stats.draw_calls;\n        _render_stats.vert_count = Luxe.renderer.stats.vert_count;\n\n        if(hide_debug) {\n\n            _render_stats.geometry_count = _render_stats.geometry_count - debug_geometry_count;\n            _render_stats.visible_count = _render_stats.visible_count - Luxe.debug.batcher.visible_count;\n            _render_stats.dynamic_batched_count = _render_stats.dynamic_batched_count - Luxe.debug.batcher.dynamic_batched_count;// - Luxe.debug.batcher.static_batched_count;\n            _render_stats.static_batched_count = _render_stats.static_batched_count - Luxe.debug.batcher.static_batched_count;\n            _render_stats.draw_calls -= debug_draw_call_count;\n            _render_stats.vert_count -= Luxe.debug.batcher.vert_count;\n\n        } //hide debug stats?\n\n    } //update_render_stats\n\n} //StatsDebugView\n\ntypedef RenderStats = {\n    batchers : Int,\n    geometry_count : Int,\n    dynamic_batched_count : Int,\n    static_batched_count : Int,\n    visible_count : Int,\n    draw_calls : Int,\n    vert_count : Int,\n}\n","package luxe.debug;\n\nimport luxe.Screen.WindowEvent;\n\nclass TraceDebugView extends luxe.debug.DebugView {\n\n        //log console\n    public var logged : Array<String>;\n    public var lines : luxe.Text;\n    public var max_lines : Int = 35;\n\n    public function new() {\n\n        super();\n\n        name = 'Log';\n\n        Luxe.debug.add_trace_listener('TraceDebugView', on_trace);\n\n        logged = new Array<String>();\n\n        add_line('luxe version ${Luxe.build}');\n\n    } //new\n\n    public function on_trace( v : Dynamic, ?inf : haxe.PosInfos ) {\n        add_line( inf.fileName + ':' + inf.lineNumber + ' ' + v );\n    }\n\n    public override function create() {\n\n        var debug = Luxe.debug;\n        var text_bounds = new luxe.Rectangle( debug.padding.x+20, debug.padding.y+40, Luxe.screen.w-(debug.padding.x*2)-20, Luxe.screen.h-(debug.padding.y*2)-40 );\n\n        lines = new luxe.Text({\n            name : 'debug.log.text',\n            no_scene : true,\n            depth : 999.3,\n            color : new Color().rgb(0x888888),\n            bounds : text_bounds,\n            bounds_wrap : true,\n            font : Luxe.renderer.font,\n            text : '',\n            align_vertical : luxe.Text.TextAlign.bottom,\n            point_size : 12,\n            batcher : debug.batcher,\n            visible : false\n        });\n\n        if(lines.geometry != null) {\n            lines.geometry.clip_rect = text_bounds;\n            lines.geometry.locked = true;\n            lines.geometry.id = 'debug.log.text.geometry';\n        }\n    }\n\n    override function onwindowsized(e:WindowEvent) {\n        var debug = Luxe.debug;\n        var text_bounds = new luxe.Rectangle( debug.padding.x+20, debug.padding.y+40, Luxe.screen.w-(debug.padding.x*2)-20, Luxe.screen.h-(debug.padding.y*2)-40 );\n        lines.bounds = text_bounds;\n        lines.clip_rect = text_bounds;\n            //flush the sizes\n        if(lines.geometry != null) {\n            lines.geometry.locked = true;\n            lines.geometry.dirty = true;\n        }\n    }\n\n    public function add_line(_t:String) {\n\n        if(logged == null) {\n            return;\n        }\n\n            //store in the list of pushed lines\n        logged.push(_t);\n\n            //update the line geometry\n        if(!visible) {\n            return;\n        }\n\n        refresh_lines();\n\n    } //add_line\n\n    var _last_logged_length : Int = 0;\n    function refresh_lines() {\n\n        if(_last_logged_length == logged.length) {\n            return;\n        }\n\n            //we go though each line in the logged list,\n            //and create a string from them.\n            //then we set the lines text to that\n        var _final = '';\n\n        if(logged.length <= max_lines) {\n            for(_line in logged) {\n                _final += _line + '\\n';\n            }\n        } else {\n            var _start = logged.length - max_lines;\n            var _total = logged.length;\n            for(i in _start ... logged.length) {\n                var _line = logged[i];\n                _final += _line + '\\n';\n            }\n        }//\n\n        lines.text = _final;\n\n        if(lines.geometry != null) {\n            lines.geometry.locked = true;\n            lines.geometry.dirty = true;\n        }\n\n        _last_logged_length = logged.length;\n\n    } //refresh_lines\n\n\n    public override function refresh() {\n\n    }\n\n    public override function process() {\n\n    }\n\n    public override function show() {\n        super.show();\n        refresh_lines();\n        lines.visible = true;\n    }\n\n    public override function hide() {\n        super.hide();\n        lines.visible = false;\n    }\n\n}\n","package luxe.importers.bitmapfont;\n\nimport luxe.importers.bitmapfont.BitmapFontData;\n\nclass BitmapFontParser {\n\n    //public api\n\n        public static function parse( _font_data:String ) : BitmapFontData {\n\n            if(_font_data.length == 0) {\n                throw \"BitmapFont:Parser: _font_data is 0 length\";\n            }\n\n            var _info : BitmapFontData = {\n                face : null,\n                chars : new Map(),\n                point_size : 0, base_size : 0,\n                char_count : 0, line_height : 0,\n                pages : [], kernings : new Map()\n            };\n\n            var _lines : Array<String> = _font_data.split(\"\\n\");\n\n            if(_lines.length == 0) throw \"BitmapFont; invalid font data specified for parser.\";\n\n            var _first = _lines[0];\n            if( StringTools.ltrim(_first).substr(0, 4) != 'info') {\n                throw \"BitmapFont; invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.\";\n            }\n\n            for(_line in _lines) {\n                var _tokens = _line.split(\" \");\n                for(_current in _tokens) {\n                    parse_token(_current, _tokens, _info);\n                }\n            }\n\n            return _info;\n\n        } //parse\n\n    //internal\n\n        static function parse_token( _token:String, _tokens:Array<String>, _info:BitmapFontData ) {\n\n                //remove the first token\n            _tokens.shift();\n                //fetch the items from the line\n            var _items = tokenize_line(_tokens);\n\n            switch (_token) {\n\n                case 'info': {\n                    _info.face = unquote(_items['face']);\n                    _info.point_size = Std.parseFloat(_items['size']);\n                }\n\n                case 'common': {\n                    _info.line_height = Std.parseFloat(_items['lineHeight']);\n                    _info.base_size = Std.parseFloat(_items['base']);\n                }\n\n                case 'page': {\n                    _info.pages.push({\n                        id : Std.parseInt(_items['id']),\n                        file : trim(unquote(_items['file']))\n                    });\n                }\n\n                case 'chars': {\n                    _info.char_count = Std.parseInt(_items[\"count\"]);\n                }\n\n                case 'char': {\n\n                    var _char : Character = {\n                        id : Std.parseInt(_items[\"id\"]),\n                        x : Std.parseFloat(_items[\"x\"]),\n                        y : Std.parseFloat(_items[\"y\"]),\n                        width : Std.parseFloat(_items[\"width\"]),\n                        height : Std.parseFloat(_items[\"height\"]),\n                        xoffset : Std.parseFloat(_items[\"xoffset\"]),\n                        yoffset : Std.parseFloat(_items[\"yoffset\"]),\n                        xadvance : Std.parseFloat(_items[\"xadvance\"]),\n                        page : Std.parseInt(_items[\"page\"])\n                    }\n\n                    _info.chars.set(_char.id, _char);\n\n                }\n\n                case 'kerning': {\n\n                    var _first = Std.parseInt(_items[\"first\"]);\n                    var _second = Std.parseInt(_items[\"second\"]);\n                    var _amount = Std.parseFloat(_items[\"amount\"]);\n\n                    var _map = _info.kernings.get(_first);\n                    if(_map == null) {\n                        _map = new Map();\n                        _info.kernings.set(_first, _map);\n                    }\n\n                    _map.set(_second, _amount);\n\n                }\n\n                default:\n            }\n\n        } //parse_token\n\n        static function tokenize_line( _tokens:Array<String> ) {\n\n            var _item_map : Map<String, String> = new Map();\n\n                for(_token in _tokens) {\n                    var _items = _token.split(\"=\");\n                    _item_map.set( _items[0], _items[1] );\n                }\n\n            return _item_map;\n\n        } //tokenize_line\n\n        inline static function trim(_s:String) { return StringTools.trim(_s); }\n        inline static function unquote(_s:String) {\n            if(_s.indexOf('\"') != -1) {\n                _s = StringTools.replace(_s,'\"', '');\n            } return _s;\n        } //unquote\n\n} //BitmapFontParser\n","package luxe.macros;\n\nimport haxe.macro.Expr;\nimport haxe.macro.Context;\n\nimport haxe.io.Bytes;\nimport haxe.io.Path;\n\n\n#if macro\nimport sys.io.File;\nimport sys.FileSystem;\n#end\n\n@:noCompletion class BuildVersion {\n\n    public static var _save : Bool = false;\n\n    macro public static function save() : haxe.macro.Expr {\n\n        _save = true;\n\n        return macro null;\n\n    } //save\n\n        //This is always called from Luxe.hx in the root folder,\n        //which contains the .git repo, and build file directly\n    macro public static function latest() {\n\n        var location : String = Context.getPosInfos(Context.currentPos()).file;\n        var root : String = Path.addTrailingSlash(Path.directory(location));\n        var out : String = Path.join([root,'build']);\n\n        var build : String = try_git( root );\n\n        if(build != '') {\n\n                //the + is for semantic versioning\n            build = '+' + build.substr(0,10);\n\n            if(_save) {\n                File.saveContent(out, build);\n            }\n\n            Context.addResource('build', Bytes.ofString(build));\n        }\n\n        return Context.makeExpr(build, Context.currentPos());\n\n    } //latest\n\n    static function try_git(root:String) {\n\n\n\t\t#if macro\n\t\t\tvar git_path : String = Path.join([root,'.git/']);\n\t\t\t\tgit_path = Path.normalize(git_path);\n\n\t\t\tif(FileSystem.exists(git_path) && FileSystem.isDirectory(git_path)) {\n\t\t\t\tvar ref_file = Path.normalize(Path.join([git_path,'refs/heads/master']));\n\t\t\t\tif(FileSystem.exists(ref_file)) {\n                    return File.getContent(ref_file);\n                } else {\n                    return '';\n                }\n\t\t\t}\n\t\t#end\n\n        return '';\n\n    } //try_git\n\n} //BuildVersion","package luxe.resource;\n\nimport luxe.Log.*;\nimport luxe.options.ResourceOptions;\nimport luxe.Resources;\n\nimport snow.api.Promise;\nimport snow.system.assets.Asset;\n\nclass Resource {\n\n        /** The unique resource ID.\n            If the resource is loaded from disk, this matches the asset id.\n            If not from disk, the id can be anything but must be unique to this resource. */\n    public var id: String;\n        /** The resource system that contains this Resource. */\n    public var system: Resources;\n        /** The resource type ID. Defaults use ResourceType ids but is typed Int for user id's. */\n    public var resource_type: Int;\n        /** The state this resource is currently in. */\n    public var state (default, set): ResourceState;\n\n        /** The reference count of this resource. Each time a\n            `load_*` call is made on the resource system, it increments\n            the count specific to that resource. When a resource calls\n            `destroy()` it decreases by one. When the ref count is 0, and the\n            resource is destroyed, it's properly destroyed.\n            This works via setter, so changing it with ref++ and ref-- is ok. */\n    public var ref (default, set): Int = 0;\n\n    public function new( _options:ResourceOptions ) {\n\n        assertnull(_options);\n        assertnull(_options.id);\n\n        def(_options.system, Luxe.resources);\n        def(_options.resource_type, ResourceType.unknown);\n\n        id = _options.id;\n        system = _options.system;\n        resource_type = _options.resource_type;\n        state = ResourceState.unknown;\n        ref = 1;\n\n    } //new\n\n        /** Destroys the resource, unlisting it, cleaning up it's resource usage.\n            Once destroyed, it is no longer valid and should not be used in any way.\n            To clean up without destroying the resource, use invalidate().\n            To force destroying and ignore the ref counting, pass true for `force` flag. */\n    public function destroy( ?_force:Bool=false ) : Void {\n\n        assert(state != ResourceState.destroyed);\n\n        if(!_force) {\n            assert(ref > 0);\n            ref--;\n            assert(ref >= 0);\n        }\n\n        _debug('destroy / $id  / ref $ref');\n\n        if(ref == 0 || _force) {\n\n            clear();\n            state = destroyed;\n            system.remove(this);\n            system.emit(destroyed, this);\n\n        } //no refs || force\n\n    } //destroy\n\n        /** Invalidates and frees up any resource usage held.\n            The resource instance remains valid for use, and remains listed in the resource cache. */\n    public function invalidate() : Void {\n\n        assert(state != ResourceState.destroyed);\n\n        clear();\n        state = invalidated;\n        system.emit(invalidated, this);\n\n    }\n\n        /** Returns a promise for the reloaded resource.\n            Returns null from the base `Resource` type, implemented in subclasses. */\n    public function reload() : Promise {\n        return null;\n    }\n\n        /** Returns the estimated memory use by this resource, in bytes.\n            You can use Luxe.utils.bytes_to_string to display this value easily.\n            Some resources return 0, in the case of not being able to give an estimate. */\n    public function memory_use() : Float {\n        return 0;\n    } //memory_use\n\n//Internal\n\n    function set_ref( _ref:Int ) {\n\n        var pre = ref;\n        ref = _ref;\n\n        if(ref > pre) {\n            system.emit(ResourceEvent.reference, this);\n        } else if(ref < pre) {\n            system.emit(ResourceEvent.dereference, this);\n        }\n\n        return ref;\n\n    } //set_ref\n\n    function set_state( _state:ResourceState ) {\n\n        state = _state;\n\n        switch(state) {\n            case ResourceState.loading:\n                system.emit(ResourceEvent.loading, this);\n            case ResourceState.loaded:\n                system.emit(ResourceEvent.loaded, this);\n            case ResourceState.failed:\n                system.emit(ResourceEvent.failed, this);\n            case _:\n        }\n\n        return state;\n\n    } //set_state\n\n        /** Clean up any resource usage, freeing memory, removing references etc. */\n    function clear() : Void {\n\n    } //\n\n\n    function state_string() {\n        return switch(state) {\n            case ResourceState.listed:      'listed';\n            case ResourceState.loading:     'loading';\n            case ResourceState.loaded:      'loaded';\n            case ResourceState.failed:      'failed';\n            case ResourceState.invalidated: 'invalidated';\n            case ResourceState.destroyed:   'destroyed';\n            case _:                         'unknown';\n        }\n    }\n\n    function type_string() {\n        return switch(resource_type) {\n            case ResourceType.bytes:    'bytes';\n            case ResourceType.text:     'text';\n            case ResourceType.json:     'json';\n            case ResourceType.texture:  'texture';\n            case ResourceType.shader:   'shader';\n            case ResourceType.font:     'font';\n            case _: '$resource_type';\n        }\n    }\n\n    function toString() {\n        return 'Resource(`$id`, ${type_string()}, ${state_string()})';\n    }\n\n\n} //Resource\n\n\nclass BytesResource extends Resource {\n\n    public var asset:AssetBytes;\n\n    public function new( _options:BytesResourceOptions ) {\n\n        assertnull(_options);\n\n        _options.resource_type = ResourceType.bytes;\n\n        super( _options );\n\n        asset = _options.asset;\n\n    } //new\n\n    override function reload() : Promise {\n\n        assert(state != ResourceState.destroyed);\n\n        clear();\n\n        return new Promise(function(resolve, reject) {\n\n            state = ResourceState.loading;\n\n            var get = Luxe.snow.assets.bytes(id);\n\n            get.then(function(_asset:AssetBytes) {\n\n                asset = _asset;\n                state = ResourceState.loaded;\n                resolve(this);\n\n            });\n\n            get.error(function(_error) {\n\n                state = ResourceState.failed;\n                reject(_error);\n\n            });\n\n        }); //promise\n\n    } //reload\n\n    override function clear() {\n\n        if(asset != null) {\n            asset.destroy();\n            asset = null;\n        }\n\n    } //clear\n\n    override function memory_use() {\n\n        if(asset == null) return 0;\n\n        return asset.bytes.byteLength;\n\n    } //memory_use\n\n} //BytesResource\n\nclass TextResource extends Resource {\n\n    public var asset:AssetText;\n\n    public function new( _options:TextResourceOptions ) {\n\n        assertnull(_options);\n\n        _options.resource_type = ResourceType.text;\n\n        super( _options );\n\n        asset = _options.asset;\n\n    } //new\n\n    override function reload() : Promise {\n\n        assert(state != ResourceState.destroyed);\n\n        clear();\n\n        return new Promise(function(resolve, reject) {\n\n            state = ResourceState.loading;\n\n            var get = Luxe.snow.assets.text(id);\n\n            get.then(function(_asset:AssetText) {\n\n                asset = _asset;\n                state = ResourceState.loaded;\n                resolve(this);\n\n            });\n\n            get.error(function(_error) {\n\n                state = ResourceState.failed;\n                reject(_error);\n\n            });\n\n        }); //promise\n\n    } //reload\n\n    override function clear() {\n\n        if(asset != null) {\n            asset.destroy();\n            asset = null;\n        }\n\n    } //clear\n\n    override function memory_use() {\n\n        if(asset == null) return 0;\n\n        return asset.text.length;\n\n    } //memory_use\n\n} //TextResource\n\nclass JSONResource extends Resource {\n\n    public var asset:AssetJSON;\n\n    public function new( _options:JSONResourceOptions ) {\n\n        assertnull(_options);\n\n        _options.resource_type = ResourceType.json;\n\n        super( _options );\n\n        asset = _options.asset;\n\n    } //new\n\n    override function reload() : Promise {\n\n        assert(state != ResourceState.destroyed);\n\n        clear();\n\n        return new Promise(function(resolve, reject) {\n\n            state = ResourceState.loading;\n\n            var get = Luxe.snow.assets.json(id);\n\n            get.then(function(_asset:AssetJSON) {\n\n                asset = _asset;\n                state = ResourceState.loaded;\n                resolve(this);\n\n            });\n\n            get.error(function(_error) {\n\n                state = ResourceState.failed;\n                reject(_error);\n\n            });\n\n        }); //promise\n\n    } //reload\n\n    override function clear() {\n\n        if(asset != null) {\n            asset.destroy();\n            asset = null;\n        }\n\n    } //clear\n\n\n} //JSONResource\n","package luxe.structural;\n\n\n/**\n    Copyright 2014 Sven Bergström\n\n    A balanced binary search tree,\n    implemented based on various stack overflow answers,\n    wikipedia articles and books read over the years.\n    some other references : https://github.com/polygonal/ds\n\n    Part of the structural library for haxe\n    http://github.com/underscorediscovery/structural\n\n    MIT License\n*/\n\n#if !display @:generic #end\n@:allow(luxe.structural.BalancedBSTIterator)\nclass BalancedBST<K,T> {\n\n        /** The tree root node */\n    public var root : BalancedBSTNode<K,T>;\n        /** The current comparison functoin */\n    public var compare : K->K->Int;\n        /** Whether or not the tree is empty (i.e root == null) */\n    public var empty (get, null) : Bool;\n\n        /** Create a new balanced BST with the given comparison function */\n    public function new( compare_function : K->K->Int ) {\n\n        compare = compare_function;\n\n    } //new\n\n//Public API\n\n        /** Return the number of nodes in the tree */\n    public inline function size() {\n\n        return node_count(root);\n\n    } //size\n\n        /** Return the depth of the tree */\n    public inline function depth() {\n\n        return node_depth(root);\n\n    } //depth\n\n        /** Insert a node into the tree */\n    public inline function insert( _key:K, _value:T ) {\n\n        root = node_insert( root, _key, _value );\n        root.color = NodeColor.black;\n\n    } //insert\n\n        /** Returns true if the tree contains the key for this node */\n    public function contains( _key:K ) : Bool {\n\n            //if the find functions returns non-null it's here\n        return find(_key) != null;\n\n    } //contains\n\n        /** Returns a node by key, if found. null otherwise */\n    public function find( _key:K ) : T {\n\n        return node_find( root, _key );\n\n    } //find\n\n        /** Return the number of nodes to the left of this node, by key.   \n            http://en.wikipedia.org/wiki/Order_statistic_tree */\n    public function rank( _key:K ) : Int {\n\n        return node_rank(_key, root);\n\n    } //rank\n\n        /** Find a key by rank in the tree, i.e given a number of nodes, the key at this point.   \n            http://en.wikipedia.org/wiki/Order_statistic_tree */\n    public function select( _rank:Int ) : K {\n\n        var _node = node_select(root,_rank);\n\n        if(_node != null) {\n            return _node.key;\n        } else {\n            return null;\n        }\n\n    } //select\n\n        /** return the smallest node (key) in the tree (most left) */\n    public function smallest() : K {\n\n        var _node = node_smallest(root);\n\n        if(_node != null) {\n            return _node.key;\n        } else {\n            return null;\n        }\n\n    } //smallest\n\n        /** return the largest node (key) in the tree (most right)*/\n   public function largest() : K {\n\n        var _node = node_largest(root);\n\n        if(_node != null) {\n            return _node.key;\n        } else {\n            return null;\n        }\n\n    } //largest\n\n        /** remove a node by key. return false if the operation fails (i.e the node is not stored in this tree) */\n    public function remove( _key:K ) : Bool {\n\n        if( !is_red(root.left) && !is_red(root.right) ) {\n            root.color = NodeColor.red;\n        }\n\n        if(!contains(_key)) {\n            return false;\n        }\n\n        root = node_remove(root, _key);\n\n        if( root != null  ) {\n            root.color = NodeColor.black;\n        }\n\n        return true;\n\n    } //remove\n\n        /** remove the smallest node in the tree (most left) */\n    public function remove_smallest() {\n\n        if( !is_red(root.left) && !is_red(root.right) ) {\n            root.color = NodeColor.red;\n        }\n\n        root = node_remove_smallest(root);\n\n        if(root != null) {\n            root.color = NodeColor.black;\n        }\n\n        return true;\n\n    } //remove_smallest\n\n        /** remove the largest node in the tree (most right) */\n    public function remove_largest() {\n\n            // if both children of root are black, set root to red\n        if (!is_red(root.left) && !is_red(root.right)) {\n            root.color = NodeColor.red;\n        }\n\n        root = node_remove_largest(root);\n\n        if(root != null ) {\n            root.color = NodeColor.black;\n        }\n\n        return true;\n\n    } //remove_largest\n\n        /** tree floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\n    public function floor( _key:K ) : Null<K> {\n\n        var _node = node_floor(root, _key);\n\n        if(_node == null) {\n            return null;\n        }\n\n        return _node.key;\n\n    } //floor\n\n        /** tree ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\n    public function ceil( _key:K ) : Null<K> {\n\n        var _node = node_ceil( root, _key );\n\n        if (_node == null) {\n            return null;\n        }\n\n        return _node.key;\n\n    } //ceil\n\n        /** return an array of the values in this tree */\n    public function toArray() : Array<T> {\n\n        var a = new Array<T>();\n\n        traverse_node( root, order_retain, function( _node : BalancedBSTNode<K,T> ) {\n            a.push( _node.value );\n        });\n\n        return a;\n\n    } //toArray\n\n        /** Return an array of the keys in this tree */\n    public function keys() : Array<K> {\n\n        var a = new Array<K>();\n\n        traverse_node( root, order_retain, function( _node : BalancedBSTNode<K,T> ) {\n            a.push( _node.key );\n        });\n\n        return a;\n\n    } //keys\n\n        /** returns an iterator from a conversion to array of this tree. Usable as `for(item in tree)` */\n    public inline function iterator() {\n\n        return new BalancedBSTIterator<K,T>(this);\n        // return toArray().iterator();\n\n    } //iterator\n\n        /** Traverse a node with the given method, and call the given function for each node traversed */\n    public function traverse_node( _node:BalancedBSTNode<K,T>, _method:BalancedBSTTraverseMethod, _on_traverse : BalancedBSTNode<K,T> ->Void ) {\n\n        if (_node != null) {\n\n            switch(_method) {\n\n                case order_pre:\n                    _on_traverse(_node);\n                    traverse_node(_node.left, _method, _on_traverse);\n                    traverse_node(_node.right, _method, _on_traverse);\n\n                case order_retain:\n                    traverse_node(_node.left, _method, _on_traverse);\n                    _on_traverse(_node);\n                    traverse_node(_node.right, _method, _on_traverse);\n\n                case order_post:\n                    traverse_node(_node.left, _method, _on_traverse);\n                    traverse_node(_node.right, _method, _on_traverse);\n                    _on_traverse(_node);\n\n            } //_method\n\n        } //_node\n\n    } //traverse\n\n//Internal API\n\n        //getter\n    function get_empty() {\n\n        return root == null;\n\n    }\n\n        /** the depth of a single node */\n    function node_depth( _node:BalancedBSTNode<K,T>  ) {\n\n        if (_node == null) {\n            return 0;\n        }\n\n        var _n_depth = Math.max(\n                         node_depth(_node.left),\n                         node_depth(_node.right)\n                       );\n\n        return 1 + Std.int( _n_depth );\n\n    } //node_depth\n\n        /** the node count/children of a single node */\n    inline function node_count( _node:BalancedBSTNode<K,T> ) {\n\n        return _node == null ? 0 : _node.nodecount;\n\n    } //node_count\n\n        /** insert a single node */\n    function node_insert( _node:BalancedBSTNode<K,T>, _key:K, _value:T ) : BalancedBSTNode<K,T> {\n\n        if(_node == null) {\n\n            return new BalancedBSTNode<K,T>(_key, _value, 1, NodeColor.red);\n\n        } //_node\n\n            var comparison = compare(_key, _node.key);\n\n            if(comparison < 0) {\n\n                _node.left = node_insert(_node.left, _key, _value);\n\n            } else if(comparison > 0) {\n\n                _node.right = node_insert(_node.right, _key, _value);\n\n            } else {\n\n                _node.value = _value;\n\n            }\n\n            if(is_red(_node.right) && !is_red(_node.left)) {\n                _node = rotate_left(_node);\n            }\n\n            if(is_red(_node.left) && is_red(_node.left.left)) {\n                _node = rotate_right(_node);\n            }\n\n            if(is_red(_node.left) && is_red(_node.right)) {\n                swap_color(_node);\n            }\n\n            node_update_count(_node);\n\n        return _node;\n\n    } //node_insert\n\n        /* make sure the node count is up to date on a given node */\n    inline function node_update_count( _node:BalancedBSTNode<K,T> ) {\n\n        _node.nodecount = node_count(_node.left) + node_count(_node.right) + 1;\n\n        return _node;\n\n    } //node_update_count\n\n        /** find a single node */\n    function node_find( _node:BalancedBSTNode<K,T>, _key:K ) : T {\n\n        if(_node == null) {\n            return null;\n        }\n\n        var comparison = compare( _key, _node.key );\n\n        if(comparison < 0) {\n            return node_find(_node.left, _key);\n        } else if(comparison > 0) {\n            return node_find(_node.right, _key);\n        } else { //comparison > 0\n            return _node.value;\n        }\n\n    } //node_find\n\n        /** find rank of single node */\n    function node_rank( _key:K, _node:BalancedBSTNode<K,T> ) : Int {\n\n        if(_node == null) {\n            return 0;\n        }\n\n        var comparison = compare(_key, _node.key);\n\n        if(comparison < 0) {\n            return node_rank(_key, _node.left);\n        } else if(comparison > 0) {\n            return 1 + node_count(_node.left) + node_rank( _key, _node.right );\n        } else {\n            return node_count(_node.left);\n        }\n\n    } //node_rank\n\n        /** find key of node by rank */\n    function node_select( _node:BalancedBSTNode<K,T>, _rank:Int ) : BalancedBSTNode<K,T> {\n\n        if(_node == null) {\n            return null;\n        }\n\n        var _r = node_count(_node.left);\n\n        if(_r > _rank) {\n            return node_select(_node.left, _rank);\n        } else if(_r < _rank) {\n            return node_select(_node.right, _rank - _r - 1);\n        } else {\n            return _node;\n        }\n\n    } //node_select\n\n        /** find smallest of the given node */\n    function node_smallest( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        if(_node.left == null) {\n            return _node;\n        }\n\n        return node_smallest( _node.left );\n\n    } //node_smallest\n\n        /** find largest of the given node */\n    function node_largest( _node : BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        if (_node.right == null) {\n            return _node;\n        } else {\n            return node_largest(_node.right);\n        }\n\n    } //node_largest\n\n        /** node floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\n    function node_floor(_node:BalancedBSTNode<K,T>, _key:K ) : BalancedBSTNode<K,T> {\n\n        if(_node == null) {\n            return null;\n        }\n\n        var comparison = compare(_key, _node.key);\n\n        if(comparison == 0) {\n            return _node;\n        } else if(comparison < 0) {\n            return node_floor(_node.left, _key);\n        }\n\n        var _n = node_floor(_node.right, _key);\n\n        if(_n != null) {\n            return _n;\n        } else {\n            return _node;\n        }\n\n    } //node_floor\n\n        /** node ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\n    function node_ceil( _node:BalancedBSTNode<K,T> , _key:K ) : BalancedBSTNode<K,T> {\n\n        if (_node == null) {\n            return null;\n        }\n\n        var comparison = compare(_key, _node.key);\n\n        if(comparison == 0) {\n\n            return _node;\n\n        } else if(comparison < 0) {\n\n            var _n = node_ceil(_node.left, _key);\n\n            if (_n != null) {\n                return _n;\n            } else {\n                return _node;\n            }\n\n        } //comparison < 0\n\n        return node_ceil(_node.right, _key);\n\n    } //node_ceil\n\n        /** remove the smallest node in the tree (most left) */\n    function node_remove_smallest( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        if(_node.left == null) {\n            return null;\n        }\n\n        if( !is_red(_node.left) && !is_red(_node.left.left)) {\n            _node = move_red_left( _node );\n        }\n\n        _node.left = node_remove_smallest(_node.left);\n        node_update_count(_node);\n\n        return balance(_node);\n\n    } //remove_smallest\n\n        /** remove the largest node in the tree (most right) */\n    function node_remove_largest( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        if( is_red(_node.left) ) {\n            _node = rotate_right(_node);\n        }\n\n        if (_node.right == null) {\n            return null;\n        }\n\n        if( !is_red(_node.right) && !is_red(_node.right.left) ) {\n            _node = move_red_right(_node);\n        }\n\n        _node.right = node_remove_largest(_node.right);\n        node_update_count(_node);\n\n        return balance(_node);\n\n    } //node_remove_largest\n\n        /** remove a single node by key */\n    function node_remove( _node:BalancedBSTNode<K,T>, _key:K ) : BalancedBSTNode<K,T> {\n\n        var comparison = compare( _key, _node.key );\n\n        if( comparison < 0 )  {\n\n            if( !is_red(_node.left) && !is_red(_node.left.left) ) {\n                _node = move_red_left(_node);\n            }\n\n            _node.left = node_remove(_node.left, _key);\n\n        } else {\n\n            if( is_red(_node.left) ) {\n                _node = rotate_right(_node);\n            }\n\n            var comparison = compare( _key, _node.key );\n\n            if ((comparison == 0) && (_node.right == null)) {\n                return null;\n            }\n\n            if (!is_red(_node.right) && !is_red(_node.right.left)) {\n                _node = move_red_right(_node);\n            }\n\n            var comparison = compare( _key, _node.key );\n            if(comparison == 0) {\n\n                var _n = node_smallest(_node.right);\n                    _node.key = _n.key;\n                    _node.value = _n.value;\n\n                _node.right = node_remove_smallest(_node.right);\n\n            } else {\n                _node.right = node_remove(_node.right, _key);\n            }\n\n        }\n\n        return balance(_node);\n\n    } //_delete\n\n    inline function is_red( _node:BalancedBSTNode<K,T> ) {\n\n        if(_node == null) {\n            return NodeColor.black;\n        }\n\n        return _node.color == NodeColor.red;\n\n    } //is_red\n\n    @:noCompletion public function rotate_left( _node:BalancedBSTNode<K,T> ) {\n\n        var _n = _node.right;\n\n                //update colors\n            _n.color = _node.color;\n            _node.color = NodeColor.red;\n                //swap the right with left node\n            _node.right = _n.left;\n            _n.left = _node;\n\n                //update the node count values\n            _n.nodecount = _node.nodecount;\n            node_update_count(_node);\n\n        return _n;\n\n    } //rotate_left\n\n    @:noCompletion public function rotate_right( _node:BalancedBSTNode<K,T> ) {\n\n        var _n = _node.left;\n\n                //update node colors\n            _n.color = _node.color;\n            _node.color = NodeColor.red;\n                //swap the left and right node\n            _node.left = _n.right;\n            _n.right = _node;\n\n                //update the nodecount values\n            _n.nodecount = _node.nodecount;\n            node_update_count(_node);\n\n        return _n;\n\n    } //rotate_left\n\n    @:noCompletion public function swap_color( _node:BalancedBSTNode<K,T> ) {\n\n        _node.color = !_node.color;\n        _node.left.color = !_node.left.color;\n        _node.right.color = !_node.right.color;\n\n    } //swap_color\n\n    inline function move_red_left( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        swap_color(_node);\n\n        if( is_red(_node.right.left) ) {\n            _node.right = rotate_right(_node.right);\n            _node = rotate_left(_node);\n        }\n\n        return _node;\n    }\n\n    inline function move_red_right( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        swap_color(_node);\n\n        if (is_red(_node.left.left)) {\n            _node = rotate_right(_node);\n        }\n\n        return _node;\n    }\n\n    inline function balance( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\n\n        if (is_red(_node.right))    {\n            _node = rotate_left(_node);\n        }\n\n        if (is_red(_node.left) && is_red(_node.left.left)) {\n            _node = rotate_right(_node);\n        }\n\n        if (is_red(_node.left) && is_red(_node.right)) {\n            swap_color(_node);\n        }\n\n        node_update_count(_node);\n\n        return _node;\n\n    } //balance\n\n} //BalancedBST\n\n\n#if !display @:generic #end\nclass BalancedBSTIterator<K,T> {\n\n    var tree : BalancedBST<K,T>;\n    var current : BalancedBSTNode<K,T>;\n    var rightest : BalancedBSTNode<K,T>;\n\n    public inline function new(_tree:BalancedBST<K,T>) {\n\n        if(_tree == null) return;\n        if(_tree.root == null) return;\n\n        tree = _tree;\n        current = _min(tree.root);\n        rightest = _max(tree.root);\n\n    } //new\n\n    public inline function hasNext():Bool {\n\n        if(current == null || rightest == null) return false;\n\n        return tree.compare(current.key, rightest.key) <= 0;\n\n    } //hasNext\n\n    public inline function next() {\n        var _temp = current;\n        current = update_next();\n        return _temp.value;\n    }\n\n    inline function update_next() {\n\n        if(!hasNext()) return null;\n        if(current.right!=null) return _min(current.right);\n\n            var _next = null;\n            var _temp = tree.root;\n            while(_temp != null) {\n\n                var _comp = tree.compare(current.key, _temp.key);\n                if(_comp < 0) {\n                    _next = _temp;\n                    _temp = _temp.left;\n                } else if(_comp > 0){\n                    _temp = _temp.right;\n                } else {\n                    current = _next;\n                    break;\n                }\n\n            } //while\n\n        return _next;\n\n    } //update_next\n\n    inline function _min(_node:BalancedBSTNode<K,T>) {\n\n        while(_node.left != null) _node = _node.left;\n\n        return _node;\n\n    } //_min\n\n    inline function _max(_node:BalancedBSTNode<K,T>) {\n\n        while(_node.right != null) _node = _node.right;\n\n        return _node;\n\n    } //_max\n\n} //BalancedBSTIterator\n\n\n@:noCompletion\nprivate class NodeColor {\n    public static inline var red = true;\n    public static inline var black = false;\n}\n\n    /** A balanced binary search tree node by `K` key and `T` value (type) */\n#if !display @:generic #end\nclass BalancedBSTNode<K,T> {\n\n\n        /** The node left of this node (less than) */\n    public var left         : BalancedBSTNode<K,T>;\n        /** The node right of this node (bigger than) */\n    public var right        : BalancedBSTNode<K,T>;\n        /** The node count of this node, including itself */\n    public var nodecount    : Int;\n        /** The node color, red or black, for maintaining balance */\n    public var color        : Bool;\n\n        /** The key used to compare this node */\n    public var key          : K;\n        /** The value this node holds */\n    public var value        : T;\n\n        /** Create a new node with given key, value, count and color. Use `insert` on the tree instead. */\n    public function new( _key:K, _value:T, _node_count:Int, _color:Bool ) {\n\n        left = null;\n        right = null;\n\n        key = _key;\n        value = _value;\n\n        nodecount = _node_count;\n        color = _color;\n\n    } //new\n\n\n} //BalancedBSTNode\n\n    /** A traversal method for iterating a node in the tree */\nenum BalancedBSTTraverseMethod {\n\n    order_pre;\n    order_retain;\n    order_post;\n\n} //enum","/**\r\n  @author Joshua Granick   \r\n  @version 1.2   \r\n */\r\n\r\n\r\npackage luxe.tween.actuators;\r\n\r\n\r\nimport luxe.tween.easing.IEasing;\r\nimport luxe.tween.Actuate;\r\n\r\n\r\n@:keepSub\r\nclass GenericActuator implements IGenericActuator {\r\n\r\n\r\n    public var duration:Float;\r\n    public var id:String;\r\n    public var properties:Dynamic;\r\n    public var target:Dynamic;\r\n\r\n    var _autoVisible:Bool;\r\n    var _delay:Float;\r\n    var _ease:IEasing;\r\n    var _onComplete:Dynamic;\r\n    var _onCompleteParams:Array <Dynamic>;\r\n    var _onRepeat:Dynamic;\r\n    var _onRepeatParams:Array <Dynamic>;\r\n    var _onUpdate:Dynamic;\r\n    var _onUpdateParams:Array <Dynamic>;\r\n    var _reflect:Bool;\r\n    var _repeat:Int;\r\n    var _reverse:Bool;\r\n    var _smartRotation:Bool;\r\n    var _snapping:Bool;\r\n    var special:Bool;\r\n\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        _autoVisible = true;\r\n        _delay = 0;\r\n        _reflect = false;\r\n        _repeat = 0;\r\n        _reverse = false;\r\n        _smartRotation = false;\r\n        _snapping = false;\r\n        special = false;\r\n\r\n        this.target = target;\r\n        this.properties = properties;\r\n        this.duration = duration;\r\n\r\n        _ease = Actuate.defaultEase;\r\n\r\n    }\r\n\r\n\r\n    public function apply ():Void {\r\n\r\n        for (i in Reflect.fields (properties)) {\r\n\r\n            if (#if flash false && #end Reflect.hasField (target, i)) {\r\n\r\n                Reflect.setField (target, i, Reflect.field (properties, i));\r\n\r\n            } else {\r\n\r\n                Reflect.setProperty (target, i, Reflect.field (properties, i));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Sometimes drawing performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values   \r\n      @param   value       Whether autoVisible should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function autoVisible (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _autoVisible = value;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    inline function callMethod (method:Dynamic, params:Array<Dynamic> = null):Dynamic {\r\n\r\n        if (params == null) {\r\n\r\n            params = [];\r\n\r\n        }\r\n\r\n        #if neko\r\n\r\n        var diff = untyped ($nargs)(method) - params.length;\r\n\r\n        if (diff > 0) {\r\n\r\n            params = params.copy ();\r\n\r\n            for (i in 0...diff) {\r\n\r\n                params.push (null);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        #end\r\n\r\n        return Reflect.callMethod (method, method, params);\r\n\r\n    }\r\n\r\n\r\n    function change ():Void {\r\n\r\n        if (_onUpdate != null) {\r\n\r\n            callMethod (_onUpdate, _onUpdateParams);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function complete (sendEvent:Bool = true):Void {\r\n\r\n        if (sendEvent) {\r\n\r\n            change ();\r\n\r\n            if (_onComplete != null) {\r\n\r\n                callMethod (_onComplete, _onCompleteParams);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        Actuate.unload (this);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Increases the delay before a tween is executed   \r\n      @param   duration        The amount of seconds to delay   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function delay (duration:Float):IGenericActuator {\r\n\r\n        _delay = duration;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Sets the easing which is used when running the tween   \r\n      @param   easing      An easing equation, like Elastic.easeIn or Quad.easeOut   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function ease (easing:IEasing):IGenericActuator {\r\n\r\n        _ease = easing;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function move ():Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Specify whether this should be scaled by the global timescale   \r\n      @param   _value      Whether or not it should be   \r\n      @return      The current actuator instance   \r\n     */\r\n\r\n    public var timescaled : Bool = false;\r\n    public function timescale( _value:Bool = true ):IGenericActuator {\r\n        timescaled = _value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n      Defines a function which will be called when the tween finishes   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onComplete (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onComplete = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onCompleteParams = [];\r\n\r\n        } else {\r\n\r\n            _onCompleteParams = parameters;\r\n\r\n        }\r\n\r\n        if (duration == 0) {\r\n\r\n            complete ();\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Defines a function which will be called when the tween repeats   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onRepeat (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onRepeat = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onRepeatParams = [];\r\n\r\n        } else {\r\n\r\n            _onRepeatParams = parameters;\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Defines a function which will be called when the tween updates   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onUpdate (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onUpdate = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onUpdateParams = [];\r\n\r\n        } else {\r\n\r\n            _onUpdateParams = parameters;\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function pause ():Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect   \r\n      @param   value       Whether reflect should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reflect (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _reflect = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Repeats the tween after it finishes   \r\n      @param   times       The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function repeat (?times:Null<Int>):IGenericActuator {\r\n\r\n        if (times == null) {\r\n\r\n            times = -1;\r\n\r\n        }\r\n\r\n        _repeat = times;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function resume ():Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Sets if the tween should be handled in reverse   \r\n      @param   value       Whether the tween should be reversed (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reverse (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _reverse = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Enabling smartRotation can prevent undesired results when tweening rotation values   \r\n      @param   value       Whether smart rotation should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function smartRotation (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _smartRotation = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Snapping causes tween values to be rounded automatically   \r\n      @param   value       Whether tween values should be rounded (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function snapping (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _snapping = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function stop (properties:Dynamic, complete:Bool, sendEvent:Bool):Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n@:noCompletion interface IGenericActuator {\r\n\r\n    /**\r\n      Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values   \r\n      @param   value       Whether autoVisible should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function autoVisible (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Increases the delay before a tween is executed   \r\n      @param   duration        The amount of seconds to delay   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function delay (duration:Float):IGenericActuator;\r\n\r\n    /**\r\n      Sets the easing which is used when running the tween   \r\n      @param   easing      An easing equation, like Elastic.easeIn or Quad.easeOut   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function ease (easing:IEasing):IGenericActuator;\r\n\r\n    /**\r\n      Defines a function which will be called when the tween finishes   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onComplete (handler:Dynamic, ?parameters:Array <Dynamic>):IGenericActuator;\r\n\r\n    /**\r\n      Defines a function which will be called when the tween repeats   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onRepeat (handler:Dynamic, ?parameters:Array <Dynamic>):IGenericActuator;\r\n\r\n    /**\r\n      Defines a function which will be called when the tween updates   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onUpdate (handler:Dynamic, ?parameters:Array <Dynamic>):IGenericActuator;\r\n\r\n    /**\r\n      Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect   \r\n      @param   value       Whether reflect should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reflect (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Repeats the tween after it finishes   \r\n      @param   times       The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function repeat (?times:Null<Int>):IGenericActuator;\r\n\r\n    /**\r\n      Sets if the tween should be handled in reverse   \r\n      @param   value       Whether the tween should be reversed (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reverse (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Specify whether this should be scaled by the global timescale   \r\n      @param   _value      Whether or not it should be   \r\n      @return      The current actuator instance   \r\n     */\r\n\r\n    public function timescale( _value:Bool = true ):IGenericActuator;\r\n    /**\r\n      Enabling smartRotation can prevent undesired results when tweening rotation values   \r\n      @param   value       Whether smart rotation should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function smartRotation (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Snapping causes tween values to be rounded automatically   \r\n      @param   value       Whether tween values should be rounded (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function snapping (?value:Null<Bool>):IGenericActuator;\r\n\r\n}\r\n","package luxe.tween.actuators;\r\n\r\n\r\nimport luxe.tween.actuators.GenericActuator;\r\n\r\n#if neko\r\nimport haxe.Log;\r\nimport haxe.PosInfos;\r\n#end\r\nimport haxe.Timer;\r\n\r\n\r\n\r\n/**\r\n  @author Joshua Granick   \r\n  @version 1.2   \r\n */\r\nclass SimpleActuator extends GenericActuator {\r\n\r\n\r\n    var timeOffset:Float;\r\n\r\n    static var actuators:Array <SimpleActuator> = new Array <SimpleActuator> ();\r\n    static var actuatorsLength:Int = 0;\r\n    static var addedEvent:Bool = false;\r\n\r\n    static var timer:Timer;\r\n\r\n    var active:Bool;\r\n    var cacheVisible:Bool;\r\n    var detailsLength:Int;\r\n    var initialized:Bool;\r\n    var paused:Bool;\r\n    var pauseTime:Float;\r\n    var propertyDetails:Array <PropertyDetails>;\r\n    var sendChange:Bool;\r\n    var setVisible:Bool;\r\n    var startTime:Float;\r\n    var toggleVisible:Bool;\r\n\r\n    var has_timescaled_starttime : Bool = false;\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        active = true;\r\n        propertyDetails = new Array <PropertyDetails> ();\r\n        sendChange = false;\r\n        paused = false;\r\n        cacheVisible = false;\r\n        initialized = false;\r\n        setVisible = false;\r\n        toggleVisible = false;\r\n\r\n        startTime = Luxe.time;\r\n\r\n        super (target, duration, properties);\r\n\r\n        if (!addedEvent) {\r\n\r\n            addedEvent = true;\r\n            Luxe.on(Luxe.Ev.tickstart, on_internal_update);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      @inheritDoc   \r\n     */\r\n    public override function autoVisible (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _autoVisible = value;\r\n\r\n        if (!value) {\r\n\r\n            toggleVisible = false;\r\n\r\n            if (setVisible) {\r\n\r\n                setField (target, \"visible\", cacheVisible);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      @inheritDoc   \r\n     */\r\n    public override function delay (duration:Float):IGenericActuator {\r\n\r\n        _delay = duration;\r\n        timeOffset = startTime + duration;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    inline function getField (target:Dynamic, propertyName:String):Dynamic {\r\n\r\n\r\n        var value = null;\r\n\r\n        if (Reflect.hasField (target, propertyName)) {\r\n\r\n            value = Reflect.field (target, propertyName);\r\n\r\n        } else {\r\n\r\n            value = Reflect.getProperty (target, propertyName);\r\n\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n\r\n    function initialize ():Void {\r\n\r\n        var details:PropertyDetails;\r\n        var start:Float;\r\n\r\n        for (i in Reflect.fields (properties)) {\r\n\r\n            var isField = true;\r\n\r\n            if ( Reflect.hasField (target, i)\r\n                    #if web && (!target.__properties__ || untyped !target.__properties__[\"set_\" + i]) #end\r\n               ) {\r\n\r\n                start = Reflect.field (target, i);\r\n\r\n            } else {\r\n\r\n                isField = false;\r\n                start = Reflect.getProperty (target, i);\r\n\r\n            }\r\n\r\n\r\n            if (Std.is (start, Float)) {\r\n\r\n                details = new PropertyDetails (target, i, start, getField (properties, i) - start, isField);\r\n            propertyDetails.push (details);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        detailsLength = propertyDetails.length;\r\n        initialized = true;\r\n\r\n    }\r\n\r\n\r\n    public override function move ():Void {\r\n\r\n        toggleVisible = (Reflect.hasField (properties, \"alpha\") && Reflect.hasField (properties, \"visible\"));\r\n\r\n        if (toggleVisible && properties.alpha != 0 && !getField (target, \"visible\")) {\r\n\r\n            setVisible = true;\r\n            cacheVisible = getField (target, \"visible\");\r\n            setField (target, \"visible\", true);\r\n\r\n        }\r\n\r\n        timeOffset = startTime;\r\n        actuators.push (this);\r\n        ++actuatorsLength;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      @inheritDoc   \r\n     */\r\n    public override function onUpdate (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onUpdate = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onUpdateParams = [];\r\n\r\n        } else {\r\n\r\n        _onUpdateParams = parameters;\r\n\r\n        }\r\n\r\n        sendChange = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public override function pause ():Void {\r\n\r\n        paused = true;\r\n\r\n        pauseTime = timescaled ? update_timer : current_time;//haxe.Timer.stamp ();\r\n\r\n    }\r\n\r\n\r\n    public override function resume ():Void {\r\n\r\n        if (paused) {\r\n\r\n            paused = false;\r\n\r\n            timeOffset += ( (timescaled ? update_timer : current_time) - pauseTime) / 1000;\r\n            // timeOffset += (haxe.Timer.stamp () - pauseTime) / 1000;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    inline function setField (target:Dynamic, propertyName:String, value:Dynamic):Void {\r\n\r\n        if (Reflect.hasField (target, propertyName)) {\r\n\r\n            Reflect.setField (target, propertyName, value);\r\n\r\n        } else {\r\n\r\n            Reflect.setProperty (target, propertyName, value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    inline function setProperty (details:PropertyDetails, value:Dynamic):Void {\r\n\r\n        if (details.isField) {\r\n\r\n            Reflect.setProperty (details.target, details.propertyName, value);\r\n\r\n        } else {\r\n\r\n            Reflect.setProperty (details.target, details.propertyName, value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public override function stop (properties:Dynamic, complete:Bool, sendEvent:Bool):Void {\r\n\r\n        if (active) {\r\n\r\n            if (properties == null) {\r\n\r\n                active = false;\r\n\r\n                if (complete) {\r\n\r\n                    apply ();\r\n\r\n                }\r\n\r\n                this.complete (sendEvent);\r\n                return;\r\n\r\n            }\r\n\r\n            for (i in Reflect.fields (properties)) {\r\n\r\n                if (Reflect.hasField (this.properties, i)) {\r\n\r\n                    active = false;\r\n\r\n                    if (complete) {\r\n\r\n                        apply ();\r\n\r\n                    }\r\n\r\n                    this.complete (sendEvent);\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function update( currentTime:Float ):Void {\r\n\r\n\r\n        if (!paused) {\r\n\r\n            var details:PropertyDetails;\r\n            var easing:Float;\r\n            var i:Int;\r\n\r\n            var tweenPosition:Float = (currentTime - timeOffset) / duration;\r\n\r\n            if (tweenPosition > 1) {\r\n\r\n                tweenPosition = 1;\r\n\r\n            }\r\n\r\n            if (!initialized) {\r\n\r\n                initialize ();\r\n\r\n            }\r\n\r\n            if (!special) {\r\n\r\n                easing = _ease.calculate (tweenPosition);\r\n\r\n                for (i in 0...detailsLength) {\r\n\r\n                    details = propertyDetails[i];\r\n                    setProperty (details, details.start + (details.change * easing));\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (!_reverse) {\r\n\r\n                    easing = _ease.calculate (tweenPosition);\r\n\r\n                } else {\r\n\r\n                    easing = _ease.calculate (1 - tweenPosition);\r\n\r\n                }\r\n\r\n                var endValue:Float;\r\n\r\n                for (i in 0...detailsLength) {\r\n\r\n                    details = propertyDetails[i];\r\n\r\n                    if (_smartRotation && (details.propertyName == \"rotation\" || details.propertyName == \"rotationX\" || details.propertyName == \"rotationY\" || details.propertyName == \"rotationZ\")) {\r\n\r\n                        var rotation:Float = details.change % 360;\r\n\r\n                        if (rotation > 180) {\r\n\r\n                            rotation -= 360;\r\n\r\n                        } else if (rotation < -180) {\r\n\r\n                            rotation += 360;\r\n\r\n                        }\r\n\r\n                        endValue = details.start + rotation * easing;\r\n\r\n                    } else {\r\n\r\n                        endValue = details.start + (details.change * easing);\r\n\r\n                    }\r\n\r\n                    if (!_snapping) {\r\n\r\n                        setProperty (details, endValue);\r\n\r\n                    } else {\r\n\r\n                        setProperty (details, Math.round (endValue));\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (tweenPosition == 1) {\r\n\r\n                if (_repeat == 0) {\r\n\r\n                    active = false;\r\n\r\n                    if (toggleVisible && getField (target, \"alpha\") == 0) {\r\n\r\n                        setField (target, \"visible\", false);\r\n\r\n                    }\r\n\r\n                    complete (true);\r\n                    return;\r\n\r\n                } else {\r\n\r\n                    if (_onRepeat != null) {\r\n\r\n                        callMethod (_onRepeat, _onRepeatParams);\r\n\r\n                    }\r\n\r\n                    if (_reflect) {\r\n\r\n                        _reverse = !_reverse;\r\n\r\n                    }\r\n\r\n                    startTime = currentTime;\r\n                    timeOffset = startTime + _delay;\r\n\r\n                    if (_repeat > 0) {\r\n\r\n                        _repeat --;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (sendChange) {\r\n\r\n                change ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Event Handlers\r\n\r\n    static var update_timer : Float = 0;\r\n    static var current_time : Float = 0;\r\n    static function on_internal_update(_) : Void {\r\n\r\n        update_timer += Luxe.dt;\r\n        current_time = Luxe.time;\r\n\r\n        var currentTime = current_time;\r\n\r\n        var actuator:SimpleActuator;\r\n\r\n        var j:Int = 0;\r\n        var cleanup = false;\r\n\r\n        for (i in 0...actuatorsLength) {\r\n\r\n            actuator = actuators[j];\r\n\r\n            if (actuator != null && actuator.active) {\r\n\r\n                currentTime = actuator.timescaled ? update_timer : current_time;\r\n\r\n                if(actuator.timescaled && !actuator.has_timescaled_starttime) {\r\n                    actuator.has_timescaled_starttime = true;\r\n                    actuator.startTime = update_timer;\r\n                    actuator.timeOffset = actuator.startTime;\r\n                }\r\n\r\n                if(currentTime > actuator.timeOffset) {\r\n                    actuator.update( currentTime );\r\n                }\r\n\r\n                j++;\r\n\r\n            } else {\r\n\r\n                actuators.splice (j, 1);\r\n                --actuatorsLength;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * @author Joshua Granick\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\n\r\nclass Quad {\r\n\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new QuadEaseIn ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new QuadEaseInOut ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new QuadEaseOut ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass QuadEaseIn implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k * k;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * (t /= d) * t + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass QuadEaseInOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if ((k *= 2) < 1) {\r\n            return 1 / 2 * k * k;\r\n        }\r\n        return -1 / 2 * ((k - 1) * (k - 3) - 1);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if ((t /= d / 2) < 1) {\r\n            return c / 2 * t * t + b;\r\n        }\r\n        return -c / 2 * ((t - 1) * (t - 3) - 1) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass QuadEaseOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return -k * (k - 2);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return -c * (t /= d) * (t - 2) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n  @author Joshua Granick   \r\n */\r\npackage luxe.tween;\r\n\r\n\r\nimport luxe.tween.actuators.GenericActuator;\r\nimport luxe.tween.actuators.MethodActuator;\r\nimport luxe.tween.actuators.MotionPathActuator;\r\nimport luxe.tween.actuators.SimpleActuator;\r\nimport luxe.tween.easing.IEasing;\r\nimport luxe.tween.easing.Quad;\r\n\r\nclass Actuate {\r\n\r\n\r\n    public static var defaultActuator:Class <GenericActuator> = SimpleActuator;\r\n    public static var defaultEase:IEasing = Quad.easeOut;\r\n    static var targetLibraries:ObjectHash <Array <GenericActuator>> = new ObjectHash <Array <GenericActuator>> ();\r\n\r\n\r\n    /**\r\n      Copies properties from one object to another. Conflicting tweens are stopped automatically   \r\n      @example     <code>Actuate.apply (MyClip, { alpha: 1 } );</code>   \r\n      @param   target      The object to copy to   \r\n      @param   properties      The object to copy from   \r\n      @param   customActuator      A custom actuator to use instead of the default (Optional)   \r\n      @return      The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers   \r\n     */\r\n    public static function apply (target:Dynamic, properties:Dynamic, customActuator:Class <GenericActuator> = null):IGenericActuator {\r\n\r\n        stop (target, properties);\r\n\r\n        if (customActuator == null) {\r\n\r\n            customActuator = defaultActuator;\r\n\r\n        }\r\n\r\n        var actuator = Type.createInstance (customActuator, [ target, 0, properties ]);\r\n        actuator.apply ();\r\n\r\n        return actuator;\r\n\r\n    }\r\n\r\n\r\n    static function getLibrary (target:Dynamic, allowCreation:Bool = true):Array <GenericActuator> {\r\n\r\n        if (!targetLibraries.exists (target) && allowCreation) {\r\n\r\n            targetLibraries.set (target, new Array <GenericActuator> ());\r\n\r\n        }\r\n\r\n        return targetLibraries.get (target);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Creates a new MotionPath tween   \r\n      @param   target      The object to tween   \r\n      @param   duration        The length of the tween in seconds   \r\n      @param   properties      An object containing a motion path for each property you wish to tween   \r\n      @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   \r\n      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate   \r\n     */\r\n    public static function motionPath (target:Dynamic, duration:Float, properties:Dynamic, overwrite:Bool = true):IGenericActuator {\r\n\r\n        return tween (target, duration, properties, overwrite, MotionPathActuator);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Pauses tweens for the specified target objects   \r\n      @param   ... targets     The target objects which will have their tweens paused. Passing no value pauses tweens for all objects   \r\n     */\r\n    //public static function pause (... targets:Array):void {\r\n    public static function pause (target:Dynamic):Void {\r\n\r\n        if (Std.is (target, GenericActuator)) {\r\n\r\n            cast (target, GenericActuator).pause ();\r\n\r\n        } else {\r\n\r\n            var library:Array <GenericActuator> = getLibrary (target, false);\r\n\r\n            if (library != null) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.pause ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    }\r\n\r\n\r\n    public static function pauseAll ():Void {\r\n\r\n        for (library in targetLibraries) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.pause ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Resets Actuate by stopping and removing tweens for all objects   \r\n     */\r\n    public static function reset ():Void {\r\n\r\n        for (library in targetLibraries) {\r\n\r\n            var i = library.length - 1;\r\n            while (i >= 0) {\r\n                library[i].stop (null, false, false);\r\n                i--;\r\n            }\r\n\r\n        }\r\n\r\n        targetLibraries = new ObjectHash <Array <GenericActuator>> ();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Resumes paused tweens for the specified target objects   \r\n      @param   ... targets     The target objects which will have their tweens resumed. Passing no value resumes tweens for all objects   \r\n     */\r\n    public static function resume (target:Dynamic):Void {\r\n\r\n        if (Std.is (target, GenericActuator)) {\r\n\r\n            cast (target, GenericActuator).resume ();\r\n\r\n        } else {\r\n\r\n            var library:Array <GenericActuator> = getLibrary (target, false);\r\n\r\n            if (library != null) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.resume ();\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static function resumeAll ():Void {\r\n\r\n        for (library in targetLibraries) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.resume ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Stops all tweens for an individual object   \r\n      @param   target      The target object which will have its tweens stopped, or a generic actuator instance   \r\n      @param   properties      A string, array or object which contains the properties you wish to stop, like \"alpha\", [ \"x\", \"y\" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)   \r\n      @param   complete        If tweens should apply their final target values before stopping. Default is false (Optional)   \r\n      @param   sendEvent   If a complete() event should be dispatched for the specified target. Default is true (Optional)   \r\n     */\r\n    public static function stop (target:Dynamic, properties:Dynamic = null, complete:Bool = false, sendEvent:Bool = true):Void {\r\n\r\n        if (target != null) {\r\n\r\n            if (Std.is (target, GenericActuator)) {\r\n\r\n                cast (target, GenericActuator).stop (null, complete, sendEvent);\r\n\r\n            } else {\r\n\r\n                var library:Array <GenericActuator> = getLibrary (target, false);\r\n\r\n                if (library != null) {\r\n\r\n                if (Std.is (properties, String)) {\r\n\r\n                    var temp = { };\r\n                    Reflect.setField (temp, properties, null);\r\n                    properties = temp;\r\n\r\n                } else if (Std.is (properties, Array)) {\r\n\r\n                    var temp = {};\r\n\r\n                    for (property in cast (properties, Array <Dynamic>)) {\r\n\r\n                        Reflect.setField (temp, property, null);\r\n\r\n                    }\r\n\r\n                    properties = temp;\r\n\r\n                }\r\n\r\n                var i = library.length - 1;\r\n                while (i >= 0) {\r\n                    library[i].stop (properties, complete, sendEvent);\r\n                    i--;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Creates a tween-based timer, which is useful for synchronizing function calls with other animations   \r\n      @example     <code>Actuate.timer (1).onComplete (trace, [ \"Timer is now complete\" ]);</code>   \r\n      @param   duration        The length of the timer in seconds   \r\n      @param   customActuator      A custom actuator to use instead of the default (Optional)   \r\n      @return      The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object   \r\n     */\r\n    public static function timer (duration:Float, customActuator:Class <GenericActuator> = null):IGenericActuator {\r\n\r\n        return tween (new TweenTimer (0), duration, new TweenTimer (1), false, customActuator);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n      Creates a new tween   \r\n      @example     <code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ \"MyClip is now visible\" ]);</code>   \r\n      @param   target      The object to tween   \r\n      @param   duration        The length of the tween in seconds   \r\n      @param   properties      The end values to tween the target to   \r\n      @param   overwrite           Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   \r\n      @param   customActuator      A custom actuator to use instead of the default (Optional)   \r\n      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate   \r\n     */\r\n    public static function tween (target:Dynamic, duration:Float, properties:Dynamic, overwrite:Bool = true, customActuator:Class <GenericActuator> = null):IGenericActuator {\r\n\r\n        if (target != null) {\r\n\r\n            if (duration > 0) {\r\n\r\n                if (customActuator == null) {\r\n\r\n                    customActuator = defaultActuator;\r\n\r\n                }\r\n\r\n                var actuator = Type.createInstance (customActuator, [ target, duration, properties ]);\r\n                var library = getLibrary (actuator.target);\r\n\r\n                if (overwrite) {\r\n\r\n                    var i = library.length - 1;\r\n\r\n                    while (i >= 0) {\r\n                        library[i].stop (actuator.properties, false, false);\r\n                        i--;\r\n                    }\r\n\r\n                    library = getLibrary (actuator.target);\r\n\r\n                }\r\n\r\n                library.push (actuator);\r\n                actuator.move ();\r\n\r\n                /*var actuator:GenericActuator = createInstance (customActuator, target, duration, properties);\r\n\r\n                if (overwrite) {\r\n\r\n                    stop (target, properties, false, false);\r\n\r\n                }\r\n\r\n                var library:Array <GenericActuator> = getLibrary (target);\r\n                library.push (actuator);\r\n\r\n                actuator.move ();*/\r\n\r\n                return actuator;\r\n\r\n            } else {\r\n\r\n                return apply (target, properties, customActuator);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n\r\n    public static function unload (actuator:GenericActuator):Void {\r\n\r\n        var target = actuator.target;\r\n\r\n        if (targetLibraries.exists (target)) {\r\n\r\n            targetLibraries.get (target).remove (actuator);\r\n\r\n            if (targetLibraries.get (target).length == 0) {\r\n\r\n                targetLibraries.remove (target);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Creates a new tween that updates a method rather than setting the properties of an object   \r\n      @example     <code>Actuate.update (trace, 1, [\"Value: \", 0], [\"\", 1]).onComplete (trace, [ \"Finished tracing values between 0 and 1\" ]);</code>   \r\n      @param   target      The method to update   \r\n      @param   duration        The length of the tween in seconds   \r\n      @param   start       The starting parameters of the method call. You may use both numeric and non-numeric values   \r\n      @param   end     The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters   \r\n      @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   \r\n      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate   \r\n     */\r\n    public static function update (target:Dynamic, duration:Float, start:Array <Dynamic> = null, end:Array <Dynamic> = null, overwrite:Bool = true):IGenericActuator {\r\n\r\n        var properties:Dynamic = { start: start, end: end };\r\n\r\n        return tween (target, duration, properties, overwrite, MethodActuator);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@:noCompletion private class TweenTimer {\r\n\r\n\r\n    public var progress:Float;\r\n\r\n\r\n    public function new (progress:Float):Void {\r\n\r\n        this.progress = progress;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ntypedef ObjectHash<T> = haxe.ds.ObjectMap<Dynamic, T>;\r\n","package luxe.tween;\r\n\r\n\r\n/**\r\n  @author Joshua Granick   \r\n  @author Aleš Tomeček (for RotationPath)   \r\n */\r\nclass MotionPath {\r\n\r\n\r\n    public var rotation (get_rotation, null):RotationPath;\r\n    public var x (get_x, null):IComponentPath;\r\n    public var y (get_y, null):IComponentPath;\r\n\r\n    var _rotation:RotationPath;\r\n    var _x:ComponentPath;\r\n    var _y:ComponentPath;\r\n\r\n\r\n    public function new () {\r\n\r\n        _x = new ComponentPath ();\r\n        _y = new ComponentPath ();\r\n\r\n        _rotation = null;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Adds a bezier curve to the current motion path   \r\n      @param   x       The x position of the end point for the curve   \r\n      @param   y       The y position of the end point for the curve   \r\n      @param   controlX        The x position of the control point for the curve, which affects the angle and midpoint   \r\n      @param   controlX        The x position of the control point for the curve, which affects the angle and midpoint   \r\n      @param   strength        The degree of emphasis that should be placed on this segment. If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)   \r\n      @return      The current motion path instance   \r\n     */\r\n    public function bezier (x:Float, y:Float, controlX:Float, controlY:Float, strength:Float = 1):MotionPath {\r\n\r\n        _x.addPath (new BezierPath (x, controlX, strength));\r\n        _y.addPath (new BezierPath (y, controlY, strength));\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Adds a line to the current motion path   \r\n      @param   x       The x position of the end point for the line   \r\n      @param   x       The y position of the end point for the line   \r\n      @param   strength        The degree of emphasis that should be placed on this segment . If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)   \r\n      @return      The current motion path instance   \r\n     */\r\n    public function line (x:Float, y:Float, strength:Float = 1):MotionPath {\r\n\r\n        _x.addPath (new LinearPath (x, strength));\r\n        _y.addPath (new LinearPath (y, strength));\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Get & Set Methods\r\n\r\n\r\n\r\n\r\n    function get_rotation ():RotationPath {\r\n\r\n        if (_rotation == null) {\r\n\r\n            _rotation = new RotationPath (_x, _y);\r\n\r\n        }\r\n\r\n        return _rotation;\r\n\r\n    }\r\n\r\n\r\n    function get_x ():IComponentPath {\r\n\r\n        return _x;\r\n\r\n    }\r\n\r\n\r\n    function get_y ():IComponentPath {\r\n\r\n        return _y;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ComponentPath implements IComponentPath {\r\n\r\n\r\n    public var start:Float;\r\n    public var end (get_end, null):Float;\r\n\r\n    var paths:Array <BezierPath>;\r\n    var totalStrength:Float;\r\n\r\n\r\n    public function new () {\r\n\r\n        paths = new Array <BezierPath> ();\r\n        start = 0;\r\n        totalStrength = 0;\r\n\r\n    }\r\n\r\n\r\n    public function addPath (path:BezierPath):Void {\r\n\r\n        paths.push (path);\r\n        totalStrength += path.strength;\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (paths.length == 1) {\r\n\r\n            return paths[0].calculate (start, k);\r\n\r\n        } else {\r\n\r\n            var ratio = k * totalStrength;\r\n            var lastEnd = start;\r\n\r\n            for (path in paths) {\r\n\r\n                if (ratio > path.strength) {\r\n\r\n                    ratio -= path.strength;\r\n                    lastEnd = path.end;\r\n\r\n                } else {\r\n\r\n                    return path.calculate (lastEnd, ratio / path.strength);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    // Get & Set Methods\r\n\r\n\r\n\r\n\r\n    function get_end ():Float {\r\n\r\n        if (paths.length > 0) {\r\n\r\n            var path = paths[paths.length - 1];\r\n            return path.end;\r\n\r\n        } else {\r\n\r\n            return start;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n@:noCompletion interface IComponentPath {\r\n\r\n\r\n    var end (get_end, null):Float;\r\n    var start:Float;\r\n\r\n    function calculate (k:Float):Float;\r\n\r\n\r\n}\r\n\r\n\r\nclass BezierPath {\r\n\r\n\r\n    public var control:Float;\r\n    public var end:Float;\r\n    public var strength:Float;\r\n\r\n\r\n    public function new (end:Float, control:Float, strength:Float) {\r\n\r\n        this.end = end;\r\n        this.control = control;\r\n        this.strength = strength;\r\n\r\n    }\r\n\r\n\r\n    public function calculate (start:Float, k:Float):Float {\r\n\r\n        return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * control + k * k * end;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass LinearPath extends BezierPath {\r\n\r\n\r\n    public function new (end:Float, strength:Float) {\r\n\r\n        super (end, 0, strength);\r\n\r\n    }\r\n\r\n\r\n    public override function calculate (start:Float, k:Float):Float {\r\n\r\n        return start + k * (end - start);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass RotationPath implements IComponentPath {\r\n\r\n\r\n    public var end (get_end, null):Float;\r\n    public var offset:Float;\r\n    public var start:Float;\r\n\r\n    var step = 0.01;\r\n    var _x:ComponentPath;\r\n    var _y:ComponentPath;\r\n\r\n\r\n    public function new (x:ComponentPath, y:ComponentPath) {\r\n\r\n        _x = x;\r\n        _y = y;\r\n\r\n        offset = 0;\r\n\r\n        start = calculate (0.0);\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        var dX = _x.calculate (k) - _x.calculate (k + step);\r\n        var dY = _y.calculate (k) - _y.calculate (k + step);\r\n\r\n        var angle = Math.atan2(dY, dX) * (180 / Math.PI);\r\n        angle = (angle + offset) % 360;\r\n\r\n        return angle;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Get & Set Methods\r\n\r\n\r\n\r\n\r\n    public function get_end ():Float {\r\n\r\n        return calculate (1.0);\r\n\r\n    }\r\n\r\n\r\n}\r\n","package luxe.tween.actuators;\r\n\r\n\r\n/**\r\n * @author Joshua Granick\r\n * @version 1.2\r\n */\r\nclass MethodActuator extends SimpleActuator {\r\n\r\n\r\n    var currentParameters:Array <Dynamic>;\r\n    var tweenProperties:Dynamic;\r\n\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        currentParameters = new Array <Dynamic> ();\r\n        tweenProperties = { };\r\n\r\n        super (target, duration, properties);\r\n\r\n        if (!Reflect.hasField (properties, \"start\")) {\r\n\r\n            this.properties.start = new Array <Dynamic> ();\r\n\r\n        }\r\n\r\n        if (!Reflect.hasField (properties, \"end\")) {\r\n\r\n            this.properties.end = this.properties.start;\r\n\r\n        }\r\n\r\n        for (i in 0...this.properties.start.length) {\r\n\r\n            currentParameters.push (null);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public override function apply ():Void {\r\n\r\n        callMethod (target, properties.end);\r\n\r\n    }\r\n\r\n\r\n    override function complete (sendEvent:Bool = true):Void {\r\n\r\n        for (i in 0...properties.start.length) {\r\n\r\n            currentParameters[i] = Reflect.field (tweenProperties, \"param\" + i);\r\n\r\n        }\r\n\r\n        callMethod (target, currentParameters);\r\n\r\n        super.complete (sendEvent);\r\n\r\n    }\r\n\r\n\r\n    override function initialize ():Void {\r\n\r\n        var details:PropertyDetails;\r\n        var propertyName:String;\r\n        var start:Dynamic;\r\n\r\n        for (i in 0...properties.start.length) {\r\n\r\n            propertyName = \"param\" + i;\r\n            start = properties.start[i];\r\n\r\n            Reflect.setField (tweenProperties, propertyName, start);\r\n\r\n            if (Std.is (start, Float) || Std.is (start, Int)) {\r\n\r\n                details = new PropertyDetails (tweenProperties, propertyName, start, properties.end[i] - start);\r\n                propertyDetails.push (details);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        detailsLength = propertyDetails.length;\r\n        initialized = true;\r\n\r\n    }\r\n\r\n\r\n    override function update (currentTime:Float):Void {\r\n\r\n        super.update (currentTime);\r\n\r\n        if (active) {\r\n\r\n            for (i in 0...properties.start.length) {\r\n\r\n                currentParameters[i] = Reflect.field (tweenProperties, \"param\" + i);\r\n\r\n            }\r\n\r\n            callMethod (target, currentParameters);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n","package luxe.tween.actuators;\r\n\r\n\r\nimport luxe.tween.MotionPath;\r\n\r\n\r\n/**\r\n * @author Joshua Granick\r\n */\r\nclass MotionPathActuator extends SimpleActuator {\r\n\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        super (target, duration, properties);\r\n\r\n    }\r\n\r\n\r\n    public override function apply ():Void {\r\n\r\n        for (propertyName in Reflect.fields (properties)) {\r\n\r\n            if (#if flash false && #end Reflect.hasField (target, propertyName)) {\r\n\r\n                Reflect.setField (target, propertyName, cast (Reflect.field (properties, propertyName), IComponentPath).end);\r\n\r\n            } else {\r\n\r\n                Reflect.setProperty (target, propertyName, cast (Reflect.field (properties, propertyName), IComponentPath).end);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    override function initialize ():Void {\r\n\r\n        var details:PropertyPathDetails;\r\n        var path:IComponentPath;\r\n\r\n        for (propertyName in Reflect.fields (properties)) {\r\n\r\n            path = cast (Reflect.field (properties, propertyName), IComponentPath);\r\n\r\n            if (path != null) {\r\n\r\n                var isField = true;\r\n\r\n                if (#if flash false && #end Reflect.hasField (target, propertyName)) {\r\n\r\n                    path.start = Reflect.field (target, propertyName);\r\n\r\n                } else {\r\n\r\n                    isField = false;\r\n                    path.start = Reflect.getProperty (target, propertyName);\r\n\r\n                }\r\n\r\n\r\n                details = new PropertyPathDetails (target, propertyName, path, isField);\r\n                propertyDetails.push (details);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        detailsLength = propertyDetails.length;\r\n        initialized = true;\r\n\r\n    }\r\n\r\n\r\n    override function update (currentTime:Float):Void {\r\n\r\n        if (!paused) {\r\n\r\n            var details:PropertyPathDetails;\r\n            var easing:Float;\r\n\r\n            var tweenPosition = (currentTime - timeOffset) / duration;\r\n\r\n            if (tweenPosition > 1) {\r\n\r\n                tweenPosition = 1;\r\n\r\n            }\r\n\r\n            if (!initialized) {\r\n\r\n                initialize ();\r\n\r\n            }\r\n\r\n            if (!special) {\r\n\r\n                easing = _ease.calculate (tweenPosition);\r\n\r\n                for (details in propertyDetails) {\r\n\r\n                    if (details.isField) {\r\n\r\n                        Reflect.setField (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                    } else {\r\n\r\n                        Reflect.setProperty (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (!_reverse) {\r\n\r\n                    easing = _ease.calculate (tweenPosition);\r\n\r\n                } else {\r\n\r\n                    easing = _ease.calculate (1 - tweenPosition);\r\n\r\n                }\r\n\r\n                var endValue:Float;\r\n\r\n                for (details in propertyDetails) {\r\n\r\n                    if (!_snapping) {\r\n\r\n                        if (details.isField) {\r\n\r\n                            Reflect.setField (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                        } else {\r\n\r\n                            Reflect.setProperty (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        if (details.isField) {\r\n\r\n                            Reflect.setField (details.target, details.propertyName, Math.round (cast (details, PropertyPathDetails).path.calculate (easing)));\r\n\r\n                        } else {\r\n\r\n                            Reflect.setProperty (details.target, details.propertyName, Math.round (cast (details, PropertyPathDetails).path.calculate (easing)));\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (tweenPosition == 1) {\r\n\r\n                if (_repeat == 0) {\r\n\r\n                    active = false;\r\n\r\n                    if (toggleVisible && getField (target, \"alpha\") == 0) {\r\n\r\n                        setField (target, \"visible\", false);\r\n\r\n                    }\r\n\r\n                    complete (true);\r\n                    return;\r\n\r\n                } else {\r\n\r\n                    if (_reflect) {\r\n\r\n                        _reverse = !_reverse;\r\n\r\n                    }\r\n\r\n                    startTime = currentTime;\r\n                    timeOffset = startTime + _delay;\r\n\r\n                    if (_repeat > 0) {\r\n\r\n                        _repeat --;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (sendChange) {\r\n\r\n                change ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n#if !haxe3\r\nimport com.eclecticdesignstudio.motion.MotionPath;\r\n#end\r\n\r\n\r\nclass PropertyPathDetails extends PropertyDetails {\r\n\r\n\r\n    public var path:IComponentPath;\r\n\r\n\r\n    public function new (target:Dynamic, propertyName:String, path:IComponentPath, isField:Bool = true) {\r\n\r\n        super (target, propertyName, 0, 0, isField);\r\n\r\n        this.path = path;\r\n\r\n    }\r\n\r\n\r\n}\r\n","﻿/**\r\n * @author Joshua Granick\r\n */\r\n\r\n\r\npackage luxe.tween.actuators;\r\n\r\n\r\nclass PropertyDetails {\r\n    \r\n    \r\n    public var change:Float;\r\n    public var isField:Bool;\r\n    public var propertyName:String;\r\n    public var start:Float;\r\n    public var target:Dynamic;\r\n    \r\n    \r\n    public function new (target:Dynamic, propertyName:String, start:Float, change:Float, isField:Bool = true):Void {\r\n        \r\n        this.target = target;\r\n        this.propertyName = propertyName;\r\n        this.start = start;\r\n        this.change = change;\r\n        this.isField = isField;\r\n        \r\n    }\r\n    \r\n    \r\n}","/**\r\n * @author Joshua Granick\r\n * @author Philippe / http://philippe.elsass.me\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\nclass Linear {\r\n\r\n\r\n    static public var easeNone (get_easeNone, never):IEasing;\r\n\r\n\r\n    static function get_easeNone ():IEasing {\r\n\r\n        return new LinearEaseNone ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass LinearEaseNone implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * t / d + b;\r\n\r\n    }\r\n\r\n\r\n}","package luxe.utils;\n\nimport luxe.Log.*;\nimport luxe.Vector;\nimport phoenix.geometry.Geometry;\n\n\nclass GeometryUtils {\n\n    static inline var two_pi : Float = 6.283185307179586;\n\n    @:allow(luxe.utils.Utils)\n    function new() {}\n\n    public function segments_for_smooth_circle( _radius:Float, _smooth:Float = 5 ) : Int {\n\n        return Std.int(_smooth * Math.sqrt( _radius ));\n\n    } //segments_for_smooth_circle\n\n    public function random_point_in_unit_circle() : Vector {\n\n            //first get a smoothly distributed point in the radius\n        var _r:Float = Math.sqrt( Math.random() );\n            //then rotate that point randomly around 360 degrees,\n            //the -1 + 2 * means that it shifts from -1 + [0..2] = -1,1 range\n            //this centers it around the origin\n        var _t:Float = (-1 + (2 * Math.random())) * two_pi;\n\n            //finally, work out the x and y\n        return new Vector( _r*Math.cos(_t), _r*Math.sin(_t) );\n\n    } //random_point_in_unit_circle\n\n    public function point_in_polygon(_point:Vector, _offset:Vector, _verts:Array<Vector> ) : Bool {\n\n        def(_offset, new Vector());\n\n        var c : Bool = false;\n        var nvert : Int = _verts.length;\n        var j : Int = nvert - 1;\n\n        for(i in 0 ... nvert) {\n\n            if ((( (_verts[i].y+_offset.y) > _point.y) != ((_verts[j].y+_offset.y) > _point.y)) &&\n               (_point.x < ( (_verts[j].x+_offset.x) - (_verts[i].x+_offset.x)) * (_point.y - (_verts[i].y+_offset.y))\n                 / ( (_verts[j].y+_offset.y) - (_verts[i].y+_offset.y)) + (_verts[i].x+_offset.x)) ) {\n                c = !c;\n            }\n\n            j = i;\n        }\n\n        return c;\n\n    } //point_in_polygon\n\n        //Note this function assumes _geometry is a 2D polygon,\n        //and is currently slightly less efficient due to geometry not keeping\n        //a transformed vert cache in it, which will be needed later :todo :\n    public function point_in_geometry( _point:Vector, _geometry:Geometry ) : Bool {\n\n        var c : Bool = false;\n        var nvert : Int = _geometry.vertices.length;\n        var j : Int = nvert - 1;\n\n        for(i in 0 ... nvert) {\n\n            var _vert_i_pos = _geometry.vertices[i].pos.clone().transform( _geometry.transform.world.matrix );\n            var _vert_j_pos = _geometry.vertices[j].pos.clone().transform( _geometry.transform.world.matrix );\n\n            if ((( (_vert_i_pos.y) > _point.y) != ((_vert_j_pos.y) > _point.y)) &&\n               (_point.x < ( (_vert_j_pos.x) - (_vert_i_pos.x)) * (_point.y - (_vert_i_pos.y))\n                 / ( (_vert_j_pos.y) - (_vert_i_pos.y)) + (_vert_i_pos.x)) ) {\n                c = !c;\n            }\n\n            j = i;\n        }\n\n        return c;\n\n    } //point_in_geometry\n\n\n        //plane_point is a point on the plane (anywhere) , can be 0,0,0 for infinite plane.\n    public function intersect_ray_plane( _ray_start:Vector, _ray_dir:Vector, _plane_normal:Vector, _plane_point:Vector ) : Vector {\n\n            //T = [planeNormal•(pointOnPlane - rayOrigin)]/planeNormal•rayDirection;\n            //pointInPlane = rayOrigin + (rayDirection * T);\n\n            //for [ ]\n        var part1 = _plane_normal.dot( Vector.Subtract(_plane_point, _ray_start) );\n        var part2 = _plane_normal.dot( _ray_dir );\n\n        var T = part1 / part2;\n\n        return Vector.Add(_ray_start, Vector.Multiply(_ray_dir, T));\n\n    } //intersect_ray_plane\n\n\n } //GeometryUtils\n","package luxe.utils;\n\n//Portions ported from Three.js http://github.com/mrdoob/three.js\n\nclass Maths {\n\n    function new() {}\n\n    static inline public function fixed( value:Float, precision:Int ) {\n\n        var n = Math.pow( 10, precision );\n        return ( Std.int(value * n) / n );\n\n    } //fixed'\n\n    static inline public function lerp( value:Float, target:Float, t:Float ) {\n\n        t = clamp(t, 0, 1);\n\n        return (value + t * (target - value));\n\n    } //lerp\n\n    static inline public function weighted_avg( value:Float, target:Float, slowness:Float ) {\n\n            //:todo: use an epsilon\n        if( slowness == 0 ) { slowness = 0.00000001; }\n\n        return ((value * (slowness - 1)) + target) / slowness;\n\n    } //weighted_avg\n\n    static inline public function clamp( value:Float, a:Float, b:Float ) : Float {\n        return ( value < a ) ? a : ( ( value > b ) ? b : value );\n    } //clamp\n\n    static inline public function clampi( value:Int, a:Int, b:Int ) : Int {\n        return ( value < a ) ? a : ( ( value > b ) ? b : value );\n    } //clamp\n\n    static inline public function clamp_bottom(value:Float, a:Float) : Float {\n        return value < a ? a : value;\n    } //clamp_bottom\n\n    static inline public function within_range(value:Float, start_range:Float, end_range:Float ) {\n        return value >= start_range && value <= end_range;\n    } //within_range\n\n    public static inline function wrap_angle( degrees:Float, lower:Float, upper:Float ) {\n\n        var _radians:Float = radians(degrees);\n        var _distance:Float = upper - lower;\n        var _times:Float = Math.floor((degrees - lower) / _distance);\n\n        return degrees - (_times * _distance);\n\n    } //wrap_angle\n\n    public static inline function nearest_power_of_two(_value:Int) {\n\n        _value--;\n        _value |= _value >> 1;\n        _value |= _value >> 2;\n        _value |= _value >> 4;\n        _value |= _value >> 8;\n        _value |= _value >> 16;\n        _value++;\n\n        return _value;\n\n    } //nearest_power_of_two\n\n    static inline public function map_linear( value:Float, a1:Float, a2:Float, b1:Float, b2:Float ) : Float {\n        return b1 + ( value - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n    } //map_linear\n\n    static inline public function smoothstep( x:Float, min:Float, max:Float ) : Float {\n\n        if (x <= min) {\n            return 0;\n        }\n\n        if (x >= max) {\n            return 1;\n        }\n\n        x = ( x - min ) / ( max - min );\n\n        return x * x * ( 3 - 2 * x );\n\n    } //smoothstep\n\n    static inline public function smootherstep( x:Float, min:Float, max:Float ) : Float {\n\n        if (x <= min) {\n            return 0;\n        }\n\n        if (x >= max) {\n            return 1;\n        }\n\n        x = ( x - min ) / ( max - min );\n\n        return x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n    } //smootherstep\n\n        /** Return the sign of a number, `1` if >= 0 and `-1` if < 0 */\n    static inline public function sign( x:Float ) : Int {\n        return (x >= 0) ? 1 : -1;\n    } //sign\n\n        /** Return the sign of a number, `0` is returned as `0`, `1` if > `0` and `-1` if < `0` */\n    static inline public function sign0( x:Float ) : Int {\n        return (x < 0) ? -1 : ((x > 0) ? 1 : 0);\n    } //sign\n\n        /** Convert a number from degrees to radians */\n    static inline public function radians( degrees:Float ) : Float {\n        return degrees * _PI_OVER_180;\n    } //radians\n\n        /** Convert a number from radians to degrees */\n    static inline public function degrees( radians:Float ) : Float {\n        return radians * _180_OVER_PI;\n    } //degrees\n\n\n//Internal constants\n\n        /** Used by `degrees()` and `radians()`, use those to convert, unless needed */\n    static inline public var _PI_OVER_180:Float = 3.14159265358979 / 180;\n        /** Used by `degrees()` and `radians()`, use those to convert, unless needed */\n    static inline public var _180_OVER_PI:Float = 180 / 3.14159265358979;\n\n} //Maths\n","package luxe.utils;\n\nimport luxe.Log.*;\n\n//Adapted from code by Grant Skinner,\n//see bottom of file for license information and sources.\n\n/**\n Given an `initial` value for the seed, subsequent generated numbers will be predictable,\n and the `seed` value updated to reflect the current seed which can be used to resume predictability\n from an ongoing set. Uses a Park–Miller pseudo random number generator.\n\n Accessible through Luxe.utils.random.get(), or used as a class in your own code.\n*/\nclass Random {\n\n    public function new( _initial_seed:Float ) {\n\n        #if !luxe_random_allow_negative_seed\n            assert(\n                _initial_seed > 0,\n                'initial negative seed will return negative random results, if this was intentional, define luxe_random_allow_negative_seed'\n            );\n        #end\n\n        seed = initial = _initial_seed;\n    }\n\n//Public API\n\n        /** Returns a float number between [0,1) */\n    public inline function get() : Float {\n        return (seed = (seed * 16807) % 0x7FFFFFFF)/0x7FFFFFFF+0.000000000233;\n    }\n\n        /** Returns a number between [min,max).\n            max is optional, returning a number between [0,min) */\n    public inline function float( min:Float, ?max:Null<Float>=null ) : Float {\n        if(max == null) { max = min; min = 0; }\n        return get() * ( max - min ) + min;\n    }\n\n        /** Return a number between [min, max).\n            max is optional, returning a number between [0,min) */\n    public inline function int( min:Float, ?max:Null<Float>=null ) : Int {\n        if(max == null) { max = min; min=0; }\n        return Math.floor( float(min,max) );\n    }\n\n        /** Returns true or false based on a chance of [0..1] percent.\n            Given 0.5, 50% chance of true, with 0.9, 90% chance of true and so on. */\n    public inline function bool( chance:Float = 0.5 ) : Bool {\n        return (get() < chance);\n    }\n\n        /** Returns 1 or -1 based on a chance of [0..1] percent.\n            Given 0.5, 50% chance of 1, with 0.9, 90% chance of 1 and so on. */\n    public inline function sign( chance:Float = 0.5) : Int {\n        return (get() < chance) ? 1 : -1;\n    }\n\n        /** Returns 1 or 0 based on a chance of [0..1] percent.\n            Given 0.5, 50% chance of 1, with 0.9, 90% chance of 1 and so on. */\n    public inline function bit( chance:Float = 0.5) : Int {\n        return (get() < chance) ? 1 : 0;\n    }\n\n        /** Reset the initial value to that of the current seed. */\n    public inline function reset() {\n        var s = seed;\n        initial = s;\n    }\n\n        /** get the current seed (read only, change via `initial`)*/\n    @:isVar public var seed (default,null): Float;\n        /** get/set the initial base seed */\n    @:isVar public var initial (default,set): Float;\n\n        inline function set_initial( _initial : Float ) {\n            initial = seed = _initial;\n            return initial;\n        }\n\n} //Random\n\n\n//Based on code from http://blog.gskinner.com/archives/2008/01/source_code_see.html\n//With license:\n\n/**\n* Rndm by Grant Skinner. Jan 15, 2008\n* Visit www.gskinner.com/blog for documentation, updates and more free code.\n*\n* Incorporates implementation of the Park Miller (1988) \"minimal standard\" linear\n* congruential pseudo-random number generator by Michael Baczynski, www.polygonal.de.\n* (seed * 16807) % 2147483647\n*\n*\n*\n* Copyright (c) 2008 Grant Skinner\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n","package luxe.utils;\n\nimport luxe.Core;\n\nimport haxe.CallStack;\nimport snow.api.buffers.Uint8Array;\n\nclass Utils {\n\n    public var geometry : luxe.utils.GeometryUtils;\n    public var random : luxe.utils.Random;\n\n    @:noCompletion public var core:Core;\n\n    var _byte_levels : Array<String>;\n\n    @:allow(luxe.Core)\n    function new( _luxe:Core ) {\n\n            //store the reference\n        core = _luxe;\n            //initialise the helpers\n        geometry = new luxe.utils.GeometryUtils();\n        random = new luxe.utils.Random(Math.random()*0xFFFFFF);\n            //initialize the byte text helpers\n        _byte_levels = ['bytes', 'Kb', 'MB', 'GB', 'TB'];\n\n    }  //new\n\n        /** Return a formatted string from a PosInfos */\n    public function pos_info( pos:haxe.PosInfos ) {\n        return '${pos.fileName}:${pos.lineNumber}:(${pos.className}:${pos.methodName})';\n    }\n\n        /** Generate a short, unique string ID for use (\"base62\"). */\n    #if release inline #end\n    public function uniqueid(?val:Null<Int>) : String {\n\n        // http://www.anotherchris.net/csharp/friendly-unique-id-generation-part-2/#base62\n\n        if(val == null) {\n            #if neko val = Std.random(0x3FFFFFFF);\n            #else val = Std.random(0x7fffffff);\n            #end\n        }\n\n        function to_char(value:Int) : String {\n            if (value > 9) {\n                var ascii = (65 + (value - 10));\n                if (ascii > 90) { ascii += 6; }\n                return String.fromCharCode(ascii);\n            } else return Std.string(value).charAt(0);\n        } //to_char\n\n        var r = Std.int(val % 62);\n        var q = Std.int(val / 62);\n        if (q > 0) return uniqueid(q) + to_char(r);\n        else return Std.string(to_char(r));\n\n    } //uniqueid\n\n        /** Generates and returns a uniqueid converted to a hashed integer for convenience.\n            Uses the default `uniqueid` and `hash` implementation detail. */\n    #if release inline #end\n    public function uniquehash() : UInt {\n        return hash( uniqueid() );\n    } //uniquehash\n\n        /** Generates a integer hash from a string using the default algorithm (murmur3) */\n    #if release inline #end\n    public function hash( string:String ) : UInt {\n        return hashdjb2( string );\n    } //hash\n\n        /** Generates an integer hash of a string using the djb2 algorithm */\n    #if release inline #end\n    public function hashdjb2(string:String) : UInt {\n\n            //http://www.cse.yorku.ca/~oz/hash.html\n        var _hash : Int = 5381;\n        for(i in 0...string.length) {\n            _hash = ((_hash << 5) + _hash) + string.charCodeAt(i);\n        }\n\n        return _hash;\n\n    } //hashdjb2\n\n    #if release inline #end\n    public function uniqueid2() : String {\n\n        return haxe.crypto.Md5.encode(Std.string(Luxe.time*Math.random()));\n\n    } //uniqueid2\n\n    #if release inline #end\n    public function stacktrace( ?_depth:Int = 100 ) : String {\n\n        var result = '\\n';\n\n            var stack = haxe.CallStack.callStack();\n\n            stack.shift();\n            stack.reverse();\n\n            var total : Int = Std.int(Math.min(stack.length, _depth));\n\n            for(i in 0 ... total) {\n                var stackitem : haxe.CallStack.StackItem = stack[i];\n\n                switch(stack[i]) {\n                    case FilePos(s, file, line):\n                        switch(s) {\n                            case Method(classname, method):\n                                result += '   at $file:$line: $classname.$method';\n                            case _:\n                        }\n                    case _:{}\n                }\n\n                if(i != total - 1) {\n                    result += '\\n';\n                }\n            } //total\n\n        return result;\n\n    } //stacktrace\n\n    #if release inline #end\n    public function path_is_relative(_path:String) {\n\n        return _path.charAt(0) != \"#\"\n            && _path.charAt(0) != \"/\"\n            && _path.indexOf(\":\\\\\") == -1\n            && _path.indexOf(\":/\") == -1\n\n          && ( _path.indexOf(\"//\") == -1\n            || _path.indexOf(\"//\") > _path.indexOf(\"#\")\n            || _path.indexOf(\"//\") > _path.indexOf(\"?\"));\n\n    } //path_is_relative\n\n    public function find_assets_sequence( _name:String, _ext:String='.png', _start:String='1' ) : Array<String> {\n\n        var _final : Array<String> = [];\n\n            var _sequence_type = '';\n            var _pattern_regex : EReg = null;\n\n                //these are not using string interpolation to prevent confusing the regex\n            var _type0 = _name + _start + _ext;\n            var _type0_re : EReg = new EReg('('+_name+')(\\\\d\\\\b)', 'gi');\n            var _type1 = _name + '_' + _start + _ext;\n            var _type1_re : EReg  = new EReg('('+_name+')(_\\\\d\\\\b)', 'gi');\n            var _type2 = _name + '-' + _start + _ext;\n            var _type2_re : EReg  = new EReg('('+_name+')(-\\\\d\\\\b)', 'gi');\n\n                //check name0 ->\n            if(Luxe.resources.has(_type0)) {\n                _sequence_type = _type0;\n                _pattern_regex = _type0_re;\n            } else if(Luxe.resources.has(_type1)) {\n                _sequence_type = _type1;\n                _pattern_regex = _type1_re;\n            } else if(Luxe.resources.has(_type2)) {\n                _sequence_type = _type2;\n                _pattern_regex = _type2_re;\n            } else {\n                trace(\"Sequence requested from \" + _name + \" but no assets found like `\" + _type0 + \"` or `\" + _type1 + \"` or `\" + _type2 + \"`\" );\n            }\n\n        if(_sequence_type != '') {\n            for(_asset in core.resources.cache) {\n                //check for continuations of the sequence, matching by pattern rather than just brute force, so we can catch missing frames etc\n                if(_pattern_regex.match(_asset.id)) {\n                    _final.push( _asset.id );\n                }\n            }\n\n            _final.sort(function(a:String,b:String):Int { if(a == b) return 0; if(a < b) return -1; return 1; });\n        }\n\n        return _final;\n\n    } //find_assets_sequence\n\n        /** :WIP: Wrap text using a knuth plass algorithm for column breaking. */\n    #if release inline #end\n    public function text_wrap_column_knuth_plass( _string:String, _column:Int=80) {\n\n        var result = [];\n\n        inline function splitwords(_str:String, _into:Array<String>) {\n            var s = _str;\n            var rgx = new EReg('(\\\\b[^\\\\s]+\\\\b)', 'gm');\n            while (rgx.match(s)) {\n                _into.push(rgx.matched(1));\n                s = rgx.matchedRight();\n            }\n                //no matches?\n            if(_into.length == 0) _into.push(_str);\n            return _into;\n        } //splitwords\n\n        inline function findlen(_lens:Array<Int>, _start:Int, _end:Int) {\n            var total = 0;\n            for(i in (_start-1) ... _end) total += _lens[i];\n            return total + (_end - _start + 1);\n        } //findlen\n\n        inline function getmin(_from:Map<Int,Int>):Int {\n            var min = 0x3FFFFFFF;\n            for(item in _from.keys()) if(item < min) min = item;\n            return min;\n        } //getmin\n\n        var words = [];\n        var lengths = [];\n        var badness = [ 0 => 0 ];\n        var extra = new Map<Int,Int>();\n\n        splitwords(_string, words);\n        words.map(function(w){ lengths.push(w.length); });\n\n        var n = words.length;\n\n        for( i in 1 ... n+1 ) {\n\n            var sums = new Map<Int,Int>();\n            var k = i;\n\n            while( findlen(lengths, k, i) <= _column && k > 0) {\n                var a = (_column - findlen(lengths, k, i));\n                sums[ Std.int(Math.pow(a,3) + badness[k - 1]) ] = k;\n                k -= 1;\n            }\n\n            var mn = getmin(sums);\n            badness[i] = mn;\n            extra[i] = sums[mn];\n\n        } //each word\n\n        var line = 1;\n        while(n > 1) {\n            result.unshift( words.slice(extra[n]-1, n).join(' ') );\n            n = extra[n] - 1;\n            line += 1;\n        }\n\n        if(result.length == 0) result.push(_string);\n        return result;\n\n    } //text_wrap_column_knuth\n\n        /** Soft wrap a string by maximum character count. brk default:'\\n', col default:80 */\n    #if release inline #end\n    public function text_wrap_column( _text:String, _brk:String='\\n', _column:Int=80) {\n\n            //based on http://blog.macromates.com/2006/wrapping-text-with-regular-expressions/\n            //take note that the ${_column} is string interpolation, not part of the regex.\n            //i.e (.{1,80})( +|$)\\n?|(.{80})\n\n        var result = new EReg('(.{1,${_column}})(?: +|$)\\n?|(.{${_column}})','gimu').replace(_text, '$1$2${_brk}');\n\n        return StringTools.rtrim(result);\n\n    } //text_wrap_column\n\n    #if release inline #end\n    public function bytes_to_string( bytes:Int, ?precision:Int=3 ) : String {\n\n        var index : Int = Math.floor( Math.log(bytes) / Math.log(1024) );\n        var _byte_value = ( bytes / Math.pow(1024, index));\n            _byte_value = luxe.utils.Maths.fixed(_byte_value, precision);\n\n        return _byte_value + ' ' + _byte_levels[index];\n\n    } //bytes_to_string\n\n    #if release inline #end\n    public function array_to_bytes(array:Array<Int>):haxe.io.Bytes {\n\n        if (array == null) return null;\n        var bytes:haxe.io.Bytes = haxe.io.Bytes.alloc(array.length);\n        for (n in 0 ... bytes.length) bytes.set(n, array[n]);\n\n        return bytes;\n\n    } //array_to_bytes\n\n        /** Multiply the pixels in the array by their alpha value.\n            This means the format of the pixels is RGBA, with values  [0...255].\n            Modifies the given array and returns it.  */\n    public function premultiply_alpha( _pixels:Uint8Array ) : Uint8Array {\n\n        var count = _pixels.length;\n        var read = _pixels[0];\n        var index = 0;\n\n        while(index < count) {\n\n            var r = _pixels[index+0];\n            var g = _pixels[index+1];\n            var b = _pixels[index+2];\n            var a = _pixels[index+3] / 255.0;\n\n            _pixels[index+0] = Std.int(r*a);\n            _pixels[index+1] = Std.int(g*a);\n            _pixels[index+2] = Std.int(b*a);\n\n            index += 4;\n\n        } // while\n\n        return _pixels;\n\n    } //premultiply_alpha\n\n        /** Multiply the pixels in the array by their alpha value.\n            This means the format of the pixels is RGBA with values  [0...1].\n            Modifies the given array and returns it.  */\n    public function premultiply_alpha_normalized( _pixels:Uint8Array ) : Uint8Array {\n\n        var count = _pixels.length;\n        var read = _pixels[0];\n        var index = 0;\n\n        while(index < count) {\n\n            var r = _pixels[index+0];\n            var g = _pixels[index+1];\n            var b = _pixels[index+2];\n            var a = _pixels[index+3];\n\n            _pixels[index+0] = r * a;\n            _pixels[index+1] = g * a;\n            _pixels[index+2] = b * a;\n\n            index += 4;\n\n        } // while\n\n        return _pixels;\n\n    } //premultiply_alpha_normalized\n\n\n} //Utils\n","package luxe.utils.unifill;\n\nabstract CodePoint(Int) {\n\n    @:op(A + B)\n    public static inline function cons(a : CodePoint, b : String) : String\n        return a.toString() + b;\n\n    @:op(A + B)\n    public static inline function snoc(a : String, b : CodePoint) : String\n        return a + b.toString();\n\n    @:op(A + B)\n    public static inline function addInt(a : CodePoint, b : Int) : CodePoint\n        return cast (a.toInt() + b);\n\n    @:op(A - B)\n    public static inline function sub(a : CodePoint, b : CodePoint) : Int\n        return (a.toInt()) - (b.toInt());\n\n    @:op(A - B)\n    public static inline function subInt(a : CodePoint, b : Int) : CodePoint\n        return cast (a.toInt() - b);\n\n    @:op(A == B) public static function eq(a : CodePoint, b : CodePoint) : Bool;\n    @:op(A != B) public static function ne(a : CodePoint, b : CodePoint) : Bool;\n    @:op(A < B) public static function lt(a : CodePoint, b : CodePoint) : Bool;\n    @:op(A <= B) public static function lte(a : CodePoint, b : CodePoint) : Bool;\n    @:op(A > B) public static function gt(a : CodePoint, b : CodePoint) : Bool;\n    @:op(A >= B) public static function gte(a : CodePoint, b : CodePoint) : Bool;\n\n    public inline function new(code : Int) : Void {\n        if (!Unicode.isScalar(code)) {\n            throw Exception.InvalidCodePoint(code);\n        }\n        this = code;\n    }\n\n    public inline function toString() : String\n        return InternalEncoding.fromCodePoint(this);\n\n    public inline function toInt() : Int\n        return this;\n}\n","package luxe.utils.unifill;\n\nclass CodePointIter {\n\n\tvar string : String;\n\tvar index : Int;\n\tvar endIndex : Int;\n\n    public inline function new(s : String) {\n\t\tstring = s;\n\t\tindex = 0;\n\t\tendIndex = s.length;\n    }\n\n    public inline function hasNext() : Bool {\n\t\treturn index < endIndex;\n    }\n\n\tvar i = 0; // FIXME: blocked by HaxeFoundation/haxe#4353\n    public inline function next() : CodePoint {\n\t\ti = index;\n\t\tindex += InternalEncoding.codePointWidthAt(string, index);\n\t\treturn cast InternalEncoding.codePointAt(string, i);\n    }\n\n}\n","package luxe.utils.unifill;\n\n#if (neko || php || cpp || macro)\n    private typedef UtfX = Utf8;\n#elseif python\n    private typedef UtfX = Utf32;\n#else\n    private typedef UtfX = Utf16;\n#end\n\n/**\n   InternalEncoding provides primitive API to deal with strings across\n   all platforms. You should consider adopting Unifill before this.\n **/\nclass InternalEncoding {\n\n    /**\n       Returns Encoding strings on the platform are encoded in.\n     **/\n    public static var internalEncoding(get, never) : String;\n\n    static inline function get_internalEncoding() : String\n    #if (neko || php || cpp || macro)\n        return \"UTF-8\";\n    #elseif python\n        return \"UTF-32\";\n    #else\n        return \"UTF-16\";\n    #end\n\n    /**\n       Returns the UTF-8/16/32 code unit at position `index` of\n       String `s`.\n     **/\n    public static inline function codeUnitAt(s : String, index : Int) : Int {\n\t\treturn UtfX.fromString(s).codeUnitAt(index);\n    }\n\n    /**\n       Returns the Unicode code point at position `index` of\n       String `s`.\n     **/\n    public static inline function codePointAt(s : String, index : Int) : Int {\n\t\treturn UtfX.fromString(s).codePointAt(index);\n    }\n\n    /**\n       Returns the character as a String at position `index` of\n       String `s`.\n     **/\n    public static inline function charAt(s : String, index : Int) : String {\n\t\treturn UtfX.fromString(s).charAt(index).toString();\n    }\n\n    /**\n       Returns the number of Unicode code points from `beginIndex`\n       to `endIndex` in String `s`.\n     **/\n    public static inline function codePointCount(s : String, beginIndex : Int, endIndex : Int) : Int {\n\t\treturn UtfX.fromString(s).codePointCount(beginIndex, endIndex);\n    }\n\n    /**\n       Returns the number of units of the code point at position\n       `index` of String `s`.\n     **/\n    public static inline function codePointWidthAt(s : String, index : Int) : Int {\n\t\treturn UtfX.fromString(s).codePointWidthAt(index);\n    }\n\n    /**\n       Returns the number of units of the code point before\n       position `index` of String `s`.\n     **/\n    public static inline function codePointWidthBefore(s : String, index : Int) : Int {\n\t\treturn UtfX.fromString(s).codePointWidthBefore(index);\n    }\n\n    /**\n       Returns the index within String `s` that is offset from\n       position `index` by `codePointOffset` code points.\n     **/\n    public static inline function offsetByCodePoints(s : String, index : Int, codePointOffset : Int) : Int {\n\t\treturn UtfX.fromString(s).offsetByCodePoints(index, codePointOffset);\n    }\n\n    /**\n       Returns the index within String `s` that is offset from\n       position `index` by `codePointOffset` code points counting\n       backward.\n     **/\n    public static inline function backwardOffsetByCodePoints(s : String, index : Int, codePointOffset : Int) : Int {\n\t\treturn UtfX.fromString(s).offsetByCodePoints(index, -codePointOffset);\n    }\n\n    /**\n       Converts the code point `code` to a character as String.\n     **/\n    public static inline function fromCodePoint(codePoint : Int) : String {\n        return UtfX.fromCodePoint(codePoint).toString();\n    }\n\n    /**\n       Converts `codePoints` to a String.\n     **/\n    public static inline function fromCodePoints(codePoints : Iterable<Int>) : String {\n        return UtfX.fromCodePoints(codePoints).toString();\n    }\n\n    /**\n       Validates String `s`.\n\n       If the code unit sequence of `s` is invalid,\n       `Exception.InvalidCodeUnitSequence` is throwed.\n     **/\n    public static inline function validate(s : String) : Void {\n\t\tUtfX.fromString(s).validate();\n    }\n\n    /**\n       Returns if String `s` is valid.\n     **/\n    public static function isValidString(s : String) : Bool {\n        try {\n            validate(s);\n            return true;\n        } catch (e : Exception) {\n            switch (e) {\n            case InvalidCodeUnitSequence(index):\n                return false;\n            default:\n                throw e;\n            }\n        }\n    }\n\n}\n","package luxe.utils.unifill;\n\nabstract Utf16 (StringU16) {\n\n    /**\n       Converts the code point `code` to a character as a Utf16 string.\n    **/\n    public static inline function fromCodePoint(codePoint : Int) : Utf16 {\n\t\tif (codePoint <= 0xFFFF) {\n\t\t\treturn new Utf16(StringU16.fromCodeUnit(codePoint));\n\t\t} else {\n\t\t\treturn new Utf16(StringU16.fromTwoCodeUnits(\n\t\t\t\tUnicode.encodeHighSurrogate(codePoint),\n\t\t\t\tUnicode.encodeLowSurrogate(codePoint)));\n\t\t}\n    }\n\n    /**\n       Converts `codePoints` to a Utf16 string.\n    **/\n    public static inline function fromCodePoints(codePoints : Iterable<Int>) : Utf16 {\n        var buf = new StringU16Buffer();\n        for (c in codePoints) {\n            Utf16Impl.encode_code_point(function (x) buf.addUnit(x), c);\n        }\n        return new Utf16(buf.getStringU16());\n    }\n\n    public static inline function fromString(s : String) : Utf16 {\n        return new Utf16(StringU16.fromString(s));\n    }\n\n    public static inline function fromArray(a : Array<Int>) : Utf16 {\n        return new Utf16(StringU16.fromArray(a));\n    }\n\n    public var length(get, never) : Int;\n\n    /**\n       Returns the UTF-16 code unit at position `index` of `this`.\n    **/\n    public inline function codeUnitAt(index : Int) : Int {\n\t\treturn this.codeUnitAt(index);\n    }\n\n    /**\n       Returns the Unicode code point at position `index` of\n       `this`.\n    **/\n    public function codePointAt(index : Int) : Int {\n\t\treturn Utf16Impl.decode_code_point(length, function(i) return codeUnitAt(i), index);\n    }\n\n    /**\n       Returns the character as a String at position `index` of\n       `this`.\n    **/\n    public inline function charAt(index : Int) : Utf16 {\n\t\treturn new Utf16(this.substr(index, codePointWidthAt(index)));\n    }\n\n    /**\n       Returns the number of Unicode code points from `beginIndex`\n       to `endIndex` in `this`.\n    **/\n    public function codePointCount(beginIndex : Int, endIndex : Int) : Int {\n        var index = beginIndex;\n        var i = 0;\n        while (index < endIndex) {\n            index += codePointWidthAt(index);\n            ++i;\n        }\n        return i;\n    }\n\n    /**\n       Returns the number of units of the code point at position\n       `index` of `this`.\n    **/\n    public inline function codePointWidthAt(index : Int) : Int {\n        var c = codeUnitAt(index);\n        return Utf16Impl.code_point_width(c);\n    }\n\n    /**\n       Returns the number of units of the code point before\n       position `index` of `this`.\n    **/\n    public inline function codePointWidthBefore(index : Int) : Int {\n\t\treturn Utf16Impl.find_prev_code_point(function(i) return codeUnitAt(i), index);\n    }\n\n    /**\n       Returns the index within `this` that is offset from\n       position `index` by `codePointOffset` code points.\n    **/\n    public inline function offsetByCodePoints(index : Int, codePointOffset : Int) : Int {\n        return if (codePointOffset >= 0) {\n            forward_offset_by_code_points(index, codePointOffset);\n        } else {\n            backward_offset_by_code_points(index, -codePointOffset);\n        }\n    }\n\n    /**\n       Returns `len` code units of `this`, starting at position pos.\n    **/\n    public inline function substr(index : Int, ?len : Int) : Utf16 {\n\t\treturn new Utf16(this.substr(index, len));\n    }\n\n    /**\n       Validates `this` Utf16 string.\n\n       If the code unit sequence of `this` is invalid,\n       `Exception.InvalidCodeUnitSequence` is throwed.\n    **/\n    public function validate() : Void {\n\t\tvar len = this.length;\n\t\tvar accessor = function(i) return codeUnitAt(i);\n        var i = 0;\n        while  (i < len) {\n            Utf16Impl.decode_code_point(len, accessor, i);\n            i += codePointWidthAt(i);\n        }\n    }\n\n    public inline function toString() : String {\n\t\treturn this.toString();\n    }\n\n    public inline function toArray() : Array<Int> {\n\t\treturn this.toArray();\n    }\n\n    inline function new(s : StringU16) {\n\t\tthis = s;\n    }\n\n    inline function get_length() : Int {\n\t\treturn this.length;\n    }\n\n    inline function forward_offset_by_code_points(index : Int, codePointOffset : Int) : Int {\n\t\tvar len = this.length;\n        var i = 0;\n        while (i < codePointOffset && index < len) {\n            index += codePointWidthAt(index);\n            ++i;\n        }\n        return index;\n    }\n\n    inline function backward_offset_by_code_points(index : Int, codePointOffset : Int) : Int {\n        var count = 0;\n        while (count < codePointOffset && 0 < index) {\n            index -= codePointWidthBefore(index);\n            ++count;\n        }\n        return index;\n    }\n\n}\n\nprivate class Utf16Impl {\n\n    public static inline function code_point_width(c : Int) : Int {\n        return (!Unicode.isHighSurrogate(c)) ? 1 : 2;\n    }\n\n    public static inline function find_prev_code_point(accessor : Int -> Int, index : Int) : Int {\n        var c = accessor(index - 1);\n        return (!Unicode.isLowSurrogate(c)) ? 1 : 2;\n    }\n\n    public static function encode_code_point(addUnit : Int -> Void, codePoint : Int) : Void {\n        if (codePoint <= 0xFFFF) {\n            addUnit(codePoint);\n        } else {\n            addUnit(Unicode.encodeHighSurrogate(codePoint));\n            addUnit(Unicode.encodeLowSurrogate(codePoint));\n        }\n    }\n\n    public static function decode_code_point(len : Int, accessor : Int -> Int, index : Int) : Int {\n        if (index < 0 || len <= index)\n            throw Exception.InvalidCodeUnitSequence(index);\n        var hi = accessor(index);\n        if (Unicode.isHighSurrogate(hi)) {\n            if (index + 1 < 0 || len <= index + 1) {\n                throw Exception.InvalidCodeUnitSequence(index);\n            }\n            var lo = accessor(index + 1);\n            if (Unicode.isLowSurrogate(lo)) {\n                return Unicode.decodeSurrogate(hi, lo);\n            } else {\n                throw Exception.InvalidCodeUnitSequence(index);\n            }\n        } else if (Unicode.isLowSurrogate(hi)) {\n            throw Exception.InvalidCodeUnitSequence(index);\n        } else {\n            return hi;\n        }\n    }\n\n}\n\n#if !(neko || php || cpp || macro || python)\n\nprivate abstract StringU16Buffer(StringBuf) {\n\n    public inline function new() {\n        this = new StringBuf();\n    }\n\n    public inline function addUnit(unit : Int) : Void {\n        this.addChar(unit);\n    }\n\n    public inline function getStringU16() : StringU16 {\n        return StringU16.fromString(this.toString());\n    }\n\n}\n\nprivate abstract StringU16(String) {\n\n    public static inline function fromString(s : String) : StringU16 {\n        return new StringU16(s);\n\t}\n\n\tpublic static inline function fromCodeUnit(u : Int) : StringU16 {\n\t\treturn new StringU16(String.fromCharCode(u));\n    }\n\n\tpublic static inline function fromTwoCodeUnits(u0 : Int, u1 : Int) : StringU16 {\n\t\treturn new StringU16(String.fromCharCode(u0) + String.fromCharCode(u1));\n\t}\n\n    public static inline function ofArray(a : Array<Int>) : StringU16 {\n        return fromArray(a);\n    }\n\n    public static inline function fromArray(a : Array<Int>) : StringU16 {\n        var buf = new StringBuf();\n        for (x in a) {\n            buf.addChar(x);\n        }\n        return new StringU16(buf.toString());\n    }\n\n    public var length(get, never) : Int;\n\n    public #if !flash inline #end function codeUnitAt(index : Int) : Int {\n        return StringTools.fastCodeAt(this, index);\n    }\n\n    public inline function substr(index : Int, ?len : Int) : StringU16 {\n        return new StringU16(this.substr(index, len));\n    }\n\n    public inline function toString() : String {\n        return this;\n    }\n\n    public inline function toArray() : Array<Int> {\n        var i = 0;\n        var len = this.length;\n        return [while (i < len) StringTools.fastCodeAt(this, i++)];\n    }\n\n    inline function new(s : String) {\n        this = s;\n    }\n\n    inline function get_length() : Int {\n        return this.length;\n    }\n\n}\n\n#else\n\nprivate abstract StringU16Buffer(Array<Int>) {\n\n    public inline function new() {\n        this = [];\n    }\n\n    public inline function addUnit(unit : Int) : Void {\n        this.push(unit);\n    }\n\n    public inline function getStringU16() : StringU16 {\n        return StringU16.ofArray(this);\n    }\n\n}\n\nprivate abstract StringU16(Array<Int>) {\n\n    public static function fromString(s : String) : StringU16 {\n        var buf = new StringU16Buffer();\n        var addUnit = function (x) buf.addUnit(x);\n        for (i in new InternalEncodingIter(s, 0, s.length)) {\n            var c = InternalEncoding.codePointAt(s, i);\n            Utf16Impl.encode_code_point(addUnit, c);\n        }\n        return buf.getStringU16();\n\t}\n\n\tpublic static inline function fromCodeUnit(u : Int) : StringU16 {\n\t\treturn new StringU16([u]);\n\t}\n\n\tpublic static inline function fromTwoCodeUnits(u0 : Int, u1 : Int) : StringU16 {\n\t\treturn new StringU16([u0, u1]);\n    }\n\n    public static inline function ofArray(a : Array<Int>) : StringU16 {\n        return new StringU16(a);\n    }\n\n    public static inline function fromArray(a : Array<Int>) : StringU16 {\n        return new StringU16(a.copy());\n    }\n\n    public var length(get, never) : Int;\n\n    public inline function codeUnitAt(index : Int) : Int {\n        return this[index];\n    }\n\n    public inline function substr(index : Int, ?len : Int) : StringU16 {\n        if (index < 0) {\n            index += this.length;\n            if (index < 0) index = 0;\n        }\n        var j = (len != null) ? index + len : this.length;\n        var a = this.slice(index, j);\n        return new StringU16(a);\n    }\n\n    public function toString() : String {\n        var buf = new StringBuf();\n        var i = 0;\n        var len = this.length;\n        var cua = function (i) return this[i];\n        while (i < len) {\n            var u = Utf16Impl.decode_code_point(len, cua, i);\n            buf.add(InternalEncoding.fromCodePoint(u));\n            i += Utf16Impl.code_point_width(codeUnitAt(i));\n        }\n        return buf.toString();\n    }\n\n    public inline function toArray() : Array<Int> {\n        return this.copy();\n    }\n\n    inline function new(a : Array<Int>) {\n        this = a;\n    }\n\n    inline function get_length() : Int {\n        return this.length;\n    }\n\n}\n\n#end\n","package luxe.utils.unifill;\n\nclass InternalEncodingIter {\n\n    public var string : String;\n    public var index : Int;\n    public var endIndex : Int;\n\n    public inline function new(s : String, beginIndex : Int, endIndex : Int) {\n        string = s;\n        this.index = beginIndex;\n        this.endIndex = endIndex;\n    }\n\n    public inline function hasNext() : Bool {\n        return index < endIndex;\n    }\n\n\tvar i = 0; // FIXME: blocked by HaxeFoundation/haxe#4353\n    public inline function next() : Int {\n\t\ti = index;\n        index += InternalEncoding.codePointWidthAt(string, index);\n        return i;\n    }\n\n}\n","package luxe.utils.unifill;\n\nclass Unicode {\n\n    public static inline var minCodePoint : Int = 0x0000;\n    public static inline var maxCodePoint : Int = 0x10FFFF;\n    public static inline var minHighSurrogate : Int = 0xD800;\n    public static inline var maxHighSurrogate : Int = 0xDBFF;\n    public static inline var minLowSurrogate : Int = 0xDC00;\n    public static inline var maxLowSurrogate : Int = 0xDFFF;\n\n    public static inline function decodeSurrogate(hi : Int, lo : Int) : Int\n        return (hi - 0xD7C0 << 10) | (lo & 0x3FF);\n\n    public static inline function encodeHighSurrogate(c : Int) : Int\n        return (c >> 10) + 0xD7C0;\n\n    public static inline function encodeLowSurrogate(c : Int) : Int\n        return (c & 0x3FF) | 0xDC00;\n\n    public static inline function isScalar(code : Int) : Bool {\n        return minCodePoint <= code && code <= maxCodePoint && !isHighSurrogate(code) && !isLowSurrogate(code);\n    }\n\n    public static inline function isHighSurrogate(code : Int) : Bool {\n        return minHighSurrogate <= code && code <= maxHighSurrogate;\n    }\n\n    public static inline function isLowSurrogate(code : Int) : Bool {\n        return minLowSurrogate <= code && code <= maxLowSurrogate;\n    }\n\n}\n","package luxe.utils.unifill;\n\n/**\n   Unifill provides Unicode-code-point-wise methods on Strings. It is\n   ideally used with 'using Unifill' and then acts as an extension to\n   the String class.\n **/\nclass Unifill {\n\n    /**\n       Returns the number of Unicode code points of String `s`.\n     **/\n    public static inline function uLength(s : String) : Int\n        return InternalEncoding.codePointCount(s, 0, s.length);\n\n    /**\n       Returns the character at position `index` by code points of String `s`.\n     **/\n    public static inline function uCharAt(s : String, index : Int) : String {\n    #if (neko || php || cpp)\n        return InternalEncoding.fromCodePoint(haxe.Utf8.charCodeAt(s, index));\n    #else\n        var i = InternalEncoding.offsetByCodePoints(s, 0, index);\n        return InternalEncoding.charAt(s, i);\n    #end\n    }\n\n    /**\n       Returns the code point as Int at position `index` by code points of String `s`.\n     **/\n    public static inline function uCharCodeAt(s : String, index : Int) : Int {\n    #if (neko || php || cpp || macro)\n        return cast haxe.Utf8.charCodeAt(s, index);\n    #else\n        var i = InternalEncoding.offsetByCodePoints(s, 0, index);\n        return InternalEncoding.codePointAt(s, i);\n    #end\n    }\n\n    /**\n       Returns the code point at position `index` by code points of String `s`.\n     **/\n    public static inline function uCodePointAt(s : String, index : Int) : CodePoint {\n        return cast uCharCodeAt(s, index);\n    }\n\n    /**\n       Returns the position of the leftmost occurence of the str within String `s`.\n\n       `startIndex` is counted by code points.\n     **/\n    public static inline function uIndexOf(s : String, value : String, startIndex : Int = 0) : Int {\n        var index = s.indexOf(value, InternalEncoding.offsetByCodePoints(s, 0, startIndex));\n        return if (index >= 0) InternalEncoding.codePointCount(s, 0, index) else -1;\n    }\n\n    /**\n       Returns the position of the rightmost occurence of the str within String `s`.\n\n       `startIndex` is counted by code points.\n     **/\n    public static inline function uLastIndexOf(s : String, value : String, ?startIndex) : Int {\n        if (startIndex == null)\n            startIndex = s.length - 1;\n        var index = s.lastIndexOf(value, InternalEncoding.offsetByCodePoints(s, 0, startIndex));\n        return if (index >= 0) InternalEncoding.codePointCount(s, 0, index) else -1;\n    }\n\n    /**\n       Splits String `s` at each occurence of `delimiter`.\n     **/\n    public static function uSplit(s : String, delimiter : String) : Array<String> {\n        return if (delimiter.length == 0) {\n            [for (i in new InternalEncodingIter(s, 0, s.length)) InternalEncoding.charAt(s, i)];\n        } else {\n            s.split(delimiter);\n        }\n    }\n\n    /**\n       Returns `length` characters of String `s`, starting at position `startIndex`.\n\n       `startIndex` and `length` are counted by code points.\n     **/\n    public static inline function uSubstr(s : String, startIndex : Int, ?length : Int) : String {\n        var si = InternalEncoding.offsetByCodePoints(s,\n            if (startIndex >= 0) 0 else s.length,\n            startIndex);\n        var ei = if (length == null) s.length\n            else if (length < 0) si\n            else InternalEncoding.offsetByCodePoints(s, si, length);\n        return s.substring(si, ei);\n    }\n\n    /**\n       Returns the part of String `s` from `startIndex` to `endIndex`.\n\n       `startIndex` and `endIndex` are counted by code points.\n     **/\n    public static inline function uSubstring(s : String, startIndex : Int, ?endIndex : Int) : String {\n        var si = if (startIndex < 0) 0\n            else InternalEncoding.offsetByCodePoints(s, 0, startIndex);\n        var ei = if (endIndex == null) s.length\n            else if (endIndex < 0) 0\n            else InternalEncoding.offsetByCodePoints(s, 0, endIndex);\n        return s.substring(si, ei);\n    }\n\n    /**\n       Returns an iterator of the code points of String `s`.\n     **/\n\tpublic static inline function uIterator(s : String) : CodePointIter {\n        return new CodePointIter(s);\n    }\n\n    /**\n       Compares String `a` and `b`.\n     **/\n    public static function uCompare(a : String, b : String) : Int {\n        var aiter = new InternalEncodingIter(a, 0, a.length);\n        var biter = new InternalEncodingIter(b, 0, b.length);\n        while (aiter.hasNext() && biter.hasNext()) {\n            var acode = InternalEncoding.codePointAt(a, aiter.next());\n            var bcode = InternalEncoding.codePointAt(b, biter.next());\n            if (acode < bcode)\n                return -1;\n            if (acode > bcode)\n                return 1;\n        }\n        if (biter.hasNext())\n            return -1;\n        if (aiter.hasNext())\n            return 1;\n        return 0;\n    }\n\n    /**\n       Converts `codePoints` to string.\n     **/\n    public static inline function uToString(codePoints : Iterable<CodePoint>) : String\n        return InternalEncoding.fromCodePoints(cast codePoints);\n\n}\n","package phoenix;\n\nimport phoenix.Rectangle;\nimport phoenix.Texture;\nimport phoenix.Batcher;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.GeometryState;\n\nimport snow.modules.opengl.GL;\n\nclass BatchState {\n\n    public var batcher : Batcher;\n    public var geom_state :  GeometryState;\n    public var last_geom_state : GeometryState;\n\n    public var last_texture_id : Dynamic;\n    public var last_shader_id : Dynamic;\n    public var is_clipping : Bool;\n    public var clip_rect : Rectangle;\n    public var last_clip_rect : Rectangle;\n\n    public var log : Bool = false;\n\n    public function new(_r:Batcher){\n        batcher = _r;\n        geom_state = new GeometryState();\n        last_geom_state = new GeometryState();\n    }\n\n    public inline function active_shader() : phoenix.Shader {\n        if(geom_state.shader != null) {\n            return geom_state.shader;\n        } else {\n            if(geom_state.texture != null) {\n                return batcher.renderer.shaders.textured.shader;\n            } else {\n                return batcher.renderer.shaders.plain.shader;\n            }\n        }\n    }\n\n    public inline function activate(batcher:Batcher) {\n\n            // Handle texture state changes\n        if(geom_state.dirty) {\n\n            if(geom_state.texture != null) {\n\n                if(last_texture_id != geom_state.texture.id){\n\n                    last_texture_id = geom_state.texture.id;\n                    if(geom_state.texture.texture != null) {\n                        geom_state.texture.bind();\n                    }\n\n                } //texture id change\n\n            } else {\n\n                Luxe.renderer.state.bindTexture2D(null);\n                last_texture_id = null;\n\n            } //geom_state.texture !=null\n\n            var _shader = batcher.shader == null ? geom_state.shader : batcher.shader;\n\n            if(_shader == null) {\n\n                    //fallback onto the default shaders\n                if(geom_state.texture != null) {\n                    _shader = batcher.renderer.shaders.textured.shader;\n                } else {\n                    _shader = batcher.renderer.shaders.plain.shader;\n                }\n\n            } //_shader\n\n            if(last_shader_id != _shader.program) {\n                batcher.apply_default_uniforms(_shader);\n                _shader.activate();\n                last_shader_id = _shader.program;\n            }\n\n\n        } //state.dirty\n\n            // excluded from isDirty because rect can change every time without the state being dirty */\n            // Handle clipping state changes\n\n            if(geom_state.clip){\n\n                if( !is_clipping ){\n                    GL.enable( GL.SCISSOR_TEST );\n                    is_clipping = true;\n                }\n\n                    // update scissor test if needed.\n                if(clip_rect != null) {\n\n                    if(!clip_rect.equal(last_clip_rect)) {\n\n                            // translate from top-left coords to bottom-left cords\n                        var _y = batcher.view.viewport.h - (clip_rect.y + clip_rect.h);\n                            // set the scissor rect\n                        GL.scissor( Std.int(clip_rect.x) , Std.int(_y), Std.int(clip_rect.w), Std.int(clip_rect.h) );\n\n                    } //last clip_rect\n\n                } //clip_rect\n\n            } else { //clip is false\n\n                if( is_clipping ){\n                    GL.disable( GL.SCISSOR_TEST );\n                    is_clipping = false;\n                }\n\n            } //clip is off\n\n            // finally, mark the state as clean.\n        geom_state.clean();\n    }\n\n    public function deactivate(batcher:Batcher) {\n\n        if(last_texture_id != null) {\n                //undo any textures we bound last\n            Luxe.renderer.state.bindTexture2D(null);\n        }\n\n            //for now we just disable any shader because other\n            //batchers are not aware of us yet.\n        Luxe.renderer.state.useProgram(null);\n\n        // remove clipping\n        if( is_clipping ) GL.disable( GL.SCISSOR_TEST );\n    }\n\n    public function update( geom:Geometry ) : Bool {\n\n        geom_state.clone_onto( last_geom_state );\n        geom_state.update(geom.state);\n\n        if(geom_state.clip){\n            last_clip_rect = clip_rect;\n            clip_rect = geom.clip_rect;\n        }\n\n        return geom_state.dirty || (last_clip_rect != clip_rect);\n    }\n\n\n//noisy debug stuff\n    public function str() {\n\n        if(!log) return;\n\n        trace('\\t+ BATCHSTATE LAST ');\n            trace(\"\\t\\tdepth - \"+last_geom_state.depth);\n            trace(\"\\t\\ttexture - \" + (( last_geom_state.texture == null) ? 'null' :  last_geom_state.texture.id ));\n            if(last_geom_state.texture != null) {\n                trace(\"\\t\\t\\t \" + last_geom_state.texture.texture);\n            }\n            trace(\"\\t\\tshader - \" + (( last_geom_state.shader == null) ? 'null' :  last_geom_state.shader.id ));\n            trace(\"\\t\\tprimitive_type - \"+last_geom_state.primitive_type);\n            trace(\"\\t\\tclip - \"+last_geom_state.clip);\n        trace('\\t- BATCHSTATE LAST');\n\n        trace('\\t+ BATCHSTATE STATE');\n            trace(\"\\t\\tdepth - \"+geom_state.depth);\n            trace(\"\\t\\ttexture - \" + (( geom_state.texture == null) ? 'null' :  geom_state.texture.id ));\n            if(geom_state.texture != null) {\n                trace(\"\\t\\t\\t \" + geom_state.texture.texture);\n            }\n            trace(\"\\t\\tshader - \" + (( geom_state.shader == null) ? 'null' :  geom_state.shader.id ));\n            trace(\"\\t\\tprimitive_type - \"+geom_state.primitive_type);\n            trace(\"\\t\\tclip - \"+geom_state.clip);\n        trace('\\t- BATCHSTATE STATE');\n    }\n\n}","package phoenix;\n\nimport phoenix.Renderer;\nimport phoenix.geometry.Geometry;\nimport phoenix.Matrix;\nimport phoenix.Shader;\n\nimport snow.modules.opengl.GL;\nimport snow.api.buffers.Float32Array;\n\nimport luxe.Log.*;\nimport luxe.Emitter;\nimport luxe.structural.BalancedBST;\n\n@:allow(phoenix.Renderer)\nclass Batcher {\n\n    public var id : String;\n    public var enabled : Bool = true;\n    @:isVar public var layer (default, set) : Int = 0;\n\n    public var geometry : BalancedBST< GeometryKey, Geometry >;\n    public var emitter : Emitter<BatcherEventType>;\n    public var tree_changed : Bool = false;\n\n    public var pos_list    : Float32Array;\n    public var tcoord_list : Float32Array;\n    public var color_list  : Float32Array;\n    public var normal_list : Float32Array;\n\n    public var max_verts : Int = 0;\n    public var max_floats : Int = 0;\n    public var vert_count : Int = 0;\n\n    public var renderer : Renderer;\n    public var view : Camera;\n        // An explicit shader override (instead of per geometry).\n        // Useful for things like wireframe/depth/normal/debug/shadow rendering passes.\n    public var shader : Shader;\n\n    public var draw_calls : Int = 0;\n    public var dynamic_batched_count : Int = 0;\n    public var static_batched_count : Int = 0;\n    public var visible_count : Int = 0;\n\n    public var log : Bool = false;\n    public var name : String = '';\n\n        //This is a failsafe against identical layer values\n        //being sorted differently by target etc. Not reset intentionally.\n    static var _sequence_key : Int = -1;\n    var sequence : Int = -1;\n\n    var pos_floats    : Int = 0;\n    var tcoord_floats  : Int = 0;\n    var color_floats   : Int = 0;\n    var normal_floats  : Int = 0;\n\n    public function new( _r : Renderer, ?_name:String = '' ) {\n\n        id = Luxe.utils.uniqueid();\n        renderer = _r;\n        sequence = ++_sequence_key;\n\n        geometry = new BalancedBST<GeometryKey,Geometry>( geometry_compare );\n        emitter = new Emitter();\n\n        max_verts = Std.int(Math.pow(2, 16));\n            //4 floats per vert, i.e x y z w\n        max_floats = max_verts * 4;\n\n            //these are expecting elements in floats, so each vert etc has 4 floats\n        pos_list = new Float32Array( max_floats );\n        tcoord_list = new Float32Array( max_floats );\n        color_list = new Float32Array( max_floats );\n\n        #if phoenix_use_normals\n            normal_list = new Float32Array( max_floats );\n        #end\n\n            //The default view so we see stuff\n        view = renderer.camera;\n\n        GL.enableVertexAttribArray( vert_attribute );\n        GL.enableVertexAttribArray( tcoord_attribute );\n        GL.enableVertexAttribArray( color_attribute );\n\n        #if phoenix_use_normals\n            GL.enableVertexAttribArray( normal_attribute );\n        #end\n\n            //A default name\n        if(_name.length == 0) {\n            name = Luxe.utils.uniqueid();\n        } else {\n            name = _name;\n        }\n\n        _dropped = [];\n\n    } //new\n\n//Public function\n    inline\n    public function on(event:BatcherEventType, handler:Batcher->Void) {\n        emitter.on(event, handler);\n    }\n\n    inline\n    public function off(event:BatcherEventType, handler:Batcher->Void) {\n        return emitter.off(event, handler);\n    }\n\n    public function add( _geom:Geometry, _force_add:Bool = false ) {\n\n        // _debug(\"adding geom to batcher \" + _geom.id + \" at \" + _geom.depth);\n        // _debug(\"\\t list before: \");\n            // list_geometry();\n\n        if( geometry.find(_geom.key) == null || _force_add ) {\n\n                //Only add if not already there\n            if( !Lambda.has(_geom.batchers, this) ) {\n                _geom.batchers.push(this);\n            }\n\n                //Insert into our list\n            geometry.insert( _geom.key, _geom );\n\n                //Make sure it is flagged\n            _geom.added = true;\n\n                //and this local test flag\n            tree_changed = true;\n\n            // _debug(\"\\t list after: \");\n            //     list_geometry();\n\n        } else {\n            // trace(\"Warning : Attempting to add geometry to the same batcher twice. \" + _geom);\n        }\n\n    } //add\n\n        /** Drop all the geometry within this batcher, emptying it out. */\n    public function empty( _drop:Bool=true ) {\n\n        if(_drop) {\n            for(geom in geometry) {\n                geom.drop(true);\n                geom = null;\n            }\n        } else {\n            for(geom in geometry) {\n                geometry.remove(geom.key);\n            }\n        }\n\n    } //empty\n\n        /** Destroy this batcher.\n            Drops all the geometry within it (empty). \n            Removes itself from the renderer.\n            Does not change the `view`.\n            Do not use the batcher instance after calling this. */\n    public function destroy( _drop:Bool=true ) {\n\n        empty(_drop);\n\n        renderer.remove_batch(this);\n\n        emitter = null;\n        geometry = null;\n        pos_list = null;\n        tcoord_list = null;\n        color_list = null;\n        normal_list = null;\n\n        max_verts = 0;\n        max_floats = 0;\n        vert_count = 0;\n\n        renderer = null;\n        view = null;\n\n    } //destroy\n\n    public function remove( _geom:Geometry, ?_remove_batcher_from_geometry:Bool = true ) {\n\n        if(_remove_batcher_from_geometry) {\n            _geom.batchers.remove(this);\n            if(_geom.batchers.length == 0) {\n                _geom.added = false;\n            }\n        } //_remove_batcher_from_geometry\n\n        var countbefore = geometry.size();\n\n        geometry.remove( _geom.key );\n\n        var countafter = geometry.size();\n\n        if(countbefore == countafter) {\n            //:todo: this fail state should never happen but it comes up on web rarely\n            // throw(\"GEOMETRY NOT REMOVED \" + _geom.key);\n        }\n\n        tree_changed = true;\n\n    } //remove\n\n        //Run the batcher over the current list of geometry\n        //and submit it to the graphics card for drawing\n    var state : phoenix.BatchState;\n    var _dropped:Array<Geometry>;\n\n    public function batch( persist_immediate : Bool = false ) {\n\n        //reset render stats before we start\n        dynamic_batched_count = 0;\n        static_batched_count = 0;\n        visible_count = 0;\n\n        pos_floats = 0;\n        tcoord_floats = 0;\n        color_floats = 0;\n        normal_floats = 0;\n\n            //The current batch state values\n        state = new phoenix.BatchState(this);\n            //The current geometry in the set\n        var geom : Geometry = null;\n\n            //For each in the list\n        for(_geom in geometry) {\n\n                //grab the next geometry\n            geom = _geom;\n\n                //If it's valid to be drawn\n            if( geom != null && !geom.dropped ) {\n\n                    //If the update will cause a state change, submit the vertices accumulated\n                if( state.update(geom) ) {\n\n                        //if there are verts in the last batch, it needs to be submitted\n                        //The function returns early if there are none \n                    submit_current_vertex_list( state.last_geom_state.primitive_type );\n\n                } // state.update(geom)\n\n                    // Now activate state changes (if any)\n                state.activate(this);\n\n                if(geom.visible) {\n                    \n                    //try\n                    visible_count++;\n\n                        //Buffer based geometry doesn't get submitted here yet\n                    if(geom.buffer_based) {\n                        visible_count--;\n                        continue;\n                    }\n\n                        //Static batched geometry gets sent on it's own\n                    if(geom.locked) {\n\n                            //static submissions split the batch for sorting reasons\n                        submit_current_vertex_list( state.last_geom_state.primitive_type );\n\n                        submit_static_geometry( geom );\n                        vert_count += geom.vertices.length;\n                    }\n\n                        // Do not accumulate for tri strips, line strips, line loops, triangle fans, quad strips, or polygons\n                    else if( geom.primitive_type == PrimitiveType.line_strip ||\n                             geom.primitive_type == PrimitiveType.line_loop ||\n                             geom.primitive_type == PrimitiveType.triangle_strip ||\n                             geom.primitive_type == PrimitiveType.triangle_fan ) {\n\n                                // doing this with the same list is fine because the primitive type causes a batch break anyways.\n                                // Send it on, this will also clear the list for the next geom so it doesn't acccumlate as usual.\n                            geometry_batch(geom);\n                                //submit the geometry\n                            submit_current_vertex_list( geom.primitive_type );\n                                //increase counts\n                            vert_count += geom.vertices.length;\n\n                    } //if it's unbatchable\n\n                        // Accumulate, this is standard geometry\n                    else {\n\n                        geometry_batch( geom );\n\n                            //increase counts\n                        dynamic_batched_count++;\n                        vert_count += geom.vertices.length;\n\n                    } //standard geometry\n\n\n                        // If the geometry is immediate get rid of it (unless the flag to keep immediate geometry)\n                        // in the list was specified...i.e for drawing multiple passes etc\n                    if( !persist_immediate && geom.immediate ) {\n                        //set the flag to avoid redrawing at all\n                        geom.dropped = true;\n                        //store to be dropped after iteration\n                        _dropped.push(geom);\n                    } //!persist_immediate && geom.immediate\n\n                } //geom.visible\n\n            }\n\n        } //geom list\n\n            //If there is anything left in the vertex buffer, submit it.\n        if(pos_floats > 0 && geom != null) {\n\n                //Make sure the state matches this geometry\n            state.update(geom);\n                //And the state is active for renderering\n            state.activate( this );\n                //submit the list for rendering\n            submit_current_vertex_list( state.last_geom_state.primitive_type );\n\n        }\n\n            //disable any states set by the batches\n        state.deactivate(this);\n            //cleanup\n        state = null;\n\n        prune();\n\n    } //batch\n\n    inline function prune() {\n\n        //clean up dropped geometry\n        if(_dropped.length > 0) {\n            for(geom in _dropped) {\n                geom.drop();\n                geom = null;\n            }\n            _dropped = null;\n            _dropped = [];\n        }\n\n    } //prune\n\n    inline\n    public function draw( ?persist_immediate:Bool = false ) {\n\n        //Reset the draw count\n        draw_calls = 0;\n        vert_count = 0;\n\n        emitter.emit(BatcherEventType.prerender, this);\n\n        update_view();\n\n        batch( persist_immediate );\n\n        emitter.emit(BatcherEventType.postrender, this);\n\n    } //draw\n\n    @:noCompletion\n    inline\n    function update_view() {\n\n            //update camera if it changes anything\n        view.process();\n\n        // trace('batcher $name / view ${view.name} / viewport:${view.viewport}');\n\n            //Set the viewport to the view\n        renderer.state.viewport( view.viewport.x, view.viewport.y, view.viewport.w, view.viewport.h );\n\n    } //update_view\n\n    @:noCompletion\n    inline \n    public function apply_default_uniforms(_shader:Shader) {\n        if(!_shader.no_default_uniforms) {\n            _shader.set_matrix4_arr('projectionMatrix', view.proj_arr);\n            _shader.set_matrix4_arr('modelViewMatrix', view.view_inverse_arr);\n        }\n    }\n\n    //:todo: this is not part of the api\n    //       and should be considered volatile/WIP\n    @:noCompletion\n    inline\n    public function submit_geometry( _geom:Geometry, ?_shader:Shader ) {\n\n        assert(_geom.buffer_based, 'Only buffer based geometry can be submitted directly');\n\n        if(!_geom.visible) return;\n        if(_shader == null) _shader = _geom.shader;\n        if(shader != null) _shader = shader;\n\n        _shader.activate();\n        apply_default_uniforms(_shader);\n        _geom.uniforms.apply();\n\n        var _length = _geom.vertices.length;\n        var _length4 = _length * 4;\n        var _updated = _geom.update_buffers();\n\n        if(_updated) {\n            _geom.bind_and_upload();\n        } else {\n            _geom.bind();\n        }\n\n        _geom.draw();\n\n        var _stats = renderer.stats;\n        _stats.geometry_count++;\n        _stats.visible_count++;\n        _stats.draw_calls++;\n        _stats.vert_count += _length;\n\n    } //submit_geometry\n\n    // inline\n    @:noCompletion\n    public function submit_buffers(type:PrimitiveType, _pos:Float32Array, _tcoords:Float32Array, _colors:Float32Array, _normals:Float32Array) {\n\n        var pb = GL.createBuffer();\n        var cb = GL.createBuffer();\n        var tb = GL.createBuffer();\n        #if phoenix_use_normals\n        var nb = GL.createBuffer();\n        #end\n\n        GL.bindBuffer(GL.ARRAY_BUFFER, pb );\n        GL.vertexAttribPointer( vert_attribute, 4, GL.FLOAT, false, 0, 0 );\n        GL.bufferData( GL.ARRAY_BUFFER , _pos, GL.STREAM_DRAW);\n\n        GL.bindBuffer(GL.ARRAY_BUFFER, tb );\n        GL.vertexAttribPointer( tcoord_attribute, 4, GL.FLOAT, false, 0, 0 );\n        GL.bufferData( GL.ARRAY_BUFFER , _tcoords, GL.STREAM_DRAW);\n\n        GL.bindBuffer(GL.ARRAY_BUFFER, cb );\n        GL.vertexAttribPointer( color_attribute, 4, GL.FLOAT, false, 0, 0 );\n        GL.bufferData( GL.ARRAY_BUFFER , _colors, GL.STREAM_DRAW);\n\n        #if phoenix_use_normals\n        GL.bindBuffer(GL.ARRAY_BUFFER, nb );\n        GL.bufferData( GL.ARRAY_BUFFER , _normals, GL.STREAM_DRAW);\n        GL.vertexAttribPointer( normal_attribute, 4, GL.FLOAT, false, 0, 0 );\n        #end\n\n            //Draw\n        GL.drawArrays( type, 0, Std.int(_pos.length/4) );\n\n        GL.deleteBuffer(pb);\n        GL.deleteBuffer(cb);\n        GL.deleteBuffer(tb);\n        #if phoenix_use_normals\n        GL.deleteBuffer(nb);\n        #end\n\n        draw_calls++;\n\n    } //submit_buffers\n\n    @:noCompletion\n    inline\n    public function submit_static_geometry( geom:Geometry ) {\n\n        var _length = geom.vertices.length;\n\n        if( _length == 0 ) {\n            return;\n        }\n\n        var _updated = geom.update_buffers();\n\n        if(_updated) {\n            geom.bind_and_upload();\n        } else {\n            geom.bind();\n        }\n\n        geom.draw();\n\n            //Disable attributes\n        static_batched_count++;\n        draw_calls++;\n\n            //clear the geometry flags\n        geom.dirty = false;\n\n    } //submit_static_geometry\n\n    @:noCompletion\n    inline\n    public function submit_current_vertex_list( type : PrimitiveType ) {\n\n        if( pos_floats == 0 ) {\n            return;\n        }\n\n        if( pos_floats > max_floats ) {\n            throw \"uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).\";\n        }\n\n        var _pos = new Float32Array(pos_list.buffer, 0, pos_floats);\n        var _tcoords = new Float32Array(tcoord_list.buffer, 0, tcoord_floats);\n        var _colors = new Float32Array(color_list.buffer, 0, color_floats);\n        var _normals:Float32Array = null;\n\n        #if phoenix_use_normals\n            _normals = new Float32Array(normal_list.buffer, 0, normal_floats);\n        #end\n\n        submit_buffers(type, _pos, _tcoords, _colors, _normals);\n\n        _pos = null;\n        _tcoords = null;\n        _colors = null;\n        _normals = null;\n\n        pos_floats = 0;\n        tcoord_floats = 0;\n        color_floats = 0;\n        normal_floats = 0;\n\n    } //submit_current_vertex_list\n\n//Batch related helper functions\n\n    inline\n    function geometry_batch( geom:Geometry ) {\n\n            //pos_floats is in element count (so/4)\n        var _count_after = geom.vertices.length+(pos_floats/4);\n\n            //submit the current batch if we exceed the max buffer size\n        if(_count_after > max_verts) {\n            submit_current_vertex_list( geom.primitive_type );\n        }\n\n        geom.batch(\n            pos_floats,     tcoord_floats,  color_floats,   normal_floats,\n            pos_list,       tcoord_list,    color_list,     normal_list\n        );\n\n        var _length = geom.vertices.length * 4;\n\n        pos_floats       += _length;\n        tcoord_floats    += _length;\n        color_floats     += _length;\n        normal_floats    += _length;\n\n    } //geometry_batch\n\n\n//Internal\n\n    inline function set_layer( _layer:Int ) : Int {\n\n            //set the value\n        layer = _layer;\n            //re-sort the list\n        renderer.batchers.sort( renderer.sort_batchers );\n\n            //return value\n        return layer;\n\n    } //set_layer\n\n    inline\n    function toString() {\n        return \"Batcher(\" + name + \")\";\n    }\n\n        //this sorts the batchers in a list by layer\n    inline\n    function compare(other:Batcher) {\n\n        if(layer == other.layer) return 0;\n        if(layer < other.layer) return -1;\n\n        return 1;\n\n    } //compare\n\n    function compare_rule_to_string(r:Int) : String {\n        return switch(r) {\n\n            case 0: \"same\";\n            case 1: \"depth <\";\n            case 2: \"depth >\";\n\n            case 3: \"shader <\";\n            case 4: \"shader >\";\n            case 5: \"shader s._ >\";\n            case 6: \"shader _.s <\";\n\n            case 7: \"texture <\";\n            case 8: \"texture >\";\n            case 9: \"texture t._ >\";\n            case 10: \"texture _.t <\";\n\n            case 11: \"primitive <\";\n            case 12: \"primitive >\";\n            case 13: \"unclipped\";\n            case 14: \"clipped\";\n            case 15: \"timestamp <\";\n            case 16: \"timestamp >\";\n            case 17: \"timestamp ==\";\n            case 18: \"sequence <\";\n            case 19: \"sequence >\";\n            case 20: \"fallback\";\n            default: \"unknown\";\n\n        }\n\n    } //compare_rule_to_string\n\n    function compare_rule( a:GeometryKey, b:GeometryKey ) : Int {\n\n        if(a.uuid == b.uuid)\n            { return 0; }\n\n            //sort by depth first\n        if( a.depth < b.depth )\n            { return 1; }\n        if( a.depth > b.depth )\n            { return 2; }\n\n            //by this point, depth are equal\n            //so sort by shader, then texture, then primitive type\n\n        if(a.shader != null && b.shader != null) {\n\n                //sort shaders id's by gl id\n            if(a.shader.id < b.shader.id)\n                { return 3; }\n            if(a.shader.id > b.shader.id)\n                { return 4; }\n\n        } else {\n            if(a.shader != null && b.shader == null) {\n                return 5;\n            } else\n            if(a.shader == null && b.shader != null) {\n                return 6;\n            }\n        }\n\n        if(a.texture != null && b.texture != null) {\n\n                //sort textures id's by gl id\n            if(a.texture.id < b.texture.id)\n                { return 7; }\n            if(a.texture.id > b.texture.id)\n                { return 8; }\n\n        } else {\n            if(a.texture != null && b.texture == null) {\n                return 9;\n            } else\n            if(a.texture == null && b.texture != null) {\n                return 10;\n            }\n\n        }\n\n            //same texture and shader, so primitive type\n        var a_primitive_index : Int = a.primitive_type;\n        var b_primitive_index : Int = b.primitive_type;\n\n        if( a_primitive_index < b_primitive_index )\n            { return 11; }\n        if( a_primitive_index > b_primitive_index )\n            { return 12; }\n\n            //if not the same clipping, we want clipped geometry after, and not clipped before\n        if(a.clip != b.clip) {\n\n            if(a.clip == false && b.clip == true) {\n                return 13;\n            } else\n\n            if(a.clip == true && b.clip == false) {\n                return 14;\n            }\n\n        } //clippin\n\n            //if all else is indistinguishable,\n            //make sure older geometry is before\n\n        if( a.timestamp < b.timestamp )\n            { return 15; }\n        if( a.timestamp > b.timestamp )\n            { return 16; }\n        if( a.timestamp == b.timestamp )\n            { return 17; }\n\n        if( a.sequence < b.sequence )\n            { return 18; }\n        if( a.sequence > b.sequence )\n            { return 19; }\n\n            //otherwise push down the list because wtf\n        return 20;\n\n    } //compare_rule\n\n    function geometry_compare( a:GeometryKey, b:GeometryKey ) : Int {\n\n            //rules :\n                //depth\n                //shader\n                //texture\n                //primitive type\n                //clipping\n                //age\n                //sequence/fallback\n\n            //check equality\n        if(a.uuid == b.uuid)\n            { return 0; }\n\n            //sort by depth first\n        if( a.depth < b.depth )\n            { return -1; }\n        if( a.depth > b.depth )\n            { return 1; }\n\n            //by this point, depth are equal\n            //so sort by shader, then texture, then primitive type\n        if(a.shader != null && b.shader != null) {\n\n                //sort shaders id's by gl id\n            if(a.shader.id < b.shader.id)\n                { return -1; }\n            if(a.shader.id > b.shader.id)\n                { return 1; }\n\n        } else {\n            if(a.shader != null && b.shader == null) {\n                return 1;\n            } else\n            if(a.shader == null && b.shader != null) {\n                return -1;\n            }\n        }\n\n        if(a.texture != null && b.texture != null) {\n\n                //sort textures id's by gl id\n            if(a.texture.id < b.texture.id)\n                { return -1; }\n            if(a.texture.id > b.texture.id)\n                { return 1; }\n\n        } else {\n            if(a.texture != null && b.texture == null) {\n                return 1;\n            } else\n            if(a.texture == null && b.texture != null) {\n                return -1;\n            }\n        }\n\n            //same texture and shader, so primitive type\n        var a_primitive_index : Int = a.primitive_type;\n        var b_primitive_index : Int = b.primitive_type;\n\n        if( a_primitive_index < b_primitive_index )\n            { return -1; }\n        if( a_primitive_index > b_primitive_index )\n            { return 1; }\n\n            //if not the same clipping, we want clipped geometry after, and not clipped before\n        if(a.clip != b.clip) {\n\n            if(a.clip == false && b.clip == true) {\n                return 1;\n            } else\n\n            if(a.clip == true && b.clip == false) {\n                return -1;\n            }\n\n        } //clippin\n\n            //if all else is indistinguishable,\n            //make sure older geometry is before\n\n        if( a.timestamp < b.timestamp )\n            { return -1; }\n        if( a.timestamp >= b.timestamp )\n            { return 1; }\n        if( a.sequence < b.sequence )\n            { return -1; }\n        if( a.sequence > b.sequence )\n            { return 1; }\n\n            //otherwise push down the list because wtf\n        return 1;\n\n    } //geometry_compare\n\n    function list_geometry() {\n        for(geom in geometry) {\n            _debug('\\t   geometry: ' + geom.id  + ' / ' + geom.depth + ' / ' + geom.uuid );\n            _debug('\\t\\t' + geom.key);\n        }\n    }\n\n    public static inline var vert_attribute   : Int = 0;\n    public static inline var tcoord_attribute : Int = 1;\n    public static inline var color_attribute  : Int = 2;\n    public static inline var normal_attribute : Int = 3;\n\n} //Batcher\n\n\n@:enum abstract PrimitiveType(Int) from Int to Int {\n\n    var unknown         = -1;\n    var line_strip      = GL.LINE_STRIP;\n    var line_loop       = GL.LINE_LOOP;\n    var lines           = GL.LINES;\n    var triangle_strip  = GL.TRIANGLE_STRIP;\n    var triangles       = GL.TRIANGLES;\n    var triangle_fan    = GL.TRIANGLE_FAN;\n    var points          = GL.POINTS;\n\n} //PrimitiveType\n\n@:enum abstract BlendMode(Int) from Int to Int {\n\n    var zero                    = GL.ZERO;\n    var one                     = GL.ONE;\n    var src_color               = GL.SRC_COLOR;\n    var one_minus_src_color     = GL.ONE_MINUS_SRC_COLOR;\n    var src_alpha               = GL.SRC_ALPHA;\n    var one_minus_src_alpha     = GL.ONE_MINUS_SRC_ALPHA;\n    var dst_alpha               = GL.DST_ALPHA;\n    var one_minus_dst_alpha     = GL.ONE_MINUS_DST_ALPHA;\n    var dst_color               = GL.DST_COLOR;\n    var one_minus_dst_color     = GL.ONE_MINUS_DST_COLOR;\n    var src_alpha_saturate      = GL.SRC_ALPHA_SATURATE;\n\n} //BlendMode\n\n@:enum abstract BlendEquation(Int) from Int to Int {\n\n    var add                    = GL.FUNC_ADD;\n    var subtract               = GL.FUNC_SUBTRACT;\n    var reverse_subtract       = GL.FUNC_REVERSE_SUBTRACT;\n\n} //BlendEquation\n\n@:enum abstract BatcherEventType(Int) from Int to Int {\n\n    var unknown     = 0;\n    var prerender   = 1;\n    var postrender  = 2;\n\n} //BatcherEventType\n\n","package snow.api.buffers;\n\n#if js\n\n    @:forward\n    @:arrayAccess\n    abstract Float32Array(js.html.Float32Array)\n        from js.html.Float32Array\n        to js.html.Float32Array {\n\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\n\n        @:generic\n        public inline function new<T>(\n            ?elements:Int,\n            ?array:Array<T>,\n            ?view:ArrayBufferView,\n            ?buffer:ArrayBuffer, ?byteoffset:Int = 0, ?len:Null<Int>\n        ) {\n            if(elements != null) {\n                this = new js.html.Float32Array( elements );\n            } else if(array != null) {\n                this = new js.html.Float32Array( untyped array );\n            } else if(view != null) {\n                this = new js.html.Float32Array( untyped view );\n            } else if(buffer != null) {\n                if(len == null) {\n                    this = new js.html.Float32Array( buffer, byteoffset );\n                } else {\n                    this = new js.html.Float32Array( buffer, byteoffset, len );\n                }\n            } else {\n                this = null;\n            }\n        }\n\n        @:arrayAccess @:extern inline function __set(idx:Int, val:Float) : Void this[idx] = val;\n        @:arrayAccess @:extern inline function __get(idx:Int) : Float return this[idx];\n\n\n            //non spec haxe conversions\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Float32Array {\n            if(byteOffset == null) return new js.html.Float32Array(cast bytes.getData());\n            if(len == null) return new js.html.Float32Array(cast bytes.getData(), byteOffset);\n            return new js.html.Float32Array(cast bytes.getData(), byteOffset, len);\n        }\n\n        inline public function toBytes() : haxe.io.Bytes {\n            #if (haxe_ver < 3.2)\n                return @:privateAccess new haxe.io.Bytes( this.byteLength, cast new js.html.Uint8Array(this.buffer) );\n            #else\n                return @:privateAccess new haxe.io.Bytes( cast new js.html.Uint8Array(this.buffer) );\n            #end\n        }\n\n        inline function toString() return 'Float32Array [byteLength:${this.byteLength}, length:${this.length}]';\n\n    }\n\n#else\n\n    import snow.api.buffers.ArrayBufferView;\n    import snow.api.buffers.TypedArrayType;\n\n    @:forward\n    abstract Float32Array(ArrayBufferView) from ArrayBufferView to ArrayBufferView {\n\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\n\n        public var length (get, never):Int;\n\n        @:generic\n        public inline function new<T>(\n            ?elements:Int,\n            ?array:Array<T>,\n            ?view:ArrayBufferView,\n            ?buffer:ArrayBuffer, ?byteoffset:Int = 0, ?len:Null<Int>\n        ) {\n\n            if(elements != null) {\n                this = new ArrayBufferView( elements, Float32 );\n            } else if(array != null) {\n                this = new ArrayBufferView(0, Float32).initArray(array);\n            } else if(view != null) {\n                this = new ArrayBufferView(0, Float32).initTypedArray(view);\n            } else if(buffer != null) {\n                this = new ArrayBufferView(0, Float32).initBuffer(buffer, byteoffset, len);\n            } else {\n                throw \"Invalid constructor arguments for Float32Array\";\n            }\n        }\n\n    //Public API\n\n        public inline function subarray( begin:Int, end:Null<Int> = null) : Float32Array return this.subarray(begin, end);\n\n\n            //non spec haxe conversions\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Float32Array {\n            return new Float32Array(bytes, byteOffset, len);\n        }\n\n        inline public function toBytes() : haxe.io.Bytes {\n            return this.buffer;\n        }\n\n    //Internal\n\n        inline function toString() return 'Float32Array [byteLength:${this.byteLength}, length:${this.length}]';\n\n        @:extern inline function get_length() return this.length;\n\n\n        @:noCompletion\n        @:arrayAccess @:extern\n        public inline function __get(idx:Int) : Float {\n            return ArrayBufferIO.getFloat32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT) );\n        }\n\n        @:noCompletion\n        @:arrayAccess @:extern\n        public inline function __set(idx:Int, val:Float) : Void {\n            ArrayBufferIO.setFloat32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT), val);\n        }\n\n    }\n\n#end //!js\n","package phoenix;\n\nimport luxe.resource.Resource;\nimport luxe.Resources;\n\n// import luxe.options.FontOptions;\nimport luxe.options.ResourceOptions;\nimport luxe.options.TextOptions;\nimport luxe.importers.bitmapfont.BitmapFontData;\nimport luxe.importers.bitmapfont.BitmapFontParser;\n\nimport phoenix.Batcher;\nimport phoenix.geometry.TextGeometry;\nimport phoenix.Rectangle;\nimport phoenix.Vector;\nimport phoenix.Texture;\nimport snow.api.Promise;\nimport snow.types.Types.Error;\nimport snow.system.assets.Asset;\n\nimport luxe.Log.*;\n\nusing luxe.utils.unifill.Unifill;\n\n@:enum abstract TextAlign(Int) from Int to Int {\n    var left = 0;\n    var right = 1;\n    var center = 2;\n    var top = 3;\n    var bottom = 4;\n} //TextAlign\n\n\nclass BitmapFont extends Resource {\n\n        /** The map of font texture pages to their id. */\n    public var pages: Map<Int, Texture>;\n        /** The bitmap font data */\n    public var info (default, set): BitmapFontData;\n        /** Cached reference of the ' '(32) character, for sizing on tabs/spaces */\n    public var space_char: Character;\n\n        /** Optional texture path. */\n    var texture_path: String;\n\n    public function new( _options:BitmapFontOptions ) {\n\n        assertnull(_options);\n\n        _options.resource_type = ResourceType.font;\n\n        super( _options );\n\n        if(_options.texture_path != null) {\n            texture_path = _options.texture_path;\n        } else {\n            texture_path = haxe.io.Path.directory(id);\n        }\n\n        pages = new Map();\n\n        if(_options.pages != null) assertnull(_options.font_data, 'BitmapFont create from pages + font_data requires both of those options');\n        if(_options.font_data != null) {\n\n            assertnull(_options.pages, 'BitmapFont create from pages + font_data requires both of those options');\n\n            info = BitmapFontParser.parse(_options.font_data);\n            apply_pages(_options.pages);\n\n        } //font_data\n\n    } //new\n\n//Public api\n    //\n\n        /** Returns the kerning between two glyphs, or 0 if none.\n            A glyph int id is the value from 'c'.charCodeAt(0) */\n    public inline function kerning(_first:Int, _second:Int) {\n\n        var _map = info.kernings.get(_first);\n\n        if(_map != null && _map.exists(_second)) {\n            return _map.get(_second);\n        }\n\n        return 0;\n\n    } //kerning\n\n        /** Wrap the given string to the given rectangle, using the given metrics.\n            Returns a new array, with each line of the string split across the bounds. */\n    public function wrap_string_to_bounds( _string:String, _bounds:Rectangle, _point_size:Float=1.0, _letter_spc:Float=0.0 ) : String {\n\n        if(_bounds == null) {\n            return _string;\n        }\n\n        var _cur_x = 0.0; var _idx = 0;\n        var _final_str = '';\n\n        inline function _wordw(_str:String) {\n            return width_of(_str, _point_size, _letter_spc);\n        }\n\n        var _spacew = _wordw(' ');\n\n        inline function _dowrap(_w:Float, _str:String) {\n            if(_cur_x + _w > _bounds.w) {\n                _cur_x = 0;\n                _final_str += '\\n';\n            }\n\n            _cur_x += _w;\n            _final_str += _str;\n        } //_dowrap\n\n            var _strings = _string.split(' ');\n            var _count = _strings.length;\n\n            for(_str in _strings) {\n                if(_str.uIndexOf('\\n') == -1) {\n                    if(_str == '') _str = ' ';\n                    _dowrap( _wordw(_str), _str );\n                } else {\n                    var _widx = 0;\n                    var _words = _str.split('\\n');\n                    for(_word in _words) {\n\n                        if(_word != '') {\n                            _dowrap( _wordw(_word), _word );\n                        } else {\n                            _cur_x = 0;\n                        }\n\n                        if(_widx < _words.length-1) {\n                            _final_str += '\\n';\n                            _cur_x = 0;\n                        }\n\n                        _widx++;\n\n                    } //each word\n                } //no spaces\n\n                if(_idx < _count-1) {\n                    _final_str += ' ';\n                    _cur_x += _spacew + _letter_spc;\n                }\n\n                _idx++;\n\n            } //each word\n\n        return _final_str;\n\n    } //wrap_string_to_bounds\n\n        /** Returns the width of the given line, which assumes the line is already split up (does not split the string), using the given metrics. */\n    public function width_of_line( _string:String, _point_size:Float=1.0, _letter_spc:Float=0.0 ) {\n        //\n            //current x pos\n        var _cur_x = 0.0;\n            //current w pos\n        var _cur_w = 0.0;\n            //the size ratio between font and given size\n        var _ratio = _point_size / info.point_size;\n\n        var i = 0;\n        var _len = _string.uLength();\n\n        for( _uglyph in _string.uIterator() ) {\n\n            var _index = _uglyph.toInt();\n            var _char = info.chars.get(_index);\n            if(_char == null) _char = space_char;\n\n                //some characters (like spaces) have no width but an advance\n                //which is relevant/needed\n            var _cw = (_char.xoffset + Math.max(_char.width, _char.xadvance)) * _ratio;\n            var _cx = _cur_x + (_char.xoffset * _ratio);\n\n            var _spacing = _char.xadvance;\n            if( i < _len-1 ) {\n                var _next_index = _string.uCharCodeAt(i+1);\n                _spacing += kerning( _index, _next_index );\n                if(_next_index >= 32) { _spacing += _letter_spc; }\n            }\n\n            _cur_x += _spacing * _ratio;\n            _cur_w = Math.max(_cur_w, _cx+_cw);\n\n            ++i;\n        } //each char\n\n        return _cur_w;\n\n    } //width_of_line\n\n        /** Returns the width of the given string, using the given metrics.\n            This will split the string and populate the optional _line_widths array with each line width of the string */\n    public inline function width_of( _string:String, _point_size:Float = 1.0, _letter_spc:Float = 0.0, ?_line_widths:Array<Float> ) : Float {\n        //\n            //if given an array to cache line widths into\n        var _max_w = 0.0;\n        var _push_widths = (_line_widths != null);\n        var _lines = _string.uSplit('\\n');\n\n        for(_line in _lines) {\n\n            var _cur_w = width_of_line(_line, _point_size, _letter_spc);\n\n            _max_w = Math.max( _max_w, _cur_w );\n\n            if(_push_widths) {\n                _line_widths.push(_cur_w);\n            }\n\n        } //each line\n\n            //return the max width found\n        return _max_w;\n\n    } //width_of\n\n        /** Returns the height of a string, using the given metrics. */\n    public inline function height_of( _string:String, _point_size:Float, _line_spc:Float=0.0 ) : Float {\n\n        return height_of_lines(_string.split('\\n'), _point_size, _line_spc);\n\n    } //height_of\n\n        /** Return the dimensions of a given string, at the specified point size.\n            You can also use width_of or height_of, this is a convenience for those */\n    public inline function dimensions_of( _string:String, _point_size:Float, _into:Vector, _letter_spc:Float=0.0, _line_spc:Float=0.0 ) : Vector {\n\n        var _width = width_of(_string, _point_size, _letter_spc);\n        var _height = height_of(_string, _point_size, _line_spc);\n\n        return _into.set_xy( _width, _height );\n\n    } //dimensions\n\n        /** Get the height of the given lines with the given metrics. */\n    public inline function height_of_lines( _lines:Array<String>, _point_size:Float, _line_spc:Float=0.0 ) : Float {\n\n        var _ratio = _point_size / info.point_size;\n\n        return _lines.length * ((info.line_height + _line_spc) * _ratio);\n\n    } //height_of\n    \n        /** Return the point size at which a line of text will occupy a given pixel height. */\n        //:todo: Implement test/usage case\n    public inline function line_height_to_point_size( _pixel_height:Float, _line_spc:Float=0.0 ) : Float {\n\n        return _pixel_height * ( info.point_size / ( info.line_height + _line_spc ) );\n\n    } //line_height_to_point_size\n\n//Resource api\n\n    override function clear() {\n\n        info = null;\n        var _i = 0;\n        for(_pageid in pages.keys()) {\n            var _page = pages.get(_pageid);\n            _page.destroy();\n            pages.remove(_pageid);\n            _page = null;\n        }\n\n    } //clear\n\n    override function reload() {\n\n        assert(state != ResourceState.destroyed);\n\n        clear();\n\n        return new Promise(function(resolve, reject) {\n\n            state = ResourceState.loading;\n\n                //fetch the bitmap font data\n            var _font_get = Luxe.snow.assets.text(id);\n\n            _font_get.then(function(_asset:AssetText) {\n\n                    //parse the data\n                info = BitmapFontParser.parse( _asset.text );\n\n                assertnull(info);\n\n                var _tex_get = [];\n\n                for(_page in info.pages) {\n\n                    var _path = haxe.io.Path.join([ texture_path, _page.file ]);\n                    var _prior = system.texture(_path);\n\n                    if(_prior != null) {\n                        _tex_get.push( _prior.reload() );\n                    } else {\n                        _tex_get.push( system.load_texture(_path) );\n                    }\n\n                }  //each page\n\n                Promise.all(_tex_get).then(function(_pages:Array<Texture>){\n\n                    apply_pages(_pages);\n\n                    state = ResourceState.loaded;\n                    resolve(this);\n\n                }).error(function(_error){\n\n                    state = ResourceState.failed;\n                    reject(_error);\n\n                });\n\n            }).error(function(_error){\n\n                state = ResourceState.failed;\n                reject(_error);\n\n            });\n\n        }); //promise\n\n    } //reload\n\n//Internal\n\n    function apply_pages(_pages:Array<Texture>) {\n\n        var _pageid : Int = 0;\n\n        for(_page in _pages) {\n            _page.slot = _pageid;\n            pages.set(_pageid, _page);\n            ++_pageid;\n        } //each page\n\n    } //apply_pages\n\n    function set_info(_info:BitmapFontData) {\n\n        info = _info;\n\n        if(info != null) {\n            space_char = info.chars.get(32);\n        }\n\n        return info;\n\n    } //_info\n\n    override function toString() {\n        return \"BitmapFont(\" + id + \")\";\n    }\n\n} //BitmapFont\n\n\n","package phoenix;\n\n\nimport phoenix.utils.Rendering;\nimport snow.modules.opengl.GL;\nimport snow.api.buffers.Float32Array;\n\nimport phoenix.Matrix;\n\nimport phoenix.Quaternion;\nimport phoenix.Rectangle;\nimport phoenix.Transform;\nimport phoenix.Vector;\nimport phoenix.Ray;\n\nimport luxe.options.CameraOptions;\nimport luxe.Log.*;\n\nenum ProjectionType {\n    ortho;\n    perspective;\n    custom;\n}\n\n\nclass Camera {\n\n    public var name : String = 'camera';\n\n    @:isVar public var viewport (get,set) : Rectangle;\n    @:isVar public var center   (get,set) : Vector;\n    @:isVar public var zoom     (default,set) : Float = 1.0;\n\n    @:isVar public var near     (default,set) : Float = 1000;\n    @:isVar public var far      (default,set) : Float = -1000;\n        //specific to perspective\n    @:isVar public var fov      (default, set) : Float = 60;\n    @:isVar public var fov_type (default, set) : FOVType = FOVType.horizontal;\n    @:isVar public var aspect   (default,set) : Float = 1.5;\n    @:isVar public var target   (default,set) : Vector;\n\n        //we keep a local pos variable as an unaltered position\n        //to keep the center relative to the viewport, and allow setting position as 0,0 not center\n    @:isVar public var pos (get,set) : Vector;\n        //the other transforms defer directly to the transform so aren't variables\n    public var scale (get,set) : Vector;\n    public var rotation (get,set) : Quaternion;\n    public var transform : Transform;\n\n    public var minimum_zoom : Float = 0.01;\n    public var projection_matrix : Matrix;\n    public var view_matrix : Matrix;\n    public var view_matrix_inverse : Matrix;\n        //if any, a rotation matrix for the look at rotation\n    public var look_at_matrix : Matrix;\n\n    public var options : CameraOptions;\n    public var projection : ProjectionType;\n    public var up : Vector;\n\n    @:noCompletion public var proj_arr : Float32Array;\n    @:noCompletion public var view_inverse_arr : Float32Array;\n\n        //Internal rendering fov, always vertical\n    var fov_y:Float;\n        //when the transform changes, the camera needs to refresh the view matrix\n    var transform_dirty : Bool = true;\n        //when the projection changes we need to update refresh the matrix\n    var projection_dirty : Bool = true;\n        //when the target changes we can update the look at matrix\n    var look_at_dirty : Bool = true;\n        //when we are still busy setting up\n    var _setup : Bool = true;\n\n        //A phoenix camera will default to ortho set to screen size\n    public function new( ?_options:CameraOptions ) {\n\n        transform = new Transform();\n\n            //save for later\n        options = _options;\n\n            //have sane defaults\n        def(options, default_camera_options());\n\n            //store the name if any\n        if(options.camera_name != null) {\n            name = options.camera_name;\n        }\n\n            //default to ortho unless specified otherwise\n        if(options.projection != null) {\n            projection = options.projection;\n        } else {\n            projection = ProjectionType.ortho;\n        }\n\n        center = new Vector(Luxe.screen.w/2, Luxe.screen.h/2);\n        pos = new Vector();\n\n            //default to screensize or use given viewport\n        if(options.viewport != null) {\n            viewport = options.viewport;\n        } else {\n            viewport = new Rectangle( 0, 0, Luxe.screen.w, Luxe.screen.h );\n        }\n\n        up = new Vector(0,1,0);\n\n        projection_matrix = new Matrix();\n        view_matrix = new Matrix();\n        view_matrix_inverse = new Matrix();\n        look_at_matrix = new Matrix();\n\n        transform.listen(on_transform_cleaned);\n\n        switch (projection) {\n\n            case ProjectionType.ortho:\n                set_ortho( options );\n            case ProjectionType.perspective:\n                set_perspective( options );\n            case ProjectionType.custom: {\n\n            }\n\n        } //switch projection\n\n            //make sure values are valid\n        process();\n\n        _setup = false;\n\n    } //new\n\n\n//Public API\n\n\n    public function set_ortho( _options:CameraOptions ) {\n\n        projection = ProjectionType.ortho;\n\n        _merge_options( _options );\n\n    } //set_ortho\n\n    public function set_perspective( _options:CameraOptions ) {\n\n        projection = ProjectionType.perspective;\n\n        _merge_options( _options );\n\n        transform.origin.set_xyz(0,0,0);\n\n    } //set_perspective\n\n        //from 3D to 2D\n    public function project( _vector:Vector ) {\n\n        update_view_matrix();\n\n        var _transform = new Matrix().multiplyMatrices( projection_matrix, view_matrix_inverse );\n        return _vector.clone().applyProjection( _transform );\n\n    } //project\n\n        //from 2D to 3D\n    public function unproject( _vector:Vector ) {\n\n        update_view_matrix();\n\n        var _inverted = new Matrix().multiplyMatrices( projection_matrix, view_matrix_inverse );\n        return _vector.clone().applyProjection( _inverted.getInverse(_inverted) );\n\n    } //unproject\n\n    public function screen_point_to_ray( _vector:Vector ) : Ray {\n\n        return new Ray( _vector, this );\n\n    } //screen_point_as_ray\n\n    public function screen_point_to_world( _vector:Vector ) : Vector {\n\n        if( projection == ProjectionType.ortho ) {\n            return ortho_screen_to_world(_vector);\n        } else if( projection == ProjectionType.perspective ){\n            return screen_point_to_ray( _vector ).end;\n        }\n\n            //given the default is ortho, for now\n        return ortho_screen_to_world(_vector);\n\n    } //screen_point_to_world\n\n    public function world_point_to_screen( _vector:Vector, ?_viewport:Rectangle=null ) : Vector {\n\n        if( projection == ProjectionType.ortho ) {\n            return ortho_world_to_screen( _vector );\n        } else if( projection == ProjectionType.perspective ) {\n            return persepective_world_to_screen(_vector, _viewport);\n        }\n\n            //given the default is ortho, for now\n        return ortho_world_to_screen( _vector );\n\n    } //world_point_to_screen\n\n\n//Internal API\n\n\n    @:noCompletion public function process() {\n\n            //If we have a target, override the rotation\n            //before we update the matrix, so it can be applied immediately if changing\n            //:todo: target needs a test and should only update if the target changes\n        if(target != null) {\n            update_look_at();\n        } //target not null\n\n            //update transforms and projection\n        update_projection_matrix();\n        update_view_matrix();\n\n            //apply states\n        apply_state(GL.CULL_FACE, options.cull_backfaces);\n        apply_state(GL.DEPTH_TEST, options.depth_test);\n\n    } //process\n\n//Transforms\n\n\n    function on_transform_cleaned( t:Transform ) {\n\n        transform_dirty = true;\n\n    } //on_transform_cleaned\n\n    function update_look_at() {\n\n        if(look_at_dirty && target != null) {\n\n            look_at_matrix.lookAt( target, pos, up );\n\n            rotation.setFromRotationMatrix( look_at_matrix );\n\n        } //dirty & !null\n\n    } //update_look_at\n\n    function update_view_matrix() {\n\n        view_matrix = transform.world.matrix;\n\n        if(!transform_dirty) {\n            return;\n        }\n\n        view_matrix_inverse = view_matrix.inverse();\n        view_inverse_arr = view_matrix_inverse.float32array();\n\n        transform_dirty = false;\n\n    } //update_view_matrix\n\n    function update_projection_matrix() {\n\n        if(!projection_dirty) {\n            return;\n        }\n\n        switch(projection) {\n\n            case ProjectionType.perspective:\n                projection_matrix.makePerspective( fov_y, aspect, near, far );\n            case ProjectionType.ortho:\n                projection_matrix.makeOrthographic( 0, viewport.w, 0, viewport.h, near, far );\n            case ProjectionType.custom: {}\n\n        } //switch\n\n        proj_arr = projection_matrix.float32array();\n\n        projection_dirty = false;\n\n    } //update_projection_matrix\n\n\n//Helpers\n\n\n    function apply_state(state:Int, value:Bool) {\n\n        if(value) {\n            Luxe.renderer.state.enable(state);\n        } else {\n            Luxe.renderer.state.disable(state);\n        }\n\n    } //apply_state\n\n    function apply_default_camera_options() {\n\n        switch (projection) {\n\n            case ProjectionType.ortho: {\n\n                options.cull_backfaces = false;\n                options.depth_test = false;\n\n            } //ortho\n\n            case ProjectionType.perspective: {\n\n                options.cull_backfaces = true;\n                options.depth_test = true;\n\n            } //perspective\n\n            case ProjectionType.custom: {}\n\n        } //switch\n\n    } //apply_default_camera_options\n\n    function default_camera_options() : CameraOptions {\n\n        return {\n            projection : ProjectionType.ortho,\n            depth_test : false,\n            cull_backfaces : false,\n            near : 1000,\n            far: -1000\n        };\n\n    } //default_camera_options\n\n\n//Conversions\n\n\n    function ortho_screen_to_world( _vector:Vector ) : Vector {\n\n        update_view_matrix();\n\n        return _vector.clone().transform(view_matrix);\n\n    } //ortho_screen_to_world\n\n    function ortho_world_to_screen( _vector:Vector ) : Vector {\n\n        update_view_matrix();\n\n        return _vector.clone().transform( view_matrix_inverse );\n\n    } //ortho_world_to_screen\n\n    function persepective_world_to_screen( _vector:Vector, ?_viewport:Rectangle=null ) {\n\n        def(_viewport, viewport);\n\n        var _projected = project( _vector );\n\n        var width_half = _viewport.w/2;\n        var height_half = _viewport.h/2;\n\n        return new Vector(\n             ( _projected.x * width_half ) + width_half,\n            -( _projected.y * height_half ) + height_half\n        );\n\n    } //persepective_world_point_to_screen\n\n\n//Properties\n\n    function set_target( _target:Vector ) : Vector {\n\n        if(_target != null) {\n            look_at_dirty = true;\n        }\n\n        return target = _target;\n\n    } //set_target\n\n    function set_fov( _fov:Float ) : Float {\n\n        projection_dirty = true;\n        options.fov = _fov;\n\n        if (fov_type == FOVType.horizontal) {\n            fov_y = Rendering.fovx_to_y(_fov, aspect);\n        } else {\n            fov_y = _fov;\n        }\n\n        return fov = _fov;\n\n    } //set_fov\n\n    function set_fov_type(_fov_type:FOVType) : FOVType {\n        options.fov_type = _fov_type;\n        fov_type = _fov_type;\n        //trigger fov_y update\n        set_fov(fov);\n        return fov_type;\n    }\n\n    function set_aspect( _aspect:Float ) : Float {\n\n        projection_dirty = true;\n        options.aspect = _aspect;\n\n        return aspect = _aspect;\n\n    } //set_aspect\n\n    function set_near( _near:Float ) : Float {\n\n        projection_dirty = true;\n        options.near = _near;\n\n        return near = _near;\n\n    } //set_near\n\n    function set_far( _far:Float ) : Float {\n\n        projection_dirty = true;\n        options.far = _far;\n\n        return far = _far;\n\n    } //set_far\n\n\n        //0.5 = smaller , 2 = bigger\n    function set_zoom( _z:Float ) : Float {\n\n            //a temp value to manipulate\n        var _new_zoom = _z;\n\n            //new zoom value shouldn't be allowed beyond a minimum\n            //but maybe this should be optional if you want negative zoom?\n        if(_new_zoom < minimum_zoom) {\n            _new_zoom = minimum_zoom;\n        }\n\n        switch(projection) {\n\n            case ProjectionType.ortho:\n\n                    //scale the visual view based on the value\n                transform.scale.x = 1/_new_zoom;\n                transform.scale.y = 1/_new_zoom;\n                transform.scale.z = 1/_new_zoom;\n\n            case ProjectionType.perspective: {\n\n                // :todo: nothing happens when zooming perspective\n\n            }\n\n            case ProjectionType.custom: {}\n\n        } //switch projection\n\n            //return the real value\n        return zoom = _new_zoom;\n\n    } //set_zoom\n\n    var _refresh_pos : Bool = false;\n    function set_center( _p:Vector ) : Vector {\n\n        center = _p;\n\n        switch(projection) {\n\n            case ProjectionType.ortho:\n\n                if(!_refresh_pos && !_setup) {\n                        //setting the center is the same as setting\n                        //the position relative to the viewport\n                    pos.ignore_listeners = true;\n                        pos.x = _p.x - (viewport.w/2);\n                        pos.y = _p.y - (viewport.h/2);\n                    pos.ignore_listeners = false;\n\n                    transform.pos.copy_from(_p);\n\n                } //!_refresh_pos && !_setup\n\n            case ProjectionType.perspective: {}\n\n            case ProjectionType.custom: {}\n\n        } //switch projection\n\n        Vector.Listen(center, _center_changed);\n\n        return center;\n\n    } //set_center\n\n    function get_center() : Vector {\n        return center;\n    } //get_center\n\n    function get_pos() : Vector {\n        return pos;\n    } //get_pos\n\n    function get_rotation() : Quaternion {\n        return transform.rotation;\n    } //get_rotation\n\n    function get_scale() : Vector {\n        return transform.scale;\n    } //get_scale\n\n    function get_viewport() : Rectangle {\n        return viewport;\n    } //get_viewport\n\n    function set_viewport(_r:Rectangle) : Rectangle {\n\n        projection_dirty = true;\n\n        viewport = _r;\n\n        switch(projection) {\n\n            case ProjectionType.ortho:\n\n                    //update the actual origin center of transform\n                transform.origin = new Vector( _r.w/2, _r.h/2 );\n                    //refresh the position and center etc\n                set_pos(pos);\n\n            case ProjectionType.perspective: {}\n\n            case ProjectionType.custom: {}\n\n        } //switch projection\n\n\n        return viewport;\n\n    } //set_viewport\n\n    function set_rotation( _q:Quaternion ) : Quaternion {\n\n        return transform.rotation = _q;\n\n    } //set_rotation\n\n    function set_scale( _s:Vector ) : Vector {\n\n        return transform.scale = _s;\n\n    } //set_scale\n\n    function set_pos( _p:Vector ) : Vector {\n\n        pos = _p;\n\n        switch(projection) {\n\n            case ProjectionType.ortho:\n\n            var _cx = center.x;\n            var _cy = center.y;\n\n            if(viewport != null) {\n                _cx = _p.x + (viewport.w/2);\n                _cy = _p.y + (viewport.h/2);\n            }\n\n                _refresh_pos = true;\n                    center.ignore_listeners = true;\n                        center.x = _cx;\n                        center.y = _cy;\n                    center.ignore_listeners = false;\n                _refresh_pos = false;\n\n                transform.pos.x = _cx;\n                transform.pos.y = _cy;\n\n            case ProjectionType.perspective:\n\n                transform.pos = pos;\n\n            case ProjectionType.custom: {}\n\n        } //switch projection\n\n        Vector.Listen(pos, _pos_changed);\n\n        return pos;\n\n    } //set_pos\n\n        //:todo: use def/tidy up/etc\n    function _merge_options( _options:CameraOptions ) {\n\n            //start at defaults for the type\n        apply_default_camera_options();\n\n        if(_options.aspect != null) {\n            options.aspect = _options.aspect;\n            aspect = options.aspect;\n        }\n\n        if(_options.far != null) {\n            options.far = _options.far;\n            far = options.far;\n        }\n\n\n        if(_options.fov != null) {\n            options.fov = _options.fov;\n            fov = options.fov;\n        }\n\n        if (_options.fov_type != null) {\n            options.fov_type = _options.fov_type;\n            fov_type = _options.fov_type;\n        }\n        else {\n            //apply default to make sure fov_y is set\n            options.fov_type = FOVType.horizontal;\n            fov_type = FOVType.horizontal;\n        }\n\n        if(_options.near != null) {\n            options.near = _options.near;\n            near = options.near;\n        }\n\n        if(_options.viewport != null) {\n            options.viewport = _options.viewport;\n            viewport = options.viewport;\n        }\n\n        if(_options.cull_backfaces != null) {\n            options.cull_backfaces = _options.cull_backfaces;\n        }\n\n        if(_options.depth_test != null) {\n            options.depth_test = _options.depth_test;\n        }\n\n    } //_merge_options\n\n    function _pos_changed(v:Float) {\n\n        set_pos(pos);\n\n    } //_pos_changed\n\n    function _center_changed(v:Float) {\n\n        set_center(center);\n\n    } //_center_changed\n\n} //Camera\n\nenum FOVType {\n    vertical;\n    horizontal;\n} //FOVType\n","package phoenix;\n\n\nclass Circle {\n\n    public var x:Float;\n    public var y:Float;\n    public var r:Float;\n\n    public function new(?_x:Float = 0,?_y:Float = 0,?_r:Float = 0) {\n        x = _x;\n        y = _y;\n        r = _r;\n    } //new\n\n    function toString() {\n        return \"{ x:\"+x + \", y:\" + y + \", r:\" + r + \" }\" ;\n    } //toString\n\n    public function point_inside(_p:Vector) {\n\n        var diff = new Vector(_p.x - x, _p.y - y);\n\n        return diff.length <= r;\n\n    } //point_inside\n\n    public function clone() {\n        return new Circle(x,y,r);\n    } //clone\n\n    public function set(?_x:Float, ?_y:Float, ?_r:Float) {\n        var _setx = x;\n        var _sety = y;\n        var _setr = r;\n\n            //assign new values\n        if(_x != null) _setx = _x;\n        if(_y != null) _sety = _y;\n        if(_r != null) _setr = _r;\n\n        x = _setx;\n        y = _sety;\n        r = _setr;\n\n        return this;\n    } //set\n\n} //Circle\n","package phoenix;\n\nimport phoenix.Vector;\nimport phoenix.Quaternion;\nimport luxe.utils.Maths;\n\n    //Ported from Three.js https://github.com/mrdoob/three.js\n\nclass MatrixTransform {\n\n    public var pos : Vector;\n    public var rotation : Quaternion;\n    public var scale : Vector;\n\n    public inline function new(p, r, s) {\n        pos = p;\n        rotation = r;\n        scale = s;\n    }\n\n    inline function destroy() {\n        pos = null; rotation = null; scale = null;\n    }\n\n} //MatrixTransform\n\nclass Matrix {\n\n    public var elements:Array<Float>;\n    var _float32array : snow.api.buffers.Float32Array;\n\n    @:isVar public var M11 (get,set) : Float = 1;\n    @:isVar public var M21 (get,set) : Float = 0;\n    @:isVar public var M31 (get,set) : Float = 0;\n    @:isVar public var M41 (get,set) : Float = 0;\n\n    @:isVar public var M12 (get,set) : Float = 0;\n    @:isVar public var M22 (get,set) : Float = 1;\n    @:isVar public var M32 (get,set) : Float = 0;\n    @:isVar public var M42 (get,set) : Float = 0;\n\n    @:isVar public var M13 (get,set) : Float = 0;\n    @:isVar public var M23 (get,set) : Float = 0;\n    @:isVar public var M33 (get,set) : Float = 1;\n    @:isVar public var M43 (get,set) : Float = 0;\n\n    @:isVar public var M14 (get,set) : Float = 0;\n    @:isVar public var M24 (get,set) : Float = 0;\n    @:isVar public var M34 (get,set) : Float = 0;\n    @:isVar public var M44 (get,set) : Float = 1;\n\n    public inline function new(\n        n11:Float = 1, n12:Float = 0, n13:Float = 0, n14:Float = 0,\n        n21:Float = 0, n22:Float = 1, n23:Float = 0, n24:Float = 0,\n        n31:Float = 0, n32:Float = 0, n33:Float = 1, n34:Float = 0,\n        n41:Float = 0, n42:Float = 0, n43:Float = 0, n44:Float = 1)\n    {\n        elements = new Array<Float>();\n\n        var i = 0;\n        while (i++ < 16) {\n            elements.push(0.0);\n        }\n\n        set(\n            n11, n12, n13, n14,\n            n21, n22, n23, n24,\n            n31, n32, n33, n34,\n            n41, n42, n43, n44\n        );\n\n        _float32array = new snow.api.buffers.Float32Array( elements );\n\n    }\n\n\n    public inline function set(\n        n11:Float, n12:Float, n13:Float, n14:Float,\n        n21:Float, n22:Float, n23:Float, n24:Float,\n        n31:Float, n32:Float, n33:Float, n34:Float,\n        n41:Float, n42:Float, n43:Float, n44:Float) : Matrix\n    {\n\n        var e = elements;\n\n            e[0] = n11; e[4] = n12; e[8]  = n13; e[12] = n14;\n            e[1] = n21; e[5] = n22; e[9]  = n23; e[13] = n24;\n            e[2] = n31; e[6] = n32; e[10] = n33; e[14] = n34;\n            e[3] = n41; e[7] = n42; e[11] = n43; e[15] = n44;\n\n        return this;\n    }\n\n    inline function toString() {\n        var e = elements;\n        var str = '{ 11:' + Maths.fixed(e[0], 3) + ', 12:' + Maths.fixed(e[4], 3)  + ', 13:' + Maths.fixed(e[ 8], 3)  + ', 14:' + Maths.fixed(e[12], 3) + ' }, ' +\n                  '{ 21:' + Maths.fixed(e[1], 3) + ', 22:' + Maths.fixed(e[5], 3)  + ', 23:' + Maths.fixed(e[ 9], 3)  + ', 24:' + Maths.fixed(e[13], 3) + ' }, ' +\n                  '{ 31:' + Maths.fixed(e[2], 3) + ', 32:' + Maths.fixed(e[6], 3)  + ', 33:' + Maths.fixed(e[10], 3)  + ', 34:' + Maths.fixed(e[14], 3) + ' }, ' +\n                  '{ 41:' + Maths.fixed(e[3], 3) + ', 42:' + Maths.fixed(e[7], 3)  + ', 43:' + Maths.fixed(e[11], 3)  + ', 44:' + Maths.fixed(e[15], 3) + ' }';\n        return str;\n    }\n\n    inline function get_M11() : Float { return elements[0]; }\n    inline function get_M12() : Float { return elements[1]; }\n    inline function get_M13() : Float { return elements[2]; }\n    inline function get_M14() : Float { return elements[3]; }\n\n    inline function get_M21() : Float { return elements[4]; }\n    inline function get_M22() : Float { return elements[5]; }\n    inline function get_M23() : Float { return elements[6]; }\n    inline function get_M24() : Float { return elements[7]; }\n\n    inline function get_M31() : Float { return elements[8]; }\n    inline function get_M32() : Float { return elements[9]; }\n    inline function get_M33() : Float { return elements[10]; }\n    inline function get_M34() : Float { return elements[11]; }\n\n    inline function get_M41() : Float { return elements[12]; }\n    inline function get_M42() : Float { return elements[13]; }\n    inline function get_M43() : Float { return elements[14]; }\n    inline function get_M44() : Float { return elements[15]; }\n\n    inline function set_M11( _value:Float ) : Float { elements[0] = _value; return _value; }\n    inline function set_M12( _value:Float ) : Float { elements[1] = _value; return _value; }\n    inline function set_M13( _value:Float ) : Float { elements[2] = _value; return _value; }\n    inline function set_M14( _value:Float ) : Float { elements[3] = _value; return _value; }\n\n    inline function set_M21( _value:Float ) : Float { elements[4] = _value; return _value; }\n    inline function set_M22( _value:Float ) : Float { elements[5] = _value; return _value; }\n    inline function set_M23( _value:Float ) : Float { elements[6] = _value; return _value; }\n    inline function set_M24( _value:Float ) : Float { elements[7] = _value; return _value; }\n\n    inline function set_M31( _value:Float ) : Float { elements[8] = _value; return _value; }\n    inline function set_M32( _value:Float ) : Float { elements[9] = _value; return _value; }\n    inline function set_M33( _value:Float ) : Float { elements[10] = _value; return _value; }\n    inline function set_M34( _value:Float ) : Float { elements[11] = _value; return _value; }\n\n    inline function set_M41( _value:Float ) : Float { elements[12] = _value; return _value; }\n    inline function set_M42( _value:Float ) : Float { elements[13] = _value; return _value; }\n    inline function set_M43( _value:Float ) : Float { elements[14] = _value; return _value; }\n    inline function set_M44( _value:Float ) : Float { elements[15] = _value; return _value; }\n\n    public inline function float32array() : snow.api.buffers.Float32Array {\n\n        var i = 0;\n\n        while(i < 16) {\n            _float32array[i] = elements[i];\n            ++i;\n        }\n\n        return _float32array;\n\n    } //float32array\n\n    public inline function identity () : Matrix {\n\n            set(\n                1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1\n            );\n\n        return this;\n\n    } //identity\n\n\n    public inline function copy( m:Matrix ) : Matrix {\n\n        var me = m.elements;\n\n            set(\n                me[0], me[4], me[8],  me[12],\n                me[1], me[5], me[9],  me[13],\n                me[2], me[6], me[10], me[14],\n                me[3], me[7], me[11], me[15]\n            );\n\n        return this;\n    }\n\n    public inline function make2D( _x:Float, _y:Float, _scale:Float = 1, _rotation:Float = 0 ) {\n\n        var theta = Maths.radians(_rotation);\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n\n        set(\n             c * _scale,  s *_scale,  0,  _x,\n            -s * _scale,  c *_scale,  0,  _y,\n                      0,          0,  1,   0,\n                      0,          0,  0,   1\n        );\n\n        return this;\n   }\n\n\n    public inline function copyPosition( m:Matrix ) : Matrix {\n\n        elements[12] = m.elements[12];\n        elements[13] = m.elements[13];\n        elements[14] = m.elements[14];\n\n        return this;\n    }\n\n\n    public inline function getPosition() : Vector {\n        return new Vector(elements[12], elements[13], elements[14],1);\n    }\n\n    public inline function extractRotation( m:Matrix ) : Matrix {\n\n        var _temp = new Vector();\n        var me = m.elements;\n\n        var _scale_x = 1 / _temp.set_xyz( me[0], me[1], me[2]  ).length;\n        var _scale_y = 1 / _temp.set_xyz( me[4], me[5], me[6]  ).length;\n        var _scale_z = 1 / _temp.set_xyz( me[8], me[9], me[10] ).length;\n\n        elements[0] =  me[0]  * _scale_x;\n        elements[1] =  me[1]  * _scale_x;\n        elements[2] =  me[2]  * _scale_x;\n\n        elements[4] =  me[4]  * _scale_y;\n        elements[5] =  me[5]  * _scale_y;\n        elements[6] =  me[6]  * _scale_y;\n\n        elements[8] =  me[8]  * _scale_z;\n        elements[9] =  me[9]  * _scale_z;\n        elements[10] = me[10] * _scale_z;\n\n        return this;\n    }\n\n    public inline function makeRotationFromEuler( _v:Vector, _order:ComponentOrder = XYZ) : Matrix {\n\n        var te = elements;\n\n        var x = _v.x;\n        var y = _v.y;\n        var z = _v.z;\n\n        var a = Math.cos( x ), b = Math.sin( x );\n        var c = Math.cos( y ), d = Math.sin( y );\n        var e = Math.cos( z ), f = Math.sin( z );\n\n        if ( _order == XYZ ) {\n\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n            te[0] = c * e;\n            te[4] = - c * f;\n            te[8] = d;\n\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = - b * c;\n\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n\n        } else if ( _order == YXZ ) {\n\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = - b;\n\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n\n        } else if ( _order == ZXY ) {\n\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n            te[0] = ce - df * b;\n            te[4] = - a * f;\n            te[8] = de + cf * b;\n\n            te[1] = cf + de * b;\n            te[5] = a * e;\n            te[9] = df - ce * b;\n\n            te[2] = - a * d;\n            te[6] = b;\n            te[10] = a * c;\n\n        } else if ( _order == ZYX ) {\n\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n            te[0] = c * e;\n            te[4] = be * d - af;\n            te[8] = ae * d + bf;\n\n            te[1] = c * f;\n            te[5] = bf * d + ae;\n            te[9] = af * d - be;\n\n            te[2] = - d;\n            te[6] = b * c;\n            te[10] = a * c;\n\n        } else if ( _order == YZX ) {\n\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = - b * e;\n\n            te[2] = - d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n\n        } else if ( _order == XZY ) {\n\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n            te[0] = c * e;\n            te[4] = - f;\n            te[8] = d * e;\n\n            te[1] = ac * f + bd;\n            te[5] = a * e;\n            te[9] = ad * f - bc;\n\n            te[2] = bc * f - ad;\n            te[6] = b * e;\n            te[10] = bd * f + ac;\n\n        }\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n\n    } //makeRotationFromEuler\n\n    public inline function makeRotationFromQuaternion( q:Quaternion ) : Matrix {\n\n        var te = elements;\n\n        var x2 = q.x + q.x, y2 = q.y + q.y, z2 = q.z + q.z;\n        var xx = q.x * x2,  xy = q.x * y2,  xz = q.x * z2;\n        var yy = q.y * y2,  yz = q.y * z2,  zz = q.z * z2;\n        var wx = q.w * x2,  wy = q.w * y2,  wz = q.w * z2;\n\n        te[0] = 1 - ( yy + zz );\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n\n        te[1] = xy + wz;\n        te[5] = 1 - ( xx + zz );\n        te[9] = yz - wx;\n\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - ( xx + yy );\n\n            // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n            // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n\n    } //makeRotationFromQuaternion\n\n\n    public inline function lookAt( _eye:Vector, _target:Vector, _up:Vector ) : Matrix {\n\n        var _x = new Vector();\n        var _y = new Vector();\n        var _z = new Vector();\n\n        var te = elements;\n\n        _z = Vector.Subtract( _target, _eye ).normalized;\n\n            if ( _z.length == 0 ) {\n                _z.z = 1;\n            }\n\n        _x = Vector.Cross( _up, _z ).normalized;\n\n            if ( _x.length == 0 ) {\n                _z.x += 0.0001;\n                _x = Vector.Cross( _up, _z ).normalized;\n            }\n\n        _y = Vector.Cross( _z, _x );\n\n        te[0] = _x.x; te[4] = _y.x; te[8]  = _z.x;\n        te[1] = _x.y; te[5] = _y.y; te[9]  = _z.y;\n        te[2] = _x.z; te[6] = _y.z; te[10] = _z.z;\n\n        return this;\n\n    } //lookAt\n\n\n    public inline function multiply( _m:Matrix ) : Matrix {\n\n        return multiplyMatrices(this, _m);\n\n    } //multiply\n\n\n    public inline function multiplyMatrices( _a:Matrix, _b:Matrix ) : Matrix {\n\n        var ae = _a.elements;\n        var be = _b.elements;\n        var te = elements;\n\n        var a11 = ae[0], a12 = ae[4], a13 = ae[8],  a14 = ae[12];\n        var a21 = ae[1], a22 = ae[5], a23 = ae[9],  a24 = ae[13];\n        var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\n        var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\n\n        var b11 = be[0], b12 = be[4], b13 = be[8],  b14 = be[12];\n        var b21 = be[1], b22 = be[5], b23 = be[9],  b24 = be[13];\n        var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\n        var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\n\n            te[0] =  a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n            te[4] =  a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n            te[8] =  a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n            te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n            te[1] =  a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n            te[5] =  a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n            te[9] =  a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n            te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n            te[2] =  a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n            te[6] =  a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n            te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n            te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n            te[3] =  a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n            te[7] =  a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n            te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n            te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n        return this;\n\n    } //multiplyMatrices\n\n\n    public inline function multiplyToArray( _a:Matrix, _b:Matrix, _r:Array<Float> ) : Matrix {\n\n        var te = elements;\n\n            multiplyMatrices(_a, _b);\n\n            _r[0]  = te[0];   _r[1]  = te[1];   _r[2]  = te[2];  _r[3]  = te[3];\n            _r[4]  = te[4];   _r[5]  = te[5];   _r[6]  = te[6];  _r[7]  = te[7];\n            _r[8]  = te[8];   _r[9]  = te[9];   _r[10] = te[10]; _r[11] = te[11];\n            _r[12] = te[12];  _r[13] = te[13];  _r[14] = te[14]; _r[15] = te[15];\n\n        return this;\n\n    } //multiplyToArray\n\n\n    public inline function multiplyScalar( _s:Float ) : Matrix {\n\n        var te = elements;\n\n            te[0] *= _s; te[4] *= _s; te[8]  *= _s; te[12] *= _s;\n            te[1] *= _s; te[5] *= _s; te[9]  *= _s; te[13] *= _s;\n            te[2] *= _s; te[6] *= _s; te[10] *= _s; te[14] *= _s;\n            te[3] *= _s; te[7] *= _s; te[11] *= _s; te[15] *= _s;\n\n        return this;\n\n    } //multiplyScalar\n\n\n    public inline function multiplyVector3Array( _a:Array<Float> ) : Array<Float> {\n\n        var v1 = new Vector();\n        var i = 0;\n        var il = _a.length;\n\n        while (i < il) {\n\n            v1.x = _a[i + 0];\n            v1.y = _a[i + 1];\n            v1.z = _a[i + 2];\n\n            v1.applyProjection( this );\n\n            _a[i + 0] = v1.x;\n            _a[i + 1] = v1.y;\n            _a[i + 2] = v1.z;\n\n            i += 3;\n\n        }\n\n        return _a;\n\n    } //multiplyVector3Array\n\n    public inline function determinant() : Float {\n\n        var te = elements;\n\n        var n11 = te[0], n12 = te[4], n13 = te[8],  n14 = te[12];\n        var n21 = te[1], n22 = te[5], n23 = te[9],  n24 = te[13];\n        var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\n        var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\n\n        return (\n            n41 * (\n                 n14 * n23 * n32\n                -n13 * n24 * n32\n                -n14 * n22 * n33\n                +n12 * n24 * n33\n                +n13 * n22 * n34\n                -n12 * n23 * n34\n            ) +\n            n42 * (\n                 n11 * n23 * n34\n                -n11 * n24 * n33\n                +n14 * n21 * n33\n                -n13 * n21 * n34\n                +n13 * n24 * n31\n                -n14 * n23 * n31\n            ) +\n            n43 * (\n                 n11 * n24 * n32\n                -n11 * n22 * n34\n                -n14 * n21 * n32\n                +n12 * n21 * n34\n                +n14 * n22 * n31\n                -n12 * n24 * n31\n            ) +\n            n44 * (\n                -n13 * n22 * n31\n                -n11 * n23 * n32\n                +n11 * n22 * n33\n                +n13 * n21 * n32\n                -n12 * n21 * n33\n                +n12 * n23 * n31\n            )\n        );\n    } //determinant\n\n    public inline function transpose() : Matrix {\n\n        var te = elements;\n        var tmp:Float;\n\n        tmp = te[1]; te[1] = te[4]; te[4] = tmp;\n        tmp = te[2]; te[2] = te[8]; te[8] = tmp;\n        tmp = te[6]; te[6] = te[9]; te[9] = tmp;\n\n        tmp = te[3];  te[3]  = te[12]; te[12] = tmp;\n        tmp = te[7];  te[7]  = te[13]; te[13] = tmp;\n        tmp = te[11]; te[11] = te[14]; te[14] = tmp;\n\n        return this;\n\n    } //transpose\n\n    public inline function flattenToArray( _flat:Array<Float> = null ) : Array<Float> {\n\n        if (_flat == null) {\n            _flat = new Array<Float>();\n            for(i in 0 ... 16) _flat.push( 0.0 );\n        }\n\n        var te = elements;\n\n            _flat[ 0 ]  = te[0];  _flat[ 1 ]  = te[1];  _flat[ 2 ]  = te[2];  _flat[ 3 ]  = te[3];\n            _flat[ 4 ]  = te[4];  _flat[ 5 ]  = te[5];  _flat[ 6 ]  = te[6];  _flat[ 7 ]  = te[7];\n            _flat[ 8 ]  = te[8];  _flat[ 9 ]  = te[9];  _flat[ 10 ] = te[10]; _flat[ 11 ] = te[11];\n            _flat[ 12 ] = te[12]; _flat[ 13 ] = te[13]; _flat[ 14 ] = te[14]; _flat[ 15 ] = te[15];\n\n        return _flat;\n\n    } //flattenToArray\n\n\n    public inline function flattenToArrayOffset( _flat:Array<Float>, _offset:Int ) : Array<Float> {\n\n        var te = elements;\n\n            _flat[ _offset + 0 ]  = te[0];\n            _flat[ _offset + 1 ]  = te[1];\n            _flat[ _offset + 2 ]  = te[2];\n            _flat[ _offset + 3 ]  = te[3];\n\n            _flat[ _offset + 4 ]  = te[4];\n            _flat[ _offset + 5 ]  = te[5];\n            _flat[ _offset + 6 ]  = te[6];\n            _flat[ _offset + 7 ]  = te[7];\n\n            _flat[ _offset + 8 ]  = te[8];\n            _flat[ _offset + 9 ]  = te[9];\n            _flat[ _offset + 10 ] = te[10];\n            _flat[ _offset + 11 ] = te[11];\n\n            _flat[ _offset + 12 ] = te[12];\n            _flat[ _offset + 13 ] = te[13];\n            _flat[ _offset + 14 ] = te[14];\n            _flat[ _offset + 15 ] = te[15];\n\n        return _flat;\n\n    } //flattenToArrayOffset\n\n\n    public inline function setPosition( _v:Vector ) : Matrix {\n\n        var te = elements;\n\n            te[12] = _v.x;\n            te[13] = _v.y;\n            te[14] = _v.z;\n\n        return this;\n\n    } //setPosition\n\n    public inline function inverse() : Matrix {\n        return clone().getInverse(this);\n    }\n\n    public inline function getInverse( _m:Matrix ) : Matrix {\n\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\n        var te = elements;\n        var me = _m.elements;\n\n        var n11 = me[0], n12 = me[4], n13 = me[8],  n14 = me[12];\n        var n21 = me[1], n22 = me[5], n23 = me[9],  n24 = me[13];\n        var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];\n        var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];\n\n            te[0]  = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;\n            te[4]  = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;\n            te[8]  = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;\n            te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;\n            te[1]  = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;\n            te[5]  = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;\n            te[9]  = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;\n            te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;\n            te[2]  = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;\n            te[6]  = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;\n            te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;\n            te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;\n            te[3]  = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;\n            te[7]  = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;\n            te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;\n            te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;\n\n        var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 4 ] + me[ 2 ] * te[ 8 ] + me[ 3 ] * te[ 12 ];\n\n        if (det == 0) {\n\n            trace('Matrix.getInverse: cant invert matrix, determinant is 0');\n\n            identity();\n\n            return this;\n\n        } //det == 0\n\n        multiplyScalar( 1 / det );\n\n        return this;\n\n    } //getInverse\n\n\n    public inline function scale( _v:Vector ) : Matrix {\n\n        var te = elements;\n\n            var _x = _v.x;\n            var _y = _v.y;\n            var _z = _v.z;\n\n            te[0] *= _x; te[4] *= _y; te[8]  *= _z;\n            te[1] *= _x; te[5] *= _y; te[9]  *= _z;\n            te[2] *= _x; te[6] *= _y; te[10] *= _z;\n            te[3] *= _x; te[7] *= _y; te[11] *= _z;\n\n        return this;\n\n    } //scale\n\n\n    public inline function getMaxScaleOnAxis() : Float {\n\n        var te = elements;\n\n            var _scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2]  * te[2];\n            var _scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6]  * te[6];\n            var _scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\n        return Math.sqrt( Math.max( _scaleXSq, Math.max( _scaleYSq, _scaleZSq ) ) );\n\n    } //getMaxScaleOnAxis\n\n\n    public inline function makeTranslation( _x:Float, _y:Float, _z:Float ) : Matrix {\n\n        set(\n            1, 0, 0, _x,\n            0, 1, 0, _y,\n            0, 0, 1, _z,\n            0, 0, 0, 1\n        );\n\n        return this;\n\n    } //makeTranslation\n\n\n    public inline function makeRotationX( _theta:Float ) : Matrix {\n\n        var _c = Math.cos(_theta);\n        var _s = Math.sin(_theta);\n\n            set(\n                1,  0,   0,  0,\n                0, _c, -_s,  0,\n                0, _s,  _c,  0,\n                0,  0,   0,  1\n            );\n\n        return this;\n\n    } //makeRotationX\n\n\n    public inline function makeRotationY(_theta:Float) : Matrix {\n\n        var _c = Math.cos(_theta);\n        var _s = Math.sin(_theta);\n\n            set(\n                 _c,  0, _s,  0,\n                  0,  1,  0,  0,\n                -_s,  0, _c,  0,\n                  0,  0,  0,  1\n            );\n\n        return this;\n\n    } //makeRotationY\n\n\n    public inline function makeRotationZ(_theta:Float) : Matrix {\n\n        var _c = Math.cos(_theta);\n        var _s = Math.sin(_theta);\n\n            set(\n                _c, -_s,  0,  0,\n                _s,  _c,  0,  0,\n                 0,   0,  1,  0,\n                 0,   0,  0,  1\n            );\n\n        return this;\n\n    } //makeRotationZ\n\n\n    public inline function makeRotationAxis( _axis:Vector, _angle:Float ) : Matrix {\n\n        var _c = Math.cos( _angle );\n        var _s = Math.sin( _angle );\n        var _t = 1 - _c;\n\n        var _ax = _axis.x;\n        var _ay = _axis.y;\n        var _az = _axis.z;\n\n        var _tx = _t * _ax;\n        var _ty = _t * _ay;\n\n            set(\n                _tx * _ax + _c,         _tx * _ay - _s * _az,   _tx * _az + _s  * _ay,  0,\n                _tx * _ay + _s * _az,   _ty * _ay + _c,         _ty * _az - _s  * _ax,  0,\n                _tx * _az - _s * _ay,   _ty * _az + _s * _ax,   _t  * _az * _az + _c,   0,\n                0, 0, 0, 1\n            );\n\n        return this;\n\n    } //makeRotationAxis\n\n\n    public inline function makeScale( _x:Float, _y:Float, _z:Float) : Matrix {\n\n            set(\n                _x,  0,  0,  0,\n                 0, _y,  0,  0,\n                 0,  0, _z,  0,\n                 0,  0,  0,  1\n            );\n\n        return this;\n\n    } //makeScale\n\n\n    public inline function compose_with_origin( _position:Vector, _origin:Vector, _quaternion:Quaternion, _scale:Vector ) : Matrix {\n\n        //this isn't very optimized\n        //translate to origin -> scale -> rotate -> translate -origin -> apply position\n\n            //origin ->\n        makeTranslation(_origin.x, _origin.y, _origin.z);\n            //scale ->\n        scale(_scale);\n            //rotation\n        multiply( new Matrix().makeRotationFromQuaternion(_quaternion) );\n            //translate -origin\n        multiply( new Matrix().makeTranslation(-_origin.x, -_origin.y, -_origin.z) );\n            //apply position\n        multiply( new Matrix().makeTranslation(_position.x, _position.y, _position.z) );\n\n        return this;\n\n    }\n\n    public inline function compose( _position:Vector, _quaternion:Quaternion, _scale:Vector ) : Matrix {\n\n            makeRotationFromQuaternion( _quaternion );\n            scale( _scale );\n            setPosition( _position );\n\n        return this;\n\n    } //compose\n\n    var _transform : MatrixTransform;\n\n    public inline function decompose( _position:Vector = null, _quaternion:Quaternion = null, _scale:Vector = null ) : MatrixTransform {\n\n        var te = elements;\n        var matrix = new Matrix();\n\n        var _ax_x = te[0]; var _ax_y = te[1]; var _ax_z = te[2];\n        var _ay_x = te[4]; var _ay_y = te[5]; var _ay_z = te[6];\n        var _az_x = te[8]; var _az_y = te[9]; var _az_z = te[10];\n\n        var _ax_length = Math.sqrt( _ax_x * _ax_x + _ax_y * _ax_y + _ax_z * _ax_z );\n        var _ay_length = Math.sqrt( _ay_x * _ay_x + _ay_y * _ay_y + _ay_z * _ay_z );\n        var _az_length = Math.sqrt( _az_x * _az_x + _az_y * _az_y + _az_z * _az_z );\n\n\n        if (_quaternion == null) {\n            _quaternion = new Quaternion();\n        }\n\n        if (_position == null) {\n            _position = new Vector(te[12], te[13], te[14]);\n        } else {\n            _position.x = te[12];\n            _position.y = te[13];\n            _position.z = te[14];\n        }\n\n        if (_scale == null) {\n            _scale = new Vector(_ax_length,_ay_length,_az_length);\n        } else {\n            _scale.x = _ax_length;\n            _scale.y = _ay_length;\n            _scale.z = _az_length;\n        }\n\n                //copy them without .copy()\n            matrix.elements = elements.concat([]);\n\n            var me = matrix.elements;\n\n                me[0]  /= _ax_length;\n                me[1]  /= _ax_length;\n                me[2]  /= _ax_length;\n\n                me[4]  /= _ay_length;\n                me[5]  /= _ay_length;\n                me[6]  /= _ay_length;\n\n                me[8]  /= _az_length;\n                me[9]  /= _az_length;\n                me[10] /= _az_length;\n\n            _quaternion.setFromRotationMatrix( matrix );\n\n\n        if(_transform == null) {\n            _transform = new MatrixTransform(_position, _quaternion, _scale);\n        } else {\n            _transform.pos = _position;\n            _transform.rotation = _quaternion;\n            _transform.scale = _scale;\n        }\n\n        return _transform;\n\n    } //decompose\n\n\n    public inline function makeFrustum( _left:Float, _right:Float, _bottom:Float, _top:Float, _near:Float, _far:Float ) : Matrix {\n\n        var te = elements;\n\n        var tx = 2 * _near / (_right - _left);\n        var ty = 2 * _near / (_top - _bottom);\n\n        var a =  (_right + _left) / (_right - _left);\n        var b =  (_top + _bottom) / (_top - _bottom);\n        var c = -(_far + _near)   / (_far - _near);\n        var d = -2 * _far * _near / (_far - _near);\n\n            te[0] = tx;     te[4] = 0;      te[8]  = a;     te[12] = 0;\n            te[1] = 0;      te[5] = ty;     te[9]  = b;     te[13] = 0;\n            te[2] = 0;      te[6] = 0;      te[10] = c;     te[14] = d;\n            te[3] = 0;      te[7] = 0;      te[11] = -1;    te[15] = 0;\n\n        return this;\n\n    } //makeFrustum\n\n\n    public inline function makePerspective( _fov:Float, _aspect:Float, _near:Float, _far:Float ) : Matrix {\n\n        var ymax = _near * Math.tan( Maths.radians(_fov * 0.5) );\n        var ymin = -ymax;\n        var xmin = ymin * _aspect;\n        var xmax = ymax * _aspect;\n\n        return makeFrustum( xmin, xmax, ymin, ymax, _near, _far );\n\n    } //makePerspective\n\n\n    public inline function makeOrthographic( _left:Float, _right:Float, _top:Float, _bottom:Float, _near:Float, _far:Float ) : Matrix {\n\n        var te = elements;\n\n        var w = _right - _left;\n        var h = _top - _bottom;\n        var p = _far - _near;\n\n        var tx = ( _right + _left )   / w;\n        var ty = ( _top   + _bottom ) / h;\n        var tz = ( _far   + _near )   / p;\n\n            te[0] = 2 / w;  te[4] = 0;      te[8] = 0;       te[12] = -tx;\n            te[1] = 0;      te[5] = 2 / h;  te[9] = 0;       te[13] = -ty;\n            te[2] = 0;      te[6] = 0;      te[10] = -2 / p; te[14] = -tz;\n            te[3] = 0;      te[7] = 0;      te[11] = 0;      te[15] = 1;\n\n        return this;\n\n    } //makeOrthographic\n\n    public inline function fromArray(_from:Array<Float>) {\n\n        elements = _from.concat([]);\n\n    } //fromArray\n\n    public inline function toArray() : Array<Float> {\n\n        var te = elements;\n\n            return [\n                te[ 0 ],  te[ 1 ],  te[ 2 ],  te[ 3 ],\n                te[ 4 ],  te[ 5 ],  te[ 6 ],  te[ 7 ],\n                te[ 8 ],  te[ 9 ],  te[ 10 ], te[ 11 ],\n                te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\n            ];\n\n    } //toArray\n\n    public inline function clone() : Matrix {\n\n        var te = elements;\n\n            return new Matrix(\n                te[0], te[4], te[8],  te[12],\n                te[1], te[5], te[9],  te[13],\n                te[2], te[6], te[10], te[14],\n                te[3], te[7], te[11], te[15]\n            );\n\n    } //clone\n\n    public inline function up() {\n        return new Vector( elements[4], elements[5], elements[10] );\n    } //up\n\n    public inline function down() : Vector {\n        return up().inverted;\n    } //down\n\n    public inline function left() : Vector {\n        return right().inverted;\n    } //left\n\n    public inline function right() : Vector {\n        return new Vector( elements[0], elements[1], elements[2] );\n    } //right\n\n    public inline function backward() {\n        return new Vector( elements[8], elements[9], elements[10] );\n    } //backward\n\n    public inline function forward() : Vector {\n        return backward().inverted;\n    } //forward\n\n\n} //Matrix\n\n","package phoenix;\n\nimport phoenix.Vector;\n\n    //Ported from Three.js https://github.com/mrdoob/three.js\n\nclass Quaternion {\n\n    @:isVar public var x(default,set) : Float = 0.0;\n    @:isVar public var y(default,set) : Float = 0.0;\n    @:isVar public var z(default,set) : Float = 0.0;\n    @:isVar public var w(default,set) : Float = 0.0;\n\n    var euler : Vector;\n\n    public var ignore_listeners : Bool = false;\n\n    @:isVar public var listen_x(default,default) : Float -> Void;\n    @:isVar public var listen_y(default,default) : Float -> Void;\n    @:isVar public var listen_z(default,default) : Float -> Void;\n    @:isVar public var listen_w(default,default) : Float -> Void;\n\n    var _construct = false;\n\n    public function new(_x:Float = 0, _y:Float = 0, _z:Float = 0, _w:Float = 1) {\n\n        _construct = true;\n\n            x = _x;\n            y = _y;\n            z = _z;\n            w = _w;\n\n        euler = new Vector();\n\n        _construct = false;\n\n    } //new\n\n    function toString() {\n\n        return \"{ x:\"+x + \", y:\" + y + \", z:\" + z  + \", w:\" + w  +  \" }\" ;\n\n    } //toString\n\n    public function set( _x:Float, _y:Float, _z:Float, _w:Float ) : Quaternion {\n\n        set_xyzw(_x, _y, _z, _w);\n\n        return this;\n\n    } //set\n\n\n    public function copy( _quaternion :Quaternion ) : Quaternion {\n\n            set_xyzw( _quaternion.x,\n                      _quaternion.y,\n                      _quaternion.z,\n                      _quaternion.w );\n\n        return this;\n\n    } //copy\n\n    public function dot( _other:Quaternion ) {\n        return x * _other.x + y * _other.y + z * _other.z + w * _other.w;\n    }\n\n\n    public function setFromEuler( _euler:Vector, _order:ComponentOrder = XYZ ) : Quaternion {\n\n            // http://www.mathworks.com/matlabcentral/fileexchange/\n            //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n            //  content/SpinCalc.m\n\n        var _x = x;\n        var _y = y;\n        var _z = z;\n        var _w = w;\n\n        var c1 = Math.cos( _euler.x / 2 );\n        var c2 = Math.cos( _euler.y / 2 );\n        var c3 = Math.cos( _euler.z / 2 );\n\n        var s1 = Math.sin( _euler.x / 2 );\n        var s2 = Math.sin( _euler.y / 2 );\n        var s3 = Math.sin( _euler.z / 2 );\n\n            if ( _order == XYZ ) {\n\n                _x = s1 * c2 * c3 + c1 * s2 * s3;\n                _y = c1 * s2 * c3 - s1 * c2 * s3;\n                _z = c1 * c2 * s3 + s1 * s2 * c3;\n                _w = c1 * c2 * c3 - s1 * s2 * s3;\n\n            } else if ( _order == YXZ ) {\n\n                _x = s1 * c2 * c3 + c1 * s2 * s3;\n                _y = c1 * s2 * c3 - s1 * c2 * s3;\n                _z = c1 * c2 * s3 - s1 * s2 * c3;\n                _w = c1 * c2 * c3 + s1 * s2 * s3;\n\n            } else if ( _order == ZXY ) {\n\n                _x = s1 * c2 * c3 - c1 * s2 * s3;\n                _y = c1 * s2 * c3 + s1 * c2 * s3;\n                _z = c1 * c2 * s3 + s1 * s2 * c3;\n                _w = c1 * c2 * c3 - s1 * s2 * s3;\n\n            } else if ( _order == ZYX ) {\n\n                _x = s1 * c2 * c3 - c1 * s2 * s3;\n                _y = c1 * s2 * c3 + s1 * c2 * s3;\n                _z = c1 * c2 * s3 - s1 * s2 * c3;\n                _w = c1 * c2 * c3 + s1 * s2 * s3;\n\n            } else if ( _order == YZX ) {\n\n                _x = s1 * c2 * c3 + c1 * s2 * s3;\n                _y = c1 * s2 * c3 + s1 * c2 * s3;\n                _z = c1 * c2 * s3 - s1 * s2 * c3;\n                _w = c1 * c2 * c3 - s1 * s2 * s3;\n\n            } else if ( _order == XZY ) {\n\n                _x = s1 * c2 * c3 - c1 * s2 * s3;\n                _y = c1 * s2 * c3 - s1 * c2 * s3;\n                _z = c1 * c2 * s3 + s1 * s2 * c3;\n                _w = c1 * c2 * c3 + s1 * s2 * s3;\n\n            }\n\n        set_xyzw(_x, _y, _z, _w);\n\n        return this;\n\n    } //setFromEuler\n\n\n    public function setFromAxisAngle( _axis:Vector, _angle:Float ) : Quaternion {\n\n        // from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n        // axis have to be normalized\n\n        var _halfAngle = _angle / 2;\n        var _s = Math.sin( _halfAngle );\n\n            set_xyzw( _axis.x * _s,\n                      _axis.y * _s,\n                      _axis.z * _s,\n                      Math.cos( _halfAngle ) );\n\n        return this;\n\n    } //setFromAxisAngle\n\n\n    public function setFromRotationMatrix( _m:Matrix ) : Quaternion {\n\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        var te = _m.elements;\n\n        var m11 = te[0], m12 = te[4], m13 = te[8];\n        var m21 = te[1], m22 = te[5], m23 = te[9];\n        var m31 = te[2], m32 = te[6], m33 = te[10];\n\n        var _x = x;\n        var _y = y;\n        var _z = z;\n        var _w = w;\n\n        var tr = m11 + m22 + m33;\n\n        var s : Float;\n\n            if (tr > 0) {\n\n                s = 0.5 / Math.sqrt( tr + 1.0 );\n\n                _w = 0.25 / s;\n                _x = (m32 - m23) * s;\n                _y = (m13 - m31) * s;\n                _z = (m21 - m12) * s;\n\n            } else if (m11 > m22 && m11 > m33) {\n\n                s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n                _w = (m32 - m23) / s;\n                _x = 0.25 * s;\n                _y = (m12 + m21) / s;\n                _z = (m13 + m31) / s;\n\n            } else if (m22 > m33) {\n\n                s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n                _w = (m13 - m31) / s;\n                _x = (m12 + m21) / s;\n                _y = 0.25 * s;\n                _z = (m23 + m32) / s;\n\n            } else {\n\n                s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n                _w = (m21 - m12) / s;\n                _x = (m13 + m31) / s;\n                _y = (m23 + m32) / s;\n                _z = 0.25 * s;\n\n            }\n\n        set_xyzw(_x, _y, _z, _w);\n\n        return this;\n\n    } //setFromRotationMatrix\n\n\n    public function inverse() : Quaternion {\n\n        return conjugate().normalize();\n\n    } //inverse\n\n\n    public function conjugate() : Quaternion {\n\n        set_xyz( x * -1, y * -1, z * -1);\n\n        return this;\n\n    } //conjugate\n\n\n    public function lengthSq() : Float {\n\n        return x * x + y * y + z * z + w * w;\n\n    } //lengthSq\n\n\n    public function length() : Float {\n\n        return Math.sqrt(x * x + y * y + z * z + w * w);\n\n    } //length\n\n\n    public function normalize() : Quaternion {\n\n        var l = length();\n\n            if (l == 0) {\n\n                set_xyzw(0,0,0,1);\n\n            } else {\n\n                l = 1 / l;\n\n                set_xyzw( x*l, y*l, z*l, w*l );\n\n            }\n\n        return this;\n\n    } //normalize\n\n    public static function Add( _a:Quaternion, _b:Quaternion ):Quaternion {\n        return _a.clone().add(_b);\n    }\n    \n    public static function Multiply( _a:Quaternion, _b:Quaternion ):Quaternion {\n        return _a.clone().multiply(_b);\n    }\n    \n    public static function MultiplyScalar(_quaternion:Quaternion, _scalar:Float):Quaternion {\n        return _quaternion.clone().multiplyScalar(_scalar);\n    }\n    \n    public function multiply( _quaternion:Quaternion ) : Quaternion {\n\n        return multiplyQuaternions( this, _quaternion );\n\n    } //multiply\n\n    public function add( _quaternion:Quaternion ) : Quaternion {\n\n        return addQuaternions( this, _quaternion );\n\n    } //add\n\n    public function addQuaternions( _a:Quaternion, _b:Quaternion ) {\n\n            x = _a.x + _b.x;\n            y = _a.y + _b.y;\n            z = _a.z + _b.z;\n            w = _a.w + _b.w;\n\n        return this;\n\n    } //addQuaternions\n\n    public function multiplyScalar( _scalar:Float ) : Quaternion {\n\n            x *= _scalar;\n            y *= _scalar;\n            z *= _scalar;\n            w *= _scalar;\n\n        return this;\n\n    } //multiply\n\n    public function multiplyQuaternions( _a:Quaternion, _b:Quaternion ) : Quaternion {\n\n        var qax = _a.x, qay = _a.y, qaz = _a.z, qaw = _a.w;\n        var qbx = _b.x, qby = _b.y, qbz = _b.z, qbw = _b.w;\n\n            set_xyzw( qax * qbw + qaw * qbx + qay * qbz - qaz * qby,\n                      qay * qbw + qaw * qby + qaz * qbx - qax * qbz,\n                      qaz * qbw + qaw * qbz + qax * qby - qay * qbx,\n                      qaw * qbw - qax * qbx - qay * qby - qaz * qbz );\n\n        return this;\n\n    } //multiplyQuaternions\n\n\n    public function slerp( _qb:Quaternion, _t:Float ) : Quaternion {\n\n        var _x = x;\n        var _y = y;\n        var _z = z;\n        var _w = w;\n\n        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n        var cosHalfTheta = _w * _qb.w + _x * _qb.x + _y * _qb.y + _z * _qb.z;\n\n        if ( cosHalfTheta < 0 ) {\n\n                w = -_qb.w;\n                x = -_qb.x;\n                y = -_qb.y;\n                z = -_qb.z;\n\n                cosHalfTheta = -cosHalfTheta;\n\n        } else {\n\n            this.copy( _qb );\n\n        }\n\n        if ( cosHalfTheta >= 1.0 ) {\n\n            set_xyzw(_x, _y, _z, _w);\n\n            return this;\n\n        }\n\n        var halfTheta = Math.acos( cosHalfTheta );\n        var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n        if ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n            set_xyzw( 0.5 * ( _w + w ),\n                      0.5 * ( _x + x ),\n                      0.5 * ( _y + y ),\n                      0.5 * ( _z + z ) );\n\n            return this;\n\n        }\n\n        var ratioA = Math.sin( ( 1 - _t ) * halfTheta ) / sinHalfTheta,\n        ratioB = Math.sin( _t * halfTheta ) / sinHalfTheta;\n\n            set_xyzw( _w * ratioA + w * ratioB,\n                      _x * ratioA + x * ratioB,\n                      _y * ratioA + y * ratioB,\n                      _z * ratioA + z * ratioB );\n\n        return this;\n\n    } //slerp\n\n\n    public function equals( _q:Quaternion ) : Bool {\n\n        return ( (_q.x == x) && (_q.y == y) && (_q.z == z) && (_q.w == w) );\n\n    } //equals\n\n\n    public function fromArray( _a:Array<Float> ) : Quaternion {\n\n        set_xyzw(_a[0], _a[1], _a[2], _a[3]);\n\n        return this;\n\n    } //fromArray\n\n\n    public function toArray() : Array<Float> {\n\n        return [ x,y,z,w ];\n\n    } //toArray\n\n    public function clone() : Quaternion {\n\n        return new Quaternion( x, y, z, w );\n\n    } //clone\n\n    public function toeuler() {\n        return new Vector().setEulerFromQuaternion(this).degrees();\n    }\n\n    public static function Slerp( _qa:Quaternion , _qb:Quaternion, _qm:Quaternion , _t:Float ) : Quaternion {\n\n        return _qm.copy( _qa ).slerp( _qb, _t );\n\n    } //Slerp\n\n    public static function Dot( _a:Quaternion,  _b:Quaternion ) {\n        return new Quaternion(_a.x,_a.y,_a.z,_a.w).dot(_b);\n    }\n\n    inline function update_euler() {\n\n        if( euler == null || ignore_euler || _construct) {\n            return;\n        }\n\n        euler.setEulerFromQuaternion( this );\n\n    } //update_euler\n\n    var ignore_euler = false;\n\n    public inline function set_xyzw(_x:Float, _y:Float, _z:Float, _w:Float) {\n\n        ignore_euler = true;\n\n            x = _x;\n            y = _y;\n            z = _z;\n            w = _w;\n\n        ignore_euler = false;\n\n        update_euler();\n\n        if(listen_x != null && !ignore_listeners) listen_x(x);\n        if(listen_y != null && !ignore_listeners) listen_y(y);\n        if(listen_z != null && !ignore_listeners) listen_z(z);\n        if(listen_w != null && !ignore_listeners) listen_w(w);\n\n    } //set_xyzw\n\n    public inline function set_xyz(_x:Float, _y:Float, _z:Float) {\n\n        ignore_euler = true;\n\n            x = _x;\n            y = _y;\n            z = _z;\n\n        ignore_euler = false;\n\n        update_euler();\n\n        if(listen_x != null && !ignore_listeners) listen_x(x);\n        if(listen_y != null && !ignore_listeners) listen_y(y);\n        if(listen_z != null && !ignore_listeners) listen_z(z);\n\n    } //set_xyzw\n\n    inline function set_x( _v:Float ) {\n\n        x = _v;\n\n        if(_construct) return x;\n\n        update_euler();\n\n        if(listen_x != null && !ignore_listeners) listen_x(x);\n\n        return x;\n\n    } //set_x\n\n    inline function set_y( _v:Float ) {\n\n        y = _v;\n\n        if(_construct) return y;\n\n        update_euler();\n\n        if(listen_y != null && !ignore_listeners) listen_y(y);\n\n        return y;\n\n    } //set_y\n\n    inline function set_z( _v:Float ) {\n\n        z = _v;\n\n        if(_construct) return z;\n\n        update_euler();\n\n        if(listen_z != null && !ignore_listeners) listen_z(z);\n\n        return z;\n\n    } //set_z\n\n    inline function set_w( _v:Float ) {\n\n        w = _v;\n\n        if(_construct) return w;\n\n        update_euler();\n\n        if(listen_w != null && !ignore_listeners) listen_w(w);\n\n        return w;\n\n    } //set_w\n\n    public static inline function Listen( _q : Quaternion, listener ) {\n\n        _q.listen_x = listener;\n        _q.listen_y = listener;\n        _q.listen_z = listener;\n        _q.listen_w = listener;\n\n    } //listen\n\n} //Quaternion\n\n","package phoenix;\n\nimport phoenix.Rectangle;\nimport phoenix.Vector;\nimport phoenix.Camera;\n\nclass Ray { \n\n    public var origin : Vector;\n    public var end : Vector;\n    public var dir : Vector;\n\n    var camera : Camera;\n    var viewport : Rectangle;\n\n        //optional viewport size\n    public function new( _screen_pos:Vector, _camera:Camera, ?_viewport:Rectangle=null ) {\n\n        if(_viewport == null) {\n            _viewport = new Rectangle(0,0,Luxe.screen.w, Luxe.screen.h);\n        }\n\n        if(_camera == null) throw \"Camera required for a ray!\";\n\n        camera = _camera;\n        viewport = _viewport;\n\n       refresh(_screen_pos);\n\n    } //new\n\n    public function refresh( _screen_pos:Vector ) {\n\n            //calculate the x and y in normalized device coordinates first [-1, 1] on both axis\n        var ndc_x : Float = (_screen_pos.x/viewport.w  - 0.5) * 2.0;\n        var ndc_y : Float = ((viewport.h - _screen_pos.y)/viewport.h - 0.5) * 2.0;\n\n            //To calculate a ray we use [0,1] for the depth so we can get a direction\n        var start_ndc : Vector = new Vector( ndc_x, ndc_y, 0.0, 1.0 );\n        var end_ndc : Vector = new Vector( ndc_x, ndc_y, 1.0, 1.0 );\n            //So we have a near and a far clipping space coords for the mouse, now unproject it using the camera\n        origin = camera.unproject(start_ndc);\n        end = camera.unproject(end_ndc);\n        dir = Vector.Subtract(end, origin);\n\n    } //refresh\n\n} //Ray","package phoenix;\n\n\nclass Rectangle {\n\n    @:isVar public var x (default, set) : Float = 0;\n    @:isVar public var y (default, set) : Float = 0;\n    @:isVar public var w (default, set) : Float = 0;\n    @:isVar public var h (default, set) : Float = 0;\n\n    public var ignore_listeners : Bool = false;\n\n    @:isVar public var listen_x (default,default) : Float -> Void;\n    @:isVar public var listen_y (default,default) : Float -> Void;\n    @:isVar public var listen_w (default,default) : Float -> Void;\n    @:isVar public var listen_h (default,default) : Float -> Void;\n\n    public function new(?_x:Float = 0,?_y:Float = 0,?_w:Float = 0,?_h : Float = 0) {\n\n        x = _x;\n        y = _y;\n        w = _w;\n        h = _h;\n\n    } //new\n\n    function toString() {\n\n        return \"{ x:\"+x + \", y:\" + y + \", w:\" + w  + \", h:\" + h  + \" }\" ;\n\n    } //toString\n\n    public static function listen( _r:Rectangle, listener ) {\n        _r.listen_x = listener;\n        _r.listen_y = listener;\n        _r.listen_w = listener;\n        _r.listen_h = listener;\n    } //listen\n\n    public function point_inside( _p:Vector ) {\n\n        if(_p.x < x) return false;\n        if(_p.y < y) return false;\n        if(_p.x > x+w) return false;\n        if(_p.y > y+h) return false;\n\n        return true;\n\n    } //point_inside\n\n    public function overlaps( _other:Rectangle ) {\n\n        if(_other == null) {\n            return false;\n        }\n\n            //only need to test extremes\n        if( x < (_other.x + _other.w) &&\n            y < (_other.y + _other.h) &&\n            (x + w) > _other.x        &&\n            (y + h) > _other.y ) {\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public function clone() {\n\n        return new Rectangle(x,y,w,h);\n\n    } //clone\n\n        //:todo:, epsilon fp check version\n    public function equal( _other:Rectangle ) {\n\n        if(_other == null) {\n            return false;\n        }\n\n        return x == _other.x && y == _other.y && w == _other.w && h == _other.h;\n\n    } //equal\n\n    public function copy_from( _rect:Rectangle ) {\n\n        x = _rect.x;\n        y = _rect.y;\n        w = _rect.w;\n        h = _rect.h;\n\n    } //copy_from\n\n    public function set(?_x:Float, ?_y:Float, ?_w:Float, ?_h:Float) {\n\n        var _setx = x;\n        var _sety = y;\n        var _setw = w;\n        var _seth = h;\n\n                    //assign new values\n                if(_x != null) _setx = _x;\n                if(_y != null) _sety = _y;\n                if(_w != null) _setw = _w;\n                if(_h != null) _seth = _h;\n\n            x = _setx;\n            y = _sety;\n            w = _setw;\n            h = _seth;\n\n        return this;\n\n    } //set\n\n    function set_x(_x:Float) : Float {\n\n        x = _x;\n\n            if(listen_x != null && !ignore_listeners) {\n                listen_x(_x);\n            }\n\n        return x;\n\n    } //set_x\n\n    function set_y(_y:Float) : Float {\n\n        y = _y;\n\n            if(listen_y != null && !ignore_listeners) {\n                listen_y(_y);\n            }\n\n        return y;\n\n    } //set_y\n\n    function set_w(_w:Float) : Float {\n\n        w = _w;\n\n            if(listen_w != null && !ignore_listeners) {\n                listen_w(_w);\n            }\n\n        return w;\n\n    } //set_w\n\n    function set_h(_h:Float) : Float {\n\n        h = _h;\n\n            if(listen_h != null && !ignore_listeners) {\n                listen_h(_h);\n            }\n\n        return h;\n\n    } //set_h\n\n}","package phoenix;\n\nimport snow.modules.opengl.GL;\nimport phoenix.Renderer;\nimport phoenix.Batcher;\n\n//Default base class will do forward rendering\n\nclass RenderPath {\n\n    public var renderer : Renderer;\n    public function new( _renderer:Renderer ) {\n        renderer = _renderer;\n    }\n\n    public function render( _batchers: Array<Batcher>, _stats:RendererStats ) {\n\n        for(batch in _batchers) {\n            if(batch.enabled) {\n\n                    //Measure the time and graph it in the debug view\n                Luxe.debug.start('batch.' + batch.name);\n\n                    //Tell the batcher to draw\n                batch.draw();\n\n                    //Update Render Stats\n                _stats.geometry_count += batch.geometry.size();\n                _stats.dynamic_batched_count += batch.dynamic_batched_count;\n                _stats.static_batched_count += batch.static_batched_count;\n                _stats.visible_count += batch.visible_count;\n                _stats.draw_calls += batch.draw_calls;\n                _stats.vert_count += batch.vert_count;\n\n                    //Stop Measuring\n                Luxe.debug.end('batch.' + batch.name);\n\n            } //batcher enabled\n        } //each batcher\n\n    } //render\n\n} //RenderPath\n\n","package phoenix;\n\nimport luxe.Log.*;\nimport snow.modules.opengl.GL;\nimport phoenix.Texture;\n\nclass RenderState {\n\n    var cull_face : Bool = false;\n    var depth_test : Bool = false;\n    var depth_mask : Bool = true;\n    var renderer : Renderer;\n    var _viewport : Rectangle;\n\n\n    public function new( _renderer:Renderer ) {\n        renderer = _renderer;\n        _viewport = new Rectangle( 0, 0, 0, 0 );\n    }\n\n    public function enable( what:Int ) {\n        switch(what) {\n            case GL.CULL_FACE:\n                if(!cull_face) {\n                    cull_face = true;\n                    GL.enable(GL.CULL_FACE);\n                } //!cull_face\n            case GL.DEPTH_TEST:\n                if(Luxe.core.app.config.render.depth) {\n                    if(!depth_test) {\n                        depth_test = true;\n                        GL.enable(GL.DEPTH_TEST);\n                    }\n                } //!depth_test\n        } //switch\n    } //enable_if_not\n\n    public function disable( what:Int ) {\n        switch(what) {\n            case GL.CULL_FACE:\n                if(cull_face) {\n                    cull_face = false;\n                    GL.disable(GL.CULL_FACE);\n                } //cull_face\n            case GL.DEPTH_TEST:\n                if(Luxe.core.app.config.render.depth) {\n                    if(depth_test) {\n                        depth_test = false;\n                        GL.disable(GL.DEPTH_TEST);\n                    }\n                } //depth_test\n        } //switch\n    } //disable_if_not\n\n    var depth_func : Int = -1;\n    public function depth_function( what:Int ) {\n        if(depth_func != what) {\n            GL.depthFunc( what );\n            depth_func = what;\n        }\n    } //depth_function\n\n    public function viewport( x:Float, y:Float, w:Float, h:Float ) {\n\n        if(\n            _viewport.x != x ||\n            _viewport.y != y ||\n            _viewport.w != w ||\n            _viewport.h != h\n        ) {\n\n            _viewport.x = x;\n            _viewport.y = y;\n            _viewport.w = w;\n            _viewport.h = h;\n\n                //In OpenGL the viewport is bottom left origin, so we flip the y\n                //when submitting our top left based coordinates.\n                //We use the target size property of the renderer, which\n                //when rendering to the screen matches the window and when\n                //rendering to a texture/render target, matches the target.\n            var _y : Float = renderer.target_size.y - (y + h);\n\n            GL.viewport( Std.int(x), Std.int(_y), Std.int(w), Std.int(h) );\n\n        }  //if it's changed\n\n    } //viewport\n\n    var _current_fbo : GLFramebuffer = null;\n    public function bindFramebuffer( ?buffer:GLFramebuffer=null ) {\n\n        if(_current_fbo != buffer) {\n\n            def(buffer, renderer.default_fbo);\n\n            GL.bindFramebuffer( GL.FRAMEBUFFER, buffer );\n            _current_fbo = buffer;\n        }\n\n    } //bindFrameBuffer\n\n    var _current_rbo : GLRenderbuffer = null;\n    public function bindRenderbuffer( ?buffer:GLRenderbuffer=null ) {\n\n        if(_current_rbo != buffer) {\n\n            def(buffer, renderer.default_rbo);\n\n            GL.bindRenderbuffer( GL.RENDERBUFFER, buffer );\n            _current_rbo = buffer;\n        }\n\n    } //bindRenderbuffer\n\n    var _used_program : GLProgram = null;\n    public function useProgram( program:GLProgram ) {\n        if(_used_program != program) {\n            _used_program = program;\n            GL.useProgram( program );\n        }\n    } //useProgram\n\n    var _active_texture = -1;\n    public function activeTexture( val:Int ) {\n        if(_active_texture != val) {\n            GL.activeTexture(val);\n            _active_texture = val;\n        }\n    } //activeTexture\n\n    public inline function bindTexture( type:TextureType, tex:TextureID ) {\n        switch(type) {\n            case TextureType.tex_2D:\n                bindTexture2D(tex);\n            case TextureType.tex_cube:\n                bindTextureCube(tex);\n        }\n    }\n\n    public static var bound_texture_2D : TextureID = null;\n    public function bindTexture2D( tex:TextureID ) {\n        if(bound_texture_2D != tex) {\n            bound_texture_2D = tex;\n            GL.bindTexture(GL.TEXTURE_2D, tex);\n        }\n    }\n\n    public static var bound_texture_cube : TextureID = null;\n    public function bindTextureCube( tex:TextureID ) {\n        if(bound_texture_cube != tex) {\n            bound_texture_cube = tex;\n            GL.bindTexture(GL.TEXTURE_CUBE_MAP, tex);\n        }\n    }\n\n    var _last_line_width:Float = 1;\n    public function lineWidth( _width:Float ) {\n        if(_last_line_width != _width) {\n            _last_line_width = _width;\n            GL.lineWidth( _width );\n        }\n    }\n\n    var _last_depth_mask:Bool = true;\n    public function depthMask( _enable:Bool ) {\n        if(_last_depth_mask != _enable) {\n            _last_depth_mask = _enable;\n            GL.depthMask( _enable );\n        }\n    }\n\n} //RenderState\n","package phoenix;\n\nimport snow.api.Promise;\nimport snow.system.assets.Asset;\nimport snow.modules.opengl.GL;\nimport snow.api.Libs;\n\nimport snow.api.buffers.Uint8Array;\nimport snow.api.buffers.ArrayBufferView;\nimport snow.api.buffers.ArrayBuffer;\n\nimport phoenix.Color;\nimport phoenix.Vector;\n\nimport luxe.Resources;\nimport luxe.resource.Resource;\nimport luxe.options.ResourceOptions;\nimport snow.types.Types.Error;\n\nimport luxe.Log.*;\n\nclass Texture extends Resource {\n\n//Static flags\n\n    public static var default_filter: FilterType = FilterType.linear;\n    public static var default_clamp: ClampType = ClampType.edge;\n\n//Members\n\n        /** Which texture slot this texture would be assigned to when bound. */\n    public var slot : Int = 0;\n        /** Only used when submitting to the GPU, where supported. */\n    public var border : Int = 0;\n        /** The GPU texture ID */\n    public var texture : TextureID;\n        /** The GPU texture format, i.e `GL.RGBA` or similar. */\n    public var format : TextureFormat;\n        /** The GPU texture type, i.e `GL.TEXTURE_2D` or similar. */\n    public var type : TextureType;\n        /** The GPU data type, i.e `GL.UNSIGNED_BYTE` or similar. */\n    public var data_type : TextureDataType;\n        /** If true, the pixels buffer should store compressed image format data that the GPU understands. */\n    public var compressed : Bool = false;\n\n        /** The width of the actual texture, used for example when the texture may be padded to POT sizes. */\n    public var width_actual : Int = -1;\n        /** The height of the actual texture, used for example when the texture may be padded to POT sizes. */\n    public var height_actual : Int = -1;\n        /** The width of the texture */\n    public var width : Int = -1;\n        /** The height of the texture */\n    public var height : Int = -1;\n\n        /** Set the minification filter type */\n    @:isVar public var filter_min   (default,set) : FilterType;\n        /** Set the magnification filter type */\n    @:isVar public var filter_mag   (default,set) : FilterType;\n        /** Sets the S (horizontal) clamp type */\n    @:isVar public var clamp_s      (default,set) : ClampType;\n        /** Sets the T (vertical) clamp type */\n    @:isVar public var clamp_t      (default,set) : ClampType;\n\n        /** If true, only when (re)loading from an asset id,\n            the pixels will be premultiplied by their alpha before\n            submit is called.  */\n    var load_premultiply_alpha : Bool = false;\n\n    public function new( _options:TextureOptions ) {\n\n        assertnull(_options, 'Texture create requires non-null options');\n\n        def(_options.resource_type, ResourceType.texture);\n\n        super( _options );\n\n        //texture id must be first, followed by bind\n\n        def(_options.texture, create_texture_id());\n\n        texture = _options.texture;\n\n        bind();\n\n        apply_default_options(_options);\n\n            //pixels require width and height\n        if(_options.pixels != null) {\n            assertnull(_options.width, 'Texture create with pixels requires both width and height');\n            assertnull(_options.height, 'Texture create with pixels requires both width and height');\n        }\n\n        if(_options.width != null || _options.height != null) {\n\n                //width requires height and vice versa\n            assertnull(_options.height, 'Texture requires both width and height, only width was given in construct options');\n            assertnull(_options.width, 'Texture requires both width and height, only height was given in construct options');\n\n            width = width_actual = _options.width;\n            height = height_actual = _options.height;\n\n            if(_options.pixels != null) {\n                submit(_options.pixels);\n            }\n\n        } //width/height not null\n\n\n    } //new\n\n        /** Returns the estimated memory usage of this Texture, in bytes. */\n    override public function memory_use() {\n\n            //:todo: not force 4 bpp\n        return (width_actual * height_actual * 4);\n\n    } //memory_use\n\n\n        /** Fetch the pixels from the texture id, storing them in the provided array buffer view.\n            Returns image pixels in RGBA format, as unsigned byte (0-255) values only.\n            This means that the view must be `w * h * 4` in length, minimum.\n            By default, x and y are 0, 0, and the texture `width` and `height`\n            are used (not width_actual/height_actual) */\n    public function fetch( _into:Uint8Array, ?_x:Int = 0, ?_y:Int = 0, ?_w:Int, ?_h:Int ) : Uint8Array {\n\n        assertnull(_into, 'Texture fetch requires a valid buffer to store the pixels.');\n\n        def(_x, 0);\n        def(_y, 0);\n        def(_w, width);\n        def(_h, height);\n\n        var _required = _w * _h * 4;\n\n        assert( _into.length >= _required, 'Texture fetch requires at least $_required (w * h * 4) bytes for the pixels, you have ${_into.length}!' );\n\n            //GL ES/WebGL spec doesn't include `glGetTexImage`,\n            //but we can read the pixels from a temporary frame buffer (render texture) instead\n            //This way works on all targets the same.\n\n        var fb = GL.createFramebuffer();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, fb);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture, 0);\n\n        assert(GL.checkFramebufferStatus(GL.FRAMEBUFFER) == GL.FRAMEBUFFER_COMPLETE);\n\n            GL.readPixels(_x, _y, _w, _h, GL.RGBA, GL.UNSIGNED_BYTE, _into);\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n        GL.deleteFramebuffer(fb);\n        fb = null;\n\n        return _into;\n\n    } //fetch\n\n        /** Submit a pixels array to the texture id. Must match the type and format accordingly. */\n    public function submit( _pixels:ArrayBufferView, ?_target:TextureSubmitTarget, ?_level:Int = 0 ) {\n\n        assert(_level >= 0, 'Texture submit level cannot be negative');\n\n        var _max = max_size();\n\n        assert(width_actual <= _max, 'Texture actual width bigger than maximum hardware size (width:$width_actual, max:$_max)');\n        assert(height_actual <= _max, 'Texture actual height bigger than maximum hardware size (height:$height_actual, max:$_max)');\n\n        bind();\n\n        if(type == TextureType.tex_2D) {\n            def(_target, TextureSubmitTarget.tex_2D);\n        } else {\n            assertnull(_target, 'Texture submit to a non 2D texture requires the _target to be specified');\n        }\n\n        if(compressed) {\n            GL.compressedTexImage2D(_target, _level, format, width_actual, height_actual, border, _pixels);\n        } else {\n            GL.texImage2D(_target, _level, format, width_actual, height_actual, border, format, data_type, _pixels );\n        }\n\n    } //submit\n\n        /** Generates mipmaps for this texture. */\n    public function generate_mipmaps() {\n\n        bind();\n        GL.generateMipmap(type);\n\n    } //generate_mipmaps\n\n        /** Bind this texture to the it's active texture slot,\n            and it's texture id to the texture type. Calling this\n            repeatedly is fine, as the state is tracked by\n            the RenderState. */\n    public function bind() {\n\n        Luxe.renderer.state.activeTexture( GL.TEXTURE0+slot );\n        Luxe.renderer.state.bindTexture( type, texture );\n\n    } //bind\n\n//Resource overrides\n\n        /** Reloads this texture from it's id - only a valid call if the id is a image asset resource. */\n    override public function reload() : Promise {\n\n        assert(state != ResourceState.destroyed, 'Resource cannot reload when already destroyed');\n\n        clear();\n\n        return new Promise(function(resolve, reject) {\n\n            state = ResourceState.loading;\n\n            var get = Luxe.snow.assets.image(id);\n\n            get.then(function(_asset:AssetImage) {\n\n                texture = create_texture_id();\n\n                from_asset(_asset);\n\n                state = ResourceState.loaded;\n                resolve(this);\n\n            }); //then\n\n            get.error(function(_error) {\n\n                state = ResourceState.failed;\n                reject(_error);\n\n            });\n\n        }); //promise\n\n    } //reload\n\n    function from_asset(_asset:AssetImage, _clear_asset:Bool=true) {\n\n        dump_asset_info( _asset );\n\n        width = _asset.image.width;\n        height = _asset.image.height;\n        width_actual = _asset.image.width_actual;\n        height_actual = _asset.image.height_actual;\n\n        if(load_premultiply_alpha) {\n            Luxe.utils.premultiply_alpha(_asset.image.pixels);\n        }\n\n        submit( _asset.image.pixels );\n\n        if(_clear_asset) {\n            _asset.image.pixels = null;\n            _asset = null;\n        }\n\n        apply_props();\n\n    } //from_asset\n\n    override function clear() {\n\n        if(texture != null) {\n            GL.deleteTexture(texture);\n        }\n\n    } //clear\n\n//Internal\n\n        //:todo:\n    function create_texture_id() {\n\n        return GL.createTexture();\n\n    } //create_texture_id\n\n    inline function apply_props() {\n\n        apply_filter(filter_min, FilterSlot.min_filter);\n        apply_filter(filter_mag, FilterSlot.mag_filter);\n        apply_clamp(clamp_s, ClampSlot.wrap_s);\n        apply_clamp(clamp_t, ClampSlot.wrap_t);\n\n    } //apply_props\n\n    function apply_default_options( _options:TextureOptions ) {\n\n        //texture properties\n\n            load_premultiply_alpha = def(_options.load_premultiply_alpha, false);\n            compressed = def(_options.compressed, false);\n            format = def(_options.format, GL.RGBA);\n            type = def(_options.type, GL.TEXTURE_2D);\n            data_type = def(_options.data_type, GL.UNSIGNED_BYTE);\n\n        //properties\n\n            //filter\n                filter_min = def(_options.filter_min, default_filter);\n                filter_mag = def(_options.filter_mag, default_filter);\n\n            //clamp\n                clamp_s = def(_options.clamp_s, default_clamp);\n                clamp_t = def(_options.clamp_t, default_clamp);\n\n    } //apply_default_options\n\n\n        /** Return the maximum size of a texture from the hardware */\n    public static function max_size() : Int return GL.getParameter(GL.MAX_TEXTURE_SIZE);\n\n        //:todo: not be a weird static function\n    static inline function dump_asset_info(_asset:AssetImage) {\n\n        _debug('Texture Asset id: '         + _asset.image.id);\n        _debug('\\t image.bpp: '             + _asset.image.bpp);\n        _debug('\\t image.bpp_source: '      + _asset.image.bpp_source);\n        _debug('\\t image.pixels.length: '   + _asset.image.pixels.length);\n        _debug('\\t image.height: '          + _asset.image.height);\n        _debug('\\t image.height_actual: '   + _asset.image.height_actual);\n        _debug('\\t image.width: '           + _asset.image.width);\n        _debug('\\t image.width_actual: '    + _asset.image.width_actual);\n\n    } //dump_asset_info\n\n//Properties\n\n    function set_clamp_s( _clamp:ClampType ) {\n\n        bind();\n\n        apply_clamp(_clamp, ClampSlot.wrap_s);\n\n        return clamp_s = _clamp;\n\n    } //set_clamp_s\n\n    function set_clamp_t( _clamp:ClampType ) {\n\n        bind();\n\n        apply_clamp(_clamp, ClampSlot.wrap_t);\n\n        return clamp_t = _clamp;\n\n    } //set_clamp_t\n\n    function set_filter_min( _filter : FilterType ) {\n\n        bind();\n\n        apply_filter(_filter, FilterSlot.min_filter);\n\n        return filter_min = _filter;\n\n    } //set_filter_min\n\n    function set_filter_mag( _filter : FilterType ) {\n\n        bind();\n\n        apply_filter(_filter, FilterSlot.mag_filter);\n\n        return filter_mag = _filter;\n\n    } //set_filter_mag\n\n//Internal helpers, :todo:refactor:gl:\n\n    inline function apply_clamp( _clamp:ClampType, _type:ClampSlot ) {\n\n        GL.texParameteri(type, _type, _clamp);\n\n    } //apply_clamp\n\n    inline function apply_filter( _filter:FilterType, _type:FilterSlot ) {\n\n        GL.texParameteri(type, _type, _filter);\n\n    } //apply_filter\n\n    override function toString() {\n\n        var _type = type_name(type);\n        var _filter_min = filter_name(filter_min);\n        var _filter_mag = filter_name(filter_mag);\n        var _clamp_s = clamp_name(clamp_s);\n        var _clamp_t = clamp_name(clamp_t);\n\n        var _filter = 'filter(min: $_filter_min, mag:$_filter_mag)';\n        var _clamp = 'clamp(s: $_clamp_t, t: $_clamp_t)';\n        var _width = 'size(size: ${width}x${height}, actual: ${width_actual}x${height_actual})';\n\n        return 'Texture(id: $id, tex: $texture, type:$_type, $_width $_filter $_clamp )';\n\n    } //toString\n\n    static function type_name(_type:TextureType) {\n        return switch(_type) {\n            case TextureType.tex_2D: 'tex_2D';\n            case TextureType.tex_cube: 'tex_cube';\n        }\n    }\n\n    static function filter_name(_filter:FilterType) {\n        return switch(_filter) {\n            case FilterType.linear:              'linear';\n            case FilterType.nearest:             'nearest';\n            case FilterType.mip_linear_linear:   'mip_linear_linear';\n            case FilterType.mip_linear_nearest:  'mip_linear_nearest';\n            case FilterType.mip_nearest_linear:  'mip_nearest_linear';\n            case FilterType.mip_nearest_nearest: 'mip_nearest_nearest';\n        }\n    } //filter_name\n\n    static function clamp_name(_clamp:ClampType) {\n        return switch(_clamp) {\n            case ClampType.edge:    'edge';\n            case ClampType.repeat:  'repeat';\n            case ClampType.mirror:  'mirror';\n        }\n    } //clamp_name\n\n} //Texture\n\n\n//General Texture specific types,\n//initial abstraction out GL specifics\n\n\n    typedef TextureID = GLTexture;\n    typedef TextureFormat = Int;\n    typedef TextureDataType = Int;\n\n    @:enum abstract TextureType(Int) from Int to Int {\n\n        var tex_2D = GL.TEXTURE_2D;\n        var tex_cube = GL.TEXTURE_CUBE_MAP;\n        //:future: var tex_3D = 0x806F; //GL.TEXTURE_3D;\n\n    } //TextureType\n\n    @:enum abstract TextureSubmitTarget(Int) from Int to Int {\n\n        var tex_2D          = GL.TEXTURE_2D;\n\n        var cube_plus_x     = GL.TEXTURE_CUBE_MAP_POSITIVE_X;\n        var cube_plus_y     = GL.TEXTURE_CUBE_MAP_POSITIVE_Y;\n        var cube_plus_z     = GL.TEXTURE_CUBE_MAP_POSITIVE_Z;\n\n        var cube_minus_x    = GL.TEXTURE_CUBE_MAP_NEGATIVE_X;\n        var cube_minus_y    = GL.TEXTURE_CUBE_MAP_NEGATIVE_Y;\n        var cube_minus_z    = GL.TEXTURE_CUBE_MAP_NEGATIVE_Z;\n\n    } //TextureSubmitTarget\n\n    @:enum abstract FilterType(Int) from Int to Int {\n\n        var nearest = GL.NEAREST;\n        var linear = GL.LINEAR;\n        var mip_nearest_nearest = GL.NEAREST_MIPMAP_NEAREST;\n        var mip_linear_nearest = GL.LINEAR_MIPMAP_NEAREST;\n        var mip_nearest_linear = GL.NEAREST_MIPMAP_LINEAR;\n        var mip_linear_linear = GL.LINEAR_MIPMAP_LINEAR;\n\n    } //FilterType\n\n    @:enum abstract ClampType(Int) from Int to Int {\n\n        var edge = GL.CLAMP_TO_EDGE;\n        var repeat = GL.REPEAT;\n        var mirror = GL.MIRRORED_REPEAT;\n\n    } //ClampType\n\n\n//Private Texture types\n\n    @:enum private abstract ClampSlot(Int) from Int to Int {\n        var wrap_s = GL.TEXTURE_WRAP_S;\n        var wrap_t = GL.TEXTURE_WRAP_T;\n        //:future: var wrap_r = GL.TEXTURE_WRAP_R;\n    }\n\n    @:enum private abstract FilterSlot(Int) from Int to Int {\n        var min_filter = GL.TEXTURE_MIN_FILTER;\n        var mag_filter = GL.TEXTURE_MAG_FILTER;\n    }\n","package phoenix;\n\nimport snow.modules.opengl.GL;\nimport phoenix.Batcher;\nimport phoenix.Texture;\n\nimport luxe.Log.*;\nimport luxe.options.ResourceOptions;\nimport luxe.resource.Resource;\nimport luxe.Resources;\n\n\n    //A render texture just extends texture so it can be assigned to meshes etc\nclass RenderTexture extends Texture {\n\n    public var fbo : GLFramebuffer;\n    public var renderbuffer : GLRenderbuffer;\n\n    public function new( _options:RenderTextureOptions ) {\n\n        _options.resource_type = ResourceType.render_texture;\n\n        super( _options );\n\n        def(_options.width, Std.int(Luxe.screen.w));\n        def(_options.height, Std.int(Luxe.screen.h));\n\n            //Width and height of this texture item\n        width = width_actual = _options.width;\n        height = height_actual = _options.height;\n\n            //super creates the texture id\n            //and binds the texture id for us\n\n            //Create the actual texture storage in gpu memory\n        if(_options.texture != null) {\n            submit(null);\n        }\n            //these must be set to be texture complete\n        apply_props();\n\n            //Create the FBO\n        fbo = GL.createFramebuffer();\n            //Bind the FBO\n        bindBuffer();\n\n            //create the render buffer\n        renderbuffer = GL.createRenderbuffer();\n            //Bind it so we can attach stuff\n        bindRenderBuffer();\n\n            //Create storage for the depth buffer :todo: optionize\n        #if (web || mobile)\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, width, height);\n        #else\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT, width, height);\n        #end\n            //Attach the framebuffer texture to the buffer\n        GL.framebufferTexture2D( GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture, 0 );\n            //Attach the depth buffer to the render buffer\n        GL.framebufferRenderbuffer( GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n\n\n        var status = GL.checkFramebufferStatus( GL.FRAMEBUFFER );\n\n        switch (status) {\n\n            case GL.FRAMEBUFFER_COMPLETE:\n\n            case GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\");\n\n            case GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\");\n\n            case GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\");\n\n            case GL.FRAMEBUFFER_UNSUPPORTED:\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\");\n\n            default:\n                throw(\"Incomplete framebuffer: \" + status);\n        }\n\n            //no lingering\n        unbindBuffer();\n        unbindRenderBuffer();\n\n            //add to the resource system\n        system.add(this);\n\n    } //new\n\n    override function clear() {\n\n        super.clear();\n\n        if(fbo != null) {\n            GL.deleteFramebuffer( fbo );\n        }\n\n        if(renderbuffer != null) {\n            GL.deleteRenderbuffer( renderbuffer );\n        }\n\n    } //clear\n\n    @:noCompletion public function bindBuffer() {\n\n        Luxe.renderer.state.bindFramebuffer(fbo);\n\n    } //bind\n\n    @:noCompletion public function unbindBuffer( ?_other:GLFramebuffer=null ) {\n\n        Luxe.renderer.state.bindFramebuffer( _other );\n\n    } //unbind\n\n    @:noCompletion public function bindRenderBuffer() {\n\n        Luxe.renderer.state.bindRenderbuffer( renderbuffer );\n\n    } //bind\n\n    @:noCompletion public function unbindRenderBuffer( ?_other:GLRenderbuffer=null ) {\n\n        Luxe.renderer.state.bindRenderbuffer( _other );\n\n    } //unbind\n\n\n} //RenderTexture","package phoenix;\n\nimport snow.modules.opengl.GL;\nimport snow.api.Libs;\nimport snow.system.assets.Asset;\n\nimport luxe.Log.*;\n\nimport luxe.Core;\nimport luxe.Rectangle;\n\nimport phoenix.Batcher;\nimport phoenix.RenderPath;\nimport phoenix.geometry.Geometry;\n\nimport phoenix.RenderTexture;\nimport phoenix.Shader;\nimport phoenix.Color;\nimport phoenix.Camera;\nimport phoenix.Texture;\nimport phoenix.BitmapFont;\nimport snow.types.Types.Error;\n\ntypedef BatcherKey = {\n    uuid : String,\n    layer : Int\n}\n\nprivate typedef DefaultShader = {\n    source: { vert:String, frag:String },\n    shader : Shader\n}\n\nprivate typedef DefaultShaders = {\n    plain : DefaultShader,\n    textured : DefaultShader,\n    bitmapfont : DefaultShader\n}\n\nclass Renderer {\n\n    public var batchers : Array<Batcher>;\n\n    public var core : Core;\n    public var state : RenderState;\n    public var default_fbo : GLFramebuffer;\n    public var default_rbo : GLRenderbuffer;\n        //Default rendering\n    public var shaders : DefaultShaders;\n        //Default view and batching renderer\n    public var batcher : Batcher;\n    public var camera : Camera;\n        //Default font for debug stuff etc\n    public var font : BitmapFont;\n        //This will be null if there's no default font\n    public var font_asset : AssetImage;\n        //Default render path is a forward renderer, and acts as a fallback for deferred\n        //render path is the active render path, can replace it to render in a different manner\n        //It will pass all batchers to be processed etc for you to do whatever with\n    public var render_path : RenderPath;\n    public var default_render_path : RenderPath;\n\n    @:isVar public var vsync (get,set) : Bool;\n    @:isVar public var target (get,set) : RenderTexture;\n    public var target_size : Vector;\n\n    public var should_clear : Bool = true;\n    public var stop : Bool = false;\n    public var stop_count : Int = 0;\n    public var clear_color : Color;\n\n    public var stats : RendererStats;\n\n    public function new( _core:luxe.Core, _asset:AssetImage ) {\n\n        core = _core;\n        font_asset = _asset;\n\n            //store the default FBO as on some platforms\n            //it is not the same as 0\n\n        default_fbo = GL.getParameter(GL.FRAMEBUFFER_BINDING);\n        default_rbo = GL.getParameter(GL.RENDERBUFFER_BINDING);\n\n        _debug(\"default Framebuffer set to \" + default_fbo);\n        _debug(\"default Renderbuffer set to \" + default_rbo);\n\n    } //new\n\n    public function init() {\n\n        state = new RenderState(this);\n        clear_color = new Color().rgb(0x1a1a1a);\n        stats = new RendererStats();\n        batchers = [];\n\n            //The default view\n        target_size = new Vector(Luxe.screen.w, Luxe.screen.h);\n        camera = new Camera();\n            //Create the default render path\n        default_render_path = new RenderPath( this );\n            //Apply it\n        render_path = default_render_path;\n\n            //init shaders\n        create_default_shaders();\n\n            //create the default batcher\n        batcher = new Batcher( this, 'default batcher' );\n        batcher.layer = 1;\n        add_batch(batcher);\n\n        #if !no_default_font\n\n            create_default_font();\n\n        #end //no_default_font\n\n        if(Luxe.core.app.config.render.depth) {\n                // Enable z buffer use\n            state.enable(GL.DEPTH_TEST);\n                // Accept fragment if it closer or equal away from the other\n            state.depth_function(GL.LEQUAL);\n                //Clear the depth buffer\n            GL.clearDepth(1.0);\n        }\n\n            //Enable blending\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\n\n            //Make sure that we aren't premultiplying the backbuffer\n        #if luxe_web\n            GL.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n        #end //luxe_web\n\n    } //init\n\n    public function destroy() {\n\n        clear( new luxe.Color().rgb(0xff440b) );\n\n    } //destroy\n\n    @:allow(phoenix.Batcher)\n    function sort_batchers( a:Batcher, b:Batcher ) {\n        if(a.layer < b.layer) return -1;\n        if(a.layer > b.layer) return 1;\n        if(a.sequence < b.sequence) return -1;\n        if(a.sequence > b.sequence) return 1;\n        return 1;\n    } //sort_batchers\n\n    public function add_batch( batch:Batcher ) {\n\n        batchers.push( batch );\n        batchers.sort( sort_batchers );\n\n    } //add_batch\n\n    public function remove_batch( batch:Batcher ) {\n\n        batchers.remove( batch );\n\n    } //remove_batch\n\n        /** Create a batcher, convenience for create batcher, add batcher (option), and create a camera for the batcher. */\n    public function create_batcher( ? options:luxe.options.BatcherOptions ) : Batcher {\n\n            //:todo: why is this hardcoded at 2\n        var _new_batcher_layer = 2;\n\n        if(options != null) {\n\n            def(options.name, 'batcher');\n            def(options.layer, _new_batcher_layer);\n            def(options.camera, new phoenix.Camera());\n\n        } else {\n            options = {\n                name : 'batcher',\n                camera : new phoenix.Camera(),\n                layer : _new_batcher_layer\n            }\n        }\n\n        var _batcher = new Batcher( this, options.name );\n            _batcher.view = options.camera;\n            _batcher.layer = options.layer;\n\n        if( options.no_add == null || options.no_add == false ) {\n            add_batch( _batcher );\n        }\n\n        return _batcher;\n\n    } //create_batcher\n\n\n    public function clear( _color:Color ) {\n\n        def(_color, clear_color);\n\n        GL.clearColor( _color.r, _color.g, _color.b, _color.a );\n\n        if( Luxe.core.app.config.render.depth ) {\n            GL.clear( GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT );\n            GL.clearDepth(1.0);\n        } else {\n            GL.clear( GL.COLOR_BUFFER_BIT );\n        }\n\n    } //clear\n\n    public function blend_mode(?_src_mode:BlendMode = BlendMode.src_alpha, _dst_mode:BlendMode = BlendMode.one_minus_src_alpha) {\n\n        GL.blendFunc(_src_mode, _dst_mode);\n\n    } //set blendmode\n\n    public function blend_equation(?_equation:BlendEquation = BlendEquation.add) {\n\n        GL.blendEquation(_equation);\n\n    } //set blend equation\n\n        //The resize handler\n    @:allow(luxe.Core)\n    function internal_resized(_w:Int, _h:Int) {\n\n        if(target == null) {\n            target_size.set_xy(_w, _h);\n        }\n\n    } //internal_resized\n\n        //The main render function\n    @:allow(luxe.Core)\n    function process() {\n\n        if(stop) { return; }\n\n        if(should_clear) {\n            clear( clear_color );\n        }\n\n        stats.batchers = batchers.length;\n        stats.reset();\n\n            //render\n        render_path.render( batchers, stats );\n\n        // stop_count++;\n        // if(stop_count >= 3) {\n        //     stop = true;\n        // }\n\n    } //process\n\n    public function onresize(e:Dynamic) {\n\n    } //onresize\n\n    function set_vsync( _vsync:Bool ) : Bool {\n\n        Luxe.core.app.windowing.enable_vsync( _vsync );\n\n        return vsync = _vsync;\n\n    } //set_vsync\n\n    function get_vsync() : Bool {\n\n        return vsync;\n\n    } //get_vsync\n\nfunction get_target() : RenderTexture {\n\n        return target;\n\n    } //get_target\n\n    function set_target( _target:RenderTexture ) {\n\n        if(_target != null) {\n\n            target_size.x = _target.width;\n            target_size.y = _target.height;\n\n            state.bindFramebuffer( _target.fbo );\n\n        } else {\n\n            target_size.x = Luxe.screen.w;\n            target_size.y = Luxe.screen.h;\n\n            state.bindFramebuffer();\n\n        }\n\n        return target = _target;\n\n    } //set_target\n\n    function create_default_shaders() {\n\n        _debug('creating default shaders...');\n\n        var vert = haxe.Resource.getString('default.vert.glsl');\n        var frag = haxe.Resource.getString('default.frag.glsl');\n        var frag_textured = haxe.Resource.getString('default.frag.textured.glsl');\n        var frag_bitmapfont = haxe.Resource.getString('default.frag.bitmapfont.glsl');\n\n        #if luxe_web\n            var ext = snow.modules.opengl.GL.current_context.getExtension('OES_standard_derivatives');\n        #end\n\n            //for web + mobile, these are required\n        #if !desktop\n            frag = \"precision mediump float;\\n\" + frag;\n            frag_textured = \"precision mediump float;\\n\" + frag_textured;\n            frag_bitmapfont = \"#extension GL_OES_standard_derivatives : enable\\n#extension OES_standard_derivatives : enable\\nprecision mediump float;\\n\" + frag_bitmapfont;\n        #end\n\n        var _plain = new Shader({ id:'luxe.shader', frag_id:'default', vert_id:'default' });\n        var _textured = new Shader({ id:'luxe.shader_textured', frag_id:'textured', vert_id:'default' });\n        var _font = new Shader({ id:'luxe.shader_bitmapfont', frag_id:'bitmapfont', vert_id:'default' });\n\n        //create compile and link the shaders\n        var _ok = true;\n\n            _ok = _ok && _plain.from_string( vert, frag );\n            _ok = _ok && _textured.from_string( vert, frag_textured );\n            _ok = _ok && _font.from_string( vert, frag_bitmapfont );\n\n        assert(_ok, 'Default shaders failed to compile or link. See log for errors');\n\n        //store for use\n\n        shaders = {\n            plain : { shader : _plain, source : { vert:vert, frag:frag } },\n            textured : { shader : _textured, source : { vert:vert, frag:frag_textured } },\n            bitmapfont : { shader : _font, source : { vert:vert, frag:frag_bitmapfont } },\n        };\n\n        _debug('done.');\n\n    } //create_default_shaders\n\n    function create_default_font() {\n\n        assertnull(font_asset, 'Renderer / failed to create the default font');\n\n        _debug(\"creating the default font...\");\n\n                //Create the font texture\n            var _font_texture = new Texture({\n                id:'luxe.font.png',\n                width: font_asset.image.width_actual,\n                height: font_asset.image.height_actual,\n                pixels: font_asset.image.pixels\n            });\n\n            assertnull(_font_texture, 'Renderer / failed to create the default font... font_texture was null.');\n\n            var _font_data = haxe.Resource.getString('default.fnt');\n\n            font = new BitmapFont({\n                id: 'luxe.font',\n                font_data: _font_data,\n                pages: [ _font_texture ]\n            });\n\n        _debug(\"done. \" + _font_texture.width + 'x' + _font_texture.height );\n\n    } //create_default_font\n\n} //renderer\n\n\n\nclass RendererStats {\n\n    public function new(){}\n    public var batchers : Int = 0;\n    public var geometry_count : Int = 0;\n    public var dynamic_batched_count : Int = 0;\n    public var static_batched_count : Int = 0;\n    public var visible_count : Int = 0;\n    public var draw_calls : Int = 0;\n    public var vert_count : Int = 0;\n\n    public function reset() {\n        geometry_count = 0;\n        dynamic_batched_count = 0;\n        static_batched_count = 0;\n        visible_count = 0;\n        draw_calls = 0;\n        vert_count = 0;\n    }\n\n    function toString() {\n        return\n            'Renderer Statistics\\n' +\n            '\\tbatcher count : ' + batchers + '\\n' +\n            '\\ttotal geometry : ' + geometry_count + '\\n' +\n            '\\tvisible geometry : ' + visible_count + '\\n' +\n            '\\tdynamic batched geometry : ' + dynamic_batched_count + '\\n' +\n            '\\tstatic batched geometry : ' + static_batched_count + '\\n' +\n            '\\ttotal draw calls : ' + draw_calls + '\\n' +\n            '\\ttotal vertices : ' + vert_count;\n    }\n\n}\n\n","package phoenix;\n\nimport luxe.options.ResourceOptions;\nimport luxe.resource.Resource;\nimport luxe.Resources;\n\nimport luxe.Log.*;\n\nimport phoenix.Vector;\nimport phoenix.Texture;\nimport phoenix.Matrix;\nimport phoenix.Batcher;\n\nimport snow.api.Promise;\nimport snow.api.buffers.Float32Array;\nimport snow.modules.opengl.GL;\nimport snow.types.Types.Error;\nimport snow.system.assets.Asset;\n\n\n@:allow(phoenix.Shader)\n@:allow(phoenix.geometry.Geometry)\nclass Uniforms {\n\n    var ints        : Map<String, Uniform<Int>>;\n    var floats      : Map<String, Uniform<Float>>;\n    var vector2s    : Map<String, Uniform<Vector>>;\n    var vector3s    : Map<String, Uniform<Vector>>;\n    var vector4s    : Map<String, Uniform<Vector>>;\n    var matrix4s    : Map<String, Uniform<Matrix>>;\n    var matrix4arrs : Map<String, Uniform<Float32Array>>;\n    var colors      : Map<String, Uniform<Color>>;\n    var textures    : Map<String, Uniform<Texture>>;\n\n    var dirty_ints          : Array<Uniform<Int>>;\n    var dirty_floats        : Array<Uniform<Float>>;\n    var dirty_vector2s      : Array<Uniform<Vector>>;\n    var dirty_vector3s      : Array<Uniform<Vector>>;\n    var dirty_vector4s      : Array<Uniform<Vector>>;\n    var dirty_matrix4s      : Array<Uniform<Matrix>>;\n    var dirty_matrix4arrs   : Array<Uniform<Float32Array>>;\n    var dirty_colors        : Array<Uniform<Color>>;\n    var dirty_textures      : Array<Uniform<Texture>>;\n\n    public function new() {\n        clear();\n    } //new\n\n    function destroy() {\n        ints = null;\n        floats = null;\n        vector2s = null;\n        vector3s = null;\n        vector4s = null;\n        matrix4s = null;\n        colors = null;\n        textures = null;\n        dirty_ints = null;\n        dirty_floats = null;\n        dirty_vector2s = null;\n        dirty_vector3s = null;\n        dirty_vector4s = null;\n        dirty_matrix4s = null;\n        dirty_matrix4arrs = null;\n        dirty_colors = null;\n        dirty_textures = null;\n    }\n\n    function clear() {\n\n        destroy();\n\n        ints        = new Map();\n        floats      = new Map();\n        vector2s    = new Map();\n        vector3s    = new Map();\n        vector4s    = new Map();\n        matrix4s    = new Map();\n        matrix4arrs = new Map();\n        colors      = new Map();\n        textures    = new Map();\n\n        dirty_ints          = [];\n        dirty_floats        = [];\n        dirty_vector2s      = [];\n        dirty_vector3s      = [];\n        dirty_vector4s      = [];\n        dirty_matrix4s      = [];\n        dirty_matrix4arrs   = [];\n        dirty_colors        = [];\n        dirty_textures      = [];\n\n    } //clear\n\n    public inline function set_int( _name:String, _value:Int, _location:Location ) : Void {\n\n        var _int = ints.get(_name);\n\n        if(_int != null) {\n            _int.value = _value;\n        } else {\n            _int = new Uniform<Int>(_name, _value, _location);\n            ints.set(_name, _int);\n        }\n\n        dirty_ints.push(_int);\n\n    } //set_int\n\n    public inline function set_float( _name:String, _value:Float, _location:Location ) : Void {\n\n        var _float = floats.get(_name);\n        \n        if(_float != null) {\n            _float.value = _value;\n        } else {\n            _float = new Uniform<Float>(_name, _value, _location);\n            floats.set(_name, _float);\n        }\n\n        dirty_floats.push(_float);\n\n    } //set_float\n\n    public inline function set_vector2( _name:String, _value:Vector, _location:Location ) : Void {\n\n        var _vector2 = vector2s.get(_name);\n        \n        if(_vector2 != null) {\n            _vector2.value = _value;\n        } else {\n            _vector2 = new Uniform<Vector>(_name, _value, _location);\n            vector2s.set(_name, _vector2);\n        }\n\n        dirty_vector2s.push(_vector2);\n\n    } //set_vector2\n\n    public inline function set_vector3( _name:String, _value:Vector, _location:Location ) : Void {\n\n        var _vector3 = vector3s.get(_name);\n        \n        if(_vector3 != null) {\n            _vector3.value = _value;\n        } else {\n            _vector3 = new Uniform<Vector>(_name, _value, _location);\n            vector3s.set(_name, _vector3);\n        }\n\n        dirty_vector3s.push(_vector3);\n\n    } //set_vector3\n\n    public inline function set_vector4( _name:String, _value:Vector, _location:Location ) : Void {\n\n        var _vector4 = vector4s.get(_name);\n        \n        if(_vector4 != null) {\n            _vector4.value = _value;\n        } else {\n            _vector4 = new Uniform<Vector>(_name, _value, _location);\n            vector4s.set(_name, _vector4);\n        }\n\n        dirty_vector4s.push(_vector4);\n\n    } //set_vector4\n\n    public inline function set_matrix4( _name:String, _value:Matrix, _location:Location ) : Void {\n\n        var _matrix4 = matrix4s.get(_name);\n        \n        if(_matrix4 != null) {\n            _matrix4.value = _value;\n        } else {\n            _matrix4 = new Uniform<Matrix>(_name, _value, _location);\n            matrix4s.set(_name, _matrix4);\n        }\n\n        dirty_matrix4s.push(_matrix4);\n\n    } //set_matrix4\n\n    public inline function set_matrix4_arr( _name:String, _value:Float32Array, _location:Location ) : Void {\n\n        var _matrix4 = matrix4arrs.get(_name);\n        \n        if(_matrix4 != null) {\n            _matrix4.value = _value;\n        } else {\n            _matrix4 = new Uniform<Float32Array>(_name, _value, _location);\n            matrix4arrs.set(_name, _matrix4);\n        }\n\n        dirty_matrix4arrs.push(_matrix4);\n\n    } //set_matrix4_arr\n\n    public inline function set_color( _name:String, _value:Color, _location:Location ) : Void {\n\n        var _color = colors.get(_name);\n        \n        if(_color != null) {\n            _color.value = _value;\n        } else {\n            _color = new Uniform<Color>(_name, _value, _location);\n            colors.set(_name, _color);\n        }\n\n        dirty_colors.push(_color);\n\n    } //set_color\n\n    public inline function set_texture( _name:String, _value:Texture, _location:Location ) : Void {\n\n        var _texture = textures.get(_name);\n        \n        if(_texture != null) {\n            _texture.value = _value;\n        } else {\n            _texture = new Uniform<Texture>(_name, _value, _location);\n            textures.set(_name, _texture);\n        }\n\n        dirty_textures.push(_texture);\n\n    } //set_texture\n\n    //inline\n    public function apply() {\n\n        while(dirty_ints.length > 0) { \n            var uf = dirty_ints.pop();\n            GL.uniform1i(uf.location, uf.value); \n        }\n\n        while(dirty_floats.length > 0) { \n            var uf = dirty_floats.pop();\n            GL.uniform1f(uf.location, uf.value); \n        }\n\n        while(dirty_vector2s.length > 0) { \n            var uf = dirty_vector2s.pop();\n            GL.uniform2f(uf.location, uf.value.x, uf.value.y); \n        }\n\n        while(dirty_vector3s.length > 0) { \n            var uf = dirty_vector3s.pop();\n            GL.uniform3f(uf.location, uf.value.x, uf.value.y, uf.value.z); \n        }\n\n        while(dirty_vector4s.length > 0) { \n            var uf = dirty_vector4s.pop();\n            GL.uniform4f(uf.location, uf.value.x, uf.value.y, uf.value.z, uf.value.w); \n        }\n\n        while(dirty_colors.length > 0) { \n            var uf = dirty_colors.pop();\n            GL.uniform4f(uf.location, uf.value.r, uf.value.g, uf.value.b, uf.value.a); \n        }\n\n        while(dirty_textures.length > 0) { \n            var uf = dirty_textures.pop();\n            GL.uniform1i(uf.location, uf.value.slot); uf.value.bind(); \n        }\n\n        while(dirty_matrix4s.length > 0) { \n            var uf = dirty_matrix4s.pop();\n            GL.uniformMatrix4fv(uf.location, false, uf.value.float32array()); \n        }\n\n        while(dirty_matrix4arrs.length > 0) { \n            var uf = dirty_matrix4arrs.pop();\n            GL.uniformMatrix4fv(uf.location, false, uf.value); \n        }\n\n    } //apply\n\n} //Uniforms\n\nclass Shader extends Resource {\n\n    public var log : String = '';\n\n    public var vert_source : String;\n    public var frag_source : String;\n    public var vert_id : String = '';\n    public var frag_id : String = '';\n\n    public var vert_shader : GLShader;\n    public var frag_shader : GLShader;\n    public var program : GLProgram;\n    public var shader : GLShader;\n\n    public var no_default_uniforms : Bool = false;\n    public var proj_attribute : Location;\n    public var view_attribute : Location;\n\n    public var uniforms:Uniforms;\n\n    public function new( _options:ShaderOptions ) {\n\n        assertnull(_options);\n\n        _options.resource_type = ResourceType.shader;\n\n        super( _options );\n\n        frag_id = _options.frag_id;\n        vert_id = _options.vert_id;\n        no_default_uniforms = def(_options.no_default_uniforms, false);\n\n        uniforms = new Uniforms();\n\n    } //new\n\n    public inline function activate() {\n\n        use();\n\n        uniforms.apply();\n\n            //I dont remember what this was doing here exactly\n        Luxe.renderer.state.activeTexture(GL.TEXTURE0);\n\n    } //activate\n\n    public function use() {\n    \n        if(program != null) {\n            Luxe.renderer.state.useProgram( program );\n        }\n\n    } //use\n\n    public inline function deactivate() {\n\n        Luxe.renderer.state.useProgram( null );\n\n    } //deactivate\n\n        /** Create a new shader based on the source of this shader. */\n    public function clone( _id:String ) {\n\n        var _clone = new Shader({\n            id: _id,\n            frag_id: frag_id,\n            vert_id: vert_id\n        });\n\n        _clone.from_string( vert_source, frag_source );\n\n        return _clone;\n\n    } //clone\n\n    public inline function set_int( _name:String, _value:Int ) : Void {\n        uniforms.set_int(_name, _value, location(_name));\n    } //set_int\n\n    public inline function set_float( _name:String, _value:Float ) : Void {\n        uniforms.set_float(_name, _value, location(_name));\n    } //set_float\n\n    public inline function set_vector2( _name:String, _value:Vector ) : Void {\n        uniforms.set_vector2(_name, _value, location(_name));\n    } //set_vector2\n\n    public inline function set_vector3( _name:String, _value:Vector ) : Void {\n        uniforms.set_vector3(_name, _value, location(_name));\n    } //set_vector3\n\n    public inline function set_vector4( _name:String, _value:Vector ) : Void {\n        uniforms.set_vector4(_name, _value, location(_name));\n    } //set_vector4\n\n    public inline function set_matrix4( _name:String, _value:Matrix ) : Void {\n        uniforms.set_matrix4(_name, _value, location(_name));\n    } //set_matrix4\n\n    public inline function set_matrix4_arr( _name:String, _value:Float32Array ) : Void {\n        uniforms.set_matrix4_arr(_name, _value, location(_name));\n    } //set_matrix4_arr\n\n    public inline function set_color( _name:String, _value:Color ) : Void {\n        uniforms.set_color(_name, _value, location(_name));\n    } //set_color\n\n    public inline function set_texture( _name:String, _value:Texture ) : Void {\n        uniforms.set_texture(_name, _value, location(_name));\n    } //set_texture\n\n\n    public function compile( _type : Int, _source:String ) : GLShader {\n\n        var _shader = GL.createShader( _type );\n\n            GL.shaderSource( _shader,  _source);\n            GL.compileShader(_shader);\n\n        var _compile_log = GL.getShaderInfoLog(_shader);\n        var _log = '';\n\n        if(_compile_log.length > 0) {\n\n            var _is_frag = (_type == GL.FRAGMENT_SHADER);\n            var _type_name = (_is_frag) ? 'frag' : 'vert';\n            var _type_id = (_is_frag) ? frag_id : vert_id;\n\n            _log += '\\n\\t// start -- ($_type_name / $_type_id) compile log --\\n';\n            _log +=  format_log(_compile_log);\n            _log += '\\n\\t// end --\\n';\n\n        } //_log.length\n\n        if(GL.getShaderParameter(_shader, GL.COMPILE_STATUS) == 0) {\n\n            add_log('\\tFailed to compile shader `$id`:\\n');\n            add_log( _log.length == 0 ? format_log(GL.getShaderInfoLog(_shader)) : _log );\n\n            GL.deleteShader(_shader);\n            _shader = null;\n\n            return null;\n\n        } //compile_status\n\n        return _shader;\n    }\n\n    public function link() : Bool {\n\n        program = GL.createProgram();\n\n        GL.attachShader(program, vert_shader);\n        GL.attachShader(program, frag_shader);\n\n            //Now we want to ensure that our locations are static\n        GL.bindAttribLocation( program, Batcher.vert_attribute,    'vertexPosition');\n        GL.bindAttribLocation( program, Batcher.tcoord_attribute,  'vertexTCoord');\n        GL.bindAttribLocation( program, Batcher.color_attribute,   'vertexColor');\n        GL.bindAttribLocation( program, Batcher.normal_attribute,  'vertexNormal');\n\n        GL.linkProgram(program);\n\n        if( GL.getProgramParameter(program, GL.LINK_STATUS) == 0) {\n            add_log(\"\\tFailed to link shader program:\");\n            add_log( format_log(GL.getProgramInfoLog(program)) );\n            GL.deleteProgram(program);\n            program = null;\n            return false;\n        }\n\n            //first bind it\n        use();\n\n            //:todo: this is being refactored for the new\n            //way more flexible shaders and rendering :}\n\n                //Matrices\n            if(!no_default_uniforms) {\n\n                proj_attribute = location('projectionMatrix');\n                view_attribute = location('modelViewMatrix');\n\n                var _tex0_attribute = location( 'tex0' );\n                var _tex1_attribute = location( 'tex1' );\n                var _tex2_attribute = location( 'tex2' );\n                var _tex3_attribute = location( 'tex3' );\n                var _tex4_attribute = location( 'tex4' );\n                var _tex5_attribute = location( 'tex5' );\n                var _tex6_attribute = location( 'tex6' );\n                var _tex7_attribute = location( 'tex7' );\n\n                if(_tex0_attribute != null) GL.uniform1i( _tex0_attribute, 0 );\n                if(_tex1_attribute != null) GL.uniform1i( _tex1_attribute, 1 );\n                if(_tex2_attribute != null) GL.uniform1i( _tex2_attribute, 2 );\n                if(_tex3_attribute != null) GL.uniform1i( _tex3_attribute, 3 );\n                if(_tex4_attribute != null) GL.uniform1i( _tex4_attribute, 4 );\n                if(_tex5_attribute != null) GL.uniform1i( _tex5_attribute, 5 );\n                if(_tex6_attribute != null) GL.uniform1i( _tex6_attribute, 6 );\n                if(_tex7_attribute != null) GL.uniform1i( _tex7_attribute, 7 );\n\n            }\n\n        return true;\n\n    } //link\n\n    public inline function location( _name : String ) : Location {\n        return GL.getUniformLocation( program, _name );\n    }\n\n//Resource\n\n    override function clear() {\n\n        if( vert_shader != null ) GL.deleteShader( vert_shader );\n        if( frag_shader != null ) GL.deleteShader( frag_shader );\n        if( program != null )     GL.deleteProgram( program );\n\n        vert_source = null;\n        frag_source = null;\n\n        uniforms.clear();\n\n    } //clear\n\n    override function reload() {\n\n        assert(state != ResourceState.destroyed);\n\n        clear();\n\n        return new Promise(function(resolve, reject) {\n\n            state = ResourceState.loading;\n\n            switch(frag_id) {\n                case 'default':  frag_source = Luxe.renderer.shaders.plain.source.frag;\n                case 'textured': frag_source = Luxe.renderer.shaders.textured.source.frag;\n            }\n\n            switch(vert_id) {\n                case 'default': vert_source = Luxe.renderer.shaders.plain.source.vert;\n            }\n\n            function _onfail(_err:Dynamic) {\n                state = ResourceState.failed;\n                reject(_err);\n            }\n\n                //one for the default shaders, already resolved\n            var _wait = [ Promise.resolve() ];\n\n            if(frag_source == null) {\n\n                var _frag = Luxe.snow.assets.text(frag_id);\n\n                _frag.then(function(_asset:AssetText) {\n                    frag_source = _asset.text;\n                });\n\n                _wait.push(_frag);\n\n            } //frag_source == null\n\n            if(vert_source == null) {\n\n                var _vert = Luxe.snow.assets.text(vert_id);\n\n                _vert.then(function(_asset:AssetText) {\n                    vert_source = _asset.text;\n                });\n\n                _wait.push(_vert);\n\n            } //vert_source\n\n            Promise.all(_wait).then(function(){\n\n                #if luxe_no_shader_prefix\n                        //:todo:hxsw: this must go\n                    var prefixes = #if luxe_web \"precision mediump float;\\n\" #else '' #end;\n                    frag_source = prefixes + frag_source;\n                #end //luxe_no_shader_prefix\n\n                if(from_string(vert_source, frag_source)) {\n                    state = ResourceState.loaded;\n                    resolve(this);\n                } else {\n                    _onfail(Error.error('`$id` failed to create :\\n\\n$log'));\n                }\n\n            }).error(function(err) {\n                _onfail(Error.error('`$id` failed to create :\\n\\t\\t$err\\n'));\n            });\n\n        }); //promise\n\n    } //reload\n\n        /** Loads shaders from a string, compiles, and links them */\n    public function from_string( _vert_source:String, _fragment_source:String ) {\n\n        inline function dump_log() {\n            if(log.length > 0) {\n                luxe.Log.log(log);\n            }\n        }\n\n        clear();\n\n        frag_source = _fragment_source;\n        vert_source = _vert_source;\n\n            //compile the sources\n        vert_shader = compile( GL.VERTEX_SHADER, vert_source );\n        frag_shader = compile( GL.FRAGMENT_SHADER, frag_source );\n\n        if( vert_shader == null || frag_shader == null ) {\n            dump_log();\n            return false;\n        }\n\n            //Link shader\n        if(!link()) {\n            dump_log();\n            return false;\n        }\n\n        return true;\n\n    } //\n\n    inline function add_log( _log:String ) {\n        log += _log;\n    }\n\n    override function toString() {\n        return 'Shader($id) vert:$vert_id / frag: $frag_id';\n    }\n\n//Internal\n\n    inline function format_log(_log:String) {\n        var _items = _log.split('\\n');\n        _items = _items.filter(function(s) { return StringTools.trim(s) != ''; });\n        _items = _items.map(function(s) { return '\\t\\t' + StringTools.trim(s); });\n        return _items.join('\\n');\n    }\n\n} //Shader\n\n@:allow(phoenix.Uniforms)\nclass Uniform<T> {\n\n    var name : String;\n    var value : T;\n    var location : Location;\n\n    inline function new(_name:String, _value:T, _location:Location) {\n        name = _name;\n        value = _value;\n        location = _location;\n    }\n\n} //Uniform\n\nprivate typedef Location = GLUniformLocation;\n\n\n","package phoenix;\n\nimport luxe.Objects;\n\nimport phoenix.Vector;\nimport phoenix.Quaternion;\nimport phoenix.Matrix;\nimport snow.api.buffers.Float32Array;\n\n\nclass Transform extends ID {\n\n    //access\n    @:isVar public var parent (get,set) : Transform;\n    @:isVar public var local (get,set) : Spatial;\n    @:isVar public var world (get,set) : Spatial;\n    @:isVar public var origin (get,set) : Vector;\n        //true if the transform needs refreshing,\n        //starts true since there are no values\n    @:isVar public var dirty (default,set) : Bool = true;\n\n        //alias to local.pos, local.rotation, local.scale\n    public var pos                  (get,set) : Vector;\n    public var rotation             (get,set) : Quaternion;\n    public var scale                (get,set) : Vector;\n\n    var _origin_undo_matrix : Matrix;\n    var _pos_matrix : Matrix;\n    var _rotation_matrix : Matrix;\n    var _setup : Bool = true;\n    var _cleaning : Bool = false;\n\n        //List of handler functions\n    var _clean_handlers : Array< Transform->Void >;\n    var _dirty_handlers : Array< Transform->Void >;\n    var _pos_handlers : Array< Vector->Void >;\n    var _rotation_handlers : Array< Quaternion->Void >;\n    var _scale_handlers : Array< Vector->Void >;\n    var _origin_handlers : Array< Vector->Void >;\n    var _parent_handlers : Array< Transform->Void >;\n\n    public inline function new() {\n\n        super('transform');\n\n        local = new Spatial();\n        world = new Spatial();\n\n        _origin_undo_matrix = new Matrix();\n        _pos_matrix = new Matrix();\n        _rotation_matrix = new Matrix();\n\n        origin = new Vector();\n\n            //Whenever the local transform changes we need to know\n        local.pos_changed = on_local_pos_change;\n        local.rotation_changed = on_local_rotation_change;\n        local.scale_changed = on_local_scale_change;\n\n        _setup = false;\n\n    } //new\n\n\n    var _destroying = false;\n\n    public function destroy() {\n\n        _destroying = true;\n\n            //no longer listening\n        if(parent != null) {\n            parent.unlisten(on_parent_cleaned);\n        }\n\n            //destroy resources and memory\n        _clean_handlers = null;\n        _dirty_handlers = null;\n        _pos_handlers = null;\n        _rotation_handlers = null;\n        _scale_handlers = null;\n        _origin_handlers = null;\n        _parent_handlers = null;\n\n            //clean up\n        local.destroy();\n        world.destroy();\n\n        local = null;\n        world = null;\n        origin = null;\n        _origin_undo_matrix = null;\n        _pos_matrix = null;\n        _rotation_matrix = null;\n\n    } //destroy\n\n    inline function set_dirty( _dirty:Bool ) : Bool {\n\n        dirty = _dirty;\n\n        if(  dirty &&\n            !_setup &&\n            _dirty_handlers != null &&\n            _dirty_handlers.length > 0\n        ) {\n            propagate_dirty();\n        }\n\n        return dirty;\n\n    } //set_dirty\n\n        //when the local transforms change we become dirty\n    inline function on_local_pos_change( v:Vector ) {\n\n        dirty = true;\n\n        if(_pos_handlers != null &&\n           _pos_handlers.length > 0) {\n                propagate_pos( v );\n        }\n\n    } //local pos changed\n\n    inline function on_local_rotation_change( r:Quaternion ) {\n\n        dirty = true;\n\n        if(_rotation_handlers != null &&\n           _rotation_handlers.length > 0) {\n                propagate_rotation( r );\n        }\n\n    } //local rotation changed\n\n    inline function on_local_scale_change( s:Vector ) {\n\n        dirty = true;\n\n        if(_scale_handlers != null &&\n           _scale_handlers.length > 0) {\n                propagate_scale( s );\n        }\n\n    } //local scale changed\n\n    inline function on_parent_cleaned( p:Transform ) {\n\n        dirty = true;\n\n    } //on_parent_cleaned\n\n    inline function get_local() : Spatial {\n\n        return local;\n\n    } //get_local\n\n    inline function set_local( l:Spatial ) : Spatial {\n\n        if(l != null) {\n\n            dirty = true;\n\n            l.pos_changed = on_local_pos_change;\n            l.rotation_changed = on_local_rotation_change;\n            l.scale_changed = on_local_scale_change;\n\n        }\n\n        return local = l;\n\n    } //set_local\n\n        //whenever the world transform is requested, make sure it's up to date\n    inline function get_world() : Spatial {\n\n        if( !_destroying ) {\n            clean_check();\n        }\n\n        return world;\n\n    } //get_world\n\n    @:noCompletion public inline function clean_check() {\n\n            //make sure the parent is updated\n        if(parent != null) {\n\n            if(parent.dirty) {\n                parent.clean();\n            } //parent.dirty\n\n        } //parent != null\n\n        if(dirty && !_cleaning) {\n            clean();\n        } //dirty\n\n    }//clean_check\n\n    @:noCompletion public function clean() {\n\n        if(!dirty) {\n            return;\n        }\n\n            //flag to avoid loops\n        _cleaning = true;\n\n            //update local matrices\n        _pos_matrix.makeTranslation( local.pos.x, local.pos.y, local.pos.z );\n        _rotation_matrix.makeRotationFromQuaternion( local.rotation );\n        _origin_undo_matrix.makeTranslation( -origin.x, -origin.y, -origin.z );\n\n                //translate to origin\n        local.matrix.makeTranslation( origin.x, origin.y, origin.z );\n\n                //rotation relative to origin\n            local.matrix.multiply(_rotation_matrix);\n                //scale up relative to origin\n            local.matrix.scale(local.scale);\n                //apply position\n            local.matrix.setPosition( local.pos );\n\n            //undo origin translation\n        local.matrix.multiply(_origin_undo_matrix);\n\n            //update world matrix\n        if(parent != null) {\n            world.matrix = world.matrix.multiplyMatrices( parent.world.matrix, local.matrix );\n        } else {\n            world.matrix = local.matrix.clone();\n        }\n\n            //update world spatial,\n            //saying false allows it to decide\n            //if this code happens or not\n        world.decompose(false);\n\n            //clear flags\n        dirty = false;\n        _cleaning = false;\n\n        if( _clean_handlers != null &&\n            _clean_handlers.length > 0) {\n                propagate_clean();\n        }\n\n    } //clean\n\n    inline function toString() {\n        return 'Transform ($id)';\n    } //toString\n\n    inline function get_origin() : Vector {\n\n        return origin;\n\n    } //get_origin\n\n    inline function set_origin(o:Vector) : Vector {\n\n        dirty = true;\n\n        origin = o;\n\n        if(_origin_handlers != null &&\n           _origin_handlers.length > 0) {\n            propagate_origin( origin );\n        }\n\n        return origin;\n\n    } //set_origin\n\n    inline function set_world(w:Spatial) : Spatial {\n\n        if(w == null) {\n            return world = w;\n        }\n\n        dirty = true;\n\n        return world = w;\n\n    } //set_world\n\n    inline function get_parent() : Transform {\n\n        return parent;\n\n    } //get_parent\n\n    inline function set_parent( _p:Transform ) {\n\n        dirty = true;\n\n            //clear existing listener\n        if(parent != null) {\n            parent.unlisten(on_parent_cleaned);\n        }\n\n        parent = _p;\n\n        if(_parent_handlers != null &&\n           _parent_handlers.length > 0) {\n                propagate_parent( parent );\n        }\n\n        if(parent != null) {\n            //we need to know when the parent transform is changed, this makes us dirty,\n            //and since each full clean can clear the dirty flag, we use this to make sure it's always synced\n            parent.listen(on_parent_cleaned);\n        }\n\n        return parent;\n\n    } //set_parent\n\n    inline function get_pos() {\n        return local.pos;\n    } //get_pos\n\n    inline function get_rotation() {\n        return local.rotation;\n    } //get_rotation\n\n    inline function get_scale() {\n        return local.scale;\n    } //get_scale\n\n\n    inline function set_pos(value:Vector) {\n        return local.pos = value;\n    } //set_pos\n\n    inline function set_rotation(value:Quaternion) {\n        return local.rotation = value;\n    } //set_rotation\n\n    inline function set_scale(value:Vector) {\n        return local.scale = value;\n    } //set_scale\n\n\n    inline function propagate_clean() {\n        for(_handler in _clean_handlers) {\n            if(_handler != null) {\n                _handler(this);\n            }\n        }\n    } //propagate clean\n\n    inline function propagate_dirty() {\n        for(_handler in _dirty_handlers) {\n            if(_handler != null) {\n                _handler(this);\n            }\n        }\n    } //propagate dirty\n\n    inline function propagate_pos( _pos:Vector ) {\n        for(_handler in _pos_handlers) {\n            if(_handler != null) {\n                _handler(_pos);\n            }\n        }\n    } //propagate pos\n\n    inline function propagate_rotation( _rotation:Quaternion ) {\n        for(_handler in _rotation_handlers) {\n            if(_handler != null) {\n                _handler(_rotation);\n            }\n        }\n    } //propagate rotation\n\n    inline function propagate_scale( _scale:Vector ) {\n        for(_handler in _scale_handlers) {\n            if(_handler != null) {\n                _handler(_scale);\n            }\n        }\n    } //propagate scale\n\n    inline function propagate_origin( _origin:Vector ) {\n        for(_handler in _origin_handlers) {\n            if(_handler != null) {\n                _handler(_origin);\n            }\n        }\n    } //propagate origin\n\n    inline function propagate_parent( _parent:Transform ) {\n        for(_handler in _parent_handlers) {\n            if(_handler != null) {\n                _handler(_parent);\n            }\n        }\n    } //propagate parent\n\n    public inline function listen( _handler : Transform->Void ) {\n\n        if(_clean_handlers == null) {\n            _clean_handlers = [];\n        }\n\n        _clean_handlers.push( _handler );\n\n    } //listen\n\n    public inline function unlisten( _handler : Transform->Void ) {\n\n        if(_clean_handlers == null) {\n            return false;\n        }\n\n        return _clean_handlers.remove( _handler );\n\n    } //unlisten\n\n    public inline function listen_dirty( _handler : Transform->Void ) {\n\n        if(_dirty_handlers == null) {\n            _dirty_handlers = [];\n        }\n\n        _dirty_handlers.push( _handler );\n\n    } //listen_dirty\n\n    public inline function unlisten_dirty( _handler : Transform->Void ) {\n\n        if(_dirty_handlers == null) {\n            return false;\n        }\n\n        return _dirty_handlers.remove( _handler );\n\n    } //unlisten_dirty\n\n    public inline function listen_pos( _handler : Vector->Void ) {\n\n        if(_pos_handlers == null) {\n            _pos_handlers = [];\n        }\n\n        _pos_handlers.push( _handler );\n\n    } //listen_pos\n\n    public inline function unlisten_pos( _handler : Vector->Void ) {\n\n        if(_pos_handlers == null) {\n            return false;\n        }\n\n        return _pos_handlers.remove( _handler );\n\n    } //unlisten_pos\n\n    public inline function listen_scale( _handler : Vector->Void ) {\n\n        if(_scale_handlers == null) {\n            _scale_handlers = [];\n        }\n\n        _scale_handlers.push( _handler );\n\n    } //listen_scale\n\n    public inline function unlisten_scale( _handler : Vector->Void ) {\n\n        if(_scale_handlers == null) {\n            return false;\n        }\n\n        return _scale_handlers.remove( _handler );\n\n    } //unlisten_scale\n\n    public inline function listen_rotation( _handler : Quaternion->Void ) {\n\n        if(_rotation_handlers == null) {\n            _rotation_handlers = [];\n        }\n\n        _rotation_handlers.push( _handler );\n\n    } //listen_rotation\n\n    public inline function unlisten_rotation( _handler : Quaternion->Void ) {\n\n        if(_rotation_handlers == null) {\n            return false;\n        }\n\n        return _rotation_handlers.remove( _handler );\n\n    } //unlisten_rotation\n\n    public inline function listen_origin( _handler : Vector->Void ) {\n\n        if(_origin_handlers == null) {\n            _origin_handlers = [];\n        }\n\n        _origin_handlers.push( _handler );\n\n    } //listen_origin\n\n    public inline function unlisten_origin( _handler : Vector->Void ) {\n\n        if(_origin_handlers == null) {\n            return false;\n        }\n\n        return _origin_handlers.remove( _handler );\n\n    } //unlisten_origin\n\n    public inline function listen_parent( _handler : Transform->Void ) {\n\n        if(_parent_handlers == null) {\n            _parent_handlers = [];\n        }\n\n        _parent_handlers.push( _handler );\n\n    } //listen_parent\n\n    public inline function unlisten_parent( _handler : Transform->Void ) {\n\n        if(_parent_handlers == null) {\n            return false;\n        }\n\n        return _parent_handlers.remove( _handler );\n\n    } //unlisten_parent\n\n} //Transform\n\nclass Spatial {\n\n    @:isVar public var pos                  (default,set) : Vector;\n    @:isVar public var rotation             (default,set) : Quaternion;\n    @:isVar public var scale                (default,set) : Vector;\n\n    @:isVar public var matrix               (get,    set) : Matrix;\n\n    public var floats : Float32Array;\n    public var ignore_listeners : Bool = false;\n    public var auto_decompose : Bool = false;\n\n    @:noCompletion public var pos_changed : Vector -> Void;\n    @:noCompletion public var rotation_changed : Quaternion -> Void;\n    @:noCompletion public var scale_changed : Vector -> Void;\n\n    var _setup : Bool = true;\n\n    public inline function new() {\n\n        matrix = new Matrix();\n        floats = matrix.float32array();\n\n        pos = new Vector();\n        rotation = new Quaternion();\n        scale = new Vector(1,1,1);\n\n        _setup = false;\n\n    } //new\n\n    public inline function destroy() {\n\n        matrix = null;\n        floats = null;\n        pos = null;\n        rotation = null;\n        scale = null;\n\n    } //destroy\n\n        //assigns the local values (pos/rotation/scale) according to the matrix\n        //when called manually, will make sure it happens using force.\n        //if force is false, auto_decompose will apply\n    public inline function decompose( _force:Bool = true ) {\n\n        if( auto_decompose || _force ) {\n\n            var _transform = matrix.decompose();\n\n            pos = _transform.pos;\n            rotation = _transform.rotation;\n            scale = _transform.scale;\n\n        } //auto_decompose\n\n        return this;\n\n    } //decompose\n\n    inline function get_matrix() : Matrix {\n\n        return matrix;\n\n    } //get_matrix\n\n    inline function set_matrix(_m:Matrix) {\n\n        matrix = _m;\n\n            //when updating, update the float32array\n        if( _m != null ) {\n            floats = matrix.float32array();\n        }\n\n        return matrix;\n\n    } //set_matrix\n\n    inline function propagate_pos( _p:Vector ) {\n        if(pos_changed != null && !ignore_listeners) {\n            pos_changed(_p);\n        }\n    } //propagate pos\n\n    inline function propagate_rotation( _r:Quaternion ) {\n        if(rotation_changed != null && !ignore_listeners) {\n            rotation_changed(_r);\n        }\n    } //propagate rotation\n\n    inline function propagate_scale( _s:Vector ) {\n        if(scale_changed != null && !ignore_listeners) {\n            scale_changed(_s);\n        }\n    } //propagate scale\n\n    inline function set_pos( _p:Vector ) {\n\n        pos = _p;\n\n        if( _p != null ) {\n\n            Vector.Listen( pos, _pos_change );\n\n            propagate_pos(pos);\n\n        } //\n\n        return pos;\n\n    } //set_pos\n\n    inline function set_rotation( _r:Quaternion ) {\n\n        rotation = _r;\n\n        if( _r != null ) {\n\n            Quaternion.Listen( rotation, _rotation_change );\n\n            propagate_rotation(rotation);\n\n        } //\n\n        return rotation;\n\n    } //set_rotation\n\n    inline function set_scale( _s:Vector ) {\n\n        scale = _s;\n\n        if( _s != null ) {\n\n            Vector.Listen( scale, _scale_change );\n\n            propagate_scale(scale);\n\n        } //\n\n        return scale;\n\n    } //set_scale\n\n //Sub component change listeners\n\n        //An internal callback for when x y or z on a transform changes\n    inline function _pos_change(_v:Float) { this.set_pos(pos); }\n        //An internal callback for when x y or z on a transform changes\n    inline function _scale_change(_v:Float) { this.set_scale(scale); }\n        //An internal callback for when x y or z on a transform changes\n    inline function _rotation_change(_v:Float) { this.set_rotation(rotation); }\n\n} //Spatial\n","package phoenix;\n\nimport luxe.utils.Maths;\nimport luxe.Log.*;\n\nclass Vector {\n\n    @:isVar public var x (default, set) : Float = 0;\n    @:isVar public var y (default, set) : Float = 0;\n    @:isVar public var z (default, set) : Float = 0;\n    @:isVar public var w (default, default) : Float = 0;\n\n    @:isVar public var length        (get, set) : Float;\n    @:isVar public var lengthsq      (get, null) : Float;\n    @:isVar public var angle2D       (get, set) : Float;\n    @:isVar public var normalized    (get, null) : Vector;\n    @:isVar public var inverted      (get, null) : Vector;\n\n    public var ignore_listeners : Bool = false;\n\n    @:isVar public var listen_x(default,default) : Float -> Void;\n    @:isVar public var listen_y(default,default) : Float -> Void;\n    @:isVar public var listen_z(default,default) : Float -> Void;\n\n    var _construct = false;\n\n    public inline function new( _x:Float = 0, _y:Float = 0, _z:Float = 0, _w:Float = 0 ) {\n\n        _construct = true;\n\n            x = _x;\n            y = _y;\n            z = _z;\n            w = _w;\n\n        _construct = false;\n\n    } //new\n\n    public inline function copy_from( _other:Vector ) {\n\n        set( _other.x, _other.y, _other.z, _other.w );\n\n        return this;\n\n    } //copy_from\n\n    public inline function set( _x:Float, _y:Float, _z:Float, _w:Float ) {\n\n        var prev = ignore_listeners;\n\n        ignore_listeners = true;\n\n            x = _x;\n            y = _y;\n            z = _z;\n            w = _w;\n\n        ignore_listeners = prev;\n\n        if(listen_x != null && !ignore_listeners) listen_x(x);\n        if(listen_y != null && !ignore_listeners) listen_y(y);\n        if(listen_z != null && !ignore_listeners) listen_z(z);\n\n        return this;\n\n    } //set\n\n    public inline function set_xy( _x:Float, _y:Float ) {\n\n        var prev = ignore_listeners;\n\n        ignore_listeners = true;\n\n            x = _x;\n            y = _y;\n\n        ignore_listeners = prev;\n\n        if(listen_x != null && !ignore_listeners) listen_x(x);\n        if(listen_y != null && !ignore_listeners) listen_y(y);\n\n        return this;\n\n    } //set_xy\n\n    public inline function set_xyz( _x:Float, _y:Float, _z:Float ) {\n\n        var prev = ignore_listeners;\n\n        ignore_listeners = true;\n\n            x = _x;\n            y = _y;\n            z = _z;\n\n        ignore_listeners = prev;\n\n        if(listen_x != null && !ignore_listeners) listen_x(x);\n        if(listen_y != null && !ignore_listeners) listen_y(y);\n        if(listen_z != null && !ignore_listeners) listen_z(z);\n\n        return this;\n\n    } //set_xyz\n\n        //_t is between 0 and 1\n    public inline function lerp_xy( _dest_x:Float, _dest_y:Float, _t: Float ) {\n\n        set_xy(\n            Maths.lerp(x, _dest_x, _t),\n            Maths.lerp(y, _dest_y, _t)\n        );\n\n        return this;\n\n    } //lerp_xy\n\n        //_t is between 0 and 1\n    public inline function lerp_xyz( _dest_x:Float, _dest_y:Float, _dest_z:Float, _t: Float ) {\n\n        set_xyz(\n            Maths.lerp(x, _dest_x, _t),\n            Maths.lerp(y, _dest_y, _t),\n            Maths.lerp(z, _dest_z, _t)\n        );\n\n        return this;\n\n    } //lerp_xyz\n\n        //_t is between 0 and 1\n    public inline function lerp( _other:Vector, _t: Float ) {\n\n        set_xyz(\n            Maths.lerp(x, _other.x, _t),\n            Maths.lerp(y, _other.y, _t),\n            Maths.lerp(z, _other.z, _t)\n        );\n\n        return this;\n\n    } //lerp\n\n    public inline function weighted_average_xy( _dest_x:Float, _dest_y:Float, _slowness:Float ) {\n\n        set_xy(\n            Maths.weighted_avg(x, _dest_x, _slowness),\n            Maths.weighted_avg(y, _dest_y, _slowness)\n        );\n\n        return this;\n\n    } //weighted_average_xy\n\n    public inline function weighted_average_xyz( _dest_x:Float, _dest_y:Float, _dest_z:Float, _slowness:Float ) {\n\n        set_xyz(\n            Maths.weighted_avg(x, _dest_x, _slowness),\n            Maths.weighted_avg(y, _dest_y, _slowness),\n            Maths.weighted_avg(z, _dest_z, _slowness)\n        );\n\n        return this;\n\n    } //weighted_average_xyz\n\n    public inline function int() {\n\n        set_xyz( Math.round(x), Math.round(y), Math.round(z) );\n\n        return this;\n\n    } //int\n\n    public inline function int_x() {\n\n        x = Math.round(x);\n\n        return this;\n\n    } //int_z\n\n    public inline function int_y() {\n\n        y = Math.round(y);\n\n        return this;\n\n    } //int_y\n\n    public inline function int_z() {\n\n        z = Math.round(z);\n\n        return this;\n\n    } //int_y\n\n    inline function toString() {\n\n        return \"{ x:\"+x + \", y:\" + y + \", z:\" + z  + \" }\" ;\n\n    } //toString\n\n    public inline function equals(other:Vector) {\n        return (x == other.x && y == other.y && z == other.z && w == other.w);\n    }\n\n    public inline function clone() {\n        return new Vector(x, y, z, w);\n    } //clone\n\n    public inline function normalize() {\n        return divideScalar( length );\n    } //normalize\n\n    public inline function dot(other:Vector) {\n\n        return x * other.x + y * other.y + z * other.z;\n\n    } //dot\n\n\n    public inline function cross( a:Vector, b:Vector ) {\n\n        set_xyz( a.y * b.z - a.z * b.y,\n                 a.z * b.x - a.x * b.z,\n                 a.x * b.y - a.y * b.x );\n\n        return this;\n\n    } //cross\n\n    public function invert() : Vector {\n\n            set_xyz(-x, -y, -z);\n\n        return this;\n\n    } //invert\n\n//Static Functions\n\n    public static inline function Add(a:Vector, b:Vector) {\n        return new Vector(\n            a.x + b.x,\n            a.y + b.y,\n            a.z + b.z\n        );\n    } //Add\n\n    public static inline function Subtract(a:Vector, b:Vector) {\n        return new Vector(\n            a.x - b.x,\n            a.y - b.y,\n            a.z - b.z\n        );\n    } //Subtract\n\n    public static inline function MultiplyVector(a:Vector, b:Vector) : Vector {\n        return new Vector(\n            a.x * b.x,\n            a.y * b.y,\n            a.z * b.z\n        );\n    } //MultiplyVector\n\n    public static inline function DivideVector(a:Vector, b:Vector) {\n        return new Vector(\n            a.x / b.x,\n            a.y / b.y,\n            a.z / b.z\n        );\n    } //DivideVector\n\n    public static function Multiply(a:Vector, b:Float) {\n        return new Vector(\n            a.x * b,\n            a.y * b,\n            a.z * b\n        );\n    } //Multiply\n\n    public static inline function Divide(a:Vector, b:Float) {\n        return new Vector(\n            a.x / b,\n            a.y / b,\n            a.z / b\n        );\n    } //Divide\n\n    public static inline function AddScalar(a:Vector, b:Float) {\n        return new Vector(\n            a.x + b,\n            a.y + b,\n            a.z + b\n        );\n    } //AddScalar\n\n    public static inline function SubtractScalar(a:Vector, b:Float) {\n        return new Vector(\n            a.x - b,\n            a.y - b,\n            a.z - b\n        );\n    } //SubtractScalar\n\n    public static inline function Cross(a:Vector, b:Vector) {\n        return new Vector(\n             a.y * b.z - a.z * b.y,\n             a.z * b.x - a.x * b.z,\n             a.x * b.y - a.y * b.x\n        );\n    } //Cross\n\n    public static inline function RotationTo(a:Vector,b:Vector) {\n\n        return a.rotationTo(b);\n\n    } //RotationTo\n\n    public static function Listen( _v:Vector, listener ) {\n\n        _v.listen_x = listener;\n        _v.listen_y = listener;\n        _v.listen_z = listener;\n\n    } //Listen\n\n// Operations\n\n    public inline function add(other:Vector) {\n\n        assertnull(other);\n\n        set_xyz( x + other.x, y + other.y, z + other.z );\n\n        return this;\n\n    } //add\n\n    public inline function add_xyz( _x:Float = 0, _y:Float = 0, _z:Float = 0 ) {\n\n        set_xyz( x + _x, y + _y, z + _z);\n\n        return this;\n\n    } //add_xyz\n\n\n    public inline function subtract(other:Vector) {\n\n        assertnull(other);\n\n        set_xyz( x - other.x, y - other.y, z - other.z );\n\n        return this;\n\n    } //subtract\n\n    public inline function subtract_xyz( _x:Float = 0, _y:Float = 0, _z:Float = 0 ) {\n\n        set_xyz( x - _x, y - _y, z - _z);\n\n        return this;\n\n    } //subtract_xyz\n\n    public inline function multiply(other:Vector) {\n\n        assertnull(other);\n\n        set_xyz( x * other.x, y * other.y, z * other.z );\n\n        return this;\n\n    } //multiply\n\n    public inline function multiply_xyz( _x:Float = 1, _y:Float = 1, _z:Float = 1 ) {\n\n        set_xyz( x * _x, y * _y, z * _z);\n\n        return this;\n\n    } //multiply_xyz\n\n    public inline function divide(other:Vector) {\n\n        assertnull(other);\n        assert(other.x != 0, 'Vector: division by zero (other.x)');\n        assert(other.y != 0, 'Vector: division by zero (other.y)');\n\n        set_xyz( x / other.x, y / other.y, z / other.z );\n\n        return this;\n\n    } //divide\n\n    public inline function divide_xyz( _x:Float = 1, _y:Float = 1, _z:Float = 1 ) {\n\n        assert(_x != 0, 'Vector.divide_xyz: division by zero (x)');\n        assert(_y != 0, 'Vector.divide_xyz: division by zero (y)');\n        assert(_z != 0, 'Vector.divide_xyz: division by zero (z)');\n\n        set_xyz( x / _x, y / _y, z / _z);\n\n        return this;\n\n    } //multiply_xyz\n\n\n    public inline function addScalar( v:Float ) {\n\n        set_xyz( x + v, y + v, z + v );\n\n        return this;\n\n    } //addScalar\n\n    public inline function subtractScalar( v:Float ) {\n\n        set_xyz( x - v, y - v, z - v );\n\n        return this;\n\n    } //subtractScalar\n\n     public inline function multiplyScalar( v:Float ) {\n\n        set_xyz( x * v, y * v, z * v );\n\n        return this;\n\n    } //multiplyScalar\n\n    public inline function divideScalar( v:Float ) : Vector {\n\n        if ( v != 0 ) {\n\n            set_xyz( x / v, y / v, z / v );\n\n        } else {\n\n            set_xyz(0, 0, 0);\n\n        }\n\n        return this;\n\n    } //divideScalar\n\n\n//Properties\n\n    inline function set_length( value:Float ) : Float {\n\n        normalize().multiplyScalar( value );\n\n        return value;\n\n    } //set_length\n\n    inline function get_length() : Float {\n\n        return Math.sqrt( x * x + y * y + z * z );\n\n    } //get_length\n\n\n    inline function get_lengthsq() : Float {\n\n        return x * x + y * y + z * z;\n\n    } //get_lengthsq\n\n    inline function get_normalized() {\n\n        return Vector.Divide( this, length );\n\n    } //get_normalized\n\n    inline function set_x(_x:Float) : Float {\n\n        x = _x;\n\n        if(_construct) return x;\n\n            if(listen_x != null && !ignore_listeners) listen_x(_x);\n\n        return x;\n\n    } //set_x\n\n    inline function set_y(_y:Float) : Float {\n\n        y = _y;\n\n        if(_construct) return y;\n\n            if(listen_y != null && !ignore_listeners) listen_y(_y);\n\n        return y;\n\n    } //set_y\n\n    inline function set_z(_z:Float) : Float {\n\n        z = _z;\n\n        if(_construct) return z;\n\n            if(listen_z != null && !ignore_listeners) listen_z(_z);\n\n        return z;\n\n    } //set_z\n\n    inline function get_inverted() : Vector {\n\n        return new Vector(-x,-y,-z);\n\n    } //get_inverted\n\n\n        //Changes the angle of the vector.\n        //X and Y will change, length stays the same.\n    inline function set_angle2D( value : Float ) : Float {\n\n        var len:Float = length;\n\n            set_xy(Math.cos(value) * len, Math.sin(value) * len);\n\n        return value;\n    }\n\n        //Get the angle of this vector.\n    inline function get_angle2D():Float {\n\n        return Math.atan2(y, x);\n\n    }\n\n//Convenience functions\n\n        //Sets the length under the given value.\n        //Nothing is done if the vector is already shorter.\n        //max The max length this vector can be.\n    public inline function truncate( max:Float ) : Vector {\n\n        length = Math.min(max, length);\n\n        return this;\n\n    } //truncate\n\n    public inline function rotationTo( other:Vector ) : Float {\n        var theta =  Math.atan2(  other.x - x , other.y - y );\n        var r = -(180.0 + (theta*180.0/Math.PI));\n        return r;\n    }\n\n//Transforms\n\n    public inline function applyQuaternion( q:Quaternion ) : Vector {\n\n        var qx = q.x;\n        var qy = q.y;\n        var qz = q.z;\n        var qw = q.w;\n\n        var ix = qw * x + qy * z - qz * y;\n        var iy = qw * y + qz * x - qx * z;\n        var iz = qw * z + qx * y - qy * x;\n        var iw = -qx * x - qy * y - qz * z;\n\n            set_xyz( ix * qw + iw * -qx + iy * -qz - iz * -qy,\n                     iy * qw + iw * -qy + iz * -qx - ix * -qz,\n                     iz * qw + iw * -qz + ix * -qy - iy * -qx );\n\n        return this;\n\n    } //applyQuaternion\n\n    public inline function applyProjection( m:Matrix ) : Vector {\n\n        var e = m.elements;\n        var x = this.x, y = this.y, z = this.z;\n        var d:Float = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\n            set_xyz( (e[0] * x + e[4] * y + e[8] * z + e[12]) * d,\n                     (e[1] * x + e[5] * y + e[9] * z + e[13]) * d,\n                     (e[2] * x + e[6] * y + e[10] * z + e[14]) * d );\n\n        return this;\n\n    } //applyProjection\n\n    public inline function transform( _m:Matrix ) : Vector {\n\n        var _x = x;\n        var _y = y;\n        var _z = z;\n\n        var e = _m.elements;\n\n            set_xyz( e[0] * _x + e[4] * _y + e[8]  * _z + e[12],\n                     e[1] * _x + e[5] * _y + e[9]  * _z + e[13],\n                     e[2] * _x + e[6] * _y + e[10] * _z + e[14] );\n\n        return this;\n\n    } //transform\n\n    public inline function transformDirection( m:Matrix ) : Vector {\n\n        var e = m.elements;\n        var x = this.x, y = this.y, z = this.z;\n\n            set_xyz( e[0] * x + e[4] * y + e[8] * z,\n                     e[1] * x + e[5] * y + e[9] * z,\n                     e[2] * x + e[6] * y + e[10] * z );\n\n        normalize();\n\n        return this;\n\n    } //transformDirection\n\n    public inline function setEulerFromRotationMatrix (m:Matrix, order:ComponentOrder = XYZ) : Vector {\n\n        var te = m.elements;\n        var m11 = te[0], m12 = te[4], m13 = te[8];\n        var m21 = te[1], m22 = te[5], m23 = te[9];\n        var m31 = te[2], m32 = te[6], m33 = te[10];\n\n        var _x = x;\n        var _y = y;\n        var _z = z;\n\n        if (order == XYZ) {\n\n            _y = Math.asin( Maths.clamp( m13, -1, 1 ) );\n\n            if (Math.abs(m13) < 0.99999)\n            {\n                _x = Math.atan2( -m23, m33);\n                _z = Math.atan2( -m12, m11);\n            } else {\n                _x = Math.atan2( m32, m22 );\n                _z = 0;\n            }\n\n        }  else if ( order == YXZ ) {\n\n            _x = Math.asin( -Maths.clamp( m23, -1, 1 ) );\n\n            if ( Math.abs( m23 ) < 0.99999 ) {\n                _y = Math.atan2( m13, m33 );\n                _z = Math.atan2( m21, m22 );\n            } else {\n                _y = Math.atan2( -m31, m11 );\n                _z = 0;\n            }\n\n        } else if ( order == ZXY ) {\n\n            _x = Math.asin( Maths.clamp( m32, -1, 1 ) );\n\n            if ( Math.abs( m32 ) < 0.99999 ) {\n                _y = Math.atan2( -m31, m33 );\n                _z = Math.atan2( -m12, m22 );\n            } else {\n                _y = 0;\n                _z = Math.atan2( m21, m11 );\n            }\n\n        } else if ( order == ZYX ) {\n\n            _y = Math.asin( -Maths.clamp( m31, -1, 1 ) );\n\n            if ( Math.abs( m31 ) < 0.99999 ) {\n                _x = Math.atan2( m32, m33 );\n                _z = Math.atan2( m21, m11 );\n            } else {\n                _x = 0;\n                _z = Math.atan2( -m12, m22 );\n            }\n\n        } else if ( order == YZX ) {\n\n            _z = Math.asin( Maths.clamp( m21, -1, 1 ) );\n\n            if ( Math.abs( m21 ) < 0.99999 ) {\n                _x = Math.atan2( -m23, m22 );\n                _y = Math.atan2( -m31, m11 );\n            } else {\n                _x = 0;\n                _y = Math.atan2( m13, m33 );\n            }\n\n        } else if ( order == XZY ) {\n\n            _z = Math.asin( -Maths.clamp( m12, -1, 1 ) );\n\n            if ( Math.abs( m12 ) < 0.99999 ) {\n                _x = Math.atan2( m32, m22 );\n                _y = Math.atan2( m13, m11 );\n            } else {\n                _x = Math.atan2( -m23, m33 );\n                _y = 0;\n            }\n\n        } //order\n\n        set_xyz(_x, _y, _z);\n\n        return this;\n\n    } //setEulerFromRotationMatrix\n\n    public inline function setEulerFromQuaternion (q:Quaternion, order:ComponentOrder = XYZ) : Vector {\n\n        var sqx : Float = q.x * q.x;\n        var sqy : Float = q.y * q.y;\n        var sqz : Float = q.z * q.z;\n        var sqw : Float = q.w * q.w;\n\n        var _x = x;\n        var _y = y;\n        var _z = z;\n\n        if (order == XYZ) {\n            _x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\n            _y = Math.asin(  Maths.clamp( 2 * ( q.x * q.z + q.y * q.w ), -1, 1 ) );\n            _z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\n        } else if ( order ==  YXZ ) {\n            _x = Math.asin(  Maths.clamp( 2 * ( q.x * q.w - q.y * q.z ), -1, 1 ) );\n            _y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\n            _z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\n        } else if ( order == ZXY ) {\n            _x = Math.asin(  Maths.clamp( 2 * ( q.x * q.w + q.y * q.z ), -1, 1 ) );\n            _y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\n            _z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\n        } else if ( order == ZYX ) {\n            _x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\n            _y = Math.asin(  Maths.clamp( 2 * ( q.y * q.w - q.x * q.z ), -1, 1 ) );\n            _z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\n        } else if ( order == YZX ) {\n            _x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\n            _y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\n            _z = Math.asin(  Maths.clamp( 2 * ( q.x * q.y + q.z * q.w ), -1, 1 ) );\n        } else if ( order == XZY ) {\n            _x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\n            _y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\n            _z = Math.asin(  Maths.clamp( 2 * ( q.z * q.w - q.x * q.y ), -1, 1 ) );\n        } //order\n\n        set_xyz(_x,_y,_z);\n\n        return this;\n\n    } //setEulerFromQuaternion\n\n    public inline function degrees() : Vector {\n\n        set_xyz( Maths.degrees(x), Maths.degrees(y), Maths.degrees(z) );\n\n        return this;\n\n    } //degrees\n\n    public inline function radians() : Vector {\n\n        set_xyz( Maths.radians(x), Maths.radians(y), Maths.radians(z) );\n\n        return this;\n\n    } //radians\n\n    public static function Degrees( _radian_vector:Vector ) : Vector {\n\n        return _radian_vector.clone().degrees();\n\n    } //Degrees\n\n    public static function Radians( _degree_vector:Vector ) : Vector {\n\n        return _degree_vector.clone().radians();\n\n    } //Radians\n\n} //Vector class\n\n\n\n@:enum abstract ComponentOrder(Int) from Int to Int {\n\n    var XYZ = 0;\n    var YXZ = 1;\n    var ZXY = 2;\n    var ZYX = 3;\n    var YZX = 4;\n    var XZY = 5;\n\n} //ComponentOrder\n\n\nabstract Vec(Vector) from Vector to Vector {\n\n    public inline function new(?_x,?_y,?_z,?_w) {\n        this = new Vector(_x,_y,_z,_w);\n    }\n//multiply\n    @:communitative @:op(A * B) static public inline function _multiply(lhs:Vec, rhs:Vec) : Vec {\n        return Vector.MultiplyVector(lhs, rhs);\n    }\n    @:communitative @:op(A * B) static public inline function _multiply_scalar(lhs:Vec, rhs:Float) : Vec {\n        return Vector.Multiply(lhs, rhs);\n    }\n    @:communitative @:op(A * B) static public inline function _multiply_scalar_int(lhs:Vec, rhs:Int) : Vec {\n        return Vector.Multiply(lhs, rhs);\n    }\n// divide\n    @:communitative @:op(A / B) static public inline function _divide(lhs:Vec, rhs:Vec) : Vec {\n        return Vector.DivideVector(lhs, rhs);\n    }\n    @:communitative @:op(A / B) static public inline function _divide_scalar(lhs:Vec, rhs:Float) : Vec {\n        return Vector.Divide(lhs, rhs);\n    }\n    @:communitative @:op(A / B) static public inline function _divide_scalar_int(lhs:Vec, rhs:Int) : Vec {\n        return Vector.Divide(lhs, rhs);\n    }\n// add\n    @:communitative @:op(A + B) static public inline function _add(lhs:Vec, rhs:Vec) : Vec {\n        return Vector.Add(lhs, rhs);\n    }\n    @:communitative @:op(A + B) static public inline function _add_scalar(lhs:Vec, rhs:Float) : Vec {\n        return Vector.AddScalar(lhs, rhs);\n    }\n    @:communitative @:op(A + B) static public inline function _add_scalar_int(lhs:Vec, rhs:Int) : Vec {\n        return Vector.AddScalar(lhs, rhs);\n    }\n// subract\n    @:communitative @:op(A - B) static public inline function _subtract(lhs:Vec, rhs:Vec) : Vec {\n        return Vector.Subtract(lhs,rhs);\n    }\n    @:communitative @:op(A - B) static public inline function _subtract_scalar(lhs:Vec, rhs:Float) : Vec {\n        return Vector.SubtractScalar(lhs,rhs);\n    }\n    @:communitative @:op(A - B) static public inline function _subtract_scalar_int(lhs:Vec, rhs:Int) : Vec {\n        return Vector.SubtractScalar(lhs,rhs);\n    }\n} //Vec\n","package phoenix.geometry;\n\n\nimport phoenix.geometry.Vertex;\nimport phoenix.Quaternion;\nimport phoenix.Rectangle;\nimport phoenix.Transform;\nimport phoenix.Vector;\nimport phoenix.Shader;\nimport phoenix.Texture;\nimport phoenix.Batcher;\n\nimport luxe.Log.*;\nimport luxe.options.GeometryOptions;\n\nimport snow.api.buffers.Float32Array;\n\nimport snow.modules.opengl.GL;\n\n@:allow(phoenix.Batcher)\nclass Geometry {\n\n        //the positional transform information\n    public var transform : Transform;\n\n        //The list of vertices\n    public var vertices : Array<Vertex>;\n\n//:todo: This section is largely WIP\n//and not considered API, should be treated as volatile\n\n    var object_space : Bool = false;\n\n    var buffer_based : Bool = false;\n    var buffer_type : Int = GL.DYNAMIC_DRAW;\n    var buffer_pos : Float32Array;\n    var buffer_tcoords : Float32Array;\n    var buffer_colors : Float32Array;\n    var buffer_normals : Float32Array;\n\n    var vb_pos : GLBuffer;\n    var vb_tcoords : GLBuffer;\n    var vb_colors : GLBuffer;\n    var vb_normals : GLBuffer;\n\n    var uniforms : Uniforms;\n\n//End section\n\n        //Batcher information\n    public var added : Bool = false;\n    public var batchers : Array<Batcher>;\n\n        //state\n    public var state : GeometryState;\n    public var dropped : Bool = false;\n    public var uuid : String = '';\n    public var id : String = '';\n\n        //State properties\n    @:isVar public var primitive_type (get, set) : PrimitiveType;\n    @:isVar public var texture (get, set) : Texture;\n    @:isVar public var shader (get, set) : Shader;\n    @:isVar public var depth (get, set) : Float;\n    @:isVar public var clip_rect (get, set) : Rectangle;\n\n    var shadow_primitive_type : PrimitiveType;\n    var shadow_texture : Texture;\n    var shadow_shader : Shader;\n    var shadow_depth : Float = 0.0;\n    var shadow_clip : Bool = false;\n\n    var dirty_primitive_type : Bool = false;\n    var dirty_texture : Bool = false;\n    var dirty_shader : Bool = false;\n    var dirty_depth : Bool = false;\n    var dirty_clip : Bool = false;\n\n        //Geometry properties\n    @:isVar public var visible      (default, set) : Bool = true;\n    @:isVar public var immediate    (default, default) : Bool = false;\n    @:isVar public var locked       (get, set) : Bool = false;\n    @:isVar public var dirty        (get, set) : Bool = false;\n    @:isVar public var color        (default, set) : Color;\n\n        //internal bool flag for clip sorting and clipping state\n    @:noCompletion @:isVar public var clip (get, set) : Bool;\n\n        //internal reuse cache value\n    var _final_vert_position : Vector;\n\n    public var key : GeometryKey;\n\n        //This is a failsafe against all other geometry key values being identical\n        //causing comparisons in a binary tree to fail. This value is never reset intentionally.\n    static var _sequence_key : Int = -1;\n\n    public function new( ?options:GeometryOptions ) {\n\n        uuid = Luxe.utils.uniqueid();\n        id = uuid;\n\n        state = new GeometryState();\n        vertices = [];\n        batchers = [];\n\n            //init transforms\n        transform = new Transform();\n\n            //init the empty vertex reuse\n        _final_vert_position = new Vector();\n\n            //geometry clipping\n        clip_rect = null;\n        clip = false;\n\n            //this only applies if batcher is supplied, but is overriden with no_batcher_add\n        var _do_add = true;\n\n        if(options != null) {\n\n            id                   = def(options.id,              uuid);\n            color                = def(options.color,           new Color());\n            visible              = def(options.visible,         true);\n            immediate            = def(options.immediate,       false);\n\n            //:todo: This section is WIP and considered volatile/not api\n            buffer_based         = def(options.buffer_based,    false);\n            object_space         = def(options.object_space,    false);\n            //end section\n\n            state.depth          = def(options.depth,           state.depth);\n            state.texture        = def(options.texture,         state.texture);\n            state.primitive_type = def(options.primitive_type,  state.primitive_type);\n            state.shader         = def(options.shader,          state.shader);\n\n            if(options.clip_rect != null) {\n                var _r = options.clip_rect;\n                state.clip_x = _r.x;\n                state.clip_y = _r.y;\n                state.clip_w = _r.w;\n                state.clip_h = _r.h;\n            }\n\n            transform.pos        = def(options.pos,             transform.pos);\n            transform.rotation   = def(options.rotation,        transform.rotation);\n            transform.scale      = def(options.scale,           transform.scale);\n            transform.origin     = def(options.origin,          transform.origin);\n\n            if(options.no_batcher_add != null && options.no_batcher_add == true) {\n                _do_add = false;\n            }\n\n        } else { //options != null\n\n                //assign required\n            color = new Color();\n\n        }\n\n        _sequence_key++;\n\n        key = new GeometryKey();\n\n            key.uuid = uuid;\n            key.timestamp = Luxe.time;\n            key.sequence = _sequence_key;\n            key.primitive_type = state.primitive_type;\n            key.texture = state.texture;\n            key.shader = state.shader;\n            key.depth = state.depth;\n            key.clip = state.clip;\n\n        transform.id = uuid;\n        transform.name = id;\n\n            //only add it to a batcher if explicitly requested,\n            //otherwise do not add to a batcher at all\n        if(options != null && options.batcher != null && _do_add) {\n            options.batcher.add( this );\n        }\n\n            //:todo: This is WIP/volatile and not considered api\n        if(buffer_based) create_vbos();\n        uniforms = new Uniforms();\n\n    } //new\n\n    public function key_string() {\n\n        return\n            'ts: '+ key.timestamp + '\\n' +\n            'sequence: '+ key.sequence + '\\n' +\n            'primitive_type: '+ key.primitive_type + '\\n' +\n            'texture: '+ (key.texture == null ? 'null' : key.texture.id) + '\\n' +\n            'shader: '+ (key.shader == null ? 'null' : key.shader.id) + '\\n' +\n            'depth: '+ key.depth + '\\n' +\n            'clip: '+ key.clip;\n\n    } //key_string\n\n    public function refresh_key() {\n\n        // _sequence_key++;\n\n        key.uuid = uuid;\n        key.timestamp = Luxe.time;\n        key.sequence = _sequence_key;\n        key.primitive_type = state.primitive_type;\n        key.texture = state.texture;\n        key.shader = state.shader;\n        key.depth = state.depth;\n        key.clip = state.clip;\n\n    } //refresh_key\n\n    public function str() {\n        if(!state.log) return;\n        trace('\\t\\tgeometry ; ' + id);\n        state.log = true;\n        state.str();\n        state.log = false;\n    }\n\n    public function drop( ?remove:Bool = true ) {\n\n        if( remove && added ) {\n\n            for(b in batchers) {\n                b.remove( this, true );\n            } //for each batcher\n\n        }\n\n        key = null;\n        color = null;\n        state = null;\n        _final_vert_position = null;\n        batchers = null;\n        uuid = null;\n        id = null;\n        shadow_texture = null;\n        shadow_shader = null;\n        vertices = null;\n\n        if(transform != null) {\n            transform.destroy();\n            transform = null;\n        }\n\n        destroy_vbos();\n        if(buffer_pos != null) {\n            buffer_pos = null;\n            buffer_tcoords = null;\n            buffer_colors = null;\n            buffer_normals = null;\n        }\n\n        dropped = true;\n\n    } //drop\n\n    public function add( v : Vertex ) {\n\n        vertices.push( v );\n\n        if(vertices.length > Luxe.renderer.batcher.max_verts) {\n            throw '$id / Currently a single geometry cannot exceed the maximum vert count of ' + Luxe.renderer.batcher.max_verts;\n        }\n\n    } //add\n\n    public function remove( v : Vertex ) {\n\n        vertices.remove(v);\n\n    } //remove\n\n    inline\n    public function batch( vert_index : Int, tcoord_index:Int, color_index:Int, normal_index:Int,\n                           vertlist : Float32Array, tcoordlist : Float32Array, colorlist : Float32Array, normallist : Float32Array\n        ) {\n\n        for(v in vertices) {\n\n                //the base position of the vert\n            _final_vert_position.set( v.pos.x, v.pos.y, v.pos.z, v.pos.w );\n                //apply the transform to the vert\n            _final_vert_position.transform( transform.world.matrix );\n\n                vertlist[(vert_index+0)] = _final_vert_position.x;\n                vertlist[(vert_index+1)] = _final_vert_position.y;\n                vertlist[(vert_index+2)] = _final_vert_position.z;\n                vertlist[(vert_index+3)] = _final_vert_position.w;\n\n            vert_index += 4;\n\n            var _vuv = v.uv.uv0;\n\n                tcoordlist[(tcoord_index+0)] = _vuv.u;\n                tcoordlist[(tcoord_index+1)] = _vuv.v;\n                tcoordlist[(tcoord_index+2)] = _vuv.w;\n                tcoordlist[(tcoord_index+3)] = _vuv.t;\n\n            tcoord_index += 4;\n\n                colorlist[(color_index+0)] = v.color.r;\n                colorlist[(color_index+1)] = v.color.g;\n                colorlist[(color_index+2)] = v.color.b;\n                colorlist[(color_index+3)] = v.color.a;\n\n            color_index += 4;\n\n            #if phoenix_use_normals\n                var _vn = v.normal;\n                normallist[(normal_index+0)] = _vn.x;\n                normallist[(normal_index+1)] = _vn.y;\n                normallist[(normal_index+2)] = _vn.z;\n                normallist[(normal_index+3)] = _vn.w;\n            #end\n\n            normal_index += 4;\n\n        } //each vertex\n\n    } //batch\n\n    @:noCompletion\n    inline\n    public function batch_object_space( vert_index : Int, tcoord_index:Int, color_index:Int, normal_index:Int,\n                                        vertlist : Float32Array, tcoordlist : Float32Array, colorlist : Float32Array, normallist : Float32Array\n        ) {\n\n        for(v in vertices) {\n\n            var _vpos = v.pos;\n            var _vuv = v.uv.uv0;\n            var _vcol = v.color;\n\n                vertlist[(vert_index+0)] = _vpos.x;\n                vertlist[(vert_index+1)] = _vpos.y;\n                vertlist[(vert_index+2)] = _vpos.z;\n                vertlist[(vert_index+3)] = _vpos.w;\n\n            vert_index += 4;\n\n                tcoordlist[(tcoord_index+0)] = _vuv.u;\n                tcoordlist[(tcoord_index+1)] = _vuv.v;\n                tcoordlist[(tcoord_index+2)] = _vuv.w;\n                tcoordlist[(tcoord_index+3)] = _vuv.t;\n\n            tcoord_index += 4;\n\n                colorlist[(color_index+0)] = _vcol.r;\n                colorlist[(color_index+1)] = _vcol.g;\n                colorlist[(color_index+2)] = _vcol.b;\n                colorlist[(color_index+3)] = _vcol.a;\n\n            color_index += 4;\n\n            #if phoenix_use_normals\n                var _vnorm = v.normal;\n                normallist[(normal_index+0)] = _vnorm.x;\n                normallist[(normal_index+1)] = _vnorm.y;\n                normallist[(normal_index+2)] = _vnorm.z;\n                normallist[(normal_index+3)] = _vnorm.w;\n            #end\n\n            normal_index += 4;\n\n        } //each vertex\n\n    } //batch_object_space\n\n    public function batch_into_arrays( vertlist : Array<Float>, tcoordlist : Array<Float>,\n                           colorlist : Array<Float>, normallist : Array<Float> ) {\n\n        for(v in vertices) {\n\n                // the base position of the vert\n            _final_vert_position.set( v.pos.x, v.pos.y, v.pos.z, v.pos.w );\n                // apply the transform to the vert\n            _final_vert_position.transform( transform.world.matrix );\n\n                //submit vert positions\n            vertlist.push( _final_vert_position.x );\n            vertlist.push( _final_vert_position.y );\n            vertlist.push( _final_vert_position.z );\n            vertlist.push( _final_vert_position.w );\n\n                //texture coordinates :todo: multiple uv sets\n            tcoordlist.push( v.uv.uv0.u );\n            tcoordlist.push( v.uv.uv0.v );\n            tcoordlist.push( v.uv.uv0.w );\n            tcoordlist.push( v.uv.uv0.t );\n\n                //color values per vertex\n            colorlist.push( v.color.r );\n            colorlist.push( v.color.g );\n            colorlist.push( v.color.b );\n            colorlist.push( v.color.a );\n\n            #if phoenix_use_normals\n                normallist.push( v.normal.x );\n                normallist.push( v.normal.y );\n                normallist.push( v.normal.z );\n                normallist.push( v.normal.w );\n            #end\n\n        } //each vertex\n\n    } //batch_into_arrays\n\n//Explicit vb\n\n    function destroy_vbos() {\n        if(vb_pos==null) return;\n        GL.deleteBuffer(vb_pos);\n        GL.deleteBuffer(vb_tcoords);\n        GL.deleteBuffer(vb_colors);\n        #if phoenix_use_normals\n        GL.deleteBuffer(vb_normals);\n        #end\n    } //destroy_vbos\n\n    inline\n    function create_vbos() {\n        if(vb_pos!=null) return;\n        vb_pos = GL.createBuffer();\n        vb_tcoords = GL.createBuffer();\n        vb_colors = GL.createBuffer();\n        #if phoenix_use_normals\n        vb_normals = GL.createBuffer();\n        #end\n        dirty = true;\n    }\n\n    inline\n    function bind() {\n        bind_pos();\n        bind_tcoords();\n        bind_colors();\n        #if phoenix_use_normals\n        bind_normals();\n        #end\n    }\n\n\n    inline\n    function bind_pos() {\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_pos);\n        GL.vertexAttribPointer(Batcher.vert_attribute, 4, GL.FLOAT, false, 0, 0);\n    }\n\n    inline\n    function bind_tcoords() {\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_tcoords);\n        GL.vertexAttribPointer(Batcher.tcoord_attribute, 4, GL.FLOAT, false, 0, 0);\n    }\n\n    inline\n    function bind_colors() {\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_colors);\n        GL.vertexAttribPointer(Batcher.color_attribute, 4, GL.FLOAT, false, 0, 0);\n    }\n\n    #if phoenix_use_normals\n    inline\n    function bind_normals() {\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_normals);\n        GL.vertexAttribPointer(Batcher.normal_attribute, 4, GL.FLOAT, false, 0, 0);\n    }\n    #end\n\n    inline\n    function unbind() {\n        GL.bindBuffer(GL.ARRAY_BUFFER, null);\n    }\n\n    inline\n    function bind_and_upload() {\n\n        bind_pos();\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_pos, buffer_type);\n\n        bind_tcoords();\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_tcoords, buffer_type);\n\n        bind_colors();\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_colors, buffer_type);\n\n        #if phoenix_use_normals\n        bind_normals();\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_normals, buffer_type);\n        #end\n\n    } //_bind_and_upload\n\n    var _prev_count = 0;\n    function update_buffers() : Bool {\n\n        if(!dirty) return false;\n\n        var _verts = vertices.length;\n\n        //since vertices might change we recreate the buffers\n        if((_verts != _prev_count) || buffer_pos == null) {\n            var _length:Int = (vertices.length * 4);\n            buffer_pos = null;\n            buffer_normals = null;\n            buffer_colors = null;\n            buffer_tcoords = null;\n            buffer_pos = new Float32Array(_length);\n            buffer_tcoords = new Float32Array(_length);\n            buffer_colors = new Float32Array(_length);\n            #if phoenix_use_normals\n            buffer_normals = new Float32Array(_length);\n            #end\n        }\n        \n        if(object_space) {\n            batch_object_space(0,0,0,0,buffer_pos,buffer_tcoords,buffer_colors,buffer_normals);\n        } else {\n            batch(0,0,0,0,buffer_pos,buffer_tcoords,buffer_colors,buffer_normals);\n        }\n\n        dirty = false;\n\n        return true;\n\n    } //update_vb\n\n    inline\n    function draw() {\n        //the buffer pos length is favoured because if dirty is not flagged,\n        //and the vertices change, then the size of the buffers becomes inconsistent\n        //with the draw call and Bad Things happen like memory corruption\n        GL.drawArrays( primitive_type, 0, Std.int(buffer_pos.length/4) );\n    }\n\n//Transform\n\n    public function translate( _offset:Vector ) {\n\n        transform.pos.set_xyz( transform.pos.x+_offset.x, transform.pos.y+_offset.y, transform.pos.x+_offset.z );\n\n    } // translate\n\n    function set_locked( _locked:Bool ) : Bool {\n\n        buffer_type = _locked ? GL.STATIC_DRAW : GL.DYNAMIC_DRAW;\n\n        if(_locked && vb_pos == null) create_vbos();\n        if(!_locked && vb_pos != null) destroy_vbos();\n\n        return locked = _locked;\n\n    } //set_locked\n\n    inline function get_locked() : Bool {\n\n        return locked;\n\n    } //get_locked\n\n    function set_dirty( _dirty:Bool ) : Bool {\n\n        return dirty = _dirty;\n\n    } //set_dirty\n\n    inline function get_dirty() : Bool {\n\n        return dirty;\n\n    } //get_dirty\n\n//Invariants that cause a shift in the geometry tree\n\n    function refresh() {\n\n            //remove from all batchers\n        for(b in batchers) {\n            b.remove( this, false );\n        } //for each batcher\n\n                //update the values from the shadow values, if needed\n            if(dirty_primitive_type) {\n                dirty_primitive_type = false;\n                state.primitive_type = shadow_primitive_type;\n            } //dirty_primitive_type\n\n            if(dirty_texture) {\n                dirty_texture = false;\n                state.texture = shadow_texture;\n            } //dirty_texture\n\n            if(dirty_shader) {\n                dirty_shader = false;\n                state.shader = shadow_shader;\n            } //dirty_shader\n\n            if(dirty_depth) {\n                dirty_depth = false;\n                state.depth = shadow_depth;\n            } //dirty_depth\n\n            if(dirty_clip) {\n                dirty_clip = false;\n                state.clip = shadow_clip;\n            } //dirty_clip\n\n                //make sure the key is updated\n           refresh_key();\n\n        for(b in batchers) {\n            b.add( this, false );\n        } //for each batcher\n\n    } //refresh\n\n//Primitive Type\n\n    inline function get_primitive_type() : PrimitiveType {\n\n        return state.primitive_type;\n\n    } //get_primitive_type\n\n    function set_primitive_type( val : PrimitiveType ) : PrimitiveType {\n\n        if(state.primitive_type != val) {\n            shadow_primitive_type = val;\n            dirty_primitive_type = true;\n            refresh();\n        }\n\n        return primitive_type = val;\n\n    } //set_primitive_type\n\n//Texture\n\n    inline function get_texture() : Texture {\n\n        return state.texture;\n\n    } //get_texture\n\n    function set_texture(val : Texture) : Texture {\n\n        if(state.texture != val) {\n            shadow_texture = val;\n            dirty_texture = true;\n            refresh();\n        }\n\n        return texture = val;\n\n    } //set_texture\n\n//Visibility\n\n    function set_visible(val : Bool) : Bool {\n\n        return visible = val;\n\n    } //set_visible\n\n//Color\n\n    function set_color(val : Color) : Color {\n\n        if(vertices != null && vertices.length > 0) {\n            for(v in vertices) {\n                v.color = val;\n            } //for each vertex\n        }\n\n        return color = val;\n\n    } //set_color\n\n//Shader\n\n    inline function get_shader() : Shader {\n\n        return state.shader;\n\n    } //get_shader\n\n    function set_shader(val : Shader) : Shader {\n\n        if(state.shader != val) {\n            shadow_shader = val;\n            dirty_shader = true;\n            refresh();\n        }\n\n        return shader = val;\n\n    } //set_shader\n\n//Depth\n\n    inline function get_depth() : Float {\n\n        return state.depth;\n\n    } //get_depth\n\n\n    function set_depth(val : Float) : Float {\n\n        if(state.depth != val) {\n            shadow_depth = val;\n            dirty_depth = true;\n            refresh();\n        }\n\n        return depth = val;\n\n    } //set_depth\n\n//Clip\n\n    inline function get_clip() : Bool {\n\n        return state.clip;\n\n    } //get_clip\n\n    function set_clip(val : Bool) : Bool {\n\n        if(state.clip != val) {\n            shadow_clip = val;\n            dirty_clip = true;\n            refresh();\n        }\n\n        return clip = val;\n\n    } //set_clip\n\n//Clip rect\n\n    inline function get_clip_rect() : Rectangle {\n\n        return clip_rect;\n\n    } //get_clip_rect\n\n    function set_clip_rect(val : Rectangle) : Rectangle {\n\n        if(val == null) {\n            clip = false;\n        } else {\n            clip = true;\n            state.clip_x = val.x;\n            state.clip_y = val.y;\n            state.clip_w = val.w;\n            state.clip_h = val.h;\n        }\n\n        return clip_rect = val;\n\n    } //set_clip_rect\n\n\n} //Geometry\n\n\nclass GeometryKey {\n\n    public inline function new() {}\n\n    public var timestamp : Float = 0;\n    public var sequence : Int = 0;\n    public var uuid : String = '';\n    public var primitive_type : PrimitiveType;\n    public var texture : Texture;\n    public var shader : Shader;\n    public var depth : Float = 0;\n    public var clip : Bool = false;\n\n} //GeometryKey\n","package phoenix.geometry;\n\nimport luxe.Log.*;\nimport phoenix.geometry.Vertex ;\nimport phoenix.Vector;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Batcher;\nimport phoenix.Circle;\n\nimport luxe.options.GeometryOptions.CircleGeometryOptions;\n\n\nclass CircleGeometry extends Geometry {\n\n\n    public function new( ?options : CircleGeometryOptions ) {\n\n        super(options);\n\n        if(options == null) {\n            return;\n        }\n\n            //some default values so that the circle is visible with no values\n        var _radius_x : Float = 32;\n        var _radius_y : Float = 32;\n\n        def(options.end_angle, 360);\n        def(options.start_angle, 0);\n\n        if(options.r != null) {\n            _radius_x = options.r;\n            _radius_y = options.r;\n        }\n\n        if(options.rx != null) {\n            _radius_x = options.rx;\n        }\n\n        if(options.ry != null) {\n            _radius_y = options.ry;\n        }\n\n        if(options.steps == null) {\n            if(options.smooth == null) {\n                var _max = Math.max(_radius_x, _radius_y);\n                options.steps = Luxe.utils.geometry.segments_for_smooth_circle( _max );\n            } else {\n                var _smooth : Float = options.smooth;\n                var _max = Math.max(_radius_x, _radius_y);\n                options.steps = Luxe.utils.geometry.segments_for_smooth_circle( _max, _smooth );\n            }\n        }\n\n            //Apply the new options\n        set( options.x, options.y, _radius_x, _radius_y, options.steps, options.start_angle, options.end_angle );\n\n        if(options.visible != null) visible = options.visible;\n\n    } //new\n\n    public function set( _x:Float, _y:Float, _rx:Float, _ry:Float, _steps:Int, _start_angle:Float=0, _end_angle:Float=360 ) {\n\n            //adapted from\n            //http://slabode.exofire.net/circle_draw.shtml\n\n        primitive_type = PrimitiveType.triangles;\n\n            var half_pi : Float = Math.PI/2;\n            var _start_angle_rad = luxe.utils.Maths.radians(_start_angle) - half_pi;\n            var _end_angle_rad = luxe.utils.Maths.radians(_end_angle) - half_pi;\n\n            var _range = _end_angle_rad - _start_angle_rad;\n\n                //how much % of 360 is this, to limit step count?\n            _steps = Math.ceil((Math.abs(_range)/(Math.PI*2)) * _steps );\n\n                //Precompute the value based on segments\n            var theta = _range / _steps;\n\n            var tangential_factor = Math.tan( theta );\n            var radial_factor = Math.cos( theta );\n\n            var x : Float = _rx * Math.cos(_start_angle_rad);\n            var y : Float = _rx * Math.sin(_start_angle_rad);\n\n            //now work out the ratio between _x and _y\n            var radial_ratio : Float = _rx / _ry;\n            if(radial_ratio == 0) {\n                radial_ratio = 0.000000001;\n            }\n\n            var _index = 0;\n            var _segment_pos = [];\n            for( i in 0 ... _steps+1 ) {\n\n                var __x = x;\n                var __y = y / radial_ratio;\n\n                    //the position of this current segment\n                var _seg = new Vector( __x,__y );\n                    //we store them to reference them behind\n                _segment_pos.push(_seg);\n\n                    //and if past first node, close the prev tri with new seg pos\n                if(_index > 0) {\n                    add(new Vertex( _seg, color )); //2\n                }\n\n                    //one for the center point\n                add( new Vertex( new Vector( 0,0 ), color ) ); //0\n\n                    //one for the segment position\n                add(new Vertex( _seg, color )); //1\n\n                var tx = -y;\n                var ty = x;\n\n                x += tx * tangential_factor;\n                y += ty * tangential_factor;\n\n                x *= radial_factor;\n                y *= radial_factor;\n\n                _index++;\n\n            } //for\n\n        add(new Vertex( _segment_pos[_steps], color )); //1\n\n            //and finally, set the position\n        transform.pos = new Vector( _x, _y );\n\n    } //set\n\n\n} //CircleGeometry\n","package phoenix.geometry;\n\nimport phoenix.geometry.Vertex ;\nimport phoenix.Vector;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Batcher;\nimport phoenix.Circle;\n\nimport luxe.options.GeometryOptions.CircleGeometryOptions;\n\nclass RingGeometry extends CircleGeometry {\n\n\tpublic function new( ?options : CircleGeometryOptions ) {\n\n\t\tsuper(options);\n\n\t\t\t//set to line type\n\t\tprimitive_type = PrimitiveType.lines;\n\n\t} //new\n\n\toverride public function set( _x:Float, _y:Float, _rx:Float, _ry:Float, _steps:Int, _start_angle_degrees:Float=0, _end_angle_degrees:Float=360 ) {\n\n            //adapted from\n            //http://slabode.exofire.net/circle_draw.shtml\n\n        primitive_type = PrimitiveType.triangles;\n\n            var _start_angle_rad = luxe.utils.Maths.radians(_start_angle_degrees);\n            var _end_angle_rad = luxe.utils.Maths.radians(_end_angle_degrees);\n\n            var _range = _end_angle_rad - _start_angle_rad;\n\n                //Precompute the value based on segments\n            var theta = _range / _steps;\n\n            var tangential_factor = Math.tan( theta );\n            var radial_factor = Math.cos( theta );\n\n            var x : Float = _rx * Math.cos(_start_angle_rad);\n            var y : Float = _rx * Math.sin(_start_angle_rad);\n\n            //now work out the ratio between _x and _y\n            //:todo: epsilon\n            var radial_ratio : Float = _rx / _ry;\n            if(radial_ratio == 0) radial_ratio = 0.000000001;\n\n            var _index = 0;\n            var _segment_pos = [];\n            for( i in 0 ... _steps ) {\n\n                var __x = x;\n                var __y = y / radial_ratio;\n\n                    //the position of this current segment\n                var _seg = new Vector( __x,__y );\n                    //we store them to reference them behind\n                _segment_pos.push(_seg);\n\n                    //one for the segment position\n                add(new Vertex( _seg, color ));\n\n                    //and if past 0, one for the prev segment to close the tri\n                if(_index > 0) {\n                    var prevvert = _segment_pos[_index];\n                    add(new Vertex( prevvert.clone(), color ));\n                }\n\n                var tx = -y;\n                var ty = x;\n\n                x += tx * tangential_factor;\n                y += ty * tangential_factor;\n\n                x *= radial_factor;\n                y *= radial_factor;\n\n                _index++;\n\n            } //for\n\n                //if steps is < 0 no segments were added\n            if(_segment_pos.length > 0) {\n                add( new Vertex( _segment_pos[0].clone(), color ) );\n            }\n\n        //and finally, set the position\n        transform.pos = new Vector( _x, _y );\n\n    } //set\n\n} //RingGeometry\n","package phoenix.geometry;\n\nimport phoenix.geometry.Vertex ;\nimport phoenix.geometry.RingGeometry;\nimport phoenix.Vector;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Batcher;\nimport phoenix.Circle;\n\nimport luxe.options.GeometryOptions.CircleGeometryOptions;\n\nclass ArcGeometry extends RingGeometry {\n\n\tpublic function new( ?options : CircleGeometryOptions ) {\n\n\t\tsuper(options);\n\n\t\t\t//remove the first center point\n\t\t\t//and the last extra vert\n\t\tvertices.pop();\n\t\tvertices.pop();\n\n\t\t\t//set to line type\n\t\tprimitive_type = PrimitiveType.lines;\n\n\t} //new\n\n} //RingGeometry\n","package phoenix.geometry;\n\nimport phoenix.Rectangle;\nimport phoenix.Texture;\nimport phoenix.Shader;\nimport phoenix.Batcher;\n\n@:allow(phoenix.Batcher)\n@:allow(phoenix.BatchState)\n@:allow(phoenix.geometry.Geometry)\nclass GeometryState {\n\n    var dirty:Bool;\n\n    @:isVar var primitive_type(default, set) : PrimitiveType;\n    @:isVar var shader(default, set) : Shader;\n    @:isVar var texture(default, set) : Texture;\n    @:isVar var depth(default, set) : Float;\n    @:isVar var clip(default, set) : Bool;\n    @:isVar var clip_x(default, set) : Float;\n    @:isVar var clip_y(default, set) : Float;\n    @:isVar var clip_w(default, set) : Float;\n    @:isVar var clip_h(default, set) : Float;\n\n    var log : Bool = false;\n\n    inline\n    function new() {\n\n        clip = false;\n        clip_x = 0.0;\n        clip_y = 0.0;\n        clip_w = 0.0;\n        clip_h = 0.0;\n        texture = null;\n        shader = null;\n        depth = 0.0;\n        primitive_type = PrimitiveType.points;\n\n        dirty = false;\n\n    } //new\n\n    inline\n    function clone_onto( _other:GeometryState )  {\n\n        _other.dirty = dirty;\n        _other.texture = texture;\n        _other.shader = shader;\n        _other.depth = depth;\n        _other.primitive_type = primitive_type;\n        _other.clip = clip;\n        _other.clip_x = clip_x;\n        _other.clip_y = clip_y;\n        _other.clip_w = clip_w;\n        _other.clip_h = clip_h;\n\n    } //clone_onto\n\n    function str() {\n\n        if(!log) return;\n\n        trace('\\t+ GEOMETRYSTATE $dirty');\n            trace('\\t\\tdepth - $depth');\n            trace('\\t\\ttexture - ' + (( texture == null) ? 'null' :  texture.id ));\n            if(texture != null) {\n                trace('\\t\\t\\t ${texture.texture}');\n            }\n            trace('\\t\\tshader - ' + (( shader == null) ? 'null' :  shader.id ));\n            trace('\\t\\tprimitive_type - $primitive_type');\n            trace('\\t\\tclip - $clip');\n            trace('\\t\\tclip rect - $clip_x,$clip_y,$clip_w,$clip_h');\n        trace('\\t- GEOMETRYSTATE');\n\n    } //str\n\n    inline\n    function clean() {\n\n        dirty = false;\n\n    } //clean\n\n    // inline\n    function update( other : GeometryState ) {\n\n        if(depth != other.depth) {\n            depth = other.depth;\n        }\n\n        if(texture != other.texture) {\n            texture = other.texture;\n        }\n\n        if(shader != other.shader) {\n            shader = other.shader;\n        }\n\n        if(primitive_type != other.primitive_type) {\n            primitive_type = other.primitive_type;\n        }\n\n        if(clip != other.clip) {\n            clip = other.clip;\n        }\n\n        if(clip_x != other.clip_x) {\n            clip_x = other.clip_x;\n        } //clip_x\n\n        if(clip_y != other.clip_y) {\n            clip_y = other.clip_y;\n        } //clip_y\n\n        if(clip_w != other.clip_w) {\n            clip_w = other.clip_w;\n        } //clip_w\n\n        if(clip_h != other.clip_h) {\n            clip_h = other.clip_h;\n        } //clip_h\n\n    } //update\n\n//Primitive Type\n    inline function set_primitive_type(val : PrimitiveType) : PrimitiveType {\n        dirty = true;\n        return primitive_type = val;\n    }\n//Texture\n    inline function set_texture(val : Texture) : Texture {\n        dirty = true;\n        return texture = val;\n    }\n//Shader\n    inline function set_shader(val : Shader) : Shader {\n        dirty = true;\n        return shader = val;\n    }\n//Depth\n    inline function set_depth(val : Float) : Float {\n        return depth = val;\n    }\n//Clip\n    inline function set_clip(val : Bool) : Bool {\n        dirty = true;\n        return clip = val;\n    }\n//Clip rect\n    inline function set_clip_x(val : Float) : Float {\n        dirty = true;\n        return clip_x = val;\n    }\n    inline function set_clip_y(val : Float) : Float {\n        dirty = true;\n        return clip_y = val;\n    }\n    inline function set_clip_w(val : Float) : Float {\n        dirty = true;\n        return clip_w = val;\n    }\n    inline function set_clip_h(val : Float) : Float {\n        dirty = true;\n        return clip_h = val;\n    }\n//\n\n}\n","package phoenix.geometry;\n\nimport luxe.Log.*;\nimport luxe.Vector;\nimport luxe.Color;\n\nimport phoenix.Batcher;\nimport phoenix.geometry.Geometry;\n\nimport luxe.options.GeometryOptions.LineGeometryOptions;\n\nclass LineGeometry extends Geometry {\n\n    @:isVar public var p0(default,set) : Vector;\n    @:isVar public var p1(default,set) : Vector;\n    @:isVar public var color0(default,set) : Color;\n    @:isVar public var color1(default,set) : Color;\n\n    public function new( ?options : LineGeometryOptions ) {\n\n        if(options != null) {\n            options.primitive_type = PrimitiveType.lines;\n        }\n\n        super(options);\n\n        if(options == null) {\n            return;\n        }\n\n        def(options.color, new Color());\n        def(options.color0, options.color);\n        def(options.color1, options.color);\n\n        p0 = def(options.p0, new Vector());\n        p1 = def(options.p1, new Vector(64,64)); //:todo: unit constant\n\n        add(new Vertex( p0, options.color0 ));\n        add(new Vertex( p1, options.color1 ));\n\n    } //new\n\n//Internal\n\n    function set_p0(_p:Vector) : Vector {\n\n        p0 = _p;\n\n        if(vertices.length == 0) return p0;\n\n        vertices[0].pos = p0;\n\n        return p0 = _p;\n\n    } //set_p0\n\n    function set_p1(_p:Vector) : Vector {\n\n        p1 = _p;\n\n        if(vertices.length == 0) return p1;\n\n        vertices[1].pos = p1;\n\n        return p1 = _p;\n\n    } //set_p1\n\n    function set_color0(_c:Color) : Color {\n\n        color0 = _c;\n\n        if(vertices.length == 0) return color0;\n\n        vertices[0].color = color0;\n\n        return color0;\n\n    } //set_color0\n\n    function set_color1(_c:Color) : Color {\n\n        color1 = _c;\n\n        if(vertices.length == 0) return color1;\n\n        vertices[1].color = color1;\n\n        return color1;\n\n    } //set_color1\n\n} //LineGeometry\n","package phoenix.geometry;\n\nimport luxe.Rectangle;\nimport phoenix.Vector;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Batcher;\nimport phoenix.Vector;\n\nimport luxe.options.GeometryOptions.PlaneGeometryOptions;\n\nclass PlaneGeometry extends Geometry {\n\n    @:isVar public var flipx(default, set) : Bool = false;\n    @:isVar public var flipy(default, set) : Bool = false;\n\n    var _uv_cache : luxe.Rectangle;\n\n    var is_set : Bool = false;\n\n\tpublic function new( ?options : PlaneGeometryOptions ) {\n\n\t\tsuper(options);\n\n        if(options == null) return;\n\n            //Do these before set, so they can be applied\n        if(options.flipx != null) flipx = options.flipx;\n        if(options.flipy != null) flipy = options.flipy;\n\n            //Init\n        _uv_cache = new Rectangle(0,0,1,1);\n\n            //Apply the new options rect\n\t\tset( new Rectangle(options.x, options.z, options.w, options.h), options.y );\n\n        if(options.visible != null) visible = options.visible;\n        if(options.immediate != null) immediate = options.immediate;\n\n\t} //new\n\n    public function uv( _rect:luxe.Rectangle ) {\n\n        if(texture == null) {\n            trace(\"Warning : calling UV on a geometry with null texture.\");\n            return;\n        }\n\n        var tlx = _rect.x/texture.width_actual;\n        var tly = _rect.y/texture.height_actual;\n        var szx = _rect.w/texture.width_actual;\n        var szy = _rect.h/texture.height_actual;\n\n        uv_space( new luxe.Rectangle( tlx, tly, szx, szy ) );\n\n    } //uv\n\n    public function uv_space( _rect:luxe.Rectangle ) {\n\n            //the uv width and height\n        var sz_x = _rect.w;\n        var sz_y = _rect.h;\n\n            //tl\n        var tl_x = _rect.x;\n        var tl_y = _rect.y;\n\n            //Keep for later, before changing the values for flipping\n        _uv_cache.set( tl_x, tl_y, sz_x, sz_y );\n\n            //tr\n        var tr_x = tl_x + sz_x;\n        var tr_y = tl_y;\n            //br\n        var br_x = tl_x + sz_x;\n        var br_y = tl_y + sz_y;\n            //bl\n        var bl_x = tl_x;\n        var bl_y = tl_y + sz_y;\n\n        var tmp_x = 0.0;\n        var tmp_y = 0.0;\n\n                //flipped y swaps tl and tr with bl and br, only on y\n            if(flipy) {\n\n                    //swap tl and bl\n                tmp_y = bl_y;\n                    bl_y = tl_y;\n                    tl_y = tmp_y;\n\n                    //swap tr and br\n                tmp_y = br_y;\n                    br_y = tr_y;\n                    tr_y = tmp_y;\n\n            } //flipy\n\n                //flipped x swaps tl and bl with tr and br, only on x\n            if(flipx) {\n\n                    //swap tl and tr\n                tmp_x = tr_x;\n                    tr_x = tl_x;\n                    tl_x = tmp_x;\n\n                    //swap bl and br\n                tmp_x = br_x;\n                    br_x = bl_x;\n                    bl_x = tmp_x;\n\n            } //flipx\n\n        vertices[0].uv.uv0.set_uv( tl_x , tl_y );\n        vertices[1].uv.uv0.set_uv( tr_x , tr_y );\n        vertices[2].uv.uv0.set_uv( br_x , br_y );\n\n        vertices[3].uv.uv0.set_uv( bl_x , bl_y );\n        vertices[4].uv.uv0.set_uv( tl_x , tl_y );\n        vertices[5].uv.uv0.set_uv( br_x , br_y );\n\n            //if it's locked, it needs to be refreshed to the gpu\n        dirty = true;\n\n    } //set uv in uv space directly\n\n \tpublic function set( quad:luxe.Rectangle, y:Float ) {\n\n \t\tvertices.splice(0, vertices.length);\n\n        //Create the rectangle at it's origin,\n        //so that when geometry.pos is set it is translated accordingly\n\n            //First triangle\n        var vert0 : Vertex = new Vertex( new Vector( 0, 0, 0 ), color );\n        var vert1 : Vertex = new Vertex( new Vector( quad.w, 0, 0 ), color );\n        var vert2 : Vertex = new Vertex( new Vector( quad.w, 0, quad.h ), color );\n\n           //Second triangle\n        var vert3 : Vertex = new Vertex( new Vector( 0 , 0, quad.h ), color );\n        var vert4 : Vertex = new Vertex( new Vector( 0 , 0, 0 ), color );\n        var vert5 : Vertex = new Vertex( new Vector( quad.w , 0, quad.h ), color );\n\n           //Add to the list\n\n            //tl\n        add( vert5 );\n            //tr\n        add( vert4 );\n            //br\n        add( vert3 );\n            //bl\n        add( vert2 );\n            //tl\n        add( vert1 );\n            //br\n        add( vert0 );\n\n\n        primitive_type = PrimitiveType.triangles;\n        immediate = false;\n\n            //And finally move it into place\n        transform.pos = new Vector(quad.x, y, quad.y);\n\n            //Make sure we know we can access the verts now\n        is_set = true;\n\n            //Apply default UV, handles flipping etc\n        uv_space( new luxe.Rectangle(0,0,1,1) );\n\n \t} //set\n\n//properties\n\n    function set_flipx(_val:Bool) {\n            //set before calling uv_space\n        flipx = _val;\n\n        if(is_set) {\n            uv_space(_uv_cache);\n        }\n\n        return flipx;\n    } //set_flipx\n\n    function set_flipy(_val:Bool) {\n\n            //set before calling uv_space\n        flipy = _val;\n\n        if(is_set) {\n            uv_space(_uv_cache);\n        }\n\n        return flipy;\n    } //set_flipy\n\n\n\n}\n","package phoenix.geometry;\n\nimport phoenix.Vector;\nimport phoenix.geometry.Geometry;\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Batcher;\nimport phoenix.Vector;\nimport luxe.Log.*;\n\nimport luxe.options.GeometryOptions.QuadGeometryOptions;\n\nclass QuadGeometry extends Geometry {\n\n    @:isVar public var flipx(default, set) : Bool = false;\n    @:isVar public var flipy(default, set) : Bool = false;\n        //Has to be a multiple of 90\n    @:isVar public var uv_angle(default, set) : Int = 0;\n\n    var _uv_x:Float = 0;\n    var _uv_y:Float = 0;\n    var _uv_w:Float = 1;\n    var _uv_h:Float = 1;\n\n\tpublic function new( ?options : QuadGeometryOptions ) {\n\n        options.primitive_type = PrimitiveType.triangles;\n\n\t\tsuper(options);\n\n        if(options == null) return;\n\n            //Do these before set, so they can be applied\n        if(options.flipx != null) flipx = options.flipx;\n        if(options.flipy != null) flipy = options.flipy;\n\n        var _x : Float = options.x;\n        var _y : Float = options.y;\n        var _w : Float = options.w;\n        var _h : Float = options.h;\n\n        if(options.rect != null) {\n            _x = options.rect.x;\n            _y = options.rect.y;\n            _w = options.rect.w;\n            _h = options.rect.h;\n        }\n\n            //First triangle\n            //tl\n        add(new Vertex( new Vector(  0,  0 ), color ));\n            //tr\n        add(new Vertex( new Vector( _w,  0 ), color ));\n            //br\n        add(new Vertex( new Vector( _w, _h ), color ));\n\n           //Second triangle\n            //bl\n        add(new Vertex( new Vector(  0, _h ), color ));\n            //tl\n        add(new Vertex( new Vector(  0,  0 ), color ));\n            //br\n        add(new Vertex( new Vector( _w, _h ), color ));\n\n        transform.pos = transform.pos.set_xy(_x, _y);\n\n        if(options.uv != null) {\n            uv(options.uv);\n        } else {\n            uv_space( 0, 0, 1, 1 );\n        }\n\n        if(options.visible != null) visible = options.visible;\n        if(options.immediate != null) immediate = options.immediate;\n\n\t} //new\n\n    public inline function uv( _rect:luxe.Rectangle ) {\n\n        assertnull(texture, \"QuadGeometry; Calling UV on a geometry with null texture.\");\n\n        var tlx = _rect.x/texture.width_actual;\n        var tly = _rect.y/texture.height_actual;\n        var szx = _rect.w/texture.width_actual;\n        var szy = _rect.h/texture.height_actual;\n\n        uv_space( tlx, tly, szx, szy );\n\n    } //uv\n\n    public inline function uv_space( _rect_x:Float,_rect_y:Float,_rect_w:Float,_rect_h:Float ) {\n\n        if(vertices.length == 0) return;\n\n        //the uv width and height\n        var sz_x = _rect_w;\n        var sz_y = _rect_h;\n\n            //tl\n        var tl_x = _rect_x;\n        var tl_y = _rect_y;\n\n            //Keep for later, before changing the values for flipping\n        _uv_x = tl_x;\n        _uv_y = tl_y;\n        _uv_w = sz_x;\n        _uv_h = sz_y;\n\n            //tr\n        var tr_x = tl_x + sz_x;\n        var tr_y = tl_y;\n            //br\n        var br_x = tl_x + sz_x;\n        var br_y = tl_y + sz_y;\n            //bl\n        var bl_x = tl_x;\n        var bl_y = tl_y + sz_y;\n\n        var tmp_x = 0.0;\n        var tmp_y = 0.0;\n\n            //rotates uvs 90 degrees counter-clockwise, i.e. the rotates the texture 90 degrees clockwise\n        inline function rotate_uvs() {\n            tmp_x = tl_x;\n            tl_x = bl_x;\n            bl_x = br_x;\n            br_x = tr_x;\n            tr_x = tmp_x;\n\n            tmp_y = tl_y;\n            tl_y = bl_y;\n            bl_y = br_y;\n            br_y = tr_y;\n            tr_y = tmp_y;\n        }\n\n            var rotations:Int = Std.int(uv_angle / 90);\n            rotations = rotations - 4 * Math.floor(rotations / 4);\n            \n            for(r in 0...rotations) {\n                rotate_uvs();\n            }\n                //flipped y swaps tl and tr with bl and br\n            if(flipy) {\n                    //swap tl and bl\n                tmp_y = bl_y;\n                    bl_y = tl_y;\n                    tl_y = tmp_y;\n\n                tmp_x = bl_x;\n                    bl_x = tl_x;\n                    tl_x = tmp_x;\n\n                    //swap tr and br\n                tmp_y = br_y;\n                    br_y = tr_y;\n                    tr_y = tmp_y;\n\n                tmp_x = br_x;\n                    br_x = tr_x;\n                    tr_x = tmp_x;\n            } //flipy\n\n                //flipped x swaps tl and bl with tr and br\n            if(flipx) {\n                    //swap tl and tr\n                tmp_x = tr_x;\n                    tr_x = tl_x;\n                    tl_x = tmp_x;\n\n                tmp_y = tr_y;\n                    tr_y = tl_y;\n                    tl_y = tmp_y;\n\n                    //swap bl and br\n                tmp_x = br_x;\n                    br_x = bl_x;\n                    bl_x = tmp_x;\n\n                tmp_y = br_y;\n                    br_y = bl_y;\n                    bl_y = tmp_y;\n            } //flipx\n\n        vertices[0].uv.uv0.set_uv( tl_x , tl_y );\n        vertices[1].uv.uv0.set_uv( tr_x , tr_y );\n        vertices[2].uv.uv0.set_uv( br_x , br_y );\n\n        vertices[3].uv.uv0.set_uv( bl_x , bl_y );\n        vertices[4].uv.uv0.set_uv( tl_x , tl_y );\n        vertices[5].uv.uv0.set_uv( br_x , br_y );\n\n            //if it's locked, it needs to be refreshed to the gpu\n        dirty = true;\n\n    } //set uv in uv space directly\n\n    public function resize_xy( _x:Float, _y:Float ) {\n\n        if(vertices.length == 0) return;\n\n        vertices[0].pos.set_xy( 0,      0    );\n        vertices[1].pos.set_xy( 0+_x,   0    );\n        vertices[2].pos.set_xy( 0+_x,   0+_y );\n\n        vertices[3].pos.set_xy( 0,      0+_y );\n        vertices[4].pos.set_xy( 0,      0    );\n        vertices[5].pos.set_xy( 0+_x,   0+_y );\n\n    } //resize_xy\n\n    public inline function resize( quad:luxe.Vector ) {\n\n        resize_xy(quad.x, quad.y);\n\n    } //resize\n\n    public inline function set(quad:luxe.Rectangle) {\n\n        set_xywh(quad.x, quad.y, quad.w, quad.h);\n\n    } //set\n\n \tpublic function set_xywh( _x:Float, _y:Float, _w:Float, _h:Float ) {\n\n        if(vertices.length == 0) return;\n\n            //tl\n        vertices[0].pos.set_xy(  0,  0 );\n            //tr\n        vertices[1].pos.set_xy( _w,  0 );\n            //br\n        vertices[2].pos.set_xy( _w, _h );\n\n            //bl\n        vertices[3].pos.set_xy(  0, _h );\n            //tl\n        vertices[4].pos.set_xy(  0,  0 );\n            //br\n        vertices[5].pos.set_xy( _w, _h );\n\n        transform.pos = transform.pos.set_xy(_x, _y);\n\n \t} //set\n\n    function set_flipx(_val:Bool) {\n\n            //set before calling uv_space\n        flipx = _val;\n\n        uv_space(_uv_x, _uv_y, _uv_w, _uv_h);\n\n        return flipx;\n\n    } //set_flipx\n\n    function set_flipy(_val:Bool) {\n\n            //set before calling uv_space\n        flipy = _val;\n\n        uv_space(_uv_x, _uv_y, _uv_w, _uv_h);\n\n        return flipy;\n\n    } //set_flipy\n\n    function set_uv_angle(_val:Int) {\n        assert(_val % 90 == 0, 'uv_angle has to be a multiple of 90');\n        uv_angle = _val;\n        uv_space(_uv_x, _uv_y, _uv_w, _uv_h);\n        return uv_angle;\n    }\n\n}\n","package phoenix.geometry;\n\nimport phoenix.geometry.Geometry;\nimport phoenix.Batcher;\nimport phoenix.geometry.Vertex;\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Rectangle;\nimport phoenix.Shader;\nimport phoenix.Texture;\n\nimport phoenix.Color;\nimport phoenix.Vector;\n\nimport luxe.Log.*;\nimport luxe.options.GeometryOptions;\n\ntypedef PackedQuad = {\n    uid : UInt,\n    verts : Array<Vertex>,\n    flipx : Bool,\n    flipy : Bool,\n    visible : Bool,\n    _uv_cache : Rectangle\n}\n\ntypedef PackedQuadOptions = {\n    x : Float,\n    y : Float,\n    w : Float,\n    h : Float,\n\n    ?color : Color,\n    ?uv : Rectangle,\n    ?flipx : Bool,\n    ?flipy : Bool,\n    ?visible : Bool\n}\n\n//Note that a quad pack geometry has only one texture,\n// it is for optimising singular geometry that shares many quads\n// and share a shader and texture and state\n\nclass QuadPackGeometry extends Geometry {\n\n    public var quads : Map<Int, PackedQuad>;\n\n    public function new( ?_options : GeometryOptions ) {\n\n        _options.primitive_type = PrimitiveType.triangles;\n\n        super( _options );\n\n        quads = new Map();\n\n    } //new\n\n    public function clear() {\n\n        for(q in quads.keys()) {\n            quad_remove( q );\n        }\n\n    } //clear\n\n    public function quad_add( _options:PackedQuadOptions ) : Int {\n\n        def(_options.visible, true);\n        def(_options.flipx, false);\n        def(_options.flipy, false);\n\n        var _uid = Luxe.utils.uniquehash();\n\n            //First triangle\n        var vert0 = new Vertex( new Vector( _options.x,            _options.y ), _options.color );\n        var vert1 = new Vertex( new Vector( _options.x+_options.w, _options.y ), _options.color );\n        var vert2 = new Vertex( new Vector( _options.x+_options.w, _options.y+_options.h ), _options.color );\n\n           //Second triangle\n        var vert3 = new Vertex( new Vector( _options.x , _options.y+_options.h ), _options.color );\n        var vert4 = new Vertex( new Vector( _options.x , _options.y ), _options.color );\n        var vert5 = new Vertex( new Vector( _options.x+_options.w , _options.y+_options.h ), _options.color );\n\n                //tl\n            add( vert0 );\n                //tr\n            add( vert1 );\n                //br\n            add( vert2 );\n                //bl\n            add( vert3 );\n                //tl\n            add( vert4 );\n                //br\n            add( vert5 );\n\n             //create the packed quad\n        var _quad = {\n            uid : _uid,\n            verts : new Array<Vertex>(),\n            flipx : _options.flipx,\n            flipy : _options.flipx,\n            visible : _options.visible,\n            _uv_cache : new Rectangle(0,0,1,1)\n        }\n\n            _quad.verts.push( vert0 );\n            _quad.verts.push( vert1 );\n            _quad.verts.push( vert2 );\n            _quad.verts.push( vert3 );\n            _quad.verts.push( vert4 );\n            _quad.verts.push( vert5 );\n\n        quads.set( _uid, _quad );\n\n        if(_options.uv != null) {\n            quad_uv( _uid, _options.uv );\n        }\n\n            //for locked geometry\n        dirty = true;\n\n        return _uid;\n\n    } //add_quad\n\n    public function quad_remove( _quad_id:Int ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n\n            remove( _quad.verts[0] );\n            remove( _quad.verts[1] );\n            remove( _quad.verts[2] );\n            remove( _quad.verts[3] );\n            remove( _quad.verts[4] );\n            remove( _quad.verts[5] );\n\n            quads.remove( _quad_id );\n\n                //for locked geometry\n            dirty = true;\n\n        } //_quad\n\n    } //quad_remove\n\n    public function quad_visible( _quad_id:Int, visible:Bool ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n\n                //add only if not already added\n            if(visible && !_quad.visible) {\n\n                _quad.visible = false;\n\n                add( _quad.verts[0] );\n                add( _quad.verts[1] );\n                add( _quad.verts[2] );\n                add( _quad.verts[3] );\n                add( _quad.verts[4] );\n                add( _quad.verts[5] );\n\n            } else if(!visible && _quad.visible) {\n\n                _quad.visible = false;\n\n                remove( _quad.verts[0] );\n                remove( _quad.verts[1] );\n                remove( _quad.verts[2] );\n                remove( _quad.verts[3] );\n                remove( _quad.verts[4] );\n                remove( _quad.verts[5] );\n\n            } //visible\n\n                //for locked geometry\n            dirty = true;\n\n        } //_quad\n\n    } //quad_visible\n\n    public function quad_resize( _quad_id:Int, _size : Rectangle ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n\n            _quad.verts[0].pos = new Vector( _size.x,         _size.y );\n            _quad.verts[1].pos = new Vector( _size.x+_size.w, _size.y );\n            _quad.verts[2].pos = new Vector( _size.x+_size.w, _size.y+_size.h );\n\n            _quad.verts[3].pos = new Vector( _size.x,         _size.y+_size.h );\n            _quad.verts[4].pos = new Vector( _size.x,         _size.y );\n            _quad.verts[5].pos = new Vector( _size.x+_size.w, _size.y+_size.h );\n\n                //for locked geometry\n            dirty = true;\n\n        } //_quad\n\n    } //remove_quad\n\n    public function quad_pos( _quad_id:Int, _p:Vector ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n\n            var _diffx = _p.x - _quad.verts[0].pos.x;\n            var _diffy = _p.y - _quad.verts[0].pos.y;\n\n            _quad.verts[0].pos.x += _diffx;\n            _quad.verts[0].pos.y += _diffy;\n\n            _quad.verts[1].pos.x += _diffx;\n            _quad.verts[1].pos.y += _diffy;\n\n            _quad.verts[2].pos.x += _diffx;\n            _quad.verts[2].pos.y += _diffy;\n\n            _quad.verts[3].pos.x += _diffx;\n            _quad.verts[3].pos.y += _diffy;\n\n            _quad.verts[4].pos.x += _diffx;\n            _quad.verts[4].pos.y += _diffy;\n\n            _quad.verts[5].pos.x += _diffx;\n            _quad.verts[5].pos.y += _diffy;\n\n                //for locked geometry\n            dirty = true;\n\n        } //_quad != null\n\n    } //quad_pos\n\n    public function quad_color( _quad_id:Int, _c:Color ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n            _quad.verts[0].color = _c;\n            _quad.verts[1].color = _c;\n            _quad.verts[2].color = _c;\n            _quad.verts[3].color = _c;\n            _quad.verts[4].color = _c;\n            _quad.verts[5].color = _c;\n        } //_quad != null\n\n    } //quad_color\n\n    public function quad_alpha( _quad_id:Int, _a:Float ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n            _quad.verts[0].color.a = _a;\n            _quad.verts[1].color.a = _a;\n            _quad.verts[2].color.a = _a;\n            _quad.verts[3].color.a = _a;\n            _quad.verts[4].color.a = _a;\n            _quad.verts[5].color.a = _a;\n        } //_quad != null\n\n    } //quad_alpha\n\n    public function quad_uv_space( _quad_id:Int, _uv : Rectangle ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n\n            var flipx = _quad.flipx;\n            var flipy = _quad.flipy;\n\n                //the uv width and height\n            var sz_x = _uv.w;\n            var sz_y = _uv.h;\n\n                //tl\n            var tl_x = _uv.x;\n            var tl_y = _uv.y;\n\n                //Keep for later, before changing the values for flipping\n            _quad._uv_cache.set( tl_x, tl_y, sz_x, sz_y );\n\n                //tr\n            var tr_x = tl_x + sz_x;\n            var tr_y = tl_y;\n                //br\n            var br_x = tl_x + sz_x;\n            var br_y = tl_y + sz_y;\n                //bl\n            var bl_x = tl_x;\n            var bl_y = tl_y + sz_y;\n\n            var tmp_x = 0.0;\n            var tmp_y = 0.0;\n\n                    //flipped y swaps tl and tr with bl and br, only on y\n                if(flipy) {\n\n                        //swap tl and bl\n                    tmp_y = bl_y;\n                        bl_y = tl_y;\n                        tl_y = tmp_y;\n\n                        //swap tr and br\n                    tmp_y = br_y;\n                        br_y = tr_y;\n                        tr_y = tmp_y;\n\n                } //flipy\n\n                    //flipped x swaps tl and bl with tr and br, only on x\n                if(flipx) {\n\n                        //swap tl and tr\n                    tmp_x = tr_x;\n                        tr_x = tl_x;\n                        tl_x = tmp_x;\n\n                        //swap bl and br\n                    tmp_x = br_x;\n                        br_x = bl_x;\n                        bl_x = tmp_x;\n\n                } //flipx\n\n            _quad.verts[0].uv.uv0.set_uv( tl_x , tl_y );\n            _quad.verts[1].uv.uv0.set_uv( tr_x , tr_y );\n            _quad.verts[2].uv.uv0.set_uv( br_x , br_y );\n\n            _quad.verts[3].uv.uv0.set_uv( bl_x , bl_y );\n            _quad.verts[4].uv.uv0.set_uv( tl_x , tl_y );\n            _quad.verts[5].uv.uv0.set_uv( br_x , br_y );\n\n                //for locked geometry\n            dirty = true;\n\n        } //_quad != null\n\n    } //quad_uv_space\n\n    public function quad_uv( _quad_id:Int, _uv : Rectangle ) {\n\n        if( texture == null ) {\n            trace(\"Warning : calling UV on a PackedQuad Geometry with null texture.\");\n            return;\n        }\n\n        var tlx = _uv.x/texture.width_actual;\n        var tly = _uv.y/texture.height_actual;\n        var szx = _uv.w/texture.width_actual;\n        var szy = _uv.h/texture.height_actual;\n\n        quad_uv_space( _quad_id, new luxe.Rectangle( tlx, tly, szx, szy ) );\n\n    } //quad_uv\n\n    public function quad_flipx( _quad_id:Int, _flip:Bool ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n            _quad.flipx = _flip;\n            quad_uv_space( _quad_id, _quad._uv_cache );\n        } //_quad != null\n\n    } //quad_flipx\n\n    public function quad_flipy( _quad_id:Int, _flip:Bool ) {\n\n        var _quad = quads.get( _quad_id );\n\n        if(_quad != null) {\n            _quad.flipy = _flip;\n            quad_uv_space( _quad_id, _quad._uv_cache );\n        } //_quad != null\n\n    } //quad_flipy\n\n} //QuadPackGeometry\n","package phoenix.geometry;\n\n\nimport luxe.Log.*;\nimport luxe.Vector;\nimport phoenix.Batcher;\nimport phoenix.geometry.Geometry;\n\nimport luxe.options.GeometryOptions.RectangleGeometryOptions;\n\nclass RectangleGeometry extends Geometry {\n\n        /** Create a new Rectangle goemetry with given options */\n    public function new( ?options : RectangleGeometryOptions ) {\n\n        options.primitive_type = PrimitiveType.lines;\n\n        super(options);\n\n        if(options == null) return;\n\n        var _x : Float = options.x;\n        var _y : Float = options.y;\n        var _w : Float = options.w;\n        var _h : Float = options.h;\n\n        if(options.rect != null) {\n            _x = options.rect.x;\n            _y = options.rect.y;\n            _w = options.rect.w;\n            _h = options.rect.h;\n        }\n\n            //tl\n        add(new Vertex( new Vector( 0, 0 ), color ));\n            //tr\n        add(new Vertex( new Vector( _w, 0 ), color ));\n\n            //tr\n        add(new Vertex( new Vector( _w, 0 ), color ));\n            //br\n        add(new Vertex( new Vector( _w, _h ), color ));\n\n            //br\n        add(new Vertex( new Vector( _w, _h ), color ));\n            //bl\n        add(new Vertex( new Vector( 0, _h ), color ));\n\n            //bl\n        add(new Vertex( new Vector( 0, _h ), color ));\n            //tl\n        add(new Vertex( new Vector( 0, 0 ), color ));\n\n        immediate = def(options.immediate, false);\n        visible = def(options.visible, true);\n\n        transform.pos = transform.pos.set_xy( _x, _y );\n\n    } //new\n\n        /** Set the vertices from values */\n    public function set_xywh( _x:Float, _y:Float, _w:Float, _h:Float ) {\n\n        if(vertices.length == 0) return;\n\n        vertices[0].pos.set_xy( 0, 0 );\n            //tr\n        vertices[1].pos.set_xy( _w, 0 );\n\n            //tr\n        vertices[2].pos.set_xy( _w, 0 );\n            //br\n        vertices[3].pos.set_xy( _w, _h );\n\n            //br\n        vertices[4].pos.set_xy( _w, _h );\n            //bl\n        vertices[5].pos.set_xy( 0, _h );\n\n            //bl\n        vertices[6].pos.set_xy( 0, _h );\n            //tl\n        vertices[7].pos.set_xy( 0, 0 );\n\n            //\n        transform.pos = transform.pos.set_xy( _x, _y );\n\n    } //set_xywh\n\n        /** Set the vertices based on a rectangle instance */\n    public inline function set( _rect:luxe.Rectangle ) {\n\n        set_xywh(_rect.x, _rect.y, _rect.w, _rect.h);\n\n    } //set\n\n\n} //RectangleGeometry\n","package phoenix.geometry;\n\nimport luxe.options.GeometryOptions;\nimport luxe.utils.Maths;\n\nimport phoenix.BitmapFont;\nimport phoenix.geometry.Vertex;\nimport phoenix.geometry.Geometry;\nimport phoenix.Batcher;\nimport phoenix.Color;\nimport phoenix.Rectangle;\n\nimport luxe.Log.*;\n\nusing luxe.utils.unifill.Unifill;\n\n@:enum abstract EvTextGeometry(Int) from Int to Int {\n    var unknown = 0;\n    var update_text = 1;\n}\n\ntypedef TextGeometryOptions = {\n\n    > GeometryOptions,\n\n    ? text: String,\n    ? font: BitmapFont,\n    ? point_size: Float,\n    ? line_spacing: Float,\n    ? letter_spacing: Float,\n\n    ? bounds : Rectangle,\n    ? bounds_wrap : Bool,\n\n    ? align : TextAlign,\n    ? align_vertical : TextAlign,\n\n    ? sdf: Bool,\n    ? smoothness: Float,\n    ? thickness: Float,\n\n    ? outline: Float,\n    ? outline_color: Color,\n\n    ? glow_threshold: Float,\n    ? glow_amount: Float,\n    ? glow_color: Color\n\n}\n\nclass TextGeometry extends Geometry {\n\n    //regular font stuff\n\n        @:isVar public var text (default,set) : String = '';\n        @:isVar public var font (default,default) : BitmapFont;\n        @:isVar public var point_size (default,set) : Float = 32.0;\n        @:isVar public var line_spacing (default,set) : Float = 0.0;\n        @:isVar public var letter_spacing (default,set) : Float = 0.0;\n\n        @:isVar public var bounds (default,set) : Rectangle;\n        @:isVar public var bounds_wrap (default,set) : Bool = false;\n\n        @:isVar public var align (default,set) : TextAlign;\n        @:isVar public var align_vertical (default,set) : TextAlign;\n\n    //distance field specific\n\n        public var sdf : Bool = false;\n        public var unique : Bool = false;\n\n        @:isVar public var smoothness (default,set) : Float = 0.75;\n        @:isVar public var thickness (default,set) : Float = 0.5;\n\n        @:isVar public var outline (default,set) : Float = 0;\n        @:isVar public var outline_color (default,set) : Color;\n\n        @:isVar public var glow_threshold (default,set) : Float = 0;\n        @:isVar public var glow_amount (default,set) : Float = 0;\n        @:isVar public var glow_color (default,set) : Color;\n\n    //sizing cached information\n\n        public var line_widths : Array<Float>;\n        public var text_width : Float = 0;\n        public var text_height : Float = 0;\n        public var line_offsets : Array< Array<Float> >;\n        public var lines : Array<String>;\n\n    //access to change events\n\n        @:noCompletion\n        public var emitter : luxe.Emitter<EvTextGeometry>;\n\n    //internal\n\n        var cache : Array< Array<Vertex> >;\n        var options : TextGeometryOptions;\n\n        var text_h_w : Float = 0;\n        var text_h_h : Float = 0;\n        public var point_ratio : Float = 1;\n\n        var dirty_sizing (default,set) : Bool = true;\n        var dirty_align: Bool = true;\n\n    //common\n\n        static var tab_regex : EReg = new EReg('\\t','gim');\n\n    public function new( _options:TextGeometryOptions ) {\n\n        options = _options;\n        emitter = new luxe.Emitter<EvTextGeometry>();\n\n        assertnull(options, 'TextGeometry requires non-null options');\n\n        //order here before super() is important\n\n                //make sure sdf flag is early enough\n            if(options.sdf != null) sdf = options.sdf;\n                //use the default font if none specified\n            font = def(options.font, Luxe.renderer.font);\n                //the default font is always sdf enabled\n            if(font == Luxe.renderer.font) { sdf = true; }\n\n                //if a custom shader is not given,\n                //use the default sdf or normal textured\n                //but if they have a custom shader, flag\n                //the instance as unique so their options are mutable\n            if(options.shader == null) {\n                if(sdf) {\n                    options.shader = Luxe.renderer.shaders.bitmapfont.shader;\n                } else {\n                    options.shader = Luxe.renderer.shaders.textured.shader;\n                }\n            } else {\n                    //only unique if not the default\n                if(options.shader != Luxe.renderer.shaders.bitmapfont.shader) {\n                    unique = true;\n                }\n            }\n\n            options.primitive_type = PrimitiveType.triangles;\n\n            super( options );\n\n        //setup\n\n        cache = [];\n        line_widths = [];\n        line_offsets = [[],[]];\n        lines = [];\n        outline_color = new Color();\n        glow_color = new Color();\n\n        default_options();\n\n    } //new\n\n//Public API\n\n        /** Remove any cached vertices that are unused by the current text. */\n    #if release inline #end\n    public function tidy() {\n\n        var _vertidx = Math.floor(vertices.length / 6);\n        var _diff = cache.length - _vertidx;\n\n        if(_diff > 0) {\n\n            // _verbose('tidy: remove $_diff from cache');\n\n            var extra = cache.splice(_vertidx, _diff);\n            var c = extra.length;\n            while(c > 0) {\n                c--;\n                var vert = extra.pop();\n                    vert = null;\n            }\n\n        } //diff>0\n\n    } //tidy\n\n\n//Internal\n\n\n    function default_options() {\n\n            //:todo: currently only\n            //one page is supported\n            //because each vertex would\n            //need to know the page it's on\n            //and that would be best served\n            //by the new batcher attributes\n            //as to not muddy everything up\n        texture = font.pages[0];\n\n        //normal font stuff\n\n            if(options.letter_spacing != null) letter_spacing = options.letter_spacing;\n            if(options.line_spacing != null) line_spacing = options.line_spacing;\n            if(options.point_size != null) point_size = options.point_size;\n\n            if(options.bounds != null) bounds = options.bounds;\n            if(options.bounds_wrap != null) bounds_wrap = options.bounds_wrap;\n\n            def(options.align, TextAlign.left);\n            def(options.align_vertical, TextAlign.top);\n\n            align = options.align;\n            align_vertical = options.align_vertical;\n\n        //sdf based\n        //these will be set anyway, but ignored if not sdf\n\n            if(options.thickness != null) thickness = options.thickness;\n            if(options.smoothness != null) smoothness = options.smoothness;\n\n            if(options.outline != null) outline = options.outline;\n            if(options.outline_color != null) outline_color = options.outline_color;\n\n            if(options.glow_threshold != null) glow_threshold = options.glow_threshold;\n            if(options.glow_amount != null) glow_amount = options.glow_amount;\n            if(options.glow_color != null) glow_color = options.glow_color;\n\n            if(sdf) flush_uniforms();\n\n            //text must be last, as it relies on the rest\n        if(options.text != null) text = options.text;\n\n    } //default_options\n\n    #if release inline #end\n    function set_text(_text:String) : String {\n\n        if(_text == null) {\n            log('null text passed into TextGeometry!');\n            _text = '';\n        }\n\n            //don't care if it's the same value\n        if(text != _text) {\n\n                //update the value\n            text = _text;\n\n            if(text != '') {\n\n                dirty_sizing = true;\n                update_text();\n\n            } else {\n                vertices.splice(0, vertices.length);\n            }\n\n        } //same val\n\n        return text;\n\n    } //set_text\n\n    #if release inline #end\n    function stats() {\n        return 'letters:${(vertices.length/6)} / cache:${ cache.length }';\n    }\n\n    #if release inline #end\n    function update_sizes() {\n\n        if(!dirty_sizing) return false;\n\n            //:todo: tab width\n        var drawn_text = tab_regex.replace(text, '    ');\n        if(bounds_wrap && bounds != null) {\n            drawn_text = font.wrap_string_to_bounds(drawn_text, bounds, point_size, letter_spacing);\n        }\n\n        lines.splice(0, lines.length);\n        lines = drawn_text.split('\\n');\n\n            line_widths.splice(0, line_widths.length);\n\n            text_width = font.width_of(drawn_text, point_size, letter_spacing, line_widths);\n            text_height = font.height_of_lines(lines, point_size, line_spacing);\n            text_h_w = text_width / 2;\n            text_h_h = text_height / 2;\n            point_ratio = point_size / font.info.point_size;\n\n            dirty_sizing = false;\n\n        return true;\n\n    } //update_sizes\n\n\n    // #if release inline #end\n    function update_text() {\n\n        var _pos_x = 0.0;\n        var _pos_y = 0.0;\n        var _bounds_based = (bounds != null);\n\n        if(_bounds_based) {\n            transform.pos.x = _pos_x = bounds.x;\n            transform.pos.y = _pos_y = bounds.y;\n        }\n\n        var _cur_x = 0.0;\n        var _cur_y = 0.0;\n        var _line_idx = 0;\n        var _total_idx = 0;\n        var _is_char = true;\n        var _was_dirty = update_sizes();\n\n        inline function _step() {\n            _cur_y += (font.info.line_height + line_spacing) * point_ratio;\n            _cur_x = 0;\n        }\n\n        for(_line in lines) {\n\n                //Calculate alignment offsets\n                //Left is at 0, so it's handled already, same as top\n            var _line_x_offset = 0.0;\n            var _line_y_offset = 0.0;\n\n            if(dirty_align) {\n\n                if(!_bounds_based) {\n\n                    _line_x_offset = switch(align) {\n                        case center: -(line_widths[_line_idx]/2.0);\n                        case right: -line_widths[_line_idx];\n                        default: 0.0;\n                    }\n\n                    _line_y_offset = switch(align_vertical) {\n                        case center: -text_h_h;\n                        case bottom: -text_height;\n                        default: 0.0;\n                    }\n\n                } else {\n\n                    _line_x_offset = switch(align) {\n                        case center: -(line_widths[_line_idx]/2.0) + (bounds.w/2);\n                        case right: -line_widths[_line_idx] + (bounds.w);\n                        default: 0.0;\n                    }\n\n                    _line_y_offset = switch(align_vertical) {\n                        case center: (bounds.h/2) - text_h_h;\n                        case bottom: (bounds.h) - text_height;\n                        default: 0.0;\n                    }\n\n                }\n\n                    //store it in the cache for later\n                line_offsets[0][_line_idx] = _line_x_offset;\n                line_offsets[1][_line_idx] = _line_y_offset;\n\n            } else {\n\n                _line_x_offset = line_offsets[0][_line_idx];\n                _line_y_offset = line_offsets[1][_line_idx];\n\n            }\n\n            if( _line_idx != 0 ){\n                _step();\n            } //_line_idx\n\n                //for each character in the line\n\n            var _idx = 0;\n            for(_uglyph in _line.uIterator()) {\n\n                var _index = _uglyph.toInt();\n                var _char = font.info.chars.get(_index);\n                _is_char = (_char != null && _index > 32);\n\n                    //:todo: make this a small preset vert set matching �\n                    //or the missing char box style char, rather than just a space\n                if(!_is_char) {\n                    _char = font.space_char;\n                }\n\n                if(_is_char) {\n\n                        //the geometry positioning\n                    var _quad_x  = _line_x_offset + _cur_x + ( _char.xoffset * point_ratio );\n                    var _quad_y  = _line_y_offset + _cur_y + ( _char.yoffset * point_ratio );\n                        //the texture page\n                    var _page = font.pages[_char.page];\n                        //work out the coordinates for the uv's\n                    var _u1 = _char.x/_page.width_actual;\n                    var _v1 = _char.y/_page.height_actual;\n                    var _u2 = (_char.x + _char.width) / _page.width_actual;\n                    var _v2 = (_char.y + _char.height) / _page.height_actual;\n\n                    update_char( _total_idx,\n                                 _quad_x, _quad_y, _char.width*point_ratio, _char.height*point_ratio,\n                                 _u1, _v1, _u2, _v2, color );\n\n                        //this should only count\n                        //visual characters\n                    _total_idx++;\n\n                } //don't draw non visible char\n\n                    //after the letter,\n                    //the x movement forward\n                var _x_inc = _char.xadvance;\n\n                    //adjust for kerning + tracking(letterspace)\n                if( _idx < _line.length-1 ) {\n                    _x_inc += font.kerning( _index, _line.uCharCodeAt(_idx+1) );\n                    if(_index >= 32) {\n                        _x_inc += letter_spacing;\n                    }\n                }\n\n                _x_inc *= point_ratio;\n\n                    //apply it with the point size ratio\n                _cur_x += _x_inc;\n\n                    //increment char index\n                _idx++;\n\n            } //for each letter in string\n\n                //increase the line counter\n            _line_idx++;\n\n        } //each line\n\n            //for unused vertices, we remove\n            //them from the visible set,\n            //keeping them in cache (only tidy() cleans cache)\n        var _vertidx = Std.int(vertices.length / 6);\n        var _diff = _vertidx - _total_idx;\n\n        if(_diff > 0) {\n            vertices.splice(_total_idx * 6, _diff * 6);\n        }\n\n            //if it was true, it's false now\n        dirty_align = false;\n        emitter.emit(EvTextGeometry.update_text);\n\n    } //update_text\n\n    // #if release inline #end\n    function update_char( _letteridx:Int, _x:Float, _y:Float, _w:Float, _h:Float, _u:Float, _v:Float, _u2:Float, _v2:Float, _color:Color ) {\n\n        var vert0:Vertex; var vert1:Vertex; var vert2:Vertex;\n        var vert3:Vertex; var vert4:Vertex; var vert5:Vertex;\n\n        var quad = cache[_letteridx];\n\n            //if no cache at this index we need to add vertices\n        if(quad == null) {\n\n            // _debug(' idx $_letteridx out of cache range, adding cache index');\n\n            vert0 = new Vertex( new Vector( _x, _y ), _color );\n            vert1 = new Vertex( new Vector( _x+_w, _y ), _color );\n            vert2 = new Vertex( new Vector( _x+_w, _y+_h ), _color );\n\n            vert3 = new Vertex( new Vector( _x, _y+_h ), _color );\n            vert4 = new Vertex( new Vector( _x, _y ), _color );\n            vert5 = new Vertex( new Vector( _x+_w, _y+_h), _color );\n\n            quad = [vert0, vert1, vert2, vert3, vert4, vert5];\n            cache[_letteridx] = quad;\n\n        } else {\n\n            // _debug(' idx $_letteridx in cache, setting cache index');\n            //this cache index existed as vertices so we fetch them\n\n            vert0 = quad[0]; vert1 = quad[1]; vert2 = quad[2];\n            vert3 = quad[3]; vert4 = quad[4]; vert5 = quad[5];\n\n                //then update the values\n            vert0.pos.set_xy( _x    , _y    );\n            vert1.pos.set_xy( _x+_w , _y    );\n            vert2.pos.set_xy( _x+_w , _y+_h );\n            vert3.pos.set_xy( _x    , _y+_h );\n            vert4.pos.set_xy( _x    , _y    );\n            vert5.pos.set_xy( _x+_w , _y+_h );\n\n        } //quad != null\n\n        vert0.uv.uv0.set_uv( _u  , _v  );\n        vert1.uv.uv0.set_uv( _u2 , _v  );\n        vert2.uv.uv0.set_uv( _u2 , _v2 );\n        vert3.uv.uv0.set_uv( _u  , _v2 );\n        vert4.uv.uv0.set_uv( _u  , _v  );\n        vert5.uv.uv0.set_uv( _u2 , _v2 );\n\n            //now, if the vert count is lower than the index, add these\n            //to the geometry itself. This must be done each time since\n            //the vertices length potentially changes after each char\n        var _vertidx = Math.floor(vertices.length / 6);\n\n        if(_vertidx <= _letteridx) {\n            add( vert0 ); add( vert1 );  add( vert2 );\n            add( vert3 ); add( vert4 );  add( vert5 );\n        }\n\n    } //update_char\n\n//Setters\n\n    #if release inline #end\n    function set_dirty_sizing(_b:Bool) {\n\n            dirty_align = true;\n\n        return dirty_sizing = _b;\n\n    } //set_dirty_sizing\n\n    #if release inline #end\n    function set_bounds( _bounds:Rectangle ) {\n\n        bounds = _bounds;\n\n            dirty_sizing = true;\n            update_text();\n\n        return bounds;\n\n    } //set_bounds\n\n    #if release inline #end\n    function set_bounds_wrap( _wrap:Bool ) {\n\n        bounds_wrap = _wrap;\n\n            dirty_sizing = true;\n            update_text();\n\n        return bounds_wrap;\n\n    } //set_bounds_wrap\n\n    #if release inline #end\n    function set_line_spacing(_line_spacing:Float) {\n\n        line_spacing = _line_spacing;\n\n            dirty_sizing = true;\n            update_text();\n\n        return line_spacing;\n\n    } //set_line_spacing\n\n    #if release inline #end\n    function set_letter_spacing(_letter_spacing:Float) {\n\n        letter_spacing = _letter_spacing;\n\n            dirty_sizing = true;\n            update_text();\n\n        return letter_spacing;\n\n    } //set_leading\n\n    #if release inline #end\n    function set_align( _align:TextAlign ) {\n\n        align = _align;\n\n            dirty_align = true;\n            update_text();\n\n        return align;\n\n    } //set_align\n\n    #if release inline #end\n    function set_align_vertical( _align_vertical:TextAlign ) {\n\n        align_vertical = _align_vertical;\n\n            dirty_align = true;\n            update_text();\n\n        return align_vertical;\n\n    } //set_align_vertical\n\n    #if release inline #end\n    function set_point_size( s:Float ) {\n\n        if(s < 0) s = 0;\n        point_size = s;\n\n            dirty_sizing = true;\n            update_text();\n\n        return point_size;\n\n    } //set_point_size\n\n\n//SDF specific features\n\n\n    #if release inline #end\n    function set_smoothness(s:Float) {\n\n        if(s < 0) s = 0;\n\n        if(shader != null && sdf && unique) {\n            shader.set_float('smoothness',s);\n        }\n\n        return smoothness = s;\n\n    } //set_smoothness\n\n    #if release inline #end\n    function set_thickness(s:Float) {\n\n        if(s < 0) s = 0;\n\n        if(shader != null && sdf && unique) {\n            shader.set_float('thickness',s);\n        }\n\n        return thickness = s;\n\n    } //set_thickness\n\n    #if release inline #end\n    function set_outline(s:Float) {\n\n        s = Maths.clamp(s, 0.0, 1.0);\n\n        if(shader != null && sdf && unique) {\n            shader.set_float('outline',s);\n        }\n\n        return outline = s;\n\n    } //set_outline\n\n    #if release inline #end\n    function set_glow_threshold(s:Float) {\n\n        if(s < 0) s = 0;\n\n        if(shader != null && sdf && unique) {\n            shader.set_float('glow_threshold',s);\n        }\n\n        return glow_threshold = s;\n\n    } //set_glow_threshold\n\n    #if release inline #end\n    function set_glow_amount(s:Float) {\n\n        if(s < 0) s = 0;\n\n        if(shader != null && sdf && unique) {\n            shader.set_float('glow_amount',s);\n        }\n\n        return glow_amount = s;\n\n    } //set_glow_amount\n\n    #if release inline #end\n    function set_outline_color(c:Color) {\n\n        if(shader != null && sdf && unique) {\n            shader.set_color('outline_color', c);\n        }\n\n        return outline_color = c;\n\n    } //set_outline_color\n\n    #if release inline #end\n    function set_glow_color(c:Color) {\n\n        if(shader != null && sdf && unique) {\n            shader.set_color('glow_color', c);\n        }\n\n        return glow_color = c;\n\n    } //set_glow_color\n\n        //internal convenience for when\n        //the shader type changes to sdf\n        //and values need refreshing\n    #if release inline #end\n    function flush_uniforms() {\n        if(shader != null && sdf) {\n            shader.set_float('smoothness', smoothness);\n            shader.set_float('thickness', thickness);\n            shader.set_float('outline', outline);\n            shader.set_float('glow_threshold', glow_threshold);\n            shader.set_float('glow_amount', glow_amount);\n            shader.set_color('outline_color', outline_color);\n            shader.set_color('glow_color', glow_color);\n        }\n    }\n\n\n} //TextGeometry\n","package phoenix.geometry;\n\n\nclass TextureCoordSet {\n\n\n    public var uv0 : TextureCoord;\n    public var uv1 : TextureCoord;\n    public var uv2 : TextureCoord;\n    public var uv3 : TextureCoord;\n    public var uv4 : TextureCoord;\n    public var uv5 : TextureCoord;\n    public var uv6 : TextureCoord;\n    public var uv7 : TextureCoord;\n\n\n    public inline function new() {\n\n        uv0 = new TextureCoord();\n        uv1 = new TextureCoord();\n        uv2 = new TextureCoord();\n        uv3 = new TextureCoord();\n        uv4 = new TextureCoord();\n        uv5 = new TextureCoord();\n        uv6 = new TextureCoord();\n        uv7 = new TextureCoord();\n\n    } //new\n\n    public inline function clone() {\n\n        var _set = new TextureCoordSet();\n\n            _set.uv0.set(uv0.u, uv0.v, uv0.w, uv0.t);\n            _set.uv1.set(uv1.u, uv1.v, uv1.w, uv1.t);\n            _set.uv2.set(uv2.u, uv2.v, uv2.w, uv2.t);\n            _set.uv3.set(uv3.u, uv3.v, uv3.w, uv3.t);\n            _set.uv4.set(uv4.u, uv4.v, uv4.w, uv4.t);\n            _set.uv5.set(uv5.u, uv5.v, uv5.w, uv5.t);\n            _set.uv6.set(uv6.u, uv6.v, uv6.w, uv6.t);\n            _set.uv7.set(uv7.u, uv7.v, uv7.w, uv7.t);\n\n        return _set;\n\n    } //clone\n\n\n} //TextureCoordSet\n\n\nclass TextureCoord {\n\n\n    public var u : Float = 0.0;\n    public var v : Float = 0.0;\n    public var w : Float = 0.0;\n    public var t : Float = 0.0;\n\n\n    public inline function new(_u:Float = 0.0, _v:Float = 0.0, _w:Float = 0.0, _t:Float = 0.0) {\n\n        u = _u;\n        v = _v;\n        w = _w;\n        t = _t;\n\n    } //new\n\n    public inline function clone() {\n\n        return new TextureCoord( u, v, w, t );\n\n    } //clone\n\n    public inline function set( _u : Float, _v : Float, _w : Float, _t:Float ) : TextureCoord {\n\n        u = _u;\n        v = _v;\n        w = _w;\n        t = _t;\n\n        return this;\n\n    } //set\n\n    public inline function set_uv( _u : Float, _v : Float ) : TextureCoord {\n\n        u = _u;\n        v = _v;\n\n        return this;\n\n    } //set_uv\n\n    inline function toString() {\n\n        return  '{ u:$v, v:$v }';\n\n    } //toString\n\n\n} //TextureCoord\n","package phoenix.geometry;\n\nimport phoenix.geometry.TextureCoord;\nimport phoenix.Vector;\nimport phoenix.Color;\n\nimport snow.api.buffers.Float32Array;\n\nclass Vertex {\n\n\n\tpublic var pos : Vector;\n\tpublic var color : Color;\n\tpublic var uv : TextureCoordSet;\n\tpublic var normal : Vector;\n\n\n\tpublic inline function new( _pos : Vector, ?_color:Color = null, ?_normal:Vector = null ) {\n\n\t\tuv = new TextureCoordSet();\n\n\t\tpos = _pos;\n\t\tcolor = (_color == null) ? new Color() : _color;\n\t\tnormal = (_normal == null) ? new Vector() : _normal;\n\n\t} //new\n\n\tpublic inline function clone() : Vertex {\n\n\t\tvar _new = new Vertex( pos.clone(), color.clone(), normal.clone() );\n\t\t\t_new.uv = uv.clone();\n\n\t\treturn _new;\n\n\t} //clone\n\n\n} //Vertex\n","package phoenix.utils;\n\nimport snow.modules.opengl.GL;\nimport phoenix.Batcher.PrimitiveType;\nimport phoenix.Batcher.BlendMode;\n\nclass Rendering {\n\n\tpublic static inline function gl_blend_mode_from_BlendMode(_b:BlendMode) {\n\n        switch(_b) {\n            case zero:\n                return GL.ZERO;\n            case one:\n                return GL.ONE;\n            case src_color:\n                return GL.SRC_COLOR;\n            case one_minus_src_color:\n                return GL.ONE_MINUS_SRC_COLOR;\n            case src_alpha:\n                return GL.SRC_ALPHA;\n            case one_minus_src_alpha:\n                return GL.ONE_MINUS_SRC_ALPHA;\n            case dst_alpha:\n                return GL.DST_ALPHA;\n            case one_minus_dst_alpha:\n                return GL.ONE_MINUS_DST_ALPHA;\n            case dst_color:\n                return GL.DST_COLOR;\n            case one_minus_dst_color:\n                return GL.ONE_MINUS_DST_COLOR;\n            case src_alpha_saturate:\n                return GL.SRC_ALPHA_SATURATE;\n        }\n    } //BlendMode convert\n\n    public static inline function fovx_to_y(fovx:Float, aspect:Float):Float {\n\n        return (180 / Math.PI) * (2 * Math.atan(Math.tan(fovx * (Math.PI / 180) / 2) * (1 / aspect)));\n\n    } //fovx_to_y\n\n} //Rendering\n","package snow;\n\nimport snow.App;\nimport snow.types.Types;\n\nimport snow.api.Debug.*;\nimport snow.api.Timer;\nimport snow.api.Promise;\nimport snow.api.buffers.Uint8Array;\n\nimport snow.system.audio.Audio;\nimport snow.system.assets.Assets;\nimport snow.system.io.IO;\nimport snow.system.input.Input;\nimport snow.system.window.Window;\nimport snow.system.window.Windowing;\n\n\nclass Snow {\n\n//Property accessors\n\n        /** The current timestamp */\n    public var time (get,never) : Float;\n        /** Generate a unique ID to use */\n    public var uniqueid (get,never) : String;\n\n//Static convenience\n\n    public static var timestamp (get, never) : Float;\n\n//State management\n\n        /** The host application */\n    public var host : App;\n        /** The application configuration specifics (like window, runtime, and asset lists) */\n    public var config : snow.types.Types.AppConfig;\n        /** The configuration for snow itself, set via build project flags */\n    public var snow_config : SnowConfig;\n        /** Whether or not we are frozen, ignoring events i.e backgrounded/paused */\n    public var freeze (default,set) : Bool = false;\n\n//Sub systems\n\n        /** The io system */\n    public var io : IO;\n        /** The input system */\n    public var input : Input;\n        /** The asset system */\n    public var assets : Assets;\n        /** The audio system */\n    public var audio : Audio;\n        /** The window manager */\n    public var windowing : Windowing;\n        /** The platform identifier, a string,\n            but uses `snow.types.Types.Platform` abstract enum internally */\n    public var platform : String = 'unknown';\n        /** The os identifier, a string,\n            but uses `snow.types.Types.OS` abstract enum internally */\n    public var os : String = 'unknown';\n        /** A debug flag for convenience, true if the app was built with the haxe -debug flag or define */\n    public var debug : Bool = #if debug true #else false #end;\n\n        /** Set if shut down has commenced */\n    public var shutting_down : Bool = false;\n        /** Set if shut dow has completed  */\n    public var has_shutdown : Bool = false;\n        /** If the config specifies a default window, this is it */\n    public var window : Window;\n\n//Internal values\n\n        //if already passed the ready state\n    var was_ready : Bool = false;\n        //if ready has completed, so systems can begin safely\n    var is_ready : Bool = false;\n        //the core platform instance to bind us\n    @:noCompletion public static var core : Core;\n        //the list of functions to run next loop\n    static var next_queue : Array<Void->Void>;\n        //the list of functions to run at the end of the current loop\n    static var defer_queue : Array<Void->Void>;\n\n    @:noCompletion\n    public function new() {\n\n        if(snow.api.Debug.get_level() > 1) {\n            log('log / level to ${snow.api.Debug.get_level()}' );\n            log('log / filter : ${snow.api.Debug.get_filter()}');\n            log('log / exclude : ${snow.api.Debug.get_exclude()}');\n        }\n\n        #if ios      platform = Platform.platform_ios;       #end\n        #if mac      platform = Platform.platform_mac;       #end\n        #if web      platform = Platform.platform_web;       #end\n        #if linux    platform = Platform.platform_linux;     #end\n        #if android  platform = Platform.platform_android;   #end\n        #if windows  platform = Platform.platform_windows;   #end\n\n            //We create the core as a concrete platform version of the core\n        core = new Core( this );\n        next_queue = [];\n        defer_queue = [];\n\n    } //new\n\n//Public API\n\n        /** Shutdown the engine and quit */\n    public function shutdown() {\n\n        shutting_down = true;\n\n        host.ondestroy();\n        io.destroy();\n        audio.destroy();\n        input.destroy();\n        windowing.destroy();\n\n        core.shutdown();\n\n        has_shutdown = true;\n\n    } //shutdown\n\n        /** Called for you by snow, unless configured otherwise.\n            Only call this manually if your render_rate is 0! */\n    public inline function render() {\n\n        windowing.update();\n\n    } //render\n\n    public inline function dispatch_system_event( _event:SystemEvent ) {\n\n        on_event(_event);\n\n    } //dispatch_system_event\n\n//Public static API\n\n        /** Call a function at the start of the next frame,\n            useful for async calls in a sync context, allowing the sync function to return safely before the onload is fired. */\n    inline\n    public static function next( func: Void->Void ) {\n\n        if(func != null) next_queue.push(func);\n\n    } //next\n\n        /** Call a function at the end of the current frame */\n    inline\n    public static function defer( func: Void->Void ) {\n\n        if(func != null) defer_queue.push(func);\n\n    } //defer\n\n//Internal API\n\n    @:noCompletion\n    public function init( _snow_config:SnowConfig, _host : App ) {\n\n        snow_config = _snow_config;\n\n        if(snow_config.app_package == null) {\n            snow_config.app_package = 'org.snowkit.snow';\n        }\n\n        if(snow_config.config_path == null) {\n            snow_config.config_path = '';\n        }\n\n        config = default_config();\n        host = _host;\n        host.app = this;\n\n        core.init( on_event );\n\n    } //init\n\n    function on_snow_init() {\n\n        _debug('init / initializing');\n        _debug('init / pre ready, init host');\n\n            //any app pre ready init can be handled in here\n        host.on_internal_init();\n\n    } //on_snow_init\n\n    function on_snow_ready() {\n\n        if(was_ready) {\n            throw Error.error('firing ready event more than once is invalid usage');\n        }\n\n        _debug('init / setting up additional systems...');\n\n                //create the sub systems\n            io = new IO( this );\n            input = new Input( this );\n            audio = new Audio( this );\n            assets = new Assets( this );\n            windowing = new Windowing( this );\n\n        _debug('modules /');\n        _debug('  Assets - '    + typename(assets.module));\n        _debug('  Audio - '     + typename(audio.module));\n        _debug('  Input - '     + typename(input.module));\n        _debug('  IO - '        + typename(io.module));\n        _debug('  Windowing - ' + typename(windowing.module));\n\n            //disllow re-entry\n        was_ready = true;\n\n        setup_app_path();\n\n        _debug('init / setup default assets : ok');\n\n        setup_configs().then(function(_){\n\n            _debug('init / setup default configs : ok');\n\n            setup_default_window();\n\n            next(on_ready);\n\n        }).error(function(e) {\n\n            throw Error.init('snow / cannot recover from error: $e');\n\n        });\n\n            //make sure the initial promises happen\n        snow.api.Promise.Promises.step();\n\n            //make sure all events pushed into\n            //the queues are flushed\n        while(next_queue.length > 0) {\n            cycle_next_queue();\n        }\n\n        while(defer_queue.length > 0) {\n            cycle_defer_queue();\n        }\n\n    } //on_snow_ready\n\n    @:allow(snow.App)\n    function do_internal_update( dt:Float ) {\n\n        io.update();\n        input.update();\n        audio.update();\n        host.update( dt );\n\n    } //do_internal_update\n\n        //once start up is done, this is called\n    function on_ready() {\n\n        _debug('init / calling host ready');\n        is_ready = true;\n        host.ready();\n\n    } //on_ready\n\n    function on_snow_update() {\n\n        if(freeze) return;\n\n            //first update timers\n        Timer.update();\n\n            //handle promise executions\n        snow.api.Promise.Promises.step();\n\n            //handle the events\n        cycle_next_queue();\n\n            //game updates aren't allowed till we are flagged\n        if(!is_ready) return;\n\n            //handle any internal pre updates\n        host.ontickstart();\n\n            //handle any internal updates\n        host.on_internal_update();\n\n            //handle any internal render updates\n        host.on_internal_render();\n\n            //let the system have some time\n        #if snow_native\n            Sys.sleep(0);\n        #end\n\n            //handle any internal post updates\n        host.ontickend();\n\n        cycle_defer_queue();\n\n    } //on_snow_update\n\n    function on_event( _event:SystemEvent ) {\n\n        if( _event.type != SystemEventType.update &&\n            _event.type != SystemEventType.unknown &&\n            _event.type != SystemEventType.window &&\n            _event.type != SystemEventType.input\n\n        ) {\n            _debug( 'event / system event / ${_event.type} / $_event');\n        }\n\n        if( _event.type != SystemEventType.update ) {\n            _verboser( 'event / system event / $_event');\n        }\n\n            //all systems should get these basically...\n            //cos of app lifecycles etc being here.\n        if(is_ready) {\n            io.on_event( _event );\n            audio.on_event( _event );\n            windowing.on_event( _event );\n            input.on_event( _event );\n        }\n\n        host.onevent( _event );\n\n        switch(_event.type) {\n\n            case SystemEventType.init: {\n                on_snow_init();\n            } //init\n\n            case SystemEventType.ready: {\n                on_snow_ready();\n            } //ready\n\n            case SystemEventType.update: {\n                on_snow_update();\n            } //update\n\n            case SystemEventType.quit, SystemEventType.app_terminating: {\n                shutdown();\n            } //quit\n\n            case SystemEventType.shutdown: {\n                log('Goodbye.');\n            } //shutdown\n\n            default: {\n\n            } //default\n\n        } //switch _event.type\n\n    } //on_event\n\n    inline function cycle_next_queue() {\n\n        var count = next_queue.length;\n        var i = 0;\n        while(i < count) {\n            (next_queue.shift())();\n            ++i;\n        }\n\n    } //cycle_next_queue\n\n    inline function cycle_defer_queue() {\n\n        var count = defer_queue.length;\n        var i = 0;\n        while(i < count) {\n            (defer_queue.shift())();\n            ++i;\n        }\n\n    } //cycle_next_queue\n\n//Setup specifics\n\n        //ensure that we are in the correct location for asset loading\n    function setup_app_path() {\n\n        #if snow_native\n\n            var app_path = io.module.app_path();\n            var pref_path = io.module.app_path_prefs();\n\n            Sys.setCwd( app_path );\n\n            _debug('init / setting up app path $app_path');\n            _debug('init / setting up pref path: $pref_path');\n\n        #end //snow_native\n\n    } //setup_app_path\n\n    function setup_configs() {\n\n            //blank config path means don't try to load config.json\n        if(snow_config.config_path == '') {\n            setup_host_config();\n            return Promise.resolve();\n        }\n\n        return new Promise(function(resolve, reject) {\n\n            _debug('config / fetching runtime config');\n\n            default_runtime_config().then(function(_runtime_conf:Dynamic) {\n\n                config.runtime = _runtime_conf;\n\n            }).error(function(error){\n\n                throw Error.init('config / failed / default runtime config failed to parse as JSON. cannot recover. $error');\n\n            }).then(function(){\n\n                setup_host_config();\n                resolve();\n\n            });\n\n        }); //promise\n\n    } //setup_configs\n\n    function setup_host_config() {\n\n        _debug('config / fetching user config');\n\n        config = host.config( config );\n\n    } //setup_host_config\n\n    function setup_default_window() {\n\n        _debug('windowing / creating default window');\n\n            //force fullscreen on mobile to get better\n            //behavior from the window for now.\n            //borderless will control the status bar\n        #if mobile\n            config.window.fullscreen = true;\n        #end //mobile\n\n            //now if they requested a window, let's open one\n        if(config.has_window == true) {\n\n            _debug('windowing / has window, so creating with ${config.window}');\n\n            window = windowing.create( config.window );\n\n                //failed to create?\n            if(window.handle == null) {\n                throw Error.windowing('requested default window cannot be created. cannot continue');\n            }\n\n        } else { //has_window\n\n            _debug('windowing / not! creating default window, has_window was ${config.has_window}');\n\n        }\n\n    } //create_default_window\n\n//Default handlers\n\n    function default_config() : AppConfig {\n        return {\n            has_window : true,\n            runtime : {},\n            window : default_window_config(),\n            render : default_render_config(),\n            web : {\n                no_context_menu : true,\n                prevent_default_keys : [\n                    Key.left, Key.right, Key.up, Key.down,\n                    Key.backspace, Key.tab, Key.delete\n                ],\n                prevent_default_mouse_wheel : true,\n                true_fullscreen : false\n            },\n            native : {\n                audio_buffer_length : 176400,\n                audio_buffer_count : 4\n            }\n        }\n    }\n\n        /** handles the default method of parsing a runtime config json,\n            To change this behavior override `get_runtime_config`. This is called by default in get_runtime_config. */\n    function default_runtime_config() : Promise {\n\n        _debug('config / setting up default runtime config');\n\n            //for the default config, we only reject if there is a json parse error\n        return new Promise(function(resolve, reject) {\n\n            var load = io.data_flow( assets.path(snow_config.config_path), AssetJSON.processor);\n\n                load.then(resolve).error(function(error:Error) {\n                    switch(error) {\n                        case Error.parse(val):\n                            reject(error);\n                        case _:\n                            _debug('config / default config rejected / $error');\n                            resolve();\n                    }\n                });\n\n        }); //promise\n\n    } //default_runtime_config\n\n        /** Returns a default configured render config */\n    function default_render_config() : RenderConfig {\n\n        _debug('config / fetching default render config');\n\n        return {\n            depth : false,\n            stencil : false,\n            antialiasing : 0,\n            red_bits : 8,\n            green_bits : 8,\n            blue_bits : 8,\n            alpha_bits : 8,\n            depth_bits : 0,\n            stencil_bits : 0,\n            opengl : {\n                minor:0, major:0,\n                profile:OpenGLProfile.compatibility\n            }\n        };\n\n    } //default_render_config\n\n        /** Returns a default configured window config */\n    function default_window_config() : WindowConfig {\n\n        _debug('config / fetching default window config');\n\n        var conf =  {\n            fullscreen_desktop  : true,\n            fullscreen          : false,\n            borderless          : false,\n            resizable           : true,\n            x                   : 0x1FFF0000,\n            y                   : 0x1FFF0000,\n            width               : 960,\n            height              : 640,\n            title               : 'snow app'\n        };\n\n            #if mobile\n                conf.fullscreen = true;\n                conf.borderless = true;\n            #end //mobile\n\n        return conf;\n\n    } //default_window_config\n\n//Properties\n\n    function set_freeze( _freeze:Bool ) {\n\n        freeze = _freeze;\n\n        if(_freeze) {\n            audio.suspend();\n        } else {\n            audio.resume();\n        }\n\n        return freeze;\n\n    } //set_freeze\n\n    inline function get_time() : Float return core.timestamp();\n    inline function get_uniqueid() : String return make_uniqueid();\n    static inline function get_timestamp() return core.timestamp();\n\n//Helpers\n\n\n        // http://www.anotherchris.net/csharp/friendly-unique-id-generation-part-2/#base62\n    function make_uniqueid(?val:Int) : String {\n\n        if(val == null) {\n            #if neko val = Std.random(0x3FFFFFFF);\n            #else val = Std.random(0x7fffffff);\n            #end\n        }\n\n        inline function to_char(value:Int) {\n            if (value > 9) {\n                var ascii = (65 + (value - 10));\n                if (ascii > 90) ascii += 6;\n                return String.fromCharCode(ascii);\n            } else return Std.string(value).charAt(0);\n        } //to_char\n\n        var r = Std.int(val % 62);\n        var q = Std.int(val / 62);\n\n        if (q > 0) return make_uniqueid(q) + to_char(r);\n\n        return Std.string(to_char(r));\n\n    } //make_uniqueid\n\n    inline function typename(t:Dynamic) {\n        return Type.getClassName(Type.getClass(t));\n    }\n\n} //Snow\n\n\n\n#if snow_web\n    private typedef Core = snow.core.web.Core;\n#else\n    private typedef Core = snow.core.native.Core;\n#end","package snow.api;\n\nimport haxe.io.Path;\nimport haxe.macro.Context;\nimport haxe.macro.Expr;\n\nprivate enum LogError {\n    RequireString(detail:String);\n}\n\nclass Debug {\n\n        //default to `log`\n    static var _level : Int = 1;\n    static var _filter : Array<String>;\n    static var _exclude : Array<String>;\n    static var _log_width : Int = 16;\n\n    macro public static function get_level() : haxe.macro.Expr {\n        return macro $v{ ${snow.api.Debug._level} };\n    }\n    macro public static function get_filter() : haxe.macro.Expr {\n        return macro $v{ ${snow.api.Debug._filter} };\n    }\n    macro public static function get_exclude() : haxe.macro.Expr {\n        return macro $v{ ${snow.api.Debug._exclude} };\n    }\n\n    macro static function level( __level:Int ) : haxe.macro.Expr {\n\n        _level = __level;\n\n        return macro null;\n\n    } //level\n\n    macro static function filter( __filter:String ) : haxe.macro.Expr {\n\n        _filter = __filter.split(',');\n\n        var _index = 0;\n        for(_f in _filter) {\n            _filter[_index] = StringTools.trim(_f);\n            _index++;\n        }\n\n        return macro null;\n\n    } //filter\n\n    macro static function exclude( __exclude:String ) : haxe.macro.Expr {\n\n        _exclude = __exclude.split(',');\n\n        var _index = 0;\n        for(_e in _exclude) {\n            _exclude[_index] = StringTools.trim(_e);\n            _index++;\n        }\n\n        return macro null;\n\n    } //exclude\n\n    macro static function width( _width:Int ) : haxe.macro.Expr {\n\n        _log_width = _width;\n\n        return macro null;\n\n    } //width\n\n        //This macro uses the defined log level value to reject code that\n        //shouldn't even exist at runtime , like low level debug information\n        //and logging by injecting or not injecting code\n    macro public static function log( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 0);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}i / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //log\n\n    macro public static function _debug( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 1);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}d / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //_debug\n\n    macro public static function _verbose( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 2);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}v / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //_verbose\n\n    macro public static function _verboser( value:Dynamic ) : Expr {\n\n        var _file = Path.withoutDirectory(_get_log_file());\n        var _context = Path.withoutExtension(_file).toLowerCase();\n        var _spaces = _get_spacing(_file);\n\n        for(meta in Context.getLocalClass().get().meta.get()) {\n            if(meta.name == ':log_as') {\n                var _str = switch(meta.params[0].expr) {\n                    case EConst(CString(str)): _context = str;\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\n                }\n            }\n        } //for each meta\n\n        var _log = (_level > 3);\n\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\n                _log = false;\n            }\n\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\n                _log = false;\n            }\n\n        if(_log) {\n            return macro @:pos(Context.currentPos()) trace('${_spaces}V / $_context / ' + $value);\n        }\n\n        return macro null;\n\n    } //_verboser\n\n    macro public static function assert(expr:Expr, ?reason:String='') {\n        #if !snow_no_assertions\n            var str = haxe.macro.ExprTools.toString(expr);\n                if(reason != '') str += ' ($reason)';\n            return macro @:pos(Context.currentPos()) {\n                if(!$expr) throw snow.api.Debug.DebugError.assertion('$str');\n            }\n        #end\n        return macro null;\n    } //assert\n\n\n    macro public static function assertnull(value:Expr, ?reason:String='') {\n        #if !snow_no_assertions\n            var str = haxe.macro.ExprTools.toString(value);\n            if(reason != '') reason = ' ($reason)';\n            return macro @:pos(Context.currentPos()) {\n                if($value == null) throw snow.api.Debug.DebugError.null_assertion('$str was null$reason');\n            }\n        #end\n        return macro null;\n    } //assert\n\n    macro public static function def(value:Expr, def:Expr):Expr {\n        return macro @:pos(Context.currentPos()) {\n            if($value == null) $value = $def;\n            $value;\n        }\n    }\n\n\n//Internal Helpers\n\n\n    static function _get_spacing(_file:String ) {\n\n        var _spaces = '';\n\n            //the magic number here is File.hx[:1234] for the trace listener log spacing\n        var _trace_length = _file.length + 4;\n        var _diff : Int = _log_width - _trace_length;\n        if(_diff > 0) {\n            for(i in 0 ... _diff) {\n                _spaces += ' ';\n            }\n        }\n\n        return _spaces;\n\n    } //_get_spacing\n\n    macro static function _get_log_file() {\n        return macro Context.getPosInfos(Context.currentPos()).file;\n    } //get_log_context\n\n} // Debug\n\nenum DebugError {\n    assertion(expr:String);\n    null_assertion(expr:String);\n}\n","package snow.api;\n\nclass Libs {\n\n        //for Load function\n    @:noCompletion static var __moduleNames:Map<String, String> = null;\n\n    static function tryLoad( name:String, library:String, func:String, args:Int ) : Dynamic {\n\n        #if snow_native\n\n            try {\n\n                #if cpp\n                    var result = cpp.Lib.load( name, func, args );\n                #elseif (neko)\n                    var result = neko.Lib.load( name, func, args );\n                #else\n                    return null;\n                #end\n\n                if (result != null) {\n\n                    loaderTrace (\"Got result \" + name);\n                    __moduleNames.set (library, name);\n\n                    return result;\n\n                } //result != null\n\n            } catch (e:Dynamic) {\n\n                loaderTrace (\"Failed to load : \" + name);\n\n            } //catch\n\n        #end //snow_native\n\n        return null;\n\n    } //tryLoad\n\n    #if neko\n\n        static function loadNekoAPI ():Void {\n\n            var init = load (\"snow\", \"neko_init\", 5);\n\n            if (init != null) {\n\n                loaderTrace (\"Found nekoapi @ \" + __moduleNames.get (\"snow\"));\n                init (function(s) return new String (s), function (len:Int) { var r = []; if (len > 0) r[len - 1] = null; return r; }, null, true, false);\n\n            } else {\n\n                throw (\"Could not find NekoAPI interface.\");\n\n            }\n\n        }\n\n    #end //neko\n\n    static function findHaxeLib( library:String ) : String {\n\n        try {\n\n            #if snow_native\n\n                var proc = new sys.io.Process (\"haxelib\", [ \"path\", library ]);\n\n                if (proc != null) {\n\n                    var stream = proc.stdout;\n\n                    try {\n\n                        while (true) {\n\n                            var s = stream.readLine ();\n\n                            if (s.substr (0, 1) != \"-\") {\n\n                                stream.close ();\n                                proc.close ();\n                                loaderTrace (\"Found haxelib \" + s);\n                                return s;\n\n                            }\n\n                        }\n\n                    } catch(e:Dynamic) { }\n\n                    stream.close ();\n                    proc.close ();\n\n                }\n\n            #end //snow_native\n\n        } catch (e:Dynamic) { }\n\n        return \"\";\n\n    } //findHaxeLib\n\n    static function get_system_name() : String {\n\n        #if snow_native\n            #if cpp\n                var sys_string = cpp.Lib.load (\"std\", \"sys_string\", 0);\n                return sys_string();\n            #else\n                return Sys.systemName();\n            #end\n        #end\n\n        #if snow_web\n            return js.Browser.navigator.userAgent;\n        #end\n\n        return \"unknown\";\n\n    } //get_system_name\n\n#if snow_web\n\n    public static var _web_libs:Map<String,Dynamic>;\n\n    public static function web_add_lib( library:String, root:Dynamic ) {\n\n        if(_web_libs == null) {\n            _web_libs = new Map<String,Dynamic>();\n        }\n\n        _web_libs.set( library, root );\n\n        return true;\n\n    } //web_add_lib\n\n    public static function web_lib_load(library:String, method:String) {\n\n        if(_web_libs == null) {\n             _web_libs = new Map<String,Dynamic>();\n        }\n\n        var _root = _web_libs.get(library);\n        if(_root != null) {\n            return Reflect.field(_root, method);\n        }\n\n        return null;\n\n    } //web_lib_load\n\n#end //snow_web\n\n    public static function load (library:String, method:String, args:Int = 0):Dynamic {\n\n        #if (iphone || emscripten || android)\n            return cpp.Lib.load( library, method, args );\n        #end\n\n        #if snow_web\n            var found_in_web_libs = web_lib_load( library, method );\n            if(found_in_web_libs) {\n                return found_in_web_libs;\n            }\n        #end //snow_web\n\n        if (__moduleNames == null) __moduleNames = new Map<String, String> ();\n        if (__moduleNames.exists (library)) {\n\n            #if cpp\n                return cpp.Lib.load (__moduleNames.get (library), method, args);\n            #elseif neko\n                return neko.Lib.load (__moduleNames.get (library), method, args);\n            #end\n\n        }\n\n        __moduleNames.set (library, library);\n\n        var result:Dynamic = tryLoad (\"./\" + library, library, method, args);\n\n        if (result == null) {\n            result = tryLoad (\".\\\\\" + library, library, method, args);\n        }\n\n        if (result == null) {\n            result = tryLoad (library, library, method, args);\n        }\n\n        if (result == null) {\n\n            var slash = (get_system_name ().substr (7).toLowerCase () == \"windows\") ? \"\\\\\" : \"/\";\n            var haxelib = findHaxeLib (\"snow\");\n\n            if (haxelib != \"\") {\n                result = tryLoad (haxelib + slash + \"ndll\" + slash + get_system_name () + slash + library, library, method, args);\n                if (result == null) {\n                    result = tryLoad (haxelib + slash + \"ndll\" + slash + get_system_name() + \"64\" + slash + library, library, method, args);\n                }\n            }\n\n        } //result == null\n\n        loaderTrace (\"Result : \" + result);\n\n        #if neko\n            if (library == \"snow\") {\n                loadNekoAPI();\n            }\n        #end\n\n        return result;\n\n    } //load\n\n    static function loaderTrace( message:String ) {\n\n        #if snow_native\n\n            #if cpp\n\n                var get_env = cpp.Lib.load (\"std\", \"get_env\", 1);\n                var debug = (get_env (\"SNOW_LOAD_DEBUG\") != null);\n\n            #else //# not cpp\n\n                var debug = (Sys.getEnv (\"SNOW_LOAD_DEBUG\") !=null);\n\n            #end //# if cpp\n\n            if (debug) {\n                Sys.println (message);\n            } //if debug\n\n        #end //snow_native\n\n\n        #if snow_web\n            //:todo : leverage console.log somehow?\n        #end //snow_web\n\n    } //loaderTrace\n\n} //Libs\n","package snow.api;\n\n/**\nThe Promise interface represents a proxy for a value not necessarily\nknown when the promise is created. It allows you to associate handlers\nto an asynchronous action's eventual success or failure. This lets asynchronous\nmethods return values like synchronous methods: instead of the final value,\nthe asynchronous method returns a promise of having a value at some point in the future.\n\nA pending promise can become either fulfilled with a value, or\nrejected with a reason. When either of these happens, the associated\nhandlers queued up by a promise's then method are called. (If the promise\nhas already been fulfilled or rejected when a corresponding handler is attached,\nthe handler will be called, so there is no race condition between an asynchronous\noperation completing and its handlers being attached.)\n\nAs the Promise.prototype.then and Promise.prototype.error methods return promises,\nthey can be chained—an operation called composition.\n\nDocumentation provided mostly by MDN\nlicensed under CC-BY-SA 2.5. by Mozilla Contributors.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n*/\n@:allow(snow.api.Promises)\nclass Promise {\n\n        /** The state this promise is in. */\n    var state : PromiseState;\n        /** internal: The result of this promise */\n    var result : Dynamic;\n        /** internal: The reactions lists */\n    var reject_reactions: Array<Dynamic>;\n    var fulfill_reactions: Array<Dynamic>;\n    var settle_reactions: Array<Dynamic>;\n\n        /** internal: If the promise was handled by a reject reaction */\n    var was_caught: Bool = false;\n\n        /** Creates a new promise by providing a function with two callback arguments.\n            Inside this function, invoking these callbacks controls the promise state.\n\n            For example, if fetching a value async, and the operation fails, you would\n            invoke the second callback with the reason/error. If the operation succeeded,\n            you would invoke the first.\n\n            `new Promise(function(resolve, reject) {\n                var success = ... get value ...\n                if(success) {\n                    resolve(value);\n                } else {\n                    reject(Error(...));\n                }\n            });` */\n    public function new<T>( func:T ) {\n\n        state = pending;\n\n        reject_reactions = [];\n        fulfill_reactions = [];\n        settle_reactions = [];\n\n        Promises.queue(function() {\n\n            #if hxpromise_catch_and_reject_on_promise_body\n                try {\n                    untyped func(onfulfill, onreject);\n                } catch(err:Dynamic) {\n                    onexception(err);\n                }\n            #else\n                untyped func(onfulfill, onreject);\n            #end //hxpromise_catch_and_reject_on_promise_body\n\n            Promises.defer(Promises.next);\n        });\n\n    } //new\n\n        /** The then function returns a Promise. It takes two arguments,\n            both are callback functions for the success and failure cases of the Promise. */\n    public function then<T,T1>( on_fulfilled:T, ?on_rejected:T ) : Promise {\n\n        switch(state) {\n\n            case pending: {\n                add_fulfill(on_fulfilled);\n                add_reject(on_rejected);\n                return new_linked_promise();\n            }\n\n            case fulfilled: {\n                Promises.defer(on_fulfilled, result);\n                return Promise.resolve(result);\n            }\n\n            case rejected: {\n                Promises.defer(on_rejected, result);\n                return Promise.reject(result);\n            }\n\n        } //switch\n\n    } //then\n\n        /** The error function returns a Promise and deals with rejected cases only.\n            It behaves the same as calling then(null, on_rejected).*/\n    public function error<T>( on_rejected:T ) : Promise {\n\n        switch(state) {\n\n            case pending: {\n                add_reject(on_rejected);\n                return new_linked_resolve_empty();\n            }\n\n            case fulfilled: {\n                return Promise.resolve(result);\n            }\n\n            case rejected: {\n                Promises.defer(on_rejected, result);\n                return Promise.reject(result);\n            }\n\n        } //switch\n\n    } //error\n\n        /** The Promise.all(iterable) function returns a promise that\n            resolves when all of the promises in the iterable argument\n            have resolved. The result is passed as an array of values\n            from all the promises.\n            If any of the passed in promises rejects, the all Promise\n            immediately rejects with the value of the promise that rejected,\n            discarding all the other promises whether or not they have resolved. */\n    public static function all( list:Array<Promise> ) {\n\n        #if debug\n            for(item in list) {\n                if(item == null) throw \"Promise.all handed an array with null items within it\";\n            }\n        #end\n\n        return new Promise(function(ok, no) {\n\n            var current = 0;\n            var total = list.length;\n            var fulfill_result = [];\n            var reject_result = null;\n            var all_state:PromiseState = pending;\n\n            var single_ok = function(index, val) {\n\n                if(all_state != pending) return;\n\n                current++;\n                fulfill_result[index] = val;\n\n                if(total == current) {\n                    all_state = fulfilled;\n                    ok(fulfill_result);\n                }\n\n            } //single_ok\n\n            var single_err = function(val) {\n\n                if(all_state != pending) return;\n\n                all_state = rejected;\n                reject_result = val;\n                no(reject_result);\n\n            } //single_err\n\n            var index = 0;\n            for(promise in list) {\n                promise.then(single_ok.bind(index,_)).error(single_err);\n                index++;\n            }\n\n        }); //promise\n\n    } //all\n\n        /** The Promise.race function returns a promise that\n            resolves or rejects as soon as one of the promises in the\n            list resolves or rejects, with the value or reason from that promise. */\n    public static function race( list:Array<Promise> ) {\n\n        return new Promise(function(ok,no) {\n\n            var settled = false;\n            var single_ok = function(val) {\n                if(settled) return;\n                settled = true;\n                ok(val);\n            }\n\n            var single_err = function(val) {\n                if(settled) return;\n                settled = true;\n                no(val);\n            }\n\n            for(promise in list) {\n                promise.then(single_ok).error(single_err);\n            }\n        });\n\n    } //race\n\n        /** The Promise.reject function returns a Promise object\n            that is rejected with the optional reason. */\n    public static function reject<T>( ?reason:T ) {\n\n        return new Promise(function(ok, no){\n            no(reason);\n        });\n\n    } //reject\n\n        /** The static Promise.resolve function returns a Promise object\n            that is resolved with the given value. */\n    public static function resolve<T>( ?val:T ) {\n\n        return new Promise(function(ok, no){\n            ok(val);\n        });\n\n    } //resolve\n\n//Debug\n\n    function toString() {\n        return 'Promise { state:${state_string()}, result:$result }';\n    }\n\n//Internal\n\n        /** internal: Add a settle reaction unless\n            this promise is already settled,\n            if it is the call is deferred but happens \"immediately\" */\n    function add_settle(f) {\n\n        if(state == pending) {\n            settle_reactions.push(f);\n        } else {\n            Promises.defer(f,result);\n        }\n\n    } //add_settle\n\n        /** internal: Return a new linked promise that\n            will wait on this, and settle it with this result */\n    function new_linked_promise() {\n\n        return new Promise(function(f, r) {\n            add_settle(function(_){\n                if(state == fulfilled){\n                    f(result);\n                } else {\n                    r(result);\n                }\n            });\n        }); //promise\n\n    } //\n\n\n        /** internal: Return a resolved promise that\n            will wait on this, and fulfill with this result */\n    function new_linked_resolve() {\n        return new Promise(function (f,r) {\n            add_settle(function(val) {\n                f(val);\n            });\n        });\n    } //\n\n        /** internal: Return a rejected promise that\n            will wait on this, and reject with this result */\n    function new_linked_reject() {\n        return new Promise(function (f,r) {\n            add_settle(function(val){\n                r(val);\n            });\n        });\n    } //\n\n        /** internal: Return an already resolved\n            promise that will wait on this one\n            but have no value fulfilled */\n    function new_linked_resolve_empty() {\n        return new Promise(function(f,r) {\n            add_settle(function(_){\n                f();\n            });\n        });\n    } //\n\n        /** internal: Return an already rejected\n            promise that will wait on this one\n            but have no value rejected */\n    function new_linked_reject_empty() {\n        return new Promise(function(f,r) {\n            add_settle(function(_){\n                r();\n            });\n        });\n    } //\n\n\n        /** internal: Add a fulfill reaction callback */\n    function add_fulfill<T>(f:T) {\n        if(f != null) {\n            fulfill_reactions.push(f);\n        }\n    } //\n\n        /** internal: Add a reject reaction callback */\n    function add_reject<T>(f:T) {\n        if(f != null) {\n            was_caught = true;\n            reject_reactions.push(f);\n        }\n    } //\n\n//State shifts\n\n        /** internal: Called if the promise is fulfilled. */\n    function onfulfill<T>( val:T ) {\n\n        // trace('resolve: to $val, with ${fulfill_reactions.length} reactions');\n\n        state = fulfilled;\n        result = val;\n\n        while(fulfill_reactions.length > 0) {\n            var fn = fulfill_reactions.shift();\n            fn(result);\n        }\n\n        onsettle();\n\n    } //onfulfill\n\n        /** internal: Called if the promise is rejected. */\n    function onreject<T>( reason:T ) {\n\n        // trace('reject: to $reason, with ${reject_reactions.length} reactions');\n\n        state = rejected;\n        result = reason;\n\n        while(reject_reactions.length > 0) {\n            var fn = reject_reactions.shift();\n            fn(result);\n        }\n\n        onsettle();\n\n    } //onreject\n\n        /** internal: Called when the promise is settled. */\n    function onsettle() {\n\n        while(settle_reactions.length > 0) {\n            var fn = settle_reactions.shift();\n            fn(result);\n        }\n\n    } //onsettle\n\n        /** internal: Handle exceptions in the promise callback.\n            This causes a rejection, and if no handlers are found will throw */\n    function onexception<T>( err:T ) {\n\n        #if !hxpromise_dont_throw_unhandled_rejection\n\n        add_settle(function(_){\n            if(!was_caught) {\n                if(state == rejected) {\n                    throw PromiseError.UnhandledPromiseRejection(this.toString());\n                    return;\n                }\n            }\n        });\n\n        #end //hxpromise_throw_unhandled_rejection\n\n            //state can't transition\n            //and we shouldn't reject twice\n            //so we only reject if pending\n        if(state == pending) {\n            onreject(err);\n        }\n\n    } //onexception\n\n        /** internal: return a string for our state */\n    function state_string() {\n        return switch(state){\n            case pending:'pending';\n            case fulfilled:'fulfilled';\n            case rejected:'rejected';\n        }\n    }\n\n} //Promise\n\n\n/**\nPromises implementation. Use this to integrate the promises\ninto your code base. Call step at the end of a frame/microtask.\n*/\n@:allow(snow.api.Promise)\nclass Promises {\n\n    static var calls: Array<Dynamic> = [];\n    static var defers: Array<{f:Dynamic,a:Dynamic}> = [];\n\n        /** Call this once when you want to propagate promises */\n    public static function step() {\n\n        next();\n\n        while(defers.length > 0) {\n            var defer = defers.shift();\n                defer.f(defer.a);\n        }\n\n    } //\n\n        /** Handle the next job in the queue if any */\n    static function next() {\n        if(calls.length > 0) (calls.shift())();\n    } //\n\n        /** Defer a call with an argument to the next step */\n    static function defer<T,T1>(f:T, ?a:T1) {\n        if(f == null) return;\n        defers.push({f:f, a:a});\n    } //\n\n        /** Queue a job to be executed in order */\n    static function queue<T>(f:T) {\n        if(f == null) return;\n        calls.push(f);\n    } //\n\n} //Promises\n\n//Promise types\n\nenum PromiseError {\n    UnhandledPromiseRejection(err:Dynamic);\n}\n\n@:enum\nabstract PromiseState(Int) from Int to Int {\n        //initial state, not fulfilled or rejected\n    var pending = 0;\n        //successful operation\n    var fulfilled = 1;\n        //failed operation\n    var rejected = 2;\n\n} //\n","package snow.api;\n\nimport haxe.PosInfos;\nimport haxe.Log;\n\n@:allow(snow.Snow)\n    class Timer {\n\n        static var running_timers:Array<Timer> = [];\n\n        @:noCompletion public var time:Float;\n        @:noCompletion public var fire_at:Float;\n        @:noCompletion public var running:Bool;\n\n        public function new(_time:Float) {\n\n            time = _time;\n            running_timers.push( this );\n            fire_at = Snow.timestamp + time;\n            running = true;\n\n        } //new\n\n        public static function measure<T>( f : Void -> T, ?pos : PosInfos ) : T {\n            var t0 = Snow.timestamp;\n            var r = f();\n            Log.trace((Snow.timestamp - t0) + \"s\", pos);\n            return r;\n        }\n\n        // Set this with \"run=...\"\n        dynamic public function run () { }\n\n        public function stop ():Void {\n\n            if (running) {\n                running = false;\n                running_timers.remove (this);\n            }\n\n        } //stop\n\n\n        static function update() {\n\n            var now = Snow.timestamp;\n\n            for (timer in running_timers) {\n                if(timer.running) {\n                    if(timer.fire_at < now) {\n                        timer.fire_at += timer.time;\n                        timer.run();\n                    } //now\n                }\n            } //all timers\n\n        } //update\n\n            //From std/haxe/Timer.hx\n        public static function delay( _time:Float, _f:Void -> Void ) {\n\n            var t = new Timer( _time );\n            t.run = function() {\n                t.stop();\n                _f();\n            };\n\n            return t;\n\n        } //delay\n\n    } //Timer\n\n","package snow.api.buffers;\r\n\r\n#if js\r\n\r\n    @:forward\r\n    abstract Int32Array(js.html.Int32Array)\r\n        from js.html.Int32Array\r\n        to js.html.Int32Array {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\r\n\r\n        @:generic\r\n        public inline function new<T>(\r\n            ?elements:Int,\r\n            ?array:Array<T>,\r\n            ?view:ArrayBufferView,\r\n            ?buffer:ArrayBuffer, ?byteoffset:Int = 0, ?len:Null<Int>\r\n        ) {\r\n            if(elements != null) {\r\n                this = new js.html.Int32Array( elements );\r\n            } else if(array != null) {\r\n                this = new js.html.Int32Array( untyped array );\r\n            } else if(view != null) {\r\n                this = new js.html.Int32Array( untyped view );\r\n            } else if(buffer != null) {\r\n                if(len == null) {\r\n                    this = new js.html.Int32Array( buffer, byteoffset );\r\n                } else {\r\n                    this = new js.html.Int32Array( buffer, byteoffset, len );\r\n                }\r\n            } else {\r\n                this = null;\r\n            }\r\n        }\r\n\r\n        @:arrayAccess @:extern inline function __set(idx:Int, val:Int) : Void this[idx] = val;\r\n        @:arrayAccess @:extern inline function __get(idx:Int) : Int return this[idx];\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Int32Array {\r\n            if(byteOffset == null) return new js.html.Int32Array(cast bytes.getData());\r\n            if(len == null) return new js.html.Int32Array(cast bytes.getData(), byteOffset);\r\n            return new js.html.Int32Array(cast bytes.getData(), byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            #if (haxe_ver < 3.2)\r\n                return @:privateAccess new haxe.io.Bytes( this.byteLength, cast new js.html.Uint8Array(this.buffer) );\r\n            #else\r\n                return @:privateAccess new haxe.io.Bytes( cast new js.html.Uint8Array(this.buffer) );\r\n            #end\r\n        }\r\n\r\n        inline function toString() return 'Int32Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#else\r\n\r\n    import snow.api.buffers.ArrayBufferView;\r\n    import snow.api.buffers.TypedArrayType;\r\n\r\n    @:forward\r\n    abstract Int32Array(ArrayBufferView) from ArrayBufferView to ArrayBufferView {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\r\n\r\n        public var length (get, never):Int;\r\n\r\n        @:generic\r\n        public inline function new<T>(\r\n            ?elements:Int,\r\n            ?array:Array<T>,\r\n            ?view:ArrayBufferView,\r\n            ?buffer:ArrayBuffer, ?byteoffset:Int = 0, ?len:Null<Int>\r\n        ) {\r\n\r\n            if(elements != null) {\r\n                this = new ArrayBufferView( elements, Int32 );\r\n            } else if(array != null) {\r\n                this = new ArrayBufferView(0, Int32).initArray(array);\r\n            } else if(view != null) {\r\n                this = new ArrayBufferView(0, Int32).initTypedArray(view);\r\n            } else if(buffer != null) {\r\n                this = new ArrayBufferView(0, Int32).initBuffer(buffer, byteoffset, len);\r\n            } else {\r\n                throw \"Invalid constructor arguments for Int32Array\";\r\n            }\r\n        }\r\n\r\n    //Public API\r\n\r\n        public inline function subarray( begin:Int, end:Null<Int> = null) : Int32Array return this.subarray(begin, end);\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Int32Array {\r\n            return new Int32Array(bytes, byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            return this.buffer;\r\n        }\r\n\r\n    //Internal\r\n\r\n        inline function get_length() return this.length;\r\n\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __get(idx:Int) {\r\n            return ArrayBufferIO.getInt32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT));\r\n        }\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __set(idx:Int, val:Int) : Void {\r\n            ArrayBufferIO.setInt32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT), val);\r\n        }\r\n\r\n        inline function toString() return 'Int32Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#end //!js\r\n","package snow.api.buffers;\r\n\r\n#if js\r\n\r\n    @:forward\r\n    abstract Uint8Array(js.html.Uint8Array)\r\n        from js.html.Uint8Array\r\n        to js.html.Uint8Array {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 1;\r\n\r\n        @:generic\r\n        public inline function new<T>(\r\n            ?elements:Int,\r\n            ?array:Array<T>,\r\n            ?view:ArrayBufferView,\r\n            ?buffer:ArrayBuffer, ?byteoffset:Int = 0, ?len:Null<Int>\r\n        ) {\r\n            if(elements != null) {\r\n                this = new js.html.Uint8Array( elements );\r\n            } else if(array != null) {\r\n                this = new js.html.Uint8Array( untyped array );\r\n            } else if(view != null) {\r\n                this = new js.html.Uint8Array( untyped view );\r\n            } else if(buffer != null) {\r\n                if(len == null) {\r\n                    this = new js.html.Uint8Array( buffer, byteoffset );\r\n                } else {\r\n                    this = new js.html.Uint8Array( buffer, byteoffset, len );\r\n                }\r\n            } else {\r\n                this = null;\r\n            }\r\n        }\r\n\r\n        @:arrayAccess @:extern inline function __set(idx:Int, val:UInt) : Void this[idx] = val;\r\n        @:arrayAccess @:extern inline function __get(idx:Int) : UInt return this[idx];\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int, ?len:Int ) : Uint8Array {\r\n            if(byteOffset == null) return new js.html.Uint8Array(cast bytes.getData());\r\n            if(len == null) return new js.html.Uint8Array(cast bytes.getData(), byteOffset);\r\n            return new js.html.Uint8Array(cast bytes.getData(), byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            #if (haxe_ver < 3.2)\r\n                return @:privateAccess new haxe.io.Bytes( this.byteLength, cast new js.html.Uint8Array(this.buffer) );\r\n            #else\r\n                return @:privateAccess new haxe.io.Bytes( cast new js.html.Uint8Array(this.buffer) );\r\n            #end\r\n        }\r\n\r\n        inline function toString() return 'Uint8Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#else\r\n\r\n    import snow.api.buffers.ArrayBufferView;\r\n    import snow.api.buffers.TypedArrayType;\r\n\r\n    @:forward\r\n    abstract Uint8Array(ArrayBufferView) from ArrayBufferView to ArrayBufferView {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 1;\r\n\r\n        public var length (get, never):Int;\r\n\r\n        @:generic\r\n        public inline function new<T>(\r\n            ?elements:Int,\r\n            ?array:Array<T>,\r\n            ?view:ArrayBufferView,\r\n            ?buffer:ArrayBuffer, ?byteoffset:Int = 0, ?len:Null<Int>\r\n        ) {\r\n\r\n            if(elements != null) {\r\n                this = new ArrayBufferView( elements, Uint8 );\r\n            } else if(array != null) {\r\n                this = new ArrayBufferView(0, Uint8).initArray(array);\r\n            } else if(view != null) {\r\n                this = new ArrayBufferView(0, Uint8).initTypedArray(view);\r\n            } else if(buffer != null) {\r\n                this = new ArrayBufferView(0, Uint8).initBuffer(buffer, byteoffset, len);\r\n            } else {\r\n                throw \"Invalid constructor arguments for Uint8Array\";\r\n            }\r\n        }\r\n\r\n    //Public API\r\n\r\n        public inline function subarray( begin:Int, end:Null<Int> = null) : Uint8Array return this.subarray(begin, end);\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Uint8Array {\r\n            return new Uint8Array(bytes, byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            return this.buffer;\r\n        }\r\n\r\n    //Internal\r\n\r\n        inline function toString() return 'Uint8Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n        inline function get_length() return this.length;\r\n\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __get(idx:Int) {\r\n            return ArrayBufferIO.getUint8(this.buffer, this.byteOffset+idx);\r\n        }\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __set(idx:Int, val:UInt) : Void {\r\n            ArrayBufferIO.setUint8(this.buffer, this.byteOffset+idx, val);\r\n        }\r\n\r\n    }\r\n\r\n#end //!js\r\n","package snow.core.web;\n\n#if snow_web\n\nimport snow.types.Types;\nimport snow.api.Debug.*;\n\n\n/** Implemented in the platform specific concrete versions of this class */\n@:allow(snow.Snow)\n@:noCompletion\nclass Core {\n\n    var app:snow.Snow;\n    var start_timestamp : Float = 0.0;\n\n    function new( _app:Snow ) {\n\n        app = _app;\n        start_timestamp = timestamp();\n\n        guess_os();\n\n    } //new\n\n        /** Called by the snow internals to intiialize the core and subsystems of the framework, with the event handler passed in for where to deliver system events */\n    function init( _event_handler : SystemEvent->Void ) : Void {\n\n            //When we are done in here, start the main init procedure\n        app.dispatch_system_event({ type:SystemEventType.init });\n\n            //After it's had time to init, we fire the ready state\n        app.dispatch_system_event({ type:SystemEventType.ready });\n\n\n            //Then if requested, start the main loop\n        if(app.snow_config.has_loop) {\n            request_update();\n        }\n\n    } //init\n\n        /** Called to explicitly shutdown the framework cleanly. Called by `quit` and `app_terminated` type events by the core, for example. */\n    function shutdown() : Void {\n\n    } //shutdown\n\n        /** Get the most precise timestamp available on the platform, in seconds (time is always in seconds in snow). */\n    function timestamp() : Float {\n\n        var now : Float;\n\n        if(js.Browser.window.performance != null) {\n            now = js.Browser.window.performance.now()/1000.0;\n        } else {\n            now = haxe.Timer.stamp();\n        }\n\n        return now - start_timestamp;\n\n    } //timestamp\n\n//Internal\n\n\n        //Internal value only, for use ONLY when request animation frame is unavailable.\n        //Don't use this value for anything... use the other time constructs in snow.App\n    var _lf_timestamp : Float = 0.016;\n    var _time_now : Float = 0.0;\n\n    function request_update() {\n\n            //If they support RAF use it, else fallback\n        if(js.Browser.window.requestAnimationFrame != null) {\n\n            js.Browser.window.requestAnimationFrame(snow_core_loop);\n\n        } else {\n\n            log('warning : requestAnimationFrame not found, falling back to render_rate! render_rate:' + app.host.render_rate );\n\n                //schedule the callback again\n            js.Browser.window.setTimeout(function(){\n\n                    //cache the current time\n                var _now = timestamp();\n                    //increase the time value by the time since last frame\n                _time_now += (_now - _lf_timestamp);\n                    //call the callback, to match RAF stuff\n                snow_core_loop( _time_now * 1000.0 );\n                    //update the last frame stamp\n                _lf_timestamp = _now;\n\n            }, Std.int(app.host.render_rate*1000.0) );\n\n        } //no request anim frame\n\n    } //request_update\n\n        //This is the actual main loop code, called by RAF or setTimeout etc.\n    function snow_core_loop( ?_t:Float = 0.016 ) : Bool {\n\n            //internal update\n        update();\n            //dispatch the event to the framework + host\n        app.dispatch_system_event({ type:SystemEventType.update });\n            //ask for another update\n        request_update();\n            //\n        return true;\n\n    } //snow_core_loop\n\n    function update() {\n\n    }\n\n    function guess_os() {\n\n        var _ver = js.Browser.navigator.appVersion;\n        var _agent = js.Browser.navigator.userAgent;\n\n        inline function has(_val:String, _test:String) {\n            var r = new EReg(_val,'gi');\n            return r.match(_test);\n        }\n\n        if(has('mac', _ver))        app.os = OS.os_mac;\n        if(has('win', _ver))        app.os = OS.os_windows;\n            //I know it's not linux technically (should be unix)\n        if(has('x11', _ver))        app.os = OS.os_linux;\n        if(has('linux', _ver))      app.os = OS.os_linux;\n        if(has('android', _ver))    app.os = OS.os_android;\n        if(has('ipad', _agent))     app.os = OS.os_ios;\n        if(has('iphone', _agent))   app.os = OS.os_ios;\n        if(has('ipod', _agent))     app.os = OS.os_ios;\n\n    } //guess_os\n\n\n} //Core\n\n#end //snow_web\n","package snow.core.web.assets;\n\n#if snow_web\n\nimport snow.system.assets.Asset.AssetImage;\nimport snow.system.assets.Assets;\nimport snow.types.Types;\nimport snow.api.Debug.*;\nimport snow.api.buffers.*;\nimport snow.api.Promise;\n\nimport snow.core.web.assets.tga.TGA;\nimport snow.core.web.assets.psd.PSD;\n\n#if snow_module_audio_howlerjs\n    import snow.modules.howlerjs.Howl;\n#end //snow_module_audio_howlerjs\n\n@:allow(snow.system.assets.Assets)\nclass Assets implements snow.modules.interfaces.Assets {\n\n//module interface\n\n    var system:snow.system.assets.Assets;\n\n    function new( _system:snow.system.assets.Assets ) system = _system;\n    function init() {}\n    function update() {}\n    function destroy() {}\n    function on_event(event:SystemEvent) {}\n\n\n//Public API\n\n    //Images\n\n        public function image_load_info( _id:String, ?_components:Int = 4 ) : Promise {\n\n            return system.app.io.data_flow(_id, AssetImage.processor);\n\n        } //image_load_info\n\n            /** Create an image info (padded to POT) from a given Canvas or Image element. */\n        public function image_info_from_element( _id:String, _elem ) {\n\n            var width_pot = nearest_power_of_two(_elem.width);\n            var height_pot = nearest_power_of_two(_elem.height);\n            var image_bytes = POT_bytes_from_element(_elem.width, _elem.height, width_pot, height_pot, cast _elem);\n\n            var info : ImageInfo = {\n                id : _id,\n                bpp : 4,\n                width : _elem.width,\n                height : _elem.height,\n                width_actual : width_pot,\n                height_actual : height_pot,\n                bpp_source : 4,\n                pixels : image_bytes\n            };\n\n            image_bytes = null;\n\n            return info;\n\n        } //image_info_from_element\n\n            /** Create an image info (padded to POT) from raw already decoded image pixels */\n        public function image_info_from_pixels( _id:String, _width:Int, _height:Int, _pixels:Uint8Array ) {\n\n            var width_pot = nearest_power_of_two(_width);\n            var height_pot = nearest_power_of_two(_height);\n            var image_bytes = POT_bytes_from_pixels(_width, _height, width_pot, height_pot, _pixels);\n\n            var info : ImageInfo = {\n                id : _id,\n                bpp : 4,\n                width : _width,\n                height : _height,\n                width_actual : width_pot,\n                height_actual : height_pot,\n                bpp_source : 4,\n                pixels : image_bytes\n            };\n\n            image_bytes = null;\n\n            return info;\n        }\n\n            /** Create an image info (padded to POT) from bytes. Promises an ImageInfo. */\n        public function image_info_from_bytes( _id:String, _bytes:Uint8Array, ?_components:Int = 4 ) : Promise {\n\n            assertnull(_id);\n            assertnull(_bytes);\n            assert(_bytes.length != 0);\n\n            var ext = haxe.io.Path.extension(_id);\n\n            #if snow_web_tga\n                if(ext == 'tga') return Promise.resolve(image_info_from_bytes_tga(_id, _bytes));\n            #end\n\n            #if snow_web_psd\n                if(ext == 'psd') return Promise.resolve(image_info_from_bytes_psd(_id , _bytes));\n            #end\n\n            return new Promise(function(resolve, reject) {\n\n                    //convert to a binary string\n                var str = '', i = 0, len = _bytes.length;\n                while(i < len) str += String.fromCharCode(_bytes[i++] & 0xff);\n\n                var b64 = js.Browser.window.btoa(str);\n                var src = 'data:image/$ext;base64,$b64';\n\n                    //convert to an image element\n                var _img = new js.html.Image();\n\n                _img.onload = function(_) {\n                    var info = image_info_from_element(_id, _img);\n                    resolve(info);\n                }\n\n                _img.onerror = function(e) {\n                    reject(Error.error('failed to load image from bytes, on error: $e'));\n                }\n\n                _img.src = src;\n\n            }); //promise\n\n        } //image_info_from_bytes\n\n\n//Internal converters\n\n    #if snow_web_psd\n\n        /** Return an image info from the bytes of a PSD image */\n        function image_info_from_bytes_psd( _id:String, _bytes:Uint8Array ) {\n\n            var psd = new PSD(_bytes);\n                psd.parse();\n\n            var _width = untyped psd.header.width;\n            var _height = untyped psd.header.height;\n            var _pixels = new Uint8Array(untyped psd.image.pixelData);\n\n            return image_info_from_pixels(_id, _width, _height, _pixels);\n\n        } //image_info_from_bytes_psd\n\n    #end //snow_web_psd\n\n    #if snow_web_tga\n\n        /** Return an image info from the bytes of a tga image */\n        function image_info_from_bytes_tga( _id:String, _bytes:Uint8Array ) {\n\n            var image = new TGA();\n                image.load( _bytes );\n\n            return image_info_from_element(_id, image.getCanvas());\n\n        } //image_info_from_bytes_tga\n\n    #end //snow_web_tga\n\n\n        /** Return a POT array of bytes from raw image pixels */\n    function POT_bytes_from_pixels(_width:Int, _height:Int, _width_pot:Int, _height_pot:Int, _source:Uint8Array) : Uint8Array {\n\n        var tmp_canvas = js.Browser.document.createCanvasElement();\n\n            tmp_canvas.width = _width_pot;\n            tmp_canvas.height = _height_pot;\n\n        var tmp_context = tmp_canvas.getContext2d();\n\n            tmp_context.clearRect( 0, 0, tmp_canvas.width, tmp_canvas.height );\n\n        var image_bytes = null;\n        var _pixels = new js.html.Uint8ClampedArray(_source.buffer);\n        var _imgdata = tmp_context.createImageData( _width, _height );\n            _imgdata.data.set(_pixels);\n\n        try {\n\n                //store the data in it first\n            tmp_context.putImageData( _imgdata, 0, 0 );\n                //then bring out the full size\n            image_bytes = tmp_context.getImageData( 0, 0, tmp_canvas.width, tmp_canvas.height );\n\n        } catch(e:Dynamic) {\n\n            var tips = '- textures served from file:/// throw security errors\\n';\n                tips += '- textures served over http:// work for cross origin byte requests';\n\n            log(tips);\n            throw e;\n\n        } //catch\n\n            //cleanup\n        tmp_canvas = null; tmp_context = null;\n        _imgdata = null;\n\n        return new Uint8Array(image_bytes.data);\n    }\n\n        /** Return a POT array of bytes from an image/canvas element */\n    function POT_bytes_from_element(_width:Int, _height:Int, _width_pot:Int, _height_pot:Int, _source:js.html.Element) : Uint8Array {\n\n        var tmp_canvas = js.Browser.document.createCanvasElement();\n\n            tmp_canvas.width = _width_pot;\n            tmp_canvas.height = _height_pot;\n\n        var tmp_context = tmp_canvas.getContext2d();\n\n            tmp_context.clearRect( 0,0, tmp_canvas.width, tmp_canvas.height );\n            tmp_context.drawImage( cast _source, 0, 0, _width, _height );\n\n        var image_bytes = null;\n\n        try {\n\n            image_bytes = tmp_context.getImageData( 0, 0, tmp_canvas.width, tmp_canvas.height );\n\n        } catch(e:Dynamic) {\n\n            var tips = '- textures served from file:/// throw security errors\\n';\n                tips += '- textures served over http:// work for cross origin byte requests';\n\n            log(tips);\n            throw e;\n\n        } //catch\n\n            //cleanup\n        tmp_canvas = null; tmp_context = null;\n\n        return new Uint8Array(image_bytes.data);\n\n    } //POT_bytes_from_element\n\n\n    //Internal helpers\n        static var POT = true;\n\n        function nearest_power_of_two(_value:Int) {\n\n            if(!POT) return _value;\n\n            _value--;\n\n            _value |= _value >> 1;\n            _value |= _value >> 2;\n            _value |= _value >> 4;\n            _value |= _value >> 8;\n            _value |= _value >> 16;\n\n            _value++;\n\n            return _value;\n\n        } //nearest_power_of_two\n\n} //Assets\n\n#end //snow_web\n","package snow.core.web.input;\n\nimport snow.types.Types;\n\n@:noCompletion\nclass DOMKeys {\n\n        /** This function takes the DOM keycode and translates it into the\n            corresponding snow Keycodes value - but only if needed for special cases */\n    public static function dom_key_to_keycode(_keycode:Int) {\n\n        switch(_keycode) {\n\n        //\n            case dom_shift:         return Key.lshift;     //:todo : this is both left/right but returns left\n            case dom_ctrl:          return Key.lctrl;      //:todo : ^\n            case dom_alt:           return Key.lalt;       //:todo : ^\n            case dom_capslock:      return Key.capslock;\n        //\n            case dom_pageup:        return Key.pageup;\n            case dom_pagedown:      return Key.pagedown;\n            case dom_end:           return Key.end;\n            case dom_home:          return Key.home;\n            case dom_left:          return Key.left;\n            case dom_up:            return Key.up;\n            case dom_right:         return Key.right;\n            case dom_down:          return Key.down;\n            case dom_printscr:      return Key.printscreen;\n            case dom_insert:        return Key.insert;\n            case dom_delete:        return Key.delete;\n        //\n            case dom_lmeta:         return Key.lmeta;\n            case dom_rmeta:         return Key.rmeta;\n            case dom_meta:          return Key.lmeta;\n        //\n            case dom_kp_0:          return Key.kp_0;\n            case dom_kp_1:          return Key.kp_1;\n            case dom_kp_2:          return Key.kp_2;\n            case dom_kp_3:          return Key.kp_3;\n            case dom_kp_4:          return Key.kp_4;\n            case dom_kp_5:          return Key.kp_5;\n            case dom_kp_6:          return Key.kp_6;\n            case dom_kp_7:          return Key.kp_7;\n            case dom_kp_8:          return Key.kp_8;\n            case dom_kp_9:          return Key.kp_9;\n            case dom_kp_multiply:   return Key.kp_multiply;\n            case dom_kp_plus:       return Key.kp_plus;\n            case dom_kp_minus:      return Key.kp_minus;\n            case dom_kp_decimal:    return Key.kp_decimal;\n            case dom_kp_divide:     return Key.kp_divide;\n            case dom_kp_numlock:    return Key.numlockclear;\n        //\n            case dom_f1:            return Key.f1;\n            case dom_f2:            return Key.f2;\n            case dom_f3:            return Key.f3;\n            case dom_f4:            return Key.f4;\n            case dom_f5:            return Key.f5;\n            case dom_f6:            return Key.f6;\n            case dom_f7:            return Key.f7;\n            case dom_f8:            return Key.f8;\n            case dom_f9:            return Key.f9;\n            case dom_f10:           return Key.f10;\n            case dom_f11:           return Key.f11;\n            case dom_f12:           return Key.f12;\n            case dom_f13:           return Key.f13;\n            case dom_f14:           return Key.f14;\n            case dom_f15:           return Key.f15;\n            case dom_f16:           return Key.f16;\n            case dom_f17:           return Key.f17;\n            case dom_f18:           return Key.f18;\n            case dom_f19:           return Key.f19;\n            case dom_f20:           return Key.f20;\n            case dom_f21:           return Key.f21;\n            case dom_f22:           return Key.f22;\n            case dom_f23:           return Key.f23;\n            case dom_f24:           return Key.f24;\n        //\n            case dom_caret:         return Key.caret;\n            case dom_exclaim:       return Key.exclaim;\n            case dom_quotedbl:      return Key.quotedbl;\n            case dom_hash:          return Key.hash;\n            case dom_dollar:        return Key.dollar;\n            case dom_percent:       return Key.percent;\n            case dom_ampersand:     return Key.ampersand;\n            case dom_underscore:    return Key.underscore;\n            case dom_leftparen:     return Key.leftparen;\n            case dom_rightparen:    return Key.rightparen;\n            case dom_asterisk:      return Key.asterisk;\n            case dom_plus:          return Key.plus;\n            case dom_pipe:          return Key.backslash; // pipe\n            case dom_equals:        return Key.equals;\n            case dom_minus:         return Key.minus;\n            case dom_leftbrace:     return Key.leftbracket; // {, same code as [ on native...\n            case dom_rightbrace:    return Key.rightbracket; // }, same code as ] on native...\n            case dom_tilde:         return Key.backquote; // tilde\n        //\n            case dom_audiomute:     return Key.audiomute;\n            case dom_volumedown:    return Key.volumedown;\n            case dom_volumeup:      return Key.volumeup;\n        //\n            case dom_comma:         return Key.comma;\n            case dom_period:        return Key.period;\n            case dom_slash:         return Key.slash;\n            case dom_backquote:     return Key.backquote;\n            case dom_leftbracket:   return Key.leftbracket;\n            case dom_rightbracket:  return Key.rightbracket;\n            case dom_backslash:     return Key.backslash;\n            case dom_quote:         return Key.quote;\n\n        } //switch(_keycode)\n\n        return _keycode;\n\n    } //dom_key_to_keycode\n\n// the keycodes below are dom specific keycodes mapped to snow input names\n// these values *come from the browser* dom spec codes only, some info here\n// http://www.w3.org/TR/DOM-Level-3-Events/#determine-keydown-keyup-keyCode\n\n//\n    static inline var dom_shift          = 16;\n    static inline var dom_ctrl           = 17;\n    static inline var dom_alt            = 18;\n    static inline var dom_capslock       = 20;\n//\n    static inline var dom_pageup         = 33;\n    static inline var dom_pagedown       = 34;\n    static inline var dom_end            = 35;\n    static inline var dom_home           = 36;\n    static inline var dom_left           = 37;\n    static inline var dom_up             = 38;\n    static inline var dom_right          = 39;\n    static inline var dom_down           = 40;\n    static inline var dom_printscr       = 44;\n    static inline var dom_insert         = 45;\n    static inline var dom_delete         = 46;\n//\n    static inline var dom_lmeta          = 91;\n    static inline var dom_rmeta          = 93;\n//\n    static inline var dom_kp_0           = 96;\n    static inline var dom_kp_1           = 97;\n    static inline var dom_kp_2           = 98;\n    static inline var dom_kp_3           = 99;\n    static inline var dom_kp_4           = 100;\n    static inline var dom_kp_5           = 101;\n    static inline var dom_kp_6           = 102;\n    static inline var dom_kp_7           = 103;\n    static inline var dom_kp_8           = 104;\n    static inline var dom_kp_9           = 105;\n    static inline var dom_kp_multiply    = 106;\n    static inline var dom_kp_plus        = 107;\n    static inline var dom_kp_minus       = 109;\n    static inline var dom_kp_decimal     = 110;\n    static inline var dom_kp_divide      = 111;\n    static inline var dom_kp_numlock     = 144;\n//\n    static inline var dom_f1             = 112;\n    static inline var dom_f2             = 113;\n    static inline var dom_f3             = 114;\n    static inline var dom_f4             = 115;\n    static inline var dom_f5             = 116;\n    static inline var dom_f6             = 117;\n    static inline var dom_f7             = 118;\n    static inline var dom_f8             = 119;\n    static inline var dom_f9             = 120;\n    static inline var dom_f10            = 121;\n    static inline var dom_f11            = 122;\n    static inline var dom_f12            = 123;\n    static inline var dom_f13            = 124;\n    static inline var dom_f14            = 125;\n    static inline var dom_f15            = 126;\n    static inline var dom_f16            = 127;\n    static inline var dom_f17            = 128;\n    static inline var dom_f18            = 129;\n    static inline var dom_f19            = 130;\n    static inline var dom_f20            = 131;\n    static inline var dom_f21            = 132;\n    static inline var dom_f22            = 133;\n    static inline var dom_f23            = 134;\n    static inline var dom_f24            = 135;\n//\n    static inline var dom_caret          = 160;\n    static inline var dom_exclaim        = 161;\n    static inline var dom_quotedbl       = 162;\n    static inline var dom_hash           = 163;\n    static inline var dom_dollar         = 164;\n    static inline var dom_percent        = 165;\n    static inline var dom_ampersand      = 166;\n    static inline var dom_underscore     = 167;\n    static inline var dom_leftparen      = 168;\n    static inline var dom_rightparen     = 169;\n    static inline var dom_asterisk       = 170;\n    static inline var dom_plus           = 171;\n    static inline var dom_pipe           = 172; //backslash\n    static inline var dom_leftbrace      = 174;\n    static inline var dom_rightbrace     = 175;\n    static inline var dom_tilde          = 176;\n//\n    static inline var dom_audiomute      = 181;\n    static inline var dom_volumedown     = 182;\n    static inline var dom_volumeup       = 183;\n//\n    static inline var dom_equals         = 187;\n    static inline var dom_comma          = 188;\n    static inline var dom_minus          = 189;\n    static inline var dom_period         = 190;\n    static inline var dom_slash          = 191;\n    static inline var dom_backquote      = 192;\n    static inline var dom_leftbracket    = 219;\n    static inline var dom_rightbracket   = 221;\n    static inline var dom_backslash      = 220;\n    static inline var dom_quote          = 222;\n    static inline var dom_meta           = 224;\n\n} //DOM_SDL_keys","package snow.system.input;\n\n\n/** The keycode class, with conversion helpers for scancodes. The values below come directly from SDL header include files,\nbut they aren't specific to SDL so they are used generically */\n@:noCompletion class Keycodes {\n\n        /** Convert a scancode to a keycode for comparison */\n    public static function from_scan( scancode : Int ) : Int {\n        return (scancode | Scancodes.MASK);\n    } //from_scan\n\n        /** Convert a keycode to a scancode if possible.\n            NOTE - this will only map a large % but not all keys,\n            there is a list of unmapped keys commented in the code. */\n    public static function to_scan( keycode : Int ) : Int {\n\n            //quite a lot map directly to a masked scancode\n            //if that's the case, return it directly\n        if ((keycode & Scancodes.MASK) != 0) {\n            return keycode &~ Scancodes.MASK;\n        }\n\n            //now we translate them to the scan where unmapped\n\n        switch(keycode) {\n            case Keycodes.enter:         return Scancodes.enter;\n            case Keycodes.escape:        return Scancodes.escape;\n            case Keycodes.backspace:     return Scancodes.backspace;\n            case Keycodes.tab:           return Scancodes.tab;\n            case Keycodes.space:         return Scancodes.space;\n            case Keycodes.slash:         return Scancodes.slash;\n            case Keycodes.key_0:         return Scancodes.key_0;\n            case Keycodes.key_1:         return Scancodes.key_1;\n            case Keycodes.key_2:         return Scancodes.key_2;\n            case Keycodes.key_3:         return Scancodes.key_3;\n            case Keycodes.key_4:         return Scancodes.key_4;\n            case Keycodes.key_5:         return Scancodes.key_5;\n            case Keycodes.key_6:         return Scancodes.key_6;\n            case Keycodes.key_7:         return Scancodes.key_7;\n            case Keycodes.key_8:         return Scancodes.key_8;\n            case Keycodes.key_9:         return Scancodes.key_9;\n            case Keycodes.semicolon:     return Scancodes.semicolon;\n            case Keycodes.equals:        return Scancodes.equals;\n            case Keycodes.leftbracket:   return Scancodes.leftbracket;\n            case Keycodes.backslash:     return Scancodes.backslash;\n            case Keycodes.rightbracket:  return Scancodes.rightbracket;\n            case Keycodes.backquote:     return Scancodes.grave;\n            case Keycodes.key_a:         return Scancodes.key_a;\n            case Keycodes.key_b:         return Scancodes.key_b;\n            case Keycodes.key_c:         return Scancodes.key_c;\n            case Keycodes.key_d:         return Scancodes.key_d;\n            case Keycodes.key_e:         return Scancodes.key_e;\n            case Keycodes.key_f:         return Scancodes.key_f;\n            case Keycodes.key_g:         return Scancodes.key_g;\n            case Keycodes.key_h:         return Scancodes.key_h;\n            case Keycodes.key_i:         return Scancodes.key_i;\n            case Keycodes.key_j:         return Scancodes.key_j;\n            case Keycodes.key_k:         return Scancodes.key_k;\n            case Keycodes.key_l:         return Scancodes.key_l;\n            case Keycodes.key_m:         return Scancodes.key_m;\n            case Keycodes.key_n:         return Scancodes.key_n;\n            case Keycodes.key_o:         return Scancodes.key_o;\n            case Keycodes.key_p:         return Scancodes.key_p;\n            case Keycodes.key_q:         return Scancodes.key_q;\n            case Keycodes.key_r:         return Scancodes.key_r;\n            case Keycodes.key_s:         return Scancodes.key_s;\n            case Keycodes.key_t:         return Scancodes.key_t;\n            case Keycodes.key_u:         return Scancodes.key_u;\n            case Keycodes.key_v:         return Scancodes.key_v;\n            case Keycodes.key_w:         return Scancodes.key_w;\n            case Keycodes.key_x:         return Scancodes.key_x;\n            case Keycodes.key_y:         return Scancodes.key_y;\n            case Keycodes.key_z:         return Scancodes.key_z;\n\n\n                //These are unmappable because they are not keys\n                //but values on the key (like a shift key combo)\n                //and to hardcode them to the key you think it is,\n                //would be to map it to a fixed locale probably.\n                //They don't have scancodes, so we don't return one\n            // case exclaim:      ;\n            // case quotedbl:     ;\n            // case hash:         ;\n            // case percent:      ;\n            // case dollar:       ;\n            // case ampersand:    ;\n            // case quote:        ;\n            // case leftparen:    ;\n            // case rightparen:   ;\n            // case asterisk:     ;\n            // case plus:         ;\n            // case comma:        ;\n            // case minus:        ;\n            // case period:       ;\n            // case less:         ;\n            // case colon:        ;\n            // case greater:      ;\n            // case question:     ;\n            // case at:           ;\n            // case caret:        ;\n            // case underscore:   ;\n\n        } //switch(keycode)\n\n        return Scancodes.unknown;\n\n    } //to_scan\n\n        /** Convert a keycode to string */\n    public static function name( keycode : Int ) : String {\n\n        //we don't use to_scan because it would consume\n        //the typeable characters and we want those as unicode etc.\n\n        if ((keycode & Scancodes.MASK) != 0) {\n            return Scancodes.name(keycode &~ Scancodes.MASK);\n        }\n\n        switch(keycode) {\n\n            case Keycodes.enter:     return Scancodes.name(Scancodes.enter);\n            case Keycodes.escape:    return Scancodes.name(Scancodes.escape);\n            case Keycodes.backspace: return Scancodes.name(Scancodes.backspace);\n            case Keycodes.tab:       return Scancodes.name(Scancodes.tab);\n            case Keycodes.space:     return Scancodes.name(Scancodes.space);\n            case Keycodes.delete:    return Scancodes.name(Scancodes.delete);\n\n            default: {\n\n                var decoder = new haxe.Utf8();\n                    decoder.addChar(keycode);\n\n                return decoder.toString();\n\n            } //default\n\n        } //switch(keycode)\n\n    } //name\n\n    public static var unknown : Int                     = 0;\n\n    public static var enter : Int                       = 13;\n    public static var escape : Int                      = 27;\n    public static var backspace : Int                   = 8;\n    public static var tab : Int                         = 9;\n    public static var space : Int                       = 32;\n    public static var exclaim : Int                     = 33;\n    public static var quotedbl : Int                    = 34;\n    public static var hash : Int                        = 35;\n    public static var percent : Int                     = 37;\n    public static var dollar : Int                      = 36;\n    public static var ampersand : Int                   = 38;\n    public static var quote : Int                       = 39;\n    public static var leftparen : Int                   = 40;\n    public static var rightparen : Int                  = 41;\n    public static var asterisk : Int                    = 42;\n    public static var plus : Int                        = 43;\n    public static var comma : Int                       = 44;\n    public static var minus : Int                       = 45;\n    public static var period : Int                      = 46;\n    public static var slash : Int                       = 47;\n    public static var key_0 : Int                       = 48;\n    public static var key_1 : Int                       = 49;\n    public static var key_2 : Int                       = 50;\n    public static var key_3 : Int                       = 51;\n    public static var key_4 : Int                       = 52;\n    public static var key_5 : Int                       = 53;\n    public static var key_6 : Int                       = 54;\n    public static var key_7 : Int                       = 55;\n    public static var key_8 : Int                       = 56;\n    public static var key_9 : Int                       = 57;\n    public static var colon : Int                       = 58;\n    public static var semicolon : Int                   = 59;\n    public static var less : Int                        = 60;\n    public static var equals : Int                      = 61;\n    public static var greater : Int                     = 62;\n    public static var question : Int                    = 63;\n    public static var at : Int                          = 64;\n    /*\n       Skip uppercase letters\n     */\n    public static var leftbracket : Int                 = 91;\n    public static var backslash : Int                   = 92;\n    public static var rightbracket : Int                = 93;\n    public static var caret : Int                       = 94;\n    public static var underscore : Int                  = 95;\n    public static var backquote : Int                   = 96;\n    public static var key_a : Int                       = 97;\n    public static var key_b : Int                       = 98;\n    public static var key_c : Int                       = 99;\n    public static var key_d : Int                       = 100;\n    public static var key_e : Int                       = 101;\n    public static var key_f : Int                       = 102;\n    public static var key_g : Int                       = 103;\n    public static var key_h : Int                       = 104;\n    public static var key_i : Int                       = 105;\n    public static var key_j : Int                       = 106;\n    public static var key_k : Int                       = 107;\n    public static var key_l : Int                       = 108;\n    public static var key_m : Int                       = 109;\n    public static var key_n : Int                       = 110;\n    public static var key_o : Int                       = 111;\n    public static var key_p : Int                       = 112;\n    public static var key_q : Int                       = 113;\n    public static var key_r : Int                       = 114;\n    public static var key_s : Int                       = 115;\n    public static var key_t : Int                       = 116;\n    public static var key_u : Int                       = 117;\n    public static var key_v : Int                       = 118;\n    public static var key_w : Int                       = 119;\n    public static var key_x : Int                       = 120;\n    public static var key_y : Int                       = 121;\n    public static var key_z : Int                       = 122;\n\n    public static var capslock : Int             = from_scan(Scancodes.capslock);\n\n    public static var f1 : Int                   = from_scan(Scancodes.f1);\n    public static var f2 : Int                   = from_scan(Scancodes.f2);\n    public static var f3 : Int                   = from_scan(Scancodes.f3);\n    public static var f4 : Int                   = from_scan(Scancodes.f4);\n    public static var f5 : Int                   = from_scan(Scancodes.f5);\n    public static var f6 : Int                   = from_scan(Scancodes.f6);\n    public static var f7 : Int                   = from_scan(Scancodes.f7);\n    public static var f8 : Int                   = from_scan(Scancodes.f8);\n    public static var f9 : Int                   = from_scan(Scancodes.f9);\n    public static var f10 : Int                  = from_scan(Scancodes.f10);\n    public static var f11 : Int                  = from_scan(Scancodes.f11);\n    public static var f12 : Int                  = from_scan(Scancodes.f12);\n\n    public static var printscreen : Int          = from_scan(Scancodes.printscreen);\n    public static var scrolllock : Int           = from_scan(Scancodes.scrolllock);\n    public static var pause : Int                = from_scan(Scancodes.pause);\n    public static var insert : Int               = from_scan(Scancodes.insert);\n    public static var home : Int                 = from_scan(Scancodes.home);\n    public static var pageup : Int               = from_scan(Scancodes.pageup);\n    public static var delete : Int               = 127;\n    public static var end : Int                  = from_scan(Scancodes.end);\n    public static var pagedown : Int             = from_scan(Scancodes.pagedown);\n    public static var right : Int                = from_scan(Scancodes.right);\n    public static var left : Int                 = from_scan(Scancodes.left);\n    public static var down : Int                 = from_scan(Scancodes.down);\n    public static var up : Int                   = from_scan(Scancodes.up);\n\n    public static var numlockclear : Int         = from_scan(Scancodes.numlockclear);\n    public static var kp_divide : Int            = from_scan(Scancodes.kp_divide);\n    public static var kp_multiply : Int          = from_scan(Scancodes.kp_multiply);\n    public static var kp_minus : Int             = from_scan(Scancodes.kp_minus);\n    public static var kp_plus : Int              = from_scan(Scancodes.kp_plus);\n    public static var kp_enter : Int             = from_scan(Scancodes.kp_enter);\n    public static var kp_1 : Int                 = from_scan(Scancodes.kp_1);\n    public static var kp_2 : Int                 = from_scan(Scancodes.kp_2);\n    public static var kp_3 : Int                 = from_scan(Scancodes.kp_3);\n    public static var kp_4 : Int                 = from_scan(Scancodes.kp_4);\n    public static var kp_5 : Int                 = from_scan(Scancodes.kp_5);\n    public static var kp_6 : Int                 = from_scan(Scancodes.kp_6);\n    public static var kp_7 : Int                 = from_scan(Scancodes.kp_7);\n    public static var kp_8 : Int                 = from_scan(Scancodes.kp_8);\n    public static var kp_9 : Int                 = from_scan(Scancodes.kp_9);\n    public static var kp_0 : Int                 = from_scan(Scancodes.kp_0);\n    public static var kp_period : Int            = from_scan(Scancodes.kp_period);\n\n    public static var application : Int          = from_scan(Scancodes.application);\n    public static var power : Int                = from_scan(Scancodes.power);\n    public static var kp_equals : Int            = from_scan(Scancodes.kp_equals);\n    public static var f13 : Int                  = from_scan(Scancodes.f13);\n    public static var f14 : Int                  = from_scan(Scancodes.f14);\n    public static var f15 : Int                  = from_scan(Scancodes.f15);\n    public static var f16 : Int                  = from_scan(Scancodes.f16);\n    public static var f17 : Int                  = from_scan(Scancodes.f17);\n    public static var f18 : Int                  = from_scan(Scancodes.f18);\n    public static var f19 : Int                  = from_scan(Scancodes.f19);\n    public static var f20 : Int                  = from_scan(Scancodes.f20);\n    public static var f21 : Int                  = from_scan(Scancodes.f21);\n    public static var f22 : Int                  = from_scan(Scancodes.f22);\n    public static var f23 : Int                  = from_scan(Scancodes.f23);\n    public static var f24 : Int                  = from_scan(Scancodes.f24);\n    public static var execute : Int              = from_scan(Scancodes.execute);\n    public static var help : Int                 = from_scan(Scancodes.help);\n    public static var menu : Int                 = from_scan(Scancodes.menu);\n    public static var select : Int               = from_scan(Scancodes.select);\n    public static var stop : Int                 = from_scan(Scancodes.stop);\n    public static var again : Int                = from_scan(Scancodes.again);\n    public static var undo : Int                 = from_scan(Scancodes.undo);\n    public static var cut : Int                  = from_scan(Scancodes.cut);\n    public static var copy : Int                 = from_scan(Scancodes.copy);\n    public static var paste : Int                = from_scan(Scancodes.paste);\n    public static var find : Int                 = from_scan(Scancodes.find);\n    public static var mute : Int                 = from_scan(Scancodes.mute);\n    public static var volumeup : Int             = from_scan(Scancodes.volumeup);\n    public static var volumedown : Int           = from_scan(Scancodes.volumedown);\n    public static var kp_comma : Int             = from_scan(Scancodes.kp_comma);\n    public static var kp_equalsas400 : Int       = from_scan(Scancodes.kp_equalsas400);\n\n    public static var alterase : Int             = from_scan(Scancodes.alterase);\n    public static var sysreq : Int               = from_scan(Scancodes.sysreq);\n    public static var cancel : Int               = from_scan(Scancodes.cancel);\n    public static var clear : Int                = from_scan(Scancodes.clear);\n    public static var prior : Int                = from_scan(Scancodes.prior);\n    public static var return2 : Int              = from_scan(Scancodes.return2);\n    public static var separator : Int            = from_scan(Scancodes.separator);\n    public static var out : Int                  = from_scan(Scancodes.out);\n    public static var oper : Int                 = from_scan(Scancodes.oper);\n    public static var clearagain : Int           = from_scan(Scancodes.clearagain);\n    public static var crsel : Int                = from_scan(Scancodes.crsel);\n    public static var exsel : Int                = from_scan(Scancodes.exsel);\n\n    public static var kp_00 : Int                = from_scan(Scancodes.kp_00);\n    public static var kp_000 : Int               = from_scan(Scancodes.kp_000);\n    public static var thousandsseparator : Int   = from_scan(Scancodes.thousandsseparator);\n    public static var decimalseparator : Int     = from_scan(Scancodes.decimalseparator);\n    public static var currencyunit : Int         = from_scan(Scancodes.currencyunit);\n    public static var currencysubunit : Int      = from_scan(Scancodes.currencysubunit);\n    public static var kp_leftparen : Int         = from_scan(Scancodes.kp_leftparen);\n    public static var kp_rightparen : Int        = from_scan(Scancodes.kp_rightparen);\n    public static var kp_leftbrace : Int         = from_scan(Scancodes.kp_leftbrace);\n    public static var kp_rightbrace : Int        = from_scan(Scancodes.kp_rightbrace);\n    public static var kp_tab : Int               = from_scan(Scancodes.kp_tab);\n    public static var kp_backspace : Int         = from_scan(Scancodes.kp_backspace);\n    public static var kp_a : Int                 = from_scan(Scancodes.kp_a);\n    public static var kp_b : Int                 = from_scan(Scancodes.kp_b);\n    public static var kp_c : Int                 = from_scan(Scancodes.kp_c);\n    public static var kp_d : Int                 = from_scan(Scancodes.kp_d);\n    public static var kp_e : Int                 = from_scan(Scancodes.kp_e);\n    public static var kp_f : Int                 = from_scan(Scancodes.kp_f);\n    public static var kp_xor : Int               = from_scan(Scancodes.kp_xor);\n    public static var kp_power : Int             = from_scan(Scancodes.kp_power);\n    public static var kp_percent : Int           = from_scan(Scancodes.kp_percent);\n    public static var kp_less : Int              = from_scan(Scancodes.kp_less);\n    public static var kp_greater : Int           = from_scan(Scancodes.kp_greater);\n    public static var kp_ampersand : Int         = from_scan(Scancodes.kp_ampersand);\n    public static var kp_dblampersand : Int      = from_scan(Scancodes.kp_dblampersand);\n    public static var kp_verticalbar : Int       = from_scan(Scancodes.kp_verticalbar);\n    public static var kp_dblverticalbar : Int    = from_scan(Scancodes.kp_dblverticalbar);\n    public static var kp_colon : Int             = from_scan(Scancodes.kp_colon);\n    public static var kp_hash : Int              = from_scan(Scancodes.kp_hash);\n    public static var kp_space : Int             = from_scan(Scancodes.kp_space);\n    public static var kp_at : Int                = from_scan(Scancodes.kp_at);\n    public static var kp_exclam : Int            = from_scan(Scancodes.kp_exclam);\n    public static var kp_memstore : Int          = from_scan(Scancodes.kp_memstore);\n    public static var kp_memrecall : Int         = from_scan(Scancodes.kp_memrecall);\n    public static var kp_memclear : Int          = from_scan(Scancodes.kp_memclear);\n    public static var kp_memadd : Int            = from_scan(Scancodes.kp_memadd);\n    public static var kp_memsubtract : Int       = from_scan(Scancodes.kp_memsubtract);\n    public static var kp_memmultiply : Int       = from_scan(Scancodes.kp_memmultiply);\n    public static var kp_memdivide : Int         = from_scan(Scancodes.kp_memdivide);\n    public static var kp_plusminus : Int         = from_scan(Scancodes.kp_plusminus);\n    public static var kp_clear : Int             = from_scan(Scancodes.kp_clear);\n    public static var kp_clearentry : Int        = from_scan(Scancodes.kp_clearentry);\n    public static var kp_binary : Int            = from_scan(Scancodes.kp_binary);\n    public static var kp_octal : Int             = from_scan(Scancodes.kp_octal);\n    public static var kp_decimal : Int           = from_scan(Scancodes.kp_decimal);\n    public static var kp_hexadecimal : Int       = from_scan(Scancodes.kp_hexadecimal);\n\n    public static var lctrl : Int                = from_scan(Scancodes.lctrl);\n    public static var lshift : Int               = from_scan(Scancodes.lshift);\n    public static var lalt : Int                 = from_scan(Scancodes.lalt);\n    public static var lmeta : Int                = from_scan(Scancodes.lmeta);\n    public static var rctrl : Int                = from_scan(Scancodes.rctrl);\n    public static var rshift : Int               = from_scan(Scancodes.rshift);\n    public static var ralt : Int                 = from_scan(Scancodes.ralt);\n    public static var rmeta : Int                = from_scan(Scancodes.rmeta);\n\n    public static var mode : Int                 = from_scan(Scancodes.mode);\n\n    public static var audionext : Int            = from_scan(Scancodes.audionext);\n    public static var audioprev : Int            = from_scan(Scancodes.audioprev);\n    public static var audiostop : Int            = from_scan(Scancodes.audiostop);\n    public static var audioplay : Int            = from_scan(Scancodes.audioplay);\n    public static var audiomute : Int            = from_scan(Scancodes.audiomute);\n    public static var mediaselect : Int          = from_scan(Scancodes.mediaselect);\n    public static var www : Int                  = from_scan(Scancodes.www);\n    public static var mail : Int                 = from_scan(Scancodes.mail);\n    public static var calculator : Int           = from_scan(Scancodes.calculator);\n    public static var computer : Int             = from_scan(Scancodes.computer);\n    public static var ac_search : Int            = from_scan(Scancodes.ac_search);\n    public static var ac_home : Int              = from_scan(Scancodes.ac_home);\n    public static var ac_back : Int              = from_scan(Scancodes.ac_back);\n    public static var ac_forward : Int           = from_scan(Scancodes.ac_forward);\n    public static var ac_stop : Int              = from_scan(Scancodes.ac_stop);\n    public static var ac_refresh : Int           = from_scan(Scancodes.ac_refresh);\n    public static var ac_bookmarks : Int         = from_scan(Scancodes.ac_bookmarks);\n\n    public static var brightnessdown : Int       = from_scan(Scancodes.brightnessdown);\n    public static var brightnessup : Int         = from_scan(Scancodes.brightnessup);\n    public static var displayswitch : Int        = from_scan(Scancodes.displayswitch);\n    public static var kbdillumtoggle : Int       = from_scan(Scancodes.kbdillumtoggle);\n    public static var kbdillumdown : Int         = from_scan(Scancodes.kbdillumdown);\n    public static var kbdillumup : Int           = from_scan(Scancodes.kbdillumup);\n    public static var eject : Int                = from_scan(Scancodes.eject);\n    public static var sleep : Int                = from_scan(Scancodes.sleep);\n\n} //Keycodes\n\n\n/** The scancode class. The values below come directly from SDL header include files,\nbut they aren't specific to SDL so they are used generically */\n@:noCompletion class Scancodes {\n\n        /** Convert a scancode to a name */\n    public static function name( scancode : Int ) : String {\n\n        var res = null;\n\n        if (scancode >= 0 && scancode < scancode_names.length) {\n            res = scancode_names[scancode];\n        }\n\n        return res != null ? res : \"\";\n\n    } //name\n\n        //special value remains caps\n    public static var MASK:Int                      = (1<<30);\n\n    public static var unknown : Int                 = 0;\n\n       // Usage page 0x07\n       // These values are from usage page 0x07 (USB keyboard page).\n\n    public static var key_a : Int                   = 4;\n    public static var key_b : Int                   = 5;\n    public static var key_c : Int                   = 6;\n    public static var key_d : Int                   = 7;\n    public static var key_e : Int                   = 8;\n    public static var key_f : Int                   = 9;\n    public static var key_g : Int                   = 10;\n    public static var key_h : Int                   = 11;\n    public static var key_i : Int                   = 12;\n    public static var key_j : Int                   = 13;\n    public static var key_k : Int                   = 14;\n    public static var key_l : Int                   = 15;\n    public static var key_m : Int                   = 16;\n    public static var key_n : Int                   = 17;\n    public static var key_o : Int                   = 18;\n    public static var key_p : Int                   = 19;\n    public static var key_q : Int                   = 20;\n    public static var key_r : Int                   = 21;\n    public static var key_s : Int                   = 22;\n    public static var key_t : Int                   = 23;\n    public static var key_u : Int                   = 24;\n    public static var key_v : Int                   = 25;\n    public static var key_w : Int                   = 26;\n    public static var key_x : Int                   = 27;\n    public static var key_y : Int                   = 28;\n    public static var key_z : Int                   = 29;\n\n    public static var key_1 : Int                   = 30;\n    public static var key_2 : Int                   = 31;\n    public static var key_3 : Int                   = 32;\n    public static var key_4 : Int                   = 33;\n    public static var key_5 : Int                   = 34;\n    public static var key_6 : Int                   = 35;\n    public static var key_7 : Int                   = 36;\n    public static var key_8 : Int                   = 37;\n    public static var key_9 : Int                   = 38;\n    public static var key_0 : Int                   = 39;\n\n    public static var enter : Int                   = 40;\n    public static var escape : Int                  = 41;\n    public static var backspace : Int               = 42;\n    public static var tab : Int                     = 43;\n    public static var space : Int                   = 44;\n\n    public static var minus : Int                   = 45;\n    public static var equals : Int                  = 46;\n    public static var leftbracket : Int             = 47;\n    public static var rightbracket : Int            = 48;\n\n/** Located at the lower left of the return\n    key on ISO keyboards and at the right end\n    of the QWERTY row on ANSI keyboards.\n    Produces REVERSE SOLIDUS (backslash) and\n    VERTICAL LINE in a US layout, REVERSE\n    SOLIDUS and VERTICAL LINE in a UK Mac\n    layout, NUMBER SIGN and TILDE in a UK\n    Windows layout, DOLLAR SIGN and POUND SIGN\n    in a Swiss German layout, NUMBER SIGN and\n    APOSTROPHE in a German layout, GRAVE\n    ACCENT and POUND SIGN in a French Mac\n    layout, and ASTERISK and MICRO SIGN in a\n    French Windows layout.\n*/\n    public static var backslash : Int               = 49;\n\n/** ISO USB keyboards actually use this code\n    instead of 49 for the same key, but all\n    OSes I've seen treat the two codes\n    identically. So, as an implementor, unless\n    your keyboard generates both of those\n    codes and your OS treats them differently,\n    you should generate public static var BACKSLASH\n    instead of this code. As a user, you\n    should not rely on this code because SDL\n    will never generate it with most (all?)\n    keyboards.\n*/\n    public static var nonushash : Int          = 50;\n    public static var semicolon : Int          = 51;\n    public static var apostrophe : Int         = 52;\n\n/** Located in the top left corner (on both ANSI\n    and ISO keyboards). Produces GRAVE ACCENT and\n    TILDE in a US Windows layout and in US and UK\n    Mac layouts on ANSI keyboards, GRAVE ACCENT\n    and NOT SIGN in a UK Windows layout, SECTION\n    SIGN and PLUS-MINUS SIGN in US and UK Mac\n    layouts on ISO keyboards, SECTION SIGN and\n    DEGREE SIGN in a Swiss German layout (Mac:\n    only on ISO keyboards); CIRCUMFLEX ACCENT and\n    DEGREE SIGN in a German layout (Mac: only on\n    ISO keyboards), SUPERSCRIPT TWO and TILDE in a\n    French Windows layout, COMMERCIAL AT and\n    NUMBER SIGN in a French Mac layout on ISO\n    keyboards, and LESS-THAN SIGN and GREATER-THAN\n    SIGN in a Swiss German, German, or French Mac\n    layout on ANSI keyboards.\n*/\n    public static var grave : Int              = 53;\n    public static var comma : Int              = 54;\n    public static var period : Int             = 55;\n    public static var slash : Int              = 56;\n\n    public static var capslock : Int           = 57;\n\n    public static var f1 : Int                 = 58;\n    public static var f2 : Int                 = 59;\n    public static var f3 : Int                 = 60;\n    public static var f4 : Int                 = 61;\n    public static var f5 : Int                 = 62;\n    public static var f6 : Int                 = 63;\n    public static var f7 : Int                 = 64;\n    public static var f8 : Int                 = 65;\n    public static var f9 : Int                 = 66;\n    public static var f10 : Int                = 67;\n    public static var f11 : Int                = 68;\n    public static var f12 : Int                = 69;\n\n    public static var printscreen : Int        = 70;\n    public static var scrolllock : Int         = 71;\n    public static var pause : Int              = 72;\n\n/** insert on PC, help on some Mac keyboards (but does send code 73, not 117) */\n    public static var insert : Int             = 73;\n    public static var home : Int               = 74;\n    public static var pageup : Int             = 75;\n    public static var delete : Int             = 76;\n    public static var end : Int                = 77;\n    public static var pagedown : Int           = 78;\n    public static var right : Int              = 79;\n    public static var left : Int               = 80;\n    public static var down : Int               = 81;\n    public static var up : Int                 = 82;\n\n/** num lock on PC, clear on Mac keyboards */\n    public static var numlockclear : Int       = 83;\n    public static var kp_divide : Int          = 84;\n    public static var kp_multiply : Int        = 85;\n    public static var kp_minus : Int           = 86;\n    public static var kp_plus : Int            = 87;\n    public static var kp_enter : Int           = 88;\n    public static var kp_1 : Int               = 89;\n    public static var kp_2 : Int               = 90;\n    public static var kp_3 : Int               = 91;\n    public static var kp_4 : Int               = 92;\n    public static var kp_5 : Int               = 93;\n    public static var kp_6 : Int               = 94;\n    public static var kp_7 : Int               = 95;\n    public static var kp_8 : Int               = 96;\n    public static var kp_9 : Int               = 97;\n    public static var kp_0 : Int               = 98;\n    public static var kp_period : Int          = 99;\n\n\n/** This is the additional key that ISO\n    keyboards have over ANSI ones,\n    located between left shift and Y.\n    Produces GRAVE ACCENT and TILDE in a\n    US or UK Mac layout, REVERSE SOLIDUS\n    (backslash) and VERTICAL LINE in a\n    US or UK Windows layout, and\n    LESS-THAN SIGN and GREATER-THAN SIGN\n    in a Swiss German, German, or French\n    layout. */\n    public static var nonusbackslash : Int     = 100;\n\n/** windows contextual menu, compose */\n    public static var application : Int        = 101;\n\n/** The USB document says this is a status flag,\n    not a physical key - but some Mac keyboards\n    do have a power key. */\n    public static var power : Int              = 102;\n    public static var kp_equals : Int          = 103;\n    public static var f13 : Int                = 104;\n    public static var f14 : Int                = 105;\n    public static var f15 : Int                = 106;\n    public static var f16 : Int                = 107;\n    public static var f17 : Int                = 108;\n    public static var f18 : Int                = 109;\n    public static var f19 : Int                = 110;\n    public static var f20 : Int                = 111;\n    public static var f21 : Int                = 112;\n    public static var f22 : Int                = 113;\n    public static var f23 : Int                = 114;\n    public static var f24 : Int                = 115;\n    public static var execute : Int            = 116;\n    public static var help : Int               = 117;\n    public static var menu : Int               = 118;\n    public static var select : Int             = 119;\n    public static var stop : Int               = 120;\n\n/** redo */\n    public static var again : Int              = 121;\n    public static var undo : Int               = 122;\n    public static var cut : Int                = 123;\n    public static var copy : Int               = 124;\n    public static var paste : Int              = 125;\n    public static var find : Int               = 126;\n    public static var mute : Int               = 127;\n    public static var volumeup : Int           = 128;\n    public static var volumedown : Int         = 129;\n\n// not sure whether there's a reason to enable these\n//     public static var lockingcapslock = 130,\n//     public static var lockingnumlock = 131,\n//     public static var lockingscrolllock = 132,\n\n    public static var kp_comma : Int           = 133;\n    public static var kp_equalsas400 : Int     = 134;\n\n/** used on Asian keyboards; see footnotes in USB doc */\n    public static var international1 : Int     = 135;\n    public static var international2 : Int     = 136;\n\n/** Yen */\n    public static var international3 : Int     = 137;\n    public static var international4 : Int     = 138;\n    public static var international5 : Int     = 139;\n    public static var international6 : Int     = 140;\n    public static var international7 : Int     = 141;\n    public static var international8 : Int     = 142;\n    public static var international9 : Int     = 143;\n/** Hangul/English toggle */\n    public static var lang1 : Int              = 144;\n/** Hanja conversion */\n    public static var lang2 : Int              = 145;\n/** Katakana */\n    public static var lang3 : Int              = 146;\n/** Hiragana */\n    public static var lang4 : Int              = 147;\n/** Zenkaku/Hankaku */\n    public static var lang5 : Int              = 148;\n/** reserved */\n    public static var lang6 : Int              = 149;\n/** reserved */\n    public static var lang7 : Int              = 150;\n/** reserved */\n    public static var lang8 : Int              = 151;\n/** reserved */\n    public static var lang9 : Int              = 152;\n/** Erase-Eaze */\n    public static var alterase : Int           = 153;\n    public static var sysreq : Int             = 154;\n    public static var cancel : Int             = 155;\n    public static var clear : Int              = 156;\n    public static var prior : Int              = 157;\n    public static var return2 : Int            = 158;\n    public static var separator : Int          = 159;\n    public static var out : Int                = 160;\n    public static var oper : Int               = 161;\n    public static var clearagain : Int         = 162;\n    public static var crsel : Int              = 163;\n    public static var exsel : Int              = 164;\n\n    public static var kp_00 : Int              = 176;\n    public static var kp_000 : Int             = 177;\n    public static var thousandsseparator : Int = 178;\n    public static var decimalseparator : Int   = 179;\n    public static var currencyunit : Int       = 180;\n    public static var currencysubunit : Int    = 181;\n    public static var kp_leftparen : Int       = 182;\n    public static var kp_rightparen : Int      = 183;\n    public static var kp_leftbrace : Int       = 184;\n    public static var kp_rightbrace : Int      = 185;\n    public static var kp_tab : Int             = 186;\n    public static var kp_backspace : Int       = 187;\n    public static var kp_a : Int               = 188;\n    public static var kp_b : Int               = 189;\n    public static var kp_c : Int               = 190;\n    public static var kp_d : Int               = 191;\n    public static var kp_e : Int               = 192;\n    public static var kp_f : Int               = 193;\n    public static var kp_xor : Int             = 194;\n    public static var kp_power : Int           = 195;\n    public static var kp_percent : Int         = 196;\n    public static var kp_less : Int            = 197;\n    public static var kp_greater : Int         = 198;\n    public static var kp_ampersand : Int       = 199;\n    public static var kp_dblampersand : Int    = 200;\n    public static var kp_verticalbar : Int     = 201;\n    public static var kp_dblverticalbar : Int  = 202;\n    public static var kp_colon : Int           = 203;\n    public static var kp_hash : Int            = 204;\n    public static var kp_space : Int           = 205;\n    public static var kp_at : Int              = 206;\n    public static var kp_exclam : Int          = 207;\n    public static var kp_memstore : Int        = 208;\n    public static var kp_memrecall : Int       = 209;\n    public static var kp_memclear : Int        = 210;\n    public static var kp_memadd : Int          = 211;\n    public static var kp_memsubtract : Int     = 212;\n    public static var kp_memmultiply : Int     = 213;\n    public static var kp_memdivide : Int       = 214;\n    public static var kp_plusminus : Int       = 215;\n    public static var kp_clear : Int           = 216;\n    public static var kp_clearentry : Int      = 217;\n    public static var kp_binary : Int          = 218;\n    public static var kp_octal : Int           = 219;\n    public static var kp_decimal : Int         = 220;\n    public static var kp_hexadecimal : Int     = 221;\n\n    public static var lctrl : Int              = 224;\n    public static var lshift : Int             = 225;\n/** alt, option */\n    public static var lalt : Int               = 226;\n/** windows, command (apple), meta */\n    public static var lmeta : Int              = 227;\n    public static var rctrl : Int              = 228;\n    public static var rshift : Int             = 229;\n/** alt gr, option */\n    public static var ralt : Int               = 230;\n/** windows, command (apple), meta */\n    public static var rmeta : Int              = 231;\n\n/** Not sure if this is really not covered\n    by any of the above, but since there's a\n    special KMOD_MODE for it I'm adding it here */\n    public static var mode : Int               = 257;\n\n\n    //\n    //    Usage page 0x0C\n    //    These values are mapped from usage page 0x0C (USB consumer page).\n\n    public static var audionext : Int          = 258;\n    public static var audioprev : Int          = 259;\n    public static var audiostop : Int          = 260;\n    public static var audioplay : Int          = 261;\n    public static var audiomute : Int          = 262;\n    public static var mediaselect : Int        = 263;\n    public static var www : Int                = 264;\n    public static var mail : Int               = 265;\n    public static var calculator : Int         = 266;\n    public static var computer : Int           = 267;\n    public static var ac_search : Int          = 268;\n    public static var ac_home : Int            = 269;\n    public static var ac_back : Int            = 270;\n    public static var ac_forward : Int         = 271;\n    public static var ac_stop : Int            = 272;\n    public static var ac_refresh : Int         = 273;\n    public static var ac_bookmarks : Int       = 274;\n\n      // Walther keys\n      // These are values that Christian Walther added (for mac keyboard?).\n\n    public static var brightnessdown : Int     = 275;\n    public static var brightnessup : Int       = 276;\n\n/** display mirroring/dual display switch, video mode switch */\n    public static var displayswitch : Int      = 277;\n\n    public static var kbdillumtoggle : Int     = 278;\n    public static var kbdillumdown : Int       = 279;\n    public static var kbdillumup : Int         = 280;\n    public static var eject : Int              = 281;\n    public static var sleep : Int              = 282;\n\n    public static var app1 : Int               = 283;\n    public static var app2 : Int               = 284;\n\n    static var scancode_names:Array<String> = [\n        null, null, null, null,\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"0\",\n        \"Enter\",\n        \"Escape\",\n        \"Backspace\",\n        \"Tab\",\n        \"Space\",\n        \"-\",\n        \"=\",\n        \"[\",\n        \"]\",\n        \"\\\\\",\n        \"#\",\n        \";\",\n        \"'\",\n        \"`\",\n        \",\",\n        \".\",\n        \"/\",\n        \"CapsLock\",\n        \"F1\",\n        \"F2\",\n        \"F3\",\n        \"F4\",\n        \"F5\",\n        \"F6\",\n        \"F7\",\n        \"F8\",\n        \"F9\",\n        \"F10\",\n        \"F11\",\n        \"F12\",\n        \"PrintScreen\",\n        \"ScrollLock\",\n        \"Pause\",\n        \"Insert\",\n        \"Home\",\n        \"PageUp\",\n        \"Delete\",\n        \"End\",\n        \"PageDown\",\n        \"Right\",\n        \"Left\",\n        \"Down\",\n        \"Up\",\n        \"Numlock\",\n        \"Keypad /\",\n        \"Keypad *\",\n        \"Keypad -\",\n        \"Keypad +\",\n        \"Keypad Enter\",\n        \"Keypad 1\",\n        \"Keypad 2\",\n        \"Keypad 3\",\n        \"Keypad 4\",\n        \"Keypad 5\",\n        \"Keypad 6\",\n        \"Keypad 7\",\n        \"Keypad 8\",\n        \"Keypad 9\",\n        \"Keypad 0\",\n        \"Keypad .\",\n        null,\n        \"Application\",\n        \"Power\",\n        \"Keypad =\",\n        \"F13\",\n        \"F14\",\n        \"F15\",\n        \"F16\",\n        \"F17\",\n        \"F18\",\n        \"F19\",\n        \"F20\",\n        \"F21\",\n        \"F22\",\n        \"F23\",\n        \"F24\",\n        \"Execute\",\n        \"Help\",\n        \"Menu\",\n        \"Select\",\n        \"Stop\",\n        \"Again\",\n        \"Undo\",\n        \"Cut\",\n        \"Copy\",\n        \"Paste\",\n        \"Find\",\n        \"Mute\",\n        \"VolumeUp\",\n        \"VolumeDown\",\n        null, null, null,\n        \"Keypad ,\",\n        \"Keypad = (AS400)\",\n        null, null, null, null, null, null, null, null, null, null, null, null,\n        null, null, null, null, null, null,\n        \"AltErase\",\n        \"SysReq\",\n        \"Cancel\",\n        \"Clear\",\n        \"Prior\",\n        \"Enter\",\n        \"Separator\",\n        \"Out\",\n        \"Oper\",\n        \"Clear / Again\",\n        \"CrSel\",\n        \"ExSel\",\n        null, null, null, null, null, null, null, null, null, null, null,\n        \"Keypad 00\",\n        \"Keypad 000\",\n        \"ThousandsSeparator\",\n        \"DecimalSeparator\",\n        \"CurrencyUnit\",\n        \"CurrencySubUnit\",\n        \"Keypad (\",\n        \"Keypad )\",\n        \"Keypad {\",\n        \"Keypad }\",\n        \"Keypad Tab\",\n        \"Keypad Backspace\",\n        \"Keypad A\",\n        \"Keypad B\",\n        \"Keypad C\",\n        \"Keypad D\",\n        \"Keypad E\",\n        \"Keypad F\",\n        \"Keypad XOR\",\n        \"Keypad ^\",\n        \"Keypad %\",\n        \"Keypad <\",\n        \"Keypad >\",\n        \"Keypad &\",\n        \"Keypad &&\",\n        \"Keypad |\",\n        \"Keypad ||\",\n        \"Keypad :\",\n        \"Keypad #\",\n        \"Keypad Space\",\n        \"Keypad @\",\n        \"Keypad !\",\n        \"Keypad MemStore\",\n        \"Keypad MemRecall\",\n        \"Keypad MemClear\",\n        \"Keypad MemAdd\",\n        \"Keypad MemSubtract\",\n        \"Keypad MemMultiply\",\n        \"Keypad MemDivide\",\n        \"Keypad +/-\",\n        \"Keypad Clear\",\n        \"Keypad ClearEntry\",\n        \"Keypad Binary\",\n        \"Keypad Octal\",\n        \"Keypad Decimal\",\n        \"Keypad Hexadecimal\",\n        null, null,\n        \"Left Ctrl\",\n        \"Left Shift\",\n        \"Left Alt\",\n        \"Left Meta\",\n        \"Right Ctrl\",\n        \"Right Shift\",\n        \"Right Alt\",\n        \"Right Meta\",\n        null, null, null, null, null, null, null, null, null, null, null, null,\n        null, null, null, null, null, null, null, null, null, null, null, null,\n        null,\n        \"ModeSwitch\",\n        \"AudioNext\",\n        \"AudioPrev\",\n        \"AudioStop\",\n        \"AudioPlay\",\n        \"AudioMute\",\n        \"MediaSelect\",\n        \"WWW\",\n        \"Mail\",\n        \"Calculator\",\n        \"Computer\",\n        \"AC Search\",\n        \"AC Home\",\n        \"AC Back\",\n        \"AC Forward\",\n        \"AC Stop\",\n        \"AC Refresh\",\n        \"AC Bookmarks\",\n        \"BrightnessDown\",\n        \"BrightnessUp\",\n        \"DisplaySwitch\",\n        \"KBDIllumToggle\",\n        \"KBDIllumDown\",\n        \"KBDIllumUp\",\n        \"Eject\",\n        \"Sleep\",\n    ]; //scancode names\n\n\n} //Scancodes\n\n","package snow.core.web.input;\n\n#if snow_web\n\nimport snow.types.Types;\nimport snow.system.window.Window;\nimport snow.core.web.input.DOMKeys;\n\nimport snow.api.Debug.*;\n\ntypedef WebGamepadButton = {\n    value : Float,\n    pressed : Bool\n}\n\ntypedef WebGamepad = {\n    axes : Array<Float>,\n    index : Int,\n    buttons : Array<WebGamepadButton>,\n    id : String,\n    timestamp : Float\n}\n\n@:allow(snow.system.input.Input)\nclass Input implements snow.modules.interfaces.Input {\n\n    var active_gamepads : Map<Int, WebGamepad>;\n    var gamepads_supported : Bool = false;\n\n    var system : snow.system.input.Input;\n\n \tfunction new( _system:snow.system.input.Input ) system = _system;\n\n    function init() {\n\n            //key input is page wide, not just per canvas\n        js.Browser.document.addEventListener('keypress', on_keypress);\n        js.Browser.document.addEventListener('keydown',  on_keydown);\n        js.Browser.document.addEventListener('keyup',    on_keyup);\n\n            //initialize gamepads if they exist\n        active_gamepads = new Map();\n        gamepads_supported = (get_gamepad_list() != null);\n\n            //flag the state of deviceorientation api\n        if( untyped __js__('window.DeviceOrientationEvent') ) {\n            js.Browser.window.addEventListener('deviceorientation', on_orientation);\n            js.Browser.window.addEventListener('devicemotion', on_motion);\n        }\n\n        log('Gamepads supported: $gamepads_supported');\n\n    } //init\n\n    function update() {\n\n        if(gamepads_supported) {\n            poll_gamepads();\n        }\n\n    } //update\n\n    function destroy() {}\n\n    function listen( window:Window ) {\n\n        window.handle.addEventListener('contextmenu', on_contextmenu );\n\n        window.handle.addEventListener('mousedown',  on_mousedown);\n        window.handle.addEventListener('mouseup',    on_mouseup);\n        window.handle.addEventListener('mousemove',  on_mousemove);\n\n        window.handle.addEventListener('mousewheel', on_mousewheel);\n        window.handle.addEventListener('wheel',      on_mousewheel);\n\n        window.handle.addEventListener('touchstart', on_touchdown);\n        window.handle.addEventListener('touchend',   on_touchup);\n        window.handle.addEventListener('touchmove',  on_touchmove);\n\n    } //listen\n\n    function unlisten( window:Window ) {}\n    function on_event( _event : SystemEvent ) {}\n\n    public function text_input_start() {\n        // :unsupported: :todo:\n    } //text_input_start\n\n    public function text_input_stop() {\n        // :unsupported: :todo:\n    } //text_input_stop\n\n    public function text_input_rect(x:Int, y:Int, w:Int, h:Int) {\n        // :unsupported: :todo:\n    } //text_input_rect\n\n//Orientation\n\n    function on_orientation( event ) {\n\n        system.app.dispatch_system_event({\n            type: SystemEventType.input,\n            input: {\n                type: InputEventType.joystick,\n                timestamp: system.app.time,\n                event: {\n                    type: 'orientation',\n                    alpha: event.alpha,\n                    beta: event.beta,\n                    gamma: event.gamma\n                }\n            },\n        });\n\n\n    } //on_orientation\n\n    function on_motion( event ) {\n\n        system.app.dispatch_system_event({\n            type: SystemEventType.input,\n            input: {\n                type: InputEventType.joystick,\n                timestamp: system.app.time,\n                event: {\n                    type: 'motion',\n                    acceleration: event.acceleration,\n                    accelerationIncludingGravity: event.accelerationIncludingGravity,\n                    rotationRate: event.rotationRate\n                }\n            },\n        });\n\n    } //on_motion\n\n//Gamepad\n    function poll_gamepads() {\n\n        //just in case\n        if(!gamepads_supported) return;\n\n        var list = get_gamepad_list();\n        if(list != null) {\n            for(i in 0 ... list.length) {\n                if( untyped list[i] != null ) {\n                    handle_gamepad( untyped list[i] );\n                } else {\n                    //if an entry in the list was null,\n                    //check if it was here already before\n                    var _gamepad = active_gamepads.get(i);\n                    if(_gamepad != null) {\n\n                        system.dispatch_gamepad_device_event(\n                            _gamepad.index,\n                            _gamepad.id,\n                            GamepadDeviceEventType.device_removed,\n                            system.app.time //:todo:gamepadtimestamp:\n                        );\n\n                    } //_gamepad != null\n\n                        //and remove it so it only fires once\n                    active_gamepads.remove(i);\n\n                } //list[i] != null\n            } //for each in the list\n        } //if there is a list\n\n    } //poll_gamepads\n\n    function handle_gamepad( _gamepad : Dynamic ) {\n\n        //disconnected gamepads we don't need\n        if(_gamepad == null) return;\n\n            //check if this gamepad exists already\n        if( !active_gamepads.exists( _gamepad.index ) ) {\n\n                //if not we add it to the list\n            var _new_gamepad : WebGamepad = {\n                id : _gamepad.id,\n                index : _gamepad.index,\n                axes : [],\n                buttons : [],\n                timestamp : system.app.time //:todo:gamepadtimestamp:\n            };\n\n            var axes : Array<Float> = cast _gamepad.axes;\n            for(value in axes) {\n                _new_gamepad.axes.push(value);\n            }\n\n            var _button_list : Array<WebGamepadButton> = cast _gamepad.buttons;\n            for(_button in _button_list) {\n                _new_gamepad.buttons.push({ pressed:false, value:0 });\n            }\n\n            active_gamepads.set( _new_gamepad.index, _new_gamepad );\n\n            system.dispatch_gamepad_device_event(\n                _new_gamepad.index,\n                _new_gamepad.id,\n                GamepadDeviceEventType.device_added,\n                _new_gamepad.timestamp\n            );\n\n        } else {\n\n                //found in the list so we can update it if anything changed\n            var gamepad = active_gamepads.get(_gamepad.index);\n\n                //but only if the timestamp differs :todo:gamepadtimestamp:\n                //failfox at least doesn't store timestamp changes -_-\n            // if(gamepad.timestamp != _gamepad.timestamp) {\n\n                    //update the id if it changed\n                if(gamepad.id != _gamepad.id) { gamepad.id = _gamepad.id; }\n\n                    //:todo: see :gamepadtimestamp:\n                // gamepad.timestamp = _gamepad.timestamp;\n\n                    //we store the list of changed indices\n                    //so we can call the handler functions with each\n                var axes_changed : Array<Int> = [];\n                var buttons_changed : Array<Int> = [];\n                    //the last known values\n                var last_axes : Array<Float> = gamepad.axes;\n                var last_buttons : Array<WebGamepadButton> = gamepad.buttons;\n\n                    //the new known values\n                var new_axes : Array<Float> = cast _gamepad.axes;\n                var new_buttons : Array<WebGamepadButton> = cast _gamepad.buttons;\n\n                    //check for axes changes\n                var axis_index : Int = 0;\n                for(axis in new_axes) {\n\n                    if(axis != last_axes[axis_index]) {\n                        axes_changed.push(axis_index);\n                        gamepad.axes[axis_index] = axis;\n                    }\n\n                    axis_index++;\n\n                } //axis in new_axes\n\n                    //check for button changes\n                var button_index : Int = 0;\n                for(button in new_buttons) {\n\n                    if( button.value != last_buttons[button_index].value ) {\n                        buttons_changed.push(button_index);\n                        gamepad.buttons[button_index].pressed = button.pressed;\n                        gamepad.buttons[button_index].value = button.value;\n                    }\n\n                    button_index++;\n\n                } //button in new_buttons\n\n                    //now forward any axis changes to the wrapper\n                for(index in axes_changed) {\n\n                    system.dispatch_gamepad_axis_event(\n                        gamepad.index,\n                        index,\n                        new_axes[index],\n                        gamepad.timestamp\n                    );\n\n                } //for each axis changed\n\n                    //then forward any button changes to the wrapper\n                for(index in buttons_changed) {\n\n                    if(new_buttons[index].pressed == true) {\n\n                        system.dispatch_gamepad_button_down_event(\n                            gamepad.index,\n                            index,\n                            new_buttons[index].value,\n                            gamepad.timestamp\n                        );\n\n                    } else {\n\n                        system.dispatch_gamepad_button_up_event(\n                            gamepad.index,\n                            index,\n                            new_buttons[index].value,\n                            gamepad.timestamp\n                        );\n\n                    } //new_buttons[index].pressed\n\n                } //for each button change\n\n                //:todo: see :gamepadtimestamp:\n            // } //timestamp changed\n\n        } //exists\n\n    } //handle_gamepad\n\n    function fail_gamepads() {\n\n        gamepads_supported = false;\n        log(\"Gamepads are not supported in this browser :(\");\n\n    } //fail_gamepads\n\n        //It's really early for gamepads in browser\n    function get_gamepad_list() : Dynamic {\n\n            //try official api first\n        if( untyped js.Browser.navigator.getGamepads != null ) {\n            return untyped js.Browser.navigator.getGamepads();\n        }\n\n            //try newer webkit GetGamepads() function\n        if( untyped js.Browser.navigator.webkitGetGamepads != null ) {\n            return untyped js.Browser.navigator.webkitGetGamepads();\n        }\n\n            //if we make it here we failed support so fail out\n        fail_gamepads();\n\n        return null;\n\n    } //get_gamepad_list\n\n//Mouse\n    function on_mousedown( _mouse_event:js.html.MouseEvent ) {\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _mouse_event.target);\n\n            //buttons are 1 index, on native, so we increase button\n        system.dispatch_mouse_down_event(\n            (_mouse_event.pageX - js.Browser.window.pageXOffset) - _window.x,\n            (_mouse_event.pageY - js.Browser.window.pageYOffset) - _window.y,\n            _mouse_event.button+1,\n            _mouse_event.timeStamp,\n            _window.id\n        );\n\n    } //on_mousedown\n\n    function on_mouseup( _mouse_event:js.html.MouseEvent ) {\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _mouse_event.target);\n\n        system.dispatch_mouse_up_event(\n            (_mouse_event.pageX - js.Browser.window.pageXOffset) - _window.x,\n            (_mouse_event.pageY - js.Browser.window.pageYOffset) - _window.y,\n            _mouse_event.button+1,\n            _mouse_event.timeStamp,\n            _window.id\n        );\n\n    } //on_mouseup\n\n    function on_mousemove( _mouse_event:js.html.MouseEvent ) {\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _mouse_event.target);\n\n        var _movement_x : Null<Int> = untyped _mouse_event.movementX;\n        var _movement_y : Null<Int> = untyped _mouse_event.movementY;\n\n        if(_movement_x == null) {\n            if(untyped _mouse_event.webkitMovementX != null) {\n                _movement_x = untyped _mouse_event.webkitMovementX;\n                _movement_y = untyped _mouse_event.webkitMovementY;\n            } else if(untyped _mouse_event.mozMovementX != null) {\n                _movement_x = untyped _mouse_event.mozMovementX;\n                _movement_y = untyped _mouse_event.mozMovementY;\n            }\n        }\n\n        system.dispatch_mouse_move_event(\n            (_mouse_event.pageX - js.Browser.window.pageXOffset) - _window.x,\n            (_mouse_event.pageY - js.Browser.window.pageYOffset) - _window.y,\n            _movement_x,\n            _movement_y,\n            _mouse_event.timeStamp,\n            _window.id\n        );\n\n    } //on_mousemove\n\n\n    function on_mousewheel( _wheel_event:js.html.WheelEvent ) {\n\n        if(system.app.config.web.prevent_default_mouse_wheel) {\n            _wheel_event.preventDefault();\n        }\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _wheel_event.target);\n\n        var _x : Int = 0;\n        var _y : Int = 0;\n\n            //:todo:haxe:3.2: deltaX/deltaY added in haxe 3.2.0\n        if(untyped _wheel_event.deltaY != null) {\n            _y  = untyped _wheel_event.deltaY;\n        } else if((untyped _wheel_event.wheelDeltaY) != null) {\n            _y = Std.int(-(untyped _wheel_event.wheelDeltaY)/3);\n        }\n\n        if(untyped _wheel_event.deltaX != null) {\n            _x  = untyped _wheel_event.deltaX;\n        } else if((untyped _wheel_event.wheelDeltaX) != null) {\n            _x = Std.int(-(untyped _wheel_event.wheelDeltaX)/3);\n        }\n\n            //the /16 here is the default em size of a web page\n            //because native scrolls in lines, and web scrolls in pixels,\n            //sometimes, fuuu\n        system.dispatch_mouse_wheel_event(\n            Math.round(_x/16),\n            Math.round(_y/16),\n            _wheel_event.timeStamp,\n            _window.id\n        );\n\n    } //on_mousewheel\n\n    function on_contextmenu( _event:js.html.MouseEvent ) {\n\n        if(system.app.config.web.no_context_menu) {\n            _event.preventDefault();\n        }\n\n    } //on_contextmenu\n\n//Keys\n\n    //window id is 1 for keys as they come from the page, so always the main window\n\n        //a list of keycodes that should not generate text\n        //based events because... browsers.\n    static var _keypress_blacklist = [Key.backspace, Key.enter];\n        //keypress gives us typable keys\n    function on_keypress( _key_event:js.html.KeyboardEvent ) {\n\n        if(_key_event.which != 0 &&\n           _keypress_blacklist.indexOf(_key_event.keyCode) == -1) {\n\n            var _text = String.fromCharCode(_key_event.charCode);\n\n            system.dispatch_text_event(\n                _text, 0, _text.length,     //text, start, length\n                TextEventType.input,        //TextEventType\n                _key_event.timeStamp,       //timestamp\n                1                           //window\n            );\n\n        } //not special\n\n    } //on_keypress\n\n    function on_keydown( _key_event:js.html.KeyboardEvent ) {\n\n        var _keycode : Int = convert_keycode(_key_event.keyCode);\n        var _scancode : Int = Key.to_scan(_keycode);\n        var _mod_state : ModState = mod_state_from_event(_key_event);\n\n        if(system.app.config.web.prevent_default_keys.indexOf(_keycode) != -1) {\n            _key_event.preventDefault();\n        }\n\n        system.dispatch_key_down_event(\n            _keycode,\n            _scancode,\n            untyped _key_event.repeat,\n            _mod_state,\n            _key_event.timeStamp,\n            1\n        );\n\n    } //on_keydown\n\n    function on_keyup( _key_event:js.html.KeyboardEvent ) {\n\n\n        var _keycode : Int = convert_keycode(_key_event.keyCode);\n        var _scancode : Int = Key.to_scan(_keycode);\n        var _mod_state : ModState = mod_state_from_event(_key_event);\n\n        if(system.app.config.web.prevent_default_keys.indexOf(_keycode) != -1) {\n            _key_event.preventDefault();\n        }\n\n        system.dispatch_key_up_event(\n            _keycode,\n            _scancode,\n            untyped _key_event.repeat,\n            _mod_state,\n            _key_event.timeStamp,\n            1\n        );\n\n    } //on_keyup\n\n\tfunction mod_state_from_event( _key_event : js.html.KeyboardEvent ) : ModState {\n\n        var _none : Bool =\n            !_key_event.altKey &&\n            !_key_event.ctrlKey &&\n            !_key_event.metaKey &&\n            !_key_event.shiftKey;\n\n        return {\n            none    : _none,\n            lshift  : _key_event.shiftKey,\n            rshift  : _key_event.shiftKey,\n            lctrl   : _key_event.ctrlKey,\n            rctrl   : _key_event.ctrlKey,\n            lalt    : _key_event.altKey,\n            ralt    : _key_event.altKey,\n            lmeta   : _key_event.metaKey,\n            rmeta   : _key_event.metaKey,\n            num     : false, //:unsupported:\n            caps    : false, //:unsupported:\n            mode    : false, //:unsupported:\n            ctrl    : _key_event.ctrlKey,\n            shift   : _key_event.shiftKey,\n            alt     : _key_event.altKey,\n            meta    : _key_event.metaKey\n        };\n\n    } //mod_state_from_event\n\n        //This takes a *DOM* keycode and returns a snow Keycodes value\n    function convert_keycode(dom_keycode:Int) : Int {\n\n            //this converts the uppercase into lower case,\n            //since those are fixed values it doesn't need to be checked\n        if (dom_keycode >= 65 && dom_keycode <= 90) {\n            return dom_keycode + 32;\n        }\n\n            //this will pass back the same value if unmapped\n        return DOMKeys.dom_key_to_keycode(dom_keycode);\n\n    } //convert_keycode\n\n//Touch\n\n    function on_touchdown( _touch_event:js.html.TouchEvent ) {\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _touch_event.target);\n\n        for(touch in _touch_event.changedTouches) {\n\n            var _x:Float = (touch.pageX - js.Browser.window.pageXOffset) - _window.x;\n            var _y:Float = (touch.pageY - js.Browser.window.pageYOffset) - _window.y;\n                _x = (_x / _window.width);\n                _y = (_y / _window.height);\n\n            system.dispatch_touch_down_event(\n                _x,\n                _y,\n                touch.identifier,\n                system.app.time\n            );\n        }\n    } //on_touchdown\n\n    function on_touchup( _touch_event:js.html.TouchEvent ){\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _touch_event.target);\n\n        for(touch in _touch_event.changedTouches) {\n\n            var _x:Float = (touch.pageX - js.Browser.window.pageXOffset) - _window.x;\n            var _y:Float = (touch.pageY - js.Browser.window.pageYOffset) - _window.y;\n                _x = (_x / _window.width);\n                _y = (_y / _window.height);\n\n            system.dispatch_touch_up_event(\n                _x,\n                _y,\n                touch.identifier,\n                system.app.time\n            );\n        }\n\n    } //on_touchup\n\n    function on_touchmove( _touch_event:js.html.TouchEvent ){\n\n        var _window : Window = system.app.windowing.window_from_handle(cast _touch_event.target);\n\n        for(touch in _touch_event.changedTouches) {\n\n            var _x:Float = (touch.pageX - js.Browser.window.pageXOffset) - _window.x;\n            var _y:Float = (touch.pageY - js.Browser.window.pageYOffset) - _window.y;\n                _x = (_x / _window.width);\n                _y = (_y / _window.height);\n\n            system.dispatch_touch_move_event(\n                _x,\n                _y,\n                0,\n                0,\n                touch.identifier,\n                system.app.time\n            );\n        }\n\n    } //on_touchmove\n\n\n} //Input\n\n#end //snow_web\n","package snow.core.web.io;\n\n#if snow_web\n\nimport snow.types.Types;\nimport snow.api.buffers.Uint8Array;\nimport snow.api.Promise;\nimport snow.api.Debug.*;\n\n\n@:allow(snow.system.io.IO)\nclass IO implements snow.modules.interfaces.IO {\n\n    var system : snow.system.io.IO;\n\n    function new( _system:snow.system.io.IO ) system = _system;\n\n//Public API\n\n    public function url_open( _url:String ) {\n\n        if(_url != null && _url.length > 0) {\n            js.Browser.window.open(_url, '_blank');\n        }\n\n    } //url_open\n\n        /** Load bytes from the file path/url given.\n            On web a request is sent for the data */\n    public function data_load( _path:String, ?_options:IODataOptions ) : Promise {\n\n        return new Promise(function(resolve,reject) {\n\n                //defaults\n            var _async = true;\n            var _binary = true;\n\n            if(_options != null) {\n                if(_options.binary != null) _binary = _options.binary;\n            }\n\n            var request = new js.html.XMLHttpRequest();\n                request.open(\"GET\", _path, _async);\n\n            if(_binary) {\n                request.overrideMimeType('text/plain; charset=x-user-defined');\n            } else {\n                request.overrideMimeType('text/plain; charset=UTF-8');\n            }\n\n                //only _async can set the type it seems\n            if(_async) {\n                #if (haxe_ver < 3.2)\n                    request.responseType = 'arraybuffer';\n                #else\n                    request.responseType = js.html.XMLHttpRequestResponseType.ARRAYBUFFER;\n                #end\n            }\n\n            request.onload = function(data) {\n\n                if(request.status == 200) {\n                    resolve( new Uint8Array(request.response) );\n                } else {\n                    reject(Error.error('request status was ${request.status} / ${request.statusText}'));\n                }\n\n            } //onload\n\n            request.send();\n\n        });\n\n    } //data_load\n\n    public function data_save( _path:String, _data:Uint8Array, ?_options:IODataOptions ) : Bool {\n\n        return false;\n\n    } //data_save\n\n\n        /** Returns the path where string_save operates.\n            One targets where this is not a path, the path will be prefaced with `< >/`,\n            i.e on web targets the path will be `<localstorage>/` followed by the ID. */\n    public function string_save_path( _slot:Int = 0 ) : String {\n\n        var _pref_path = '<localstorage>';\n        var _slot_path = string_slot_id(_slot);\n        var _path = haxe.io.Path.join([_pref_path, _slot_path]);\n\n        return haxe.io.Path.normalize(_path);\n\n    } //string_save_path\n\n//Internal API\n\n    function init() {}\n    function update() {}\n    function destroy() {}\n    function on_event( _event:SystemEvent ) {}\n\n    inline function string_slot_id(_slot:Int = 0) {\n        var _parts = system.app.snow_config.app_package.split('.');\n        var _appname = _parts.pop();\n        var _org = _parts.join('.');\n\n        return '$_org/$_appname/${system.string_save_prefix}.$_slot';\n    }\n\n    inline function string_slot_destroy( _slot:Int = 0 ) : Bool {\n\n        var storage = js.Browser.window.localStorage;\n        if(storage == null) {\n            log('localStorage isnt supported in this browser?!');\n            return false;\n        }\n\n        var _id = string_slot_id(_slot);\n\n        storage.removeItem(_id);\n\n        return false;\n\n    } //string_slot_destroy\n\n        //flush the string map to disk\n    inline function string_slot_save( _slot:Int = 0, _contents:String ) : Bool {\n\n        var storage = js.Browser.window.localStorage;\n        if(storage == null) {\n            log('localStorage isnt supported in this browser?!');\n            return false;\n        }\n\n        var _id = string_slot_id(_slot);\n\n        storage.setItem(_id, _contents);\n\n        return true;\n\n    } //string_slot_save\n\n        //get the string contents of this slot,\n        //or null if not found/doesn't exist\n    inline function string_slot_load( _slot:Int = 0 ) : String {\n\n        var storage = js.Browser.window.localStorage;\n        if(storage == null) {\n            log('localStorage isnt supported in this browser?!');\n            return null;\n        }\n\n        var _id = string_slot_id(_slot);\n\n        return storage.getItem(_id);\n\n    } //string_slot_load\n\n    inline function string_slot_encode( _string:String ) : String {\n        return js.Browser.window.btoa(_string);\n    }\n\n    inline function string_slot_decode( _string:String ) : String {\n        return js.Browser.window.atob(_string);\n    }\n\n\n} //IO\n\n#end //snow_web\n","package snow.core.web.window;\n\n#if snow_web\n\nimport snow.types.Types;\nimport snow.system.window.Window;\n\n@:allow(snow.system.window.Windowing)\nclass Windowing implements snow.modules.interfaces.Windowing {\n\n    public var gl_contexts : Map<Int, js.html.webgl.RenderingContext>;\n\n    var seq_window : Int = 1;\n    var fs_windows : Array<Window>;\n    var system : snow.system.window.Windowing;\n\n    public function new( _system:snow.system.window.Windowing ) {\n\n        system = _system;\n        fs_windows = [];\n        gl_contexts = new Map();\n\n    } //new\n\n    function init() {\n\n        listen_for_visibility();\n        listen_for_resize();\n\n    } //init\n\n    function update() {}\n    function destroy() {}\n    function on_event(event:SystemEvent) {}\n\n    function _copy_config( _config:WindowConfig ) {\n        return {\n            borderless:_config.borderless,\n            fullscreen:_config.fullscreen,\n            fullscreen_desktop:_config.fullscreen_desktop,\n            height:_config.height,\n            no_input:_config.no_input,\n            resizable:_config.resizable,\n            title:_config.title,\n            width:_config.width,\n            x:_config.x,\n            y:_config.y\n        }\n    }\n\n    public function create( render_config:RenderConfig, _config:WindowConfig, on_created: WindowHandle->Int->WindowingConfig->Void ) {\n\n        var _window_id = seq_window;\n        var _handle : js.html.CanvasElement = js.Browser.document.createCanvasElement();\n        var config = _copy_config(_config);\n\n                //assign the initial sizes\n            _handle.width = config.width;\n            _handle.height = config.height;\n\n                //make sure it displays nicely\n            _handle.style.display = 'block';\n            _handle.style.position = 'relative';\n            _handle.style.background = '#000';\n\n                //add it to the document\n            js.Browser.document.body.appendChild(_handle);\n\n            //:todo: These options need to be exposed and documented\n        var _gl_context = _handle.getContextWebGL({ alpha:false, premultipliedAlpha:false, antialias: render_config.antialiasing > 0 });\n            //early out on no possible context\n        if(_gl_context == null) {\n            var msg =  'WebGL is required to run this!<br/><br/>';\n                msg += 'visit http://get.webgl.org/ for help <br/>';\n                msg += 'and contact the developer of the application';\n            internal_fallback(msg);\n            throw Error.windowing(msg);\n        }\n\n            //make sure there is a set up context early\n        if(snow.modules.opengl.GL.current_context == null) {\n            snow.modules.opengl.GL.current_context = _gl_context;\n        }\n\n            //store it for activating later\n        gl_contexts.set(_window_id, _gl_context);\n\n            //get the real canvas position and give it to the config\n        var _window_pos = get_real_window_position( _handle );\n\n            config.x = _window_pos.x;\n            config.y = _window_pos.y;\n\n            //set the window title to the config title if there is one\n        if(config.title != null && config.title != '') {\n            js.Browser.document.title = config.title;\n        }\n\n            //tell them and give the handle for later.\n        on_created(_handle, _window_id, { config:config, render_config:render_config });\n        _handle.setAttribute('id', 'window${_window_id}');\n\n        seq_window++;\n\n    } //window_create\n\n    public function destroy_window( _window:Window ) {\n\n        js.Browser.document.body.removeChild( _window.handle );\n\n    } //destroy_window\n\n    public function close( _window:Window ) {\n\n        _window.handle.style.display = 'none';\n\n    } //close\n\n    public function show( _window:Window ) {\n\n        _window.handle.style.display = null;\n\n    } //show\n\n    function internal_resize( _window:Window, _w:Float, _h:Float ) {\n\n        system.app.dispatch_system_event({\n            type : SystemEventType.window,\n            window : {\n                type : WindowEventType.size_changed,\n                timestamp : system.app.time,\n                window_id : _window.id,\n                event : { x:_w, y:_h }\n            }\n        });\n\n        system.app.dispatch_system_event({\n            type : SystemEventType.window,\n            window : {\n                type : WindowEventType.resized,\n                timestamp : system.app.time,\n                window_id : _window.id,\n                event : { x:_w, y:_h }\n            }\n        });\n\n    } //internal_resize\n\n    public function update_window( _window:Window ) {\n\n        var _rect = _window.handle.getBoundingClientRect();\n\n            if(_rect.left != _window.x || _rect.top != _window.y) {\n\n                system.app.dispatch_system_event({\n                    type : SystemEventType.window,\n                    window : {\n                        type : WindowEventType.moved,\n                        timestamp : system.app.time,\n                        window_id : _window.id,\n                        event : { x:_rect.left, y:_rect.top }\n                    }\n                });\n\n            }\n\n            if(_rect.width != _window.width || _rect.height != _window.height) {\n\n                internal_resize(_window, _rect.width, _rect.height);\n\n            }\n\n        _rect = null;\n\n    } //window_update\n\n    public function render( _window:Window ) {\n\n        var _window_gl_context = gl_contexts.get(_window.id);\n        if(snow.modules.opengl.GL.current_context != _window_gl_context) {\n            snow.modules.opengl.GL.current_context = _window_gl_context;\n        }\n\n    } //window_render\n\n    public function swap( _window:Window ) {\n\n        //:unsupported:\n        //this concept is not possible in browser\n\n    } //window_swap\n\n    public function simple_message( _window:Window, message:String, ?title:String=\"\" ) {\n\n        js.Browser.window.alert( message );\n\n    } //window_simple_message\n\n    public function set_size( _window:Window, w:Int, h:Int ) {\n\n        _window.handle.width = w;\n        _window.handle.height = h;\n        _window.handle.style.width = '${w}px';\n        _window.handle.style.height = '${h}px';\n\n        internal_resize(_window, w, h);\n\n    } //window_set_size\n\n    public function set_position( _window:Window, x:Int, y:Int ) {\n\n        _window.handle.style.left = '${x}px';\n        _window.handle.style.top = '${y}px';\n\n    } //window_set_position\n\n    public function get_real_window_position( handle:WindowHandle ) : { x:Int, y:Int } {\n\n        // see the following link for this implementation\n        // http://www.quirksmode.org/js/findpos.html\n\n        var curleft = 0;\n        var curtop = 0;\n\n            //start at the canvas\n        var _obj : js.html.Element = cast handle;\n\n        var _has_parent : Bool = true;\n        var _max_count = 0;\n\n        while(_has_parent == true) {\n\n            _max_count++;\n\n            if(_max_count > 100) {\n                _has_parent = false;\n                break;\n            } //prevent rogue endless loops\n\n            if(_obj.offsetParent != null) {\n\n                    //it still has an offset parent, add it up\n                curleft += _obj.offsetLeft;\n                curtop += _obj.offsetTop;\n\n                    //then move onto the parent\n                _obj = cast _obj.offsetParent;\n\n            } else {\n                    //we are done\n                _has_parent = false;\n\n            }\n        } //while\n\n        return { x:curleft, y:curtop };\n\n    } //get_real_window_position\n\n    public function set_title( _window:Window, title:String ) {\n\n        js.Browser.document.title = title;\n\n    } //window_set_title\n\n    public function set_max_size( _window:Window, w:Int, h:Int ) {\n\n        _window.handle.style.maxWidth = '${w}px';\n        _window.handle.style.maxHeight = '${h}px';\n\n    } //window_set_max_size\n\n    public function set_min_size( _window:Window, w:Int, h:Int ) {\n\n        _window.handle.style.minWidth = '${w}px';\n        _window.handle.style.minHeight = '${h}px';\n\n    } //window_set_min_size\n\n\n\n    var _pre_fs_padding : String = '0';\n    var _pre_fs_margin : String = '0';\n    var _pre_fs_s_width : String = '';\n    var _pre_fs_s_height : String = '';\n    var _pre_fs_width : Int = 0;\n    var _pre_fs_height : Int = 0;\n    var _pre_fs_body_overflow : String = '0';\n    var _pre_fs_body_margin : String = '0';\n\n    function internal_fullscreen( _window:Window, fullscreen:Bool ) {\n\n        var  _handle = _window.handle;\n\n            //track for resizes\n        if(fullscreen) {\n            if(fs_windows.indexOf(_window) == -1) {\n                fs_windows.push(_window);\n            }\n        } else {\n            fs_windows.remove(_window);\n        }\n\n            //find out if the config requested true fullscreen or not\n        var true_fullscreen = system.app.config.web.true_fullscreen;\n\n            //as always browser support for newer features will be\n            //sporadic. Tested fullscreen against firefox/chrome/opera/safari latest\n            //all appear to work as expected, but have no cancel (user must press escape)\n        if(fullscreen) {\n\n            if(true_fullscreen) {\n\n\n                    //official api's first\n                if(untyped _handle.requestFullscreen == null) {\n                    if(untyped _handle.requestFullScreen == null) {\n                        if(untyped _handle.webkitRequestFullscreen == null) {\n                            if(untyped _handle.mozRequestFullScreen == null) {\n\n                            } else { untyped _handle.mozRequestFullScreen(); }\n                        } else { untyped _handle.webkitRequestFullscreen(); }\n                    } else { untyped _handle.requestFullScreen(null); }\n                } else { untyped _handle.requestFullscreen(); }\n\n            } else {\n\n                _pre_fs_padding = _handle.style.padding;\n                _pre_fs_margin = _handle.style.margin;\n                _pre_fs_s_width = _handle.style.width;\n                _pre_fs_s_height = _handle.style.height;\n                _pre_fs_width = _handle.width;\n                _pre_fs_height = _handle.height;\n                _pre_fs_body_margin = js.Browser.document.body.style.margin;\n                _pre_fs_body_overflow = js.Browser.document.body.style.overflow;\n\n                _handle.style.margin = '0';\n                _handle.style.padding = '0';\n                _handle.style.width = js.Browser.window.innerWidth + 'px';\n                _handle.style.height = js.Browser.window.innerHeight + 'px';\n                _handle.width = js.Browser.window.innerWidth;\n                _handle.height = js.Browser.window.innerHeight;\n\n                    //stop the browser page from having scrollbars etc\n                js.Browser.document.body.style.margin = '0';\n                js.Browser.document.body.style.overflow = 'hidden';\n\n            }\n\n        } else {\n\n            if(true_fullscreen) {\n\n                //:unsupported:\n                //currently no cancel full screen in fullscreen mode\n\n            } else {\n\n                _handle.style.padding = _pre_fs_padding;\n                _handle.style.margin = _pre_fs_margin;\n                _handle.style.width = _pre_fs_s_width;\n                _handle.style.height = _pre_fs_s_height;\n                _handle.width = _pre_fs_width;\n                _handle.height = _pre_fs_height;\n                js.Browser.document.body.style.margin = _pre_fs_body_margin;\n                js.Browser.document.body.style.overflow = _pre_fs_body_overflow;\n\n            }\n\n        }\n\n    } //set_handle_fullscreen\n\n    public function fullscreen( _window:Window, fullscreen:Bool ) {\n\n        internal_fullscreen( _window, fullscreen );\n\n    } //window_fullscreen\n\n    public function bordered( _window:Window, bordered:Bool ) {\n\n        //:unsupported:\n        //no such concept on browser\n\n    } //window_bordered\n\n\n    public function grab( _window:Window, grabbed:Bool ) {\n\n        if(grabbed) {\n                //official api's first\n            if(_window.handle.requestPointerLock == null) {\n                    if(untyped _window.handle.webkitRequestPointerLock == null) {\n                        if(untyped _window.handle.mozRequestPointerLock == null) {\n\n                        } else { untyped _window.handle.mozRequestPointerLock(); }\n                    } else { untyped _window.handle.webkitRequestPointerLock(); }\n            } else { _window.handle.requestPointerLock(); }\n\n        } else {\n\n            //:unsupported:\n            //pointer lock cancel api not yet in browsers,\n            //user must press escape\n\n        }\n\n    } //window_grab\n\n    public function set_cursor_position( _window:Window, x:Int, y:Int ) {\n\n        // :unsupported:\n        // for good reason.\n\n    } //set_cursor_position\n\n        /** Toggle the OS cursor. This is not window specific but system wide */\n    var cursor_style : js.html.Element;\n    var _cursor_visible : Bool = true;\n    public function system_enable_cursor( enable:Bool ) {\n\n        if(cursor_style == null) {\n            cursor_style = js.Browser.document.createStyleElement();\n            cursor_style.innerHTML = '* { cursor:none; }';\n        }\n\n        if(enable && !_cursor_visible) {\n            _cursor_visible = true;\n            js.Browser.document.body.removeChild(cursor_style);\n        } else if(!enable && _cursor_visible) {\n            _cursor_visible = false;\n            js.Browser.document.body.appendChild(cursor_style);\n        }\n\n    } //system_enable_cursor\n\n        /** Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates. */\n    public function system_lock_cursor( enable:Bool ) {\n\n        if(system.app.window != null) {\n            grab(system.app.window, enable);\n        }\n\n    } //system_lock_cursor\n\n        /** Toggle vertical refresh. This is not window specific but context wide */\n    public function system_enable_vsync( enable:Bool ) : Int {\n\n        // :unsupported:\n        //technically RAF is vsync but it's not a toggle,\n        //and without it is terrible so, not doing that\n\n        return -1;\n\n    } //system_enable_vsync\n\n\n    public function display_count() : Int {\n\n        //:unsupported:\n        return 1;\n\n    } //display_count\n\n    public function display_mode_count( display:Int ) : Int {\n\n        //:unsupported:\n        return 1;\n\n    } //display_mode_count\n\n    public function display_native_mode( display:Int ) : DisplayMode {\n\n        //:unsupported:\n\n        return {\n            format : 0,\n            refresh_rate : 0,\n            width : js.Browser.window.screen.width,\n            height : js.Browser.window.screen.height\n        };\n\n    } //display_native_mode\n\n    public function display_current_mode( display:Int ) : DisplayMode {\n\n        //:unsupported:\n        //will always return the default display mode\n\n        return display_native_mode(display);\n\n    } //display_current_mode\n\n    public function display_mode( display:Int, mode_index:Int ) : DisplayMode {\n\n        //:unsupported:\n        //will always return the default display mode\n\n        return display_native_mode(display);\n\n    } //display_mode\n\n        //returns the size of the main window\n    public function display_bounds( display:Int ) : { x:Int, y:Int, width:Int, height:Int } {\n\n        return {\n            x : 0,\n            y : 0,\n            width : js.Browser.window.innerWidth,\n            height : js.Browser.window.innerHeight\n        };\n\n    } //display_bounds\n\n    public function display_name( display:Int ) : String {\n\n        return js.Browser.navigator.vendor;\n\n    } //display_name\n\n        /** Called to set up any listeners on the given window  */\n    public function listen( _window:Window ) {\n\n        _window.handle.addEventListener('mouseleave', on_internal_leave);\n        _window.handle.addEventListener('mouseenter', on_internal_enter);\n\n        if(_window.config.fullscreen) {\n            internal_fullscreen( _window, _window.config.fullscreen );\n            _window.config.width = _window.handle.width;\n            _window.config.height = _window.handle.height;\n        }\n\n    } //listen\n\n        /** Called to remove any listeners on the given window  */\n    public function unlisten( _window:Window ) {\n\n        _window.handle.removeEventListener('mouseleave', on_internal_leave);\n        _window.handle.removeEventListener('mouseenter', on_internal_enter);\n\n        fs_windows.remove(_window);\n\n    } //unlisten\n\n\n    function on_internal_leave( _mouse_event:js.html.MouseEvent ) {\n\n        var _window : Window = system.window_from_handle(cast _mouse_event.target);\n\n            //tell the system\n        system.app.dispatch_system_event({\n            type : SystemEventType.window,\n            window : {\n                type : WindowEventType.leave,\n                timestamp : _mouse_event.timeStamp,\n                window_id : _window.id,\n                event : _mouse_event\n            }\n        });\n\n    } //on_internal_leave\n\n    function on_internal_enter( _mouse_event:js.html.MouseEvent ) {\n\n        var _window : Window = system.window_from_handle(cast _mouse_event.target);\n\n            //tell the system\n        system.app.dispatch_system_event({\n            type : SystemEventType.window,\n            window : {\n                type : WindowEventType.enter,\n                timestamp : _mouse_event.timeStamp,\n                window_id : _window.id,\n                event : _mouse_event\n            }\n        });\n\n    } //on_internal_enter\n\n    function listen_for_resize() {\n\n        js.Browser.window.onresize = function(e){\n            if(!system.app.config.web.true_fullscreen) {\n\n                for(window in fs_windows) {\n                    window.set_size( js.Browser.window.innerWidth, js.Browser.window.innerHeight);\n                    internal_resize( window, window.width, window.height );\n                }\n\n            } //if true_fullscreen\n        } //onresize\n\n    } //listen_for_resize\n\n    var _hidden_name = '';\n    var _hidden_event_name = '';\n    function listen_for_visibility() {\n\n        if( untyped __js__('typeof document.hidden !== undefined') ) {\n            _hidden_name = 'hidden';\n            _hidden_event_name = 'visibilitychange';\n        } else if( untyped __js__('typeof document.mozHidden !== undefined ')) {\n            _hidden_name = 'mozHidden';\n            _hidden_name = 'mozvisibilitychange';\n        } else if( untyped __js__('typeof document.msHidden !== \"undefined\"')) {\n            _hidden_name = \"msHidden\";\n            _hidden_event_name = \"msvisibilitychange\";\n        } else if( untyped __js__('typeof document.webkitHidden !== \"undefined\"')) {\n            _hidden_name = \"webkitHidden\";\n            _hidden_event_name = \"webkitvisibilitychange\";\n        }\n\n        if(_hidden_name != '' && _hidden_event_name != '') {\n            js.Browser.document.addEventListener(_hidden_event_name, on_visibility_change );\n        }\n\n    }\n\n    function on_visibility_change(jsevent) {\n\n        var _event = {\n            type : SystemEventType.window,\n            window : {\n                type : WindowEventType.shown,\n                timestamp : system.app.time,\n                window_id : 1, //page window id is 1\n                event : jsevent\n            }\n        };\n\n            //dispatch one for minimize/restore, one for focus lost/gain\n            //and one for hidden/exposed\n        if( untyped document[_hidden_name] ) {\n            _event.window.type = WindowEventType.hidden;\n                system.app.dispatch_system_event(_event);\n            _event.window.type = WindowEventType.minimized;\n                system.app.dispatch_system_event(_event);\n            _event.window.type = WindowEventType.focus_lost;\n                system.app.dispatch_system_event(_event);\n        } else {\n            _event.window.type = WindowEventType.shown;\n                system.app.dispatch_system_event(_event);\n            _event.window.type = WindowEventType.restored;\n                system.app.dispatch_system_event(_event);\n            _event.window.type = WindowEventType.focus_gained;\n                system.app.dispatch_system_event(_event);\n        }\n\n    } //on_visibility_change\n\n    function internal_fallback( message:String ) {\n\n        var text_el : js.html.Element;\n        var overlay_el : js.html.Element;\n\n        text_el = js.Browser.document.createDivElement();\n        overlay_el = js.Browser.document.createDivElement();\n\n        text_el.style.marginLeft = 'auto';\n        text_el.style.marginRight = 'auto';\n        text_el.style.color = '#d3d3d3';\n        text_el.style.marginTop = '5em';\n        text_el.style.fontSize = '1.4em';\n        text_el.style.fontFamily = 'helvetica,sans-serif';\n        text_el.innerHTML = message;\n\n        overlay_el.style.top = '0';\n        overlay_el.style.left = '0';\n        overlay_el.style.width = '100%';\n        overlay_el.style.height = '100%';\n        overlay_el.style.display = 'block';\n        overlay_el.style.minWidth = '100%';\n        overlay_el.style.minHeight = '100%';\n        overlay_el.style.textAlign = 'center';\n        overlay_el.style.position = 'absolute';\n        overlay_el.style.background = 'rgba(1,1,1,0.90)';\n\n        overlay_el.appendChild(text_el);\n        js.Browser.document.body.appendChild(overlay_el);\n\n\n    }\n\n} //Windowing\n\n#end //snow_web\n","package snow.modules.howlerjs;\n\n#if snow_web\n\nimport snow.modules.howlerjs.Howl;\nimport snow.types.Types;\nimport snow.api.Promise;\nimport snow.api.buffers.Uint8Array;\n\ntypedef Sound = snow.modules.howlerjs.sound.Sound;\n\n@:allow(snow.system.audio.Audio)\nclass Audio implements snow.modules.interfaces.Audio {\n\n    var suspended_sounds : Array<snow.system.audio.Sound>;\n    var system : snow.system.audio.Audio;\n    var handles : Map<Howl, Sound>;\n\n    function new( _system:snow.system.audio.Audio ) {\n        system = _system;\n        suspended_sounds = [];\n        handles = new Map();\n    }\n\n    function init() {}\n    function update() {}\n    function destroy() {}\n    function on_event( event:SystemEvent ) {}\n\n    public function suspend() {\n\n        for(sound in handles) {\n            if(sound.playing) {\n                sound.toggle();\n                suspended_sounds.push(sound);\n            }\n        }\n\n    } //suspend\n\n    public function resume() {\n\n        while(suspended_sounds.length > 0) {\n            var sound = suspended_sounds.pop();\n            sound.toggle();\n        }\n\n    } //resume\n\n    function info_from_id(_id:String, ?_format:AudioFormatType) : AudioInfo {\n\n        if(_format == null) {\n            var _ext = haxe.io.Path.extension(_id);\n            _format = switch(_ext) {\n                case 'wav': wav;\n                case 'ogg': ogg;\n                case 'pcm': pcm;\n                case _: unknown;\n            }\n        }\n\n        return {\n            format: _format,\n            id:_id,\n            handle:null,\n            data:null\n        }\n\n    } //info_from_id\n\n    public function create_sound( _id:String, _name:String, _streaming:Bool=false, ?_format:AudioFormatType ) : Promise {\n\n        return new Promise(function(resolve, reject) {\n\n            var _path = system.app.assets.path(_id);\n            var info = info_from_id(_path, _format);\n            var sound = new Sound(system, _name, _streaming);\n\n            info.handle = new Howl({\n                urls: [ _path ],\n                // buffer : _streaming, //:todo: test\n                    //we want an end notification to propagate\n                onend : function() { system.app.audio.module._on_end(info.handle); },\n                    //handle failure\n                onloaderror : function() { reject(Error.error('failed to create sound $_name from $_id')); },\n                    //and we listen for when it's done loading so we can emit\n                onload : function(){\n                    info.handle = untyped __js__('this');\n                    sound.info = info;\n                    handles.set(info.handle, sound);\n                    resolve(sound);\n                }\n            });\n\n        }); //promise\n\n    } //create_sound\n\n    public function create_sound_from_bytes( _name:String, _bytes:Uint8Array, _format:AudioFormatType ) : Sound {\n\n        var _ext = switch(_format) {\n            case AudioFormatType.ogg: 'ogg';\n            case AudioFormatType.wav: 'wav';\n            case AudioFormatType.pcm: throw Error.error('pcm audio format unsupported atm');\n            case AudioFormatType.unknown: throw Error.error('unknown audio format for create_sound_from_bytes ' + _name);\n        }\n\n        var str = '', i = 0, len = _bytes.length;\n        while(i < len) str += String.fromCharCode(_bytes[i++] & 0xff);\n        var b64 = js.Browser.window.btoa(str);\n        var src = 'data:audio/$_ext;base64,$b64';\n\n        var info = info_from_id('bytes;$_name', _format);\n        var sound = new Sound(system, _name, false);\n\n        info.handle = new Howl({\n            urls: [ src ],\n            onend : function() { system.app.audio.module._on_end(info.handle); },\n            onloaderror : function() { throw Error.error('failed to create sound $_name from bytes'); },\n            onload : function(){\n                info.handle = untyped __js__('this');\n                sound.info = info;\n                handles.set(info.handle, sound);\n            }\n        });\n\n        return sound;\n\n    } //create_sound_from_bytes\n\n    //called when a sound ends, due to a bug in chrome with web audio\n    //and howler we increased the duration to a really high number,\n    //see https://github.com/goldfire/howler.js/issues/279\n    //this duration fix from goldfire was implemented in howler locally,\n    //but there is an outstanding bug where on end only fires once, not each loop.\n    //to make it fire each loop (at the cost of a slight jump on loop)\n    //uncomment the stop/play here.\n\n    function _on_end( handle:AudioHandle ) {\n        var sound = handles.get(handle);\n        if(sound != null) {\n            sound.emit('end');\n\n            //:todo: read above\n            // sound.stop();\n            // sound.play();\n        }\n    }\n\n} //AudioSystem\n\n#end //snow_web\n","package snow.system.audio;\n\nimport snow.system.audio.Audio;\nimport snow.types.Types;\nimport snow.api.Debug.*;\n\n\n@:allow(snow.system.audio.Audio)\nclass Sound {\n\n        /** The `Audio` system handling this sound */\n    public var system : Audio;\n        /** The name of this sound */\n    public var name : String = '';\n\n        /** If the sound is playing */\n    @:isVar public var playing  (get, set): Bool = false;\n        /** If the sound is paused */\n    @:isVar public var paused   (get, set): Bool = false;\n        /** If the sound is loaded or ready to use */\n    @:isVar public var loaded   (get, set): Bool = false;\n        /** The `AudioInfo` this sound is created from. When assigning this it will clean up and set itself to this info instead. */\n    @:isVar public var info     (get,set) : AudioInfo;\n        /** The pitch of this sound */\n    @:isVar public var pitch    (get,set) : Float = 1.0;\n        /** The volume of this sound */\n    @:isVar public var volume   (get,set) : Float = 1.0;\n        /** The pan of this sound. Pan only logically works on mono sounds, and is by default 2D sounds  */\n    @:isVar public var pan      (get,set) : Float = 0.0;\n        /** If the sound is looping or not. Use `loop()` to change this. */\n    @:isVar public var looping  (get,set) : Bool = false;\n        /** The current playback position of this sound in `seconds` */\n    @:isVar public var position  (get,set) : Float = 0.0;\n        /** The duration of this sound, in `seconds` */\n    @:isVar public var duration (get,never) : Float = 0.0;\n        /** The length of this sound in `bytes` */\n    @:isVar public var length_bytes   (get, never) : Int = 0;\n        /** The current playback position of this sound in `bytes` */\n    @:isVar public var position_bytes (get, set) : Int = 0;\n\n//Stream specific\n\n        /** Stream: If the sound is a streamed source */\n    @:isVar public var is_stream (default, null): Bool = false;\n\n#if snow_native //:todo:\n        /** `Stream only`: The length of bytes for a single buffer to queue up to stream. default: `176400`, about 1 second in 16 bit mono.*/\n    public var stream_buffer_length : Int;\n        /** `Stream only`: The number of buffers to use in the queue for streaming. default: `4` */\n    public var stream_buffer_count : Int;\n        /** `Stream only`: The get function, assign a function here only if you want to stream data to the source manually, like generative sound. */\n    public var stream_data_get : Int->Int->AudioDataBlob;\n        /** `Stream only`: The seek function, assign a function here only if you want to stream data to the source manually, like generative sound. */\n    public var stream_data_seek : Int->Bool;\n#end //snow_native\n\n//\n\n        /** Create a new Sound instance. Usually not called directly, handled internally by `audio.create` */\n    public function new( _system:Audio, _name:String, _is_stream:Bool=false ) {\n\n        name = _name;\n        system = _system;\n        is_stream = _is_stream;\n\n        #if snow_native //:todo:\n            stream_buffer_length = system.app.config.native.audio_buffer_length;\n            stream_buffer_count = system.app.config.native.audio_buffer_count;\n            stream_data_get = default_stream_data_get;\n            stream_data_seek = default_stream_data_seek;\n        #end //snow_native\n\n    } //new\n\n//\n\n    @:noCompletion public function emit(_event:String) {\n\n        @:privateAccess system.sound_event(this, _event);\n\n    } //emit\n\n        /** Connect a handler to a named event.\n            Current events include `load` and `end`, and will soon be strict typed. */\n    public function on(_event:String, _handler:Sound->Void) {\n\n        system.on(name, _event, _handler);\n\n    } //emit\n\n        /** Disconnect a handler from a named event type, previously connected with `on`. */\n    public function off(_event:String, _handler:Sound->Void) {\n\n        system.off(name, _event, _handler);\n\n    } //off\n\n\n//Functions implemented in subclasses\n\n        /** Play this sound */\n    public function play() { log('Sound:play called in root Sound module. Nothing will happen.'); }\n        /** Loop this sound */\n    public function loop() { log('Sound:loop called in root Sound module. Nothing will happen.'); }\n        /** Stop this sound */\n    public function stop() { log('Sound:stop called in root Sound module. Nothing will happen.'); }\n        /** Pause this sound */\n    public function pause() { log('Sound:pause called in root Sound module. Nothing will happen.'); }\n        /** Destroy this sound and it's data. */\n    public function destroy() { log('Sound:destroy called in root Sound module. Nothing will happen.'); }\n\n// Internal system events\n\n    @:noCompletion public function internal_update() {}\n    @:noCompletion public function internal_play()  {}\n    @:noCompletion public function internal_loop() {}\n    @:noCompletion public function internal_stop() {}\n    @:noCompletion public function internal_pause() {}\n\n//Shared implementations\n\n        /** Toggle this sound */\n    public function toggle() {\n\n        playing = !playing;\n\n        if(playing) {\n            if(looping) {\n                loop();\n            } else {\n                play();\n            }\n        } else {\n            pause();\n        }\n\n    } //toggle\n\n//Streaming API\n\n//:todo:\n#if snow_native\n\n        /** Default data seek implementation for `SoundStream` uses `assets.system.audio_seek_source` */\n    function default_stream_data_seek( _to:Int ) : Bool {\n\n        return system.app.assets.module.audio_seek_source( info, _to );\n\n    } //default_data_seek\n\n        /** Default data get implementation for `SoundStream` uses `assets.system.audio_load_portion` */\n    function default_stream_data_get( _start:Int, _length:Int ) : AudioDataBlob {\n\n        return system.app.assets.module.audio_load_portion( info, _start, _length );\n\n    } //default_data_get\n\n#end //snow_native\n\n//Getters/setters\n\n    function get_playing() : Bool return playing;\n    function get_paused() : Bool return paused;\n    function get_loaded() : Bool return loaded;\n    function get_info() : AudioInfo return info;\n    function set_info( _info:AudioInfo ) : AudioInfo return info = _info;\n    function get_pan() : Float return pan;\n    function get_pitch() : Float return pitch;\n    function get_volume() : Float return volume;\n    function get_looping() : Bool return looping;\n    function get_position() : Float return position;\n    function get_position_bytes() : Int return position_bytes;\n    function get_length_bytes() : Int return length_bytes;\n        //overridden in platform concrete\n    function get_duration() : Float return 0;\n    function set_playing(_playing:Bool) : Bool return playing = _playing;\n    function set_paused(_paused:Bool) : Bool return paused = _paused;\n    function set_loaded(_loaded:Bool) : Bool return loaded = _loaded;\n    function set_pan( _pan:Float ) : Float return pan = _pan;\n    function set_pitch( _pitch:Float ) : Float return pitch = _pitch;\n    function set_volume( _volume:Float ) : Float return volume = _volume;\n    function set_position( _position:Float ) : Float return position = _position;\n    function set_looping( _looping:Bool ) : Bool return looping = _looping;\n    function set_position_bytes(_position_bytes) : Int return position_bytes = _position_bytes;\n\n} //Sound\n","package snow.modules.howlerjs.sound;\n\n#if snow_web\n\nimport snow.types.Types;\n\nimport snow.api.Debug.*;\n\nclass Sound extends snow.system.audio.Sound {\n\n    public function new( _system:snow.system.audio.Audio, _name:String, _is_stream:Bool=false ) {\n\n        super(_system, _name, _is_stream);\n\n    } //new\n\n    override function set_info( _info:AudioInfo ) {\n\n            //if preexisting,\n        if(info != null) {\n            destroy();\n        }\n\n            //flag as done for gc\n        info = null;\n\n                //now\n            if(_info == null) {\n                log(\"not creating sound, info was null\");\n                return info;\n            }\n\n            //store the new sound\n        info = _info;\n        loaded = true;\n\n            _debug('creating sound / ${name} / ${info.id} / ${info.format}');\n\n        return info;\n\n    } //set_info\n\n\n    override function set_pan(_pan:Float) : Float {\n\n        if(info != null && info.handle != null) {\n            info.handle.pos3d(pan);\n        }\n\n        return pan = _pan;\n\n    } //set_pan\n\n    override function set_volume(_volume:Float) : Float {\n\n        if(info != null && info.handle != null) {\n            info.handle.volume(_volume);\n        }\n\n        return volume = _volume;\n\n    } //set_volume\n\n\n    override function set_pitch( _pitch:Float ) : Float {\n\n        // untyped this.info.handle._rate = _pitch;\n        if(info != null && info.handle != null) {\n            info.handle.rate(_pitch);\n        }\n\n        return pitch = _pitch;\n\n    } //set_pitch\n\n    override function set_position( _position:Float ) : Float {\n\n        if(info != null && info.handle != null) {\n            info.handle.pos(_position);\n        }\n\n        return position = _position;\n\n    } //set_position\n\n    override function get_position() : Float {\n\n        if(info != null && info.handle != null) {\n            return info.handle.pos();\n        } //has info\n\n        return position;\n    } //get_position\n\n        //will return 0 if the info is not set yet i.e loading\n    override function get_duration() : Float {\n\n        if(info != null && info.handle != null) {\n            return untyped this.info.handle._duration;\n        } //has info\n\n        return 0;\n\n    } //get_duration\n\n        /** Play this sound */\n    override public function play() {\n\n        if(info != null && info.handle != null) {\n\n            playing = true;\n            looping = false;\n\n            info.handle.loop(false);\n            info.handle.play();\n            ensure_parameters();\n\n        }  //has info\n\n    } //play\n\n        /** Loop this sound */\n    override public function loop() {\n\n        if(info != null && info.handle != null) {\n\n            playing = true;\n            looping = true;\n\n            info.handle.loop(true);\n            info.handle.play();\n            ensure_parameters();\n\n        } //has info\n\n    } //loop\n\n        /** Stop this sound */\n    override public function stop() {\n\n        playing = false;\n\n        if(info != null && info.handle != null) {\n            info.handle.stop();\n        } //\n\n    } //stop\n\n        /** Pause this sound */\n    override public function pause() {\n\n        if(info != null && info.handle != null) {\n            info.handle.pause();\n        } //\n\n    } //pause\n\n        /** Destroy this sound and it's data */\n    override public function destroy() {\n\n        if(info != null && info.handle != null) {\n            info.handle.unload();\n        } //\n\n        system.kill(this);\n\n    } //destroy\n\n//Internal\n\n        /** Ensures the values are up to date when playing a new instance */\n    inline function ensure_parameters() {\n        if(info != null && info.handle != null) {\n            info.handle.rate(pitch);\n            info.handle.volume(volume);\n            info.handle.pos3d(pan);\n        }\n    }\n\n} //Sound\n\n#end //snow_web\n","package snow.modules.opengl.web;\r\n\r\n#if snow_web\r\n\r\nimport js.html.webgl.RenderingContext;\r\n\r\nimport snow.api.buffers.ArrayBuffer;\r\nimport snow.api.buffers.ArrayBufferView;\r\nimport snow.api.buffers.Int32Array;\r\nimport snow.api.buffers.Float32Array;\r\n\r\n\r\ntypedef GLActiveInfo                = js.html.webgl.ActiveInfo;\r\ntypedef GLBuffer                    = js.html.webgl.Buffer;\r\ntypedef GLContextAttributes         = js.html.webgl.ContextAttributes;\r\ntypedef GLFramebuffer               = js.html.webgl.Framebuffer;\r\ntypedef GLProgram                   = js.html.webgl.Program;\r\ntypedef GLRenderbuffer              = js.html.webgl.Renderbuffer;\r\ntypedef GLShader                    = js.html.webgl.Shader;\r\ntypedef GLTexture                   = js.html.webgl.Texture;\r\ntypedef GLUniformLocation           = js.html.webgl.UniformLocation;\r\ntypedef GLShaderPrecisionFormat     = js.html.webgl.ShaderPrecisionFormat;\r\n\r\nclass GL {\r\n\r\n\r\n\r\n    public static var version(get_version, null):Int;\r\n    public static var current_context:RenderingContext;\r\n\r\n//non-spec\r\n\r\n    public static function versionString():String {\r\n\r\n        var ver = current_context.getParameter(VERSION);\r\n        var slver = current_context.getParameter(SHADING_LANGUAGE_VERSION);\r\n        var ren = current_context.getParameter(RENDERER);\r\n        var ven = current_context.getParameter(VENDOR);\r\n\r\n        return \"/ \" + ver + \" / \" + slver + \" / \" + ren + \" / \" + ven + \" /\";\r\n    }\r\n\r\n//spec\r\n\r\n    inline public static function activeTexture(texture:Int):Void\r\n        current_context.activeTexture(texture);\r\n\r\n    inline public static function attachShader(program:GLProgram, shader:GLShader):Void\r\n        current_context.attachShader(program, shader);\r\n\r\n    inline public static function bindAttribLocation(program:GLProgram, index:Int, name:String):Void\r\n        current_context.bindAttribLocation(program, index, name);\r\n\r\n    inline public static function bindBuffer(target:Int, buffer:GLBuffer):Void\r\n        current_context.bindBuffer(target, buffer);\r\n\r\n    inline public static function bindFramebuffer(target:Int, framebuffer:GLFramebuffer):Void\r\n        current_context.bindFramebuffer(target, framebuffer);\r\n\r\n    inline public static function bindRenderbuffer(target:Int, renderbuffer:GLRenderbuffer):Void\r\n        current_context.bindRenderbuffer(target, renderbuffer);\r\n\r\n    inline public static function bindTexture(target:Int, texture:GLTexture):Void\r\n        current_context.bindTexture(target, texture);\r\n\r\n    inline public static function blendColor(red:Float, green:Float, blue:Float, alpha:Float):Void\r\n        current_context.blendColor(red, green, blue, alpha);\r\n\r\n    inline public static function blendEquation(mode:Int):Void\r\n        current_context.blendEquation(mode);\r\n\r\n    inline public static function blendEquationSeparate(modeRGB:Int, modeAlpha:Int):Void\r\n        current_context.blendEquationSeparate(modeRGB, modeAlpha);\r\n\r\n    inline public static function blendFunc(sfactor:Int, dfactor:Int):Void\r\n        current_context.blendFunc(sfactor, dfactor);\r\n\r\n    inline public static function blendFuncSeparate(srcRGB:Int, dstRGB:Int, srcAlpha:Int, dstAlpha:Int):Void\r\n        current_context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n\r\n    inline public static function bufferData(target:Int, data:ArrayBufferView, usage:Int):Void\r\n        current_context.bufferData( target, data, usage );\r\n\r\n    inline public static function bufferSubData(target:Int, offset:Int, data:ArrayBufferView):Void\r\n        current_context.bufferSubData(target, offset, data);\r\n\r\n    inline public static function checkFramebufferStatus(target:Int):Int\r\n        return current_context.checkFramebufferStatus(target);\r\n\r\n    inline public static function clear(mask:Int):Void\r\n        current_context.clear(mask);\r\n\r\n    inline public static function clearColor(red:Float, green:Float, blue:Float, alpha:Float):Void\r\n        current_context.clearColor(red, green, blue, alpha);\r\n\r\n    inline public static function clearDepth(depth:Float):Void\r\n        current_context.clearDepth(depth);\r\n\r\n    inline public static function clearStencil(s:Int):Void\r\n        current_context.clearStencil(s);\r\n\r\n    inline public static function colorMask(red:Bool, green:Bool, blue:Bool, alpha:Bool):Void\r\n        current_context.colorMask(red, green, blue, alpha);\r\n\r\n    inline public static function compileShader(shader:GLShader):Void\r\n        current_context.compileShader(shader);\r\n\r\n    inline public static function compressedTexImage2D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, border:Int, data:ArrayBufferView):Void\r\n        current_context.compressedTexImage2D(target, level, internalformat, width, height, border, data);\r\n\r\n    inline public static function compressedTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, width:Int, height:Int, format:Int, data:ArrayBufferView):Void\r\n        current_context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);\r\n\r\n    inline public static function copyTexImage2D(target:Int, level:Int, internalformat:Int, x:Int, y:Int, width:Int, height:Int, border:Int):Void\r\n        current_context.copyTexImage2D(target, level, internalformat, x, y, width, height, border);\r\n\r\n    inline public static function copyTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, x:Int, y:Int, width:Int, height:Int):Void\r\n        current_context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\r\n\r\n    inline public static function createBuffer():GLBuffer\r\n        return current_context.createBuffer();\r\n\r\n    inline public static function createFramebuffer():GLFramebuffer\r\n        return current_context.createFramebuffer();\r\n\r\n    inline public static function createProgram():GLProgram\r\n        return current_context.createProgram();\r\n\r\n    inline public static function createRenderbuffer():GLRenderbuffer\r\n        return current_context.createRenderbuffer();\r\n\r\n    inline public static function createShader(type:Int):GLShader\r\n        return current_context.createShader(type);\r\n\r\n    inline public static function createTexture():GLTexture\r\n        return current_context.createTexture();\r\n\r\n    inline public static function cullFace(mode:Int):Void\r\n        current_context.cullFace(mode);\r\n\r\n    inline public static function deleteBuffer(buffer:GLBuffer):Void\r\n        current_context.deleteBuffer(buffer);\r\n\r\n    inline public static function deleteFramebuffer(framebuffer:GLFramebuffer):Void\r\n        current_context.deleteFramebuffer(framebuffer);\r\n\r\n    inline public static function deleteProgram(program:GLProgram):Void\r\n        current_context.deleteProgram(program);\r\n\r\n    inline public static function deleteRenderbuffer(renderbuffer:GLRenderbuffer):Void\r\n        current_context.deleteRenderbuffer(renderbuffer);\r\n\r\n    inline public static function deleteShader(shader:GLShader):Void\r\n        current_context.deleteShader(shader);\r\n\r\n    inline public static function deleteTexture(texture:GLTexture):Void\r\n        current_context.deleteTexture(texture);\r\n\r\n    inline public static function depthFunc(func:Int):Void\r\n        current_context.depthFunc(func);\r\n\r\n    inline public static function depthMask(flag:Bool):Void\r\n        current_context.depthMask(flag);\r\n\r\n    inline public static function depthRange(zNear:Float, zFar:Float):Void\r\n        current_context.depthRange(zNear, zFar);\r\n\r\n    inline public static function detachShader(program:GLProgram, shader:GLShader):Void\r\n        current_context.detachShader(program, shader);\r\n\r\n    inline public static function disable(cap:Int):Void\r\n        current_context.disable(cap);\r\n\r\n    inline public static function disableVertexAttribArray(index:Int):Void\r\n        current_context.disableVertexAttribArray(index);\r\n\r\n    inline public static function drawArrays(mode:Int, first:Int, count:Int):Void\r\n        current_context.drawArrays(mode, first, count);\r\n\r\n    inline public static function drawElements(mode:Int, count:Int, type:Int, offset:Int):Void\r\n        current_context.drawElements(mode, count, type, offset);\r\n\r\n    inline public static function enable(cap:Int):Void\r\n        current_context.enable(cap);\r\n\r\n    inline public static function enableVertexAttribArray(index:Int):Void\r\n        current_context.enableVertexAttribArray(index);\r\n\r\n    inline public static function finish():Void\r\n        current_context.finish();\r\n\r\n    inline public static function flush():Void\r\n        current_context.flush();\r\n\r\n    inline public static function framebufferRenderbuffer(target:Int, attachment:Int, renderbuffertarget:Int, renderbuffer:GLRenderbuffer):Void\r\n        current_context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);\r\n\r\n    inline public static function framebufferTexture2D(target:Int, attachment:Int, textarget:Int, texture:GLTexture, level:Int):Void\r\n        current_context.framebufferTexture2D(target, attachment, textarget, texture, level);\r\n\r\n    inline public static function frontFace(mode:Int):Void\r\n        current_context.frontFace(mode);\r\n\r\n    inline public static function generateMipmap(target:Int):Void\r\n        current_context.generateMipmap(target);\r\n\r\n    inline public static function getActiveAttrib(program:GLProgram, index:Int):GLActiveInfo\r\n        return current_context.getActiveAttrib(program, index);\r\n\r\n    inline public static function getActiveUniform(program:GLProgram, index:Int):GLActiveInfo\r\n        return current_context.getActiveUniform(program, index);\r\n\r\n    inline public static function getAttachedShaders(program:GLProgram):Array<GLShader>\r\n        return current_context.getAttachedShaders(program);\r\n\r\n    inline public static function getAttribLocation(program:GLProgram, name:String):Int\r\n        return current_context.getAttribLocation(program, name);\r\n\r\n    inline public static function getBufferParameter(target:Int, pname:Int):Dynamic\r\n        return current_context.getBufferParameter(target, pname);\r\n\r\n    inline public static function getContextAttributes():GLContextAttributes\r\n        return current_context.getContextAttributes();\r\n\r\n    inline public static function getError():Int\r\n        return current_context.getError();\r\n\r\n    inline public static function getExtension(name:String):Dynamic\r\n        return current_context.getExtension(name);\r\n\r\n    inline public static function getFramebufferAttachmentParameter(target:Int, attachment:Int, pname:Int):Dynamic\r\n        return current_context.getFramebufferAttachmentParameter(target, attachment, pname);\r\n\r\n    inline public static function getParameter(pname:Int):Dynamic\r\n        return current_context.getParameter(pname);\r\n\r\n    inline public static function getProgramInfoLog(program:GLProgram):String\r\n        return current_context.getProgramInfoLog(program);\r\n\r\n    inline public static function getProgramParameter(program:GLProgram, pname:Int):Int\r\n        return current_context.getProgramParameter(program, pname);\r\n\r\n    inline public static function getRenderbufferParameter(target:Int, pname:Int):Dynamic\r\n        return current_context.getRenderbufferParameter(target, pname);\r\n\r\n    inline public static function getShaderInfoLog(shader:GLShader):String\r\n        return current_context.getShaderInfoLog(shader);\r\n\r\n    inline public static function getShaderParameter(shader:GLShader, pname:Int):Int\r\n        return current_context.getShaderParameter(shader, pname);\r\n\r\n    inline public static function getShaderPrecisionFormat(shadertype:Int, precisiontype:Int) : GLShaderPrecisionFormat\r\n        return current_context.getShaderPrecisionFormat(shadertype, precisiontype);\r\n\r\n    inline public static function getShaderSource(shader:GLShader):String\r\n        return current_context.getShaderSource(shader);\r\n\r\n    inline public static function getSupportedExtensions() : Array<String>\r\n        return current_context.getSupportedExtensions();\r\n\r\n    inline public static function getTexParameter(target:Int, pname:Int):Dynamic\r\n        return current_context.getTexParameter(target, pname);\r\n\r\n    inline public static function getUniform(program:GLProgram, location:GLUniformLocation):Dynamic\r\n        return current_context.getUniform(program, location);\r\n\r\n    inline public static function getUniformLocation(program:GLProgram, name:String):GLUniformLocation\r\n        return current_context.getUniformLocation(program, name);\r\n\r\n    inline public static function getVertexAttrib(index:Int, pname:Int):Dynamic\r\n        return current_context.getVertexAttrib(index, pname);\r\n\r\n    inline public static function getVertexAttribOffset(index:Int, pname:Int):Int\r\n        return current_context.getVertexAttribOffset(index, pname);\r\n\r\n    inline public static function hint(target:Int, mode:Int):Void\r\n        current_context.hint(target, mode);\r\n\r\n    inline public static function isBuffer(buffer:GLBuffer):Bool\r\n        return current_context.isBuffer(buffer);\r\n\r\n    // This is non-static\r\n    // public function isContextLost():Bool { return false; }\r\n\r\n    inline public static function isEnabled(cap:Int):Bool\r\n        return current_context.isEnabled(cap);\r\n\r\n    inline public static function isFramebuffer(framebuffer:GLFramebuffer):Bool\r\n        return current_context.isFramebuffer(framebuffer);\r\n\r\n    inline public static function isProgram(program:GLProgram):Bool\r\n        return current_context.isProgram(program);\r\n\r\n    inline public static function isRenderbuffer(renderbuffer:GLRenderbuffer):Bool\r\n        return current_context.isRenderbuffer(renderbuffer);\r\n\r\n    inline public static function isShader(shader:GLShader):Bool\r\n        return current_context.isShader(shader);\r\n\r\n    inline public static function isTexture(texture:GLTexture):Bool\r\n        return current_context.isTexture(texture);\r\n\r\n    inline public static function lineWidth(width:Float):Void\r\n        current_context.lineWidth(width);\r\n\r\n    inline public static function linkProgram(program:GLProgram):Void\r\n        current_context.linkProgram(program);\r\n\r\n    inline public static function pixelStorei(pname:Int, param:Int):Void\r\n        current_context.pixelStorei(pname, param);\r\n\r\n    inline public static function polygonOffset(factor:Float, units:Float):Void\r\n        current_context.polygonOffset(factor, units);\r\n\r\n        // TODO: pixels? May need setting to work (canvas.getContext(\"experimental-webgl\", {preserveDrawingBuffer: true});)\r\n    inline public static function readPixels(x:Int, y:Int, width:Int, height:Int, format:Int, type:Int, data:ArrayBufferView):Void\r\n        current_context.readPixels(x, y, width, height, format, type, data);\r\n\r\n    inline public static function renderbufferStorage(target:Int, internalformat:Int, width:Int, height:Int):Void\r\n        current_context.renderbufferStorage(target, internalformat, width, height);\r\n\r\n    inline public static function sampleCoverage(value:Float, invert:Bool):Void\r\n        current_context.sampleCoverage(value, invert);\r\n\r\n    inline public static function scissor(x:Int, y:Int, width:Int, height:Int):Void\r\n        current_context.scissor(x, y, width, height);\r\n\r\n    inline public static function shaderSource(shader:GLShader, source:String):Void\r\n        current_context.shaderSource(shader, source);\r\n\r\n    inline public static function stencilFunc(func:Int, ref:Int, mask:Int):Void\r\n        current_context.stencilFunc(func, ref, mask);\r\n\r\n    inline public static function stencilFuncSeparate(face:Int, func:Int, ref:Int, mask:Int):Void\r\n        current_context.stencilFuncSeparate(face, func, ref, mask);\r\n\r\n    inline public static function stencilMask(mask:Int):Void\r\n        current_context.stencilMask(mask);\r\n\r\n    inline public static function stencilMaskSeparate(face:Int, mask:Int):Void\r\n        current_context.stencilMaskSeparate(face, mask);\r\n\r\n    inline public static function stencilOp(fail:Int, zfail:Int, zpass:Int):Void\r\n        current_context.stencilOp(fail, zfail, zpass);\r\n\r\n    inline public static function stencilOpSeparate(face:Int, fail:Int, zfail:Int, zpass:Int):Void\r\n        current_context.stencilOpSeparate(face, fail, zfail, zpass);\r\n\r\n    inline public static function texImage2D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, border:Int, format:Int, type:Int, data:ArrayBufferView):Void\r\n        current_context.texImage2D(target, level, internalformat, width, height, border, format, type, data);\r\n\r\n    inline public static function texParameterf(target:Int, pname:Int, param:Float):Void\r\n        current_context.texParameterf(target, pname, param);\r\n\r\n    inline public static function texParameteri(target:Int, pname:Int, param:Int):Void\r\n        current_context.texParameteri(target, pname, param);\r\n\r\n    inline public static function texSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, width:Int, height:Int, format:Int, type:Int, data:ArrayBufferView):Void\r\n        current_context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, data);\r\n\r\n    inline public static function uniform1f(location:GLUniformLocation, x:Float):Void\r\n        current_context.uniform1f(location, x);\r\n\r\n    inline public static function uniform1fv(location:GLUniformLocation, data:Float32Array):Void\r\n        current_context.uniform1fv(location, data);\r\n\r\n    inline public static function uniform1i(location:GLUniformLocation, x:Int):Void\r\n        current_context.uniform1i(location, x);\r\n\r\n    inline public static function uniform1iv(location:GLUniformLocation, data:Int32Array):Void\r\n        current_context.uniform1iv(location, data);\r\n\r\n    inline public static function uniform2f(location:GLUniformLocation, x:Float, y:Float):Void\r\n        current_context.uniform2f(location, x, y);\r\n\r\n    inline public static function uniform2fv(location:GLUniformLocation, data:Float32Array):Void\r\n        current_context.uniform2fv(location, data);\r\n\r\n    inline public static function uniform2i(location:GLUniformLocation, x:Int, y:Int):Void\r\n        current_context.uniform2i(location, x, y);\r\n\r\n    inline public static function uniform2iv(location:GLUniformLocation, data:Int32Array):Void\r\n        current_context.uniform2iv(location, data);\r\n\r\n    inline public static function uniform3f(location:GLUniformLocation, x:Float, y:Float, z:Float):Void\r\n        current_context.uniform3f(location, x, y, z);\r\n\r\n    inline public static function uniform3fv(location:GLUniformLocation, data:Float32Array):Void\r\n        current_context.uniform3fv(location, data);\r\n\r\n    inline public static function uniform3i(location:GLUniformLocation, x:Int, y:Int, z:Int):Void\r\n        current_context.uniform3i(location, x, y, z);\r\n\r\n    inline public static function uniform3iv(location:GLUniformLocation, data:Int32Array):Void\r\n        current_context.uniform3iv(location, data);\r\n\r\n    inline public static function uniform4f(location:GLUniformLocation, x:Float, y:Float, z:Float, w:Float):Void\r\n        current_context.uniform4f(location, x, y, z, w);\r\n\r\n    inline public static function uniform4fv(location:GLUniformLocation, data:Float32Array):Void\r\n        current_context.uniform4fv(location, data);\r\n\r\n    inline public static function uniform4i(location:GLUniformLocation, x:Int, y:Int, z:Int, w:Int):Void\r\n        current_context.uniform4i(location, x, y, z, w);\r\n\r\n    inline public static function uniform4iv(location:GLUniformLocation, data:Int32Array):Void\r\n        current_context.uniform4iv(location, data);\r\n\r\n    inline public static function uniformMatrix2fv(location:GLUniformLocation, transpose:Bool, data:Float32Array):Void\r\n        current_context.uniformMatrix2fv(location, transpose, data);\r\n\r\n    inline public static function uniformMatrix3fv(location:GLUniformLocation, transpose:Bool, data:Float32Array):Void\r\n        current_context.uniformMatrix3fv(location, transpose, data);\r\n\r\n    inline public static function uniformMatrix4fv(location:GLUniformLocation, transpose:Bool, data:Float32Array):Void\r\n        current_context.uniformMatrix4fv(location, transpose, data);\r\n\r\n    inline public static function useProgram(program:GLProgram):Void\r\n        current_context.useProgram(program);\r\n\r\n    inline public static function validateProgram(program:GLProgram):Void\r\n        current_context.validateProgram(program);\r\n\r\n    inline public static function vertexAttrib1f(indx:Int, x:Float):Void\r\n        current_context.vertexAttrib1f(indx, x);\r\n\r\n    inline public static function vertexAttrib1fv(indx:Int, data:Float32Array):Void\r\n        current_context.vertexAttrib1fv(indx, data);\r\n\r\n    inline public static function vertexAttrib2f(indx:Int, x:Float, y:Float):Void\r\n        current_context.vertexAttrib2f(indx, x, y);\r\n\r\n    inline public static function vertexAttrib2fv(indx:Int, data:Float32Array):Void\r\n        current_context.vertexAttrib2fv(indx, data);\r\n\r\n    inline public static function vertexAttrib3f(indx:Int, x:Float, y:Float, z:Float):Void\r\n        current_context.vertexAttrib3f(indx, x, y, z);\r\n\r\n    inline public static function vertexAttrib3fv(indx:Int, data:Float32Array):Void\r\n        current_context.vertexAttrib3fv(indx, data);\r\n\r\n    inline public static function vertexAttrib4f(indx:Int, x:Float, y:Float, z:Float, w:Float):Void\r\n        current_context.vertexAttrib4f(indx, x, y, z, w);\r\n\r\n    inline public static function vertexAttrib4fv(indx:Int, data:Float32Array):Void\r\n        current_context.vertexAttrib4fv(indx, data);\r\n\r\n    inline public static function vertexAttribPointer(indx:Int, size:Int, type:Int, normalized:Bool, stride:Int, offset:Int):Void\r\n        current_context.vertexAttribPointer(indx, size, type, normalized, stride, offset);\r\n\r\n    inline public static function viewport(x:Int, y:Int, width:Int, height:Int):Void\r\n        current_context.viewport(x, y, width, height);\r\n\r\n\r\n// getters/setters\r\n\r\n    static function get_version():Int { return RenderingContext.VERSION; }\r\n\r\n//defines\r\n\r\n    /* ClearBufferMask */\r\n    public static inline var DEPTH_BUFFER_BIT               = 0x00000100;\r\n    public static inline var STENCIL_BUFFER_BIT             = 0x00000400;\r\n    public static inline var COLOR_BUFFER_BIT               = 0x00004000;\r\n\r\n    /* BeginMode */\r\n    public static inline var POINTS                         = 0x0000;\r\n    public static inline var LINES                          = 0x0001;\r\n    public static inline var LINE_LOOP                      = 0x0002;\r\n    public static inline var LINE_STRIP                     = 0x0003;\r\n    public static inline var TRIANGLES                      = 0x0004;\r\n    public static inline var TRIANGLE_STRIP                 = 0x0005;\r\n    public static inline var TRIANGLE_FAN                   = 0x0006;\r\n\r\n    /* AlphaFunction(not supported in ES20) */\r\n    /*      NEVER */\r\n    /*      LESS */\r\n    /*      EQUAL */\r\n    /*      LEQUAL */\r\n    /*      GREATER */\r\n    /*      NOTEQUAL */\r\n    /*      GEQUAL */\r\n    /*      ALWAYS */\r\n\r\n    /* BlendingFactorDest */\r\n    public static inline var ZERO                           = 0;\r\n    public static inline var ONE                            = 1;\r\n    public static inline var SRC_COLOR                      = 0x0300;\r\n    public static inline var ONE_MINUS_SRC_COLOR            = 0x0301;\r\n    public static inline var SRC_ALPHA                      = 0x0302;\r\n    public static inline var ONE_MINUS_SRC_ALPHA            = 0x0303;\r\n    public static inline var DST_ALPHA                      = 0x0304;\r\n    public static inline var ONE_MINUS_DST_ALPHA            = 0x0305;\r\n\r\n    /* BlendingFactorSrc */\r\n    /*      ZERO */\r\n    /*      ONE */\r\n    public static inline var DST_COLOR                      = 0x0306;\r\n    public static inline var ONE_MINUS_DST_COLOR            = 0x0307;\r\n    public static inline var SRC_ALPHA_SATURATE             = 0x0308;\r\n    /*      SRC_ALPHA */\r\n    /*      ONE_MINUS_SRC_ALPHA */\r\n    /*      DST_ALPHA */\r\n    /*      ONE_MINUS_DST_ALPHA */\r\n\r\n    /* BlendEquationSeparate */\r\n    public static inline var FUNC_ADD                       = 0x8006;\r\n    public static inline var BLEND_EQUATION                 = 0x8009;\r\n    public static inline var BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */\r\n    public static inline var BLEND_EQUATION_ALPHA           = 0x883D;\r\n\r\n    /* BlendSubtract */\r\n    public static inline var FUNC_SUBTRACT                  = 0x800A;\r\n    public static inline var FUNC_REVERSE_SUBTRACT          = 0x800B;\r\n\r\n    /* Separate Blend Functions */\r\n    public static inline var BLEND_DST_RGB                  = 0x80C8;\r\n    public static inline var BLEND_SRC_RGB                  = 0x80C9;\r\n    public static inline var BLEND_DST_ALPHA                = 0x80CA;\r\n    public static inline var BLEND_SRC_ALPHA                = 0x80CB;\r\n    public static inline var CONSTANT_COLOR                 = 0x8001;\r\n    public static inline var ONE_MINUS_CONSTANT_COLOR       = 0x8002;\r\n    public static inline var CONSTANT_ALPHA                 = 0x8003;\r\n    public static inline var ONE_MINUS_CONSTANT_ALPHA       = 0x8004;\r\n    public static inline var BLEND_COLOR                    = 0x8005;\r\n\r\n    /* GLBuffer Objects */\r\n    public static inline var ARRAY_BUFFER                   = 0x8892;\r\n    public static inline var ELEMENT_ARRAY_BUFFER           = 0x8893;\r\n    public static inline var ARRAY_BUFFER_BINDING           = 0x8894;\r\n    public static inline var ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;\r\n\r\n    public static inline var STREAM_DRAW                    = 0x88E0;\r\n    public static inline var STATIC_DRAW                    = 0x88E4;\r\n    public static inline var DYNAMIC_DRAW                   = 0x88E8;\r\n\r\n    public static inline var BUFFER_SIZE                    = 0x8764;\r\n    public static inline var BUFFER_USAGE                   = 0x8765;\r\n\r\n    public static inline var CURRENT_VERTEX_ATTRIB          = 0x8626;\r\n\r\n    /* CullFaceMode */\r\n    public static inline var FRONT                          = 0x0404;\r\n    public static inline var BACK                           = 0x0405;\r\n    public static inline var FRONT_AND_BACK                 = 0x0408;\r\n\r\n    /* DepthFunction */\r\n    /*      NEVER */\r\n    /*      LESS */\r\n    /*      EQUAL */\r\n    /*      LEQUAL */\r\n    /*      GREATER */\r\n    /*      NOTEQUAL */\r\n    /*      GEQUAL */\r\n    /*      ALWAYS */\r\n\r\n    /* EnableCap */\r\n    /* TEXTURE_2D */\r\n    public static inline var CULL_FACE                      = 0x0B44;\r\n    public static inline var BLEND                          = 0x0BE2;\r\n    public static inline var DITHER                         = 0x0BD0;\r\n    public static inline var STENCIL_TEST                   = 0x0B90;\r\n    public static inline var DEPTH_TEST                     = 0x0B71;\r\n    public static inline var SCISSOR_TEST                   = 0x0C11;\r\n    public static inline var POLYGON_OFFSET_FILL            = 0x8037;\r\n    public static inline var SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;\r\n    public static inline var SAMPLE_COVERAGE                = 0x80A0;\r\n\r\n    /* ErrorCode */\r\n    public static inline var NO_ERROR                       = 0;\r\n    public static inline var INVALID_ENUM                   = 0x0500;\r\n    public static inline var INVALID_VALUE                  = 0x0501;\r\n    public static inline var INVALID_OPERATION              = 0x0502;\r\n    public static inline var OUT_OF_MEMORY                  = 0x0505;\r\n\r\n    /* FrontFaceDirection */\r\n    public static inline var CW                             = 0x0900;\r\n    public static inline var CCW                            = 0x0901;\r\n\r\n    /* GetPName */\r\n    public static inline var LINE_WIDTH                     = 0x0B21;\r\n    public static inline var ALIASED_POINT_SIZE_RANGE       = 0x846D;\r\n    public static inline var ALIASED_LINE_WIDTH_RANGE       = 0x846E;\r\n    public static inline var CULL_FACE_MODE                 = 0x0B45;\r\n    public static inline var FRONT_FACE                     = 0x0B46;\r\n    public static inline var DEPTH_RANGE                    = 0x0B70;\r\n    public static inline var DEPTH_WRITEMASK                = 0x0B72;\r\n    public static inline var DEPTH_CLEAR_VALUE              = 0x0B73;\r\n    public static inline var DEPTH_FUNC                     = 0x0B74;\r\n    public static inline var STENCIL_CLEAR_VALUE            = 0x0B91;\r\n    public static inline var STENCIL_FUNC                   = 0x0B92;\r\n    public static inline var STENCIL_FAIL                   = 0x0B94;\r\n    public static inline var STENCIL_PASS_DEPTH_FAIL        = 0x0B95;\r\n    public static inline var STENCIL_PASS_DEPTH_PASS        = 0x0B96;\r\n    public static inline var STENCIL_REF                    = 0x0B97;\r\n    public static inline var STENCIL_VALUE_MASK             = 0x0B93;\r\n    public static inline var STENCIL_WRITEMASK              = 0x0B98;\r\n    public static inline var STENCIL_BACK_FUNC              = 0x8800;\r\n    public static inline var STENCIL_BACK_FAIL              = 0x8801;\r\n    public static inline var STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;\r\n    public static inline var STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;\r\n    public static inline var STENCIL_BACK_REF               = 0x8CA3;\r\n    public static inline var STENCIL_BACK_VALUE_MASK        = 0x8CA4;\r\n    public static inline var STENCIL_BACK_WRITEMASK         = 0x8CA5;\r\n    public static inline var VIEWPORT                       = 0x0BA2;\r\n    public static inline var SCISSOR_BOX                    = 0x0C10;\r\n    /*      SCISSOR_TEST */\r\n    public static inline var COLOR_CLEAR_VALUE              = 0x0C22;\r\n    public static inline var COLOR_WRITEMASK                = 0x0C23;\r\n    public static inline var UNPACK_ALIGNMENT               = 0x0CF5;\r\n    public static inline var PACK_ALIGNMENT                 = 0x0D05;\r\n    public static inline var MAX_TEXTURE_SIZE               = 0x0D33;\r\n    public static inline var MAX_VIEWPORT_DIMS              = 0x0D3A;\r\n    public static inline var SUBPIXEL_BITS                  = 0x0D50;\r\n    public static inline var RED_BITS                       = 0x0D52;\r\n    public static inline var GREEN_BITS                     = 0x0D53;\r\n    public static inline var BLUE_BITS                      = 0x0D54;\r\n    public static inline var ALPHA_BITS                     = 0x0D55;\r\n    public static inline var DEPTH_BITS                     = 0x0D56;\r\n    public static inline var STENCIL_BITS                   = 0x0D57;\r\n    public static inline var POLYGON_OFFSET_UNITS           = 0x2A00;\r\n    /*      POLYGON_OFFSET_FILL */\r\n    public static inline var POLYGON_OFFSET_FACTOR          = 0x8038;\r\n    public static inline var TEXTURE_BINDING_2D             = 0x8069;\r\n    public static inline var SAMPLE_BUFFERS                 = 0x80A8;\r\n    public static inline var SAMPLES                        = 0x80A9;\r\n    public static inline var SAMPLE_COVERAGE_VALUE          = 0x80AA;\r\n    public static inline var SAMPLE_COVERAGE_INVERT         = 0x80AB;\r\n\r\n    /* GetTextureParameter */\r\n    /*      TEXTURE_MAG_FILTER */\r\n    /*      TEXTURE_MIN_FILTER */\r\n    /*      TEXTURE_WRAP_S */\r\n    /*      TEXTURE_WRAP_T */\r\n\r\n    public static inline var COMPRESSED_TEXTURE_FORMATS     = 0x86A3;\r\n\r\n    /* HintMode */\r\n    public static inline var DONT_CARE                      = 0x1100;\r\n    public static inline var FASTEST                        = 0x1101;\r\n    public static inline var NICEST                         = 0x1102;\r\n\r\n    /* HintTarget */\r\n    public static inline var GENERATE_MIPMAP_HINT            = 0x8192;\r\n\r\n    /* DataType */\r\n    public static inline var BYTE                           = 0x1400;\r\n    public static inline var UNSIGNED_BYTE                  = 0x1401;\r\n    public static inline var SHORT                          = 0x1402;\r\n    public static inline var UNSIGNED_SHORT                 = 0x1403;\r\n    public static inline var INT                            = 0x1404;\r\n    public static inline var UNSIGNED_INT                   = 0x1405;\r\n    public static inline var FLOAT                          = 0x1406;\r\n\r\n    /* PixelFormat */\r\n    public static inline var DEPTH_COMPONENT                = 0x1902;\r\n    public static inline var ALPHA                          = 0x1906;\r\n    public static inline var RGB                            = 0x1907;\r\n    public static inline var RGBA                           = 0x1908;\r\n    public static inline var LUMINANCE                      = 0x1909;\r\n    public static inline var LUMINANCE_ALPHA                = 0x190A;\r\n\r\n    /* PixelType */\r\n    /*      UNSIGNED_BYTE */\r\n    public static inline var UNSIGNED_SHORT_4_4_4_4         = 0x8033;\r\n    public static inline var UNSIGNED_SHORT_5_5_5_1         = 0x8034;\r\n    public static inline var UNSIGNED_SHORT_5_6_5           = 0x8363;\r\n\r\n    /* Shaders */\r\n    public static inline var FRAGMENT_SHADER                  = 0x8B30;\r\n    public static inline var VERTEX_SHADER                    = 0x8B31;\r\n    public static inline var MAX_VERTEX_ATTRIBS               = 0x8869;\r\n    public static inline var MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;\r\n    public static inline var MAX_VARYING_VECTORS              = 0x8DFC;\r\n    public static inline var MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\r\n    public static inline var MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;\r\n    public static inline var MAX_TEXTURE_IMAGE_UNITS          = 0x8872;\r\n    public static inline var MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;\r\n    public static inline var SHADER_TYPE                      = 0x8B4F;\r\n    public static inline var DELETE_STATUS                    = 0x8B80;\r\n    public static inline var LINK_STATUS                      = 0x8B82;\r\n    public static inline var VALIDATE_STATUS                  = 0x8B83;\r\n    public static inline var ATTACHED_SHADERS                 = 0x8B85;\r\n    public static inline var ACTIVE_UNIFORMS                  = 0x8B86;\r\n    public static inline var ACTIVE_ATTRIBUTES                = 0x8B89;\r\n    public static inline var SHADING_LANGUAGE_VERSION         = 0x8B8C;\r\n    public static inline var CURRENT_PROGRAM                  = 0x8B8D;\r\n\r\n    /* StencilFunction */\r\n    public static inline var NEVER                          = 0x0200;\r\n    public static inline var LESS                           = 0x0201;\r\n    public static inline var EQUAL                          = 0x0202;\r\n    public static inline var LEQUAL                         = 0x0203;\r\n    public static inline var GREATER                        = 0x0204;\r\n    public static inline var NOTEQUAL                       = 0x0205;\r\n    public static inline var GEQUAL                         = 0x0206;\r\n    public static inline var ALWAYS                         = 0x0207;\r\n\r\n    /* StencilOp */\r\n    /*      ZERO */\r\n    public static inline var KEEP                           = 0x1E00;\r\n    public static inline var REPLACE                        = 0x1E01;\r\n    public static inline var INCR                           = 0x1E02;\r\n    public static inline var DECR                           = 0x1E03;\r\n    public static inline var INVERT                         = 0x150A;\r\n    public static inline var INCR_WRAP                      = 0x8507;\r\n    public static inline var DECR_WRAP                      = 0x8508;\r\n\r\n    /* StringName */\r\n    public static inline var VENDOR                         = 0x1F00;\r\n    public static inline var RENDERER                       = 0x1F01;\r\n    public static inline var VERSION                        = 0x1F02;\r\n\r\n    /* TextureMagFilter */\r\n    public static inline var NEAREST                        = 0x2600;\r\n    public static inline var LINEAR                         = 0x2601;\r\n\r\n    /* TextureMinFilter */\r\n    /*      NEAREST */\r\n    /*      LINEAR */\r\n    public static inline var NEAREST_MIPMAP_NEAREST         = 0x2700;\r\n    public static inline var LINEAR_MIPMAP_NEAREST          = 0x2701;\r\n    public static inline var NEAREST_MIPMAP_LINEAR          = 0x2702;\r\n    public static inline var LINEAR_MIPMAP_LINEAR           = 0x2703;\r\n\r\n    /* TextureParameterName */\r\n    public static inline var TEXTURE_MAG_FILTER             = 0x2800;\r\n    public static inline var TEXTURE_MIN_FILTER             = 0x2801;\r\n    public static inline var TEXTURE_WRAP_S                 = 0x2802;\r\n    public static inline var TEXTURE_WRAP_T                 = 0x2803;\r\n\r\n    /* TextureTarget */\r\n    public static inline var TEXTURE_2D                     = 0x0DE1;\r\n    public static inline var TEXTURE                        = 0x1702;\r\n\r\n    public static inline var TEXTURE_CUBE_MAP               = 0x8513;\r\n    public static inline var TEXTURE_BINDING_CUBE_MAP       = 0x8514;\r\n    public static inline var TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\r\n    public static inline var TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\r\n    public static inline var TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\r\n    public static inline var TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\r\n    public static inline var TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\r\n    public static inline var TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;\r\n    public static inline var MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;\r\n\r\n    /* TextureUnit */\r\n    public static inline var TEXTURE0                       = 0x84C0;\r\n    public static inline var TEXTURE1                       = 0x84C1;\r\n    public static inline var TEXTURE2                       = 0x84C2;\r\n    public static inline var TEXTURE3                       = 0x84C3;\r\n    public static inline var TEXTURE4                       = 0x84C4;\r\n    public static inline var TEXTURE5                       = 0x84C5;\r\n    public static inline var TEXTURE6                       = 0x84C6;\r\n    public static inline var TEXTURE7                       = 0x84C7;\r\n    public static inline var TEXTURE8                       = 0x84C8;\r\n    public static inline var TEXTURE9                       = 0x84C9;\r\n    public static inline var TEXTURE10                      = 0x84CA;\r\n    public static inline var TEXTURE11                      = 0x84CB;\r\n    public static inline var TEXTURE12                      = 0x84CC;\r\n    public static inline var TEXTURE13                      = 0x84CD;\r\n    public static inline var TEXTURE14                      = 0x84CE;\r\n    public static inline var TEXTURE15                      = 0x84CF;\r\n    public static inline var TEXTURE16                      = 0x84D0;\r\n    public static inline var TEXTURE17                      = 0x84D1;\r\n    public static inline var TEXTURE18                      = 0x84D2;\r\n    public static inline var TEXTURE19                      = 0x84D3;\r\n    public static inline var TEXTURE20                      = 0x84D4;\r\n    public static inline var TEXTURE21                      = 0x84D5;\r\n    public static inline var TEXTURE22                      = 0x84D6;\r\n    public static inline var TEXTURE23                      = 0x84D7;\r\n    public static inline var TEXTURE24                      = 0x84D8;\r\n    public static inline var TEXTURE25                      = 0x84D9;\r\n    public static inline var TEXTURE26                      = 0x84DA;\r\n    public static inline var TEXTURE27                      = 0x84DB;\r\n    public static inline var TEXTURE28                      = 0x84DC;\r\n    public static inline var TEXTURE29                      = 0x84DD;\r\n    public static inline var TEXTURE30                      = 0x84DE;\r\n    public static inline var TEXTURE31                      = 0x84DF;\r\n    public static inline var ACTIVE_TEXTURE                 = 0x84E0;\r\n\r\n    /* TextureWrapMode */\r\n    public static inline var REPEAT                         = 0x2901;\r\n    public static inline var CLAMP_TO_EDGE                  = 0x812F;\r\n    public static inline var MIRRORED_REPEAT                = 0x8370;\r\n\r\n    /* Uniform Types */\r\n    public static inline var FLOAT_VEC2                     = 0x8B50;\r\n    public static inline var FLOAT_VEC3                     = 0x8B51;\r\n    public static inline var FLOAT_VEC4                     = 0x8B52;\r\n    public static inline var INT_VEC2                       = 0x8B53;\r\n    public static inline var INT_VEC3                       = 0x8B54;\r\n    public static inline var INT_VEC4                       = 0x8B55;\r\n    public static inline var BOOL                           = 0x8B56;\r\n    public static inline var BOOL_VEC2                      = 0x8B57;\r\n    public static inline var BOOL_VEC3                      = 0x8B58;\r\n    public static inline var BOOL_VEC4                      = 0x8B59;\r\n    public static inline var FLOAT_MAT2                     = 0x8B5A;\r\n    public static inline var FLOAT_MAT3                     = 0x8B5B;\r\n    public static inline var FLOAT_MAT4                     = 0x8B5C;\r\n    public static inline var SAMPLER_2D                     = 0x8B5E;\r\n    public static inline var SAMPLER_CUBE                   = 0x8B60;\r\n\r\n    /* Vertex Arrays */\r\n    public static inline var VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\r\n\r\n    /* Point Size */\r\n    public static inline var VERTEX_PROGRAM_POINT_SIZE       = 0x8642;\r\n    public static inline var POINT_SPRITE                    = 0x8861;\r\n\r\n    /* GLShader Source */\r\n    public static inline var COMPILE_STATUS                 = 0x8B81;\r\n\r\n    /* GLShader Precision-Specified Types */\r\n    public static inline var LOW_FLOAT                      = 0x8DF0;\r\n    public static inline var MEDIUM_FLOAT                   = 0x8DF1;\r\n    public static inline var HIGH_FLOAT                     = 0x8DF2;\r\n    public static inline var LOW_INT                        = 0x8DF3;\r\n    public static inline var MEDIUM_INT                     = 0x8DF4;\r\n    public static inline var HIGH_INT                       = 0x8DF5;\r\n\r\n    /* GLFramebuffer Object. */\r\n    public static inline var FRAMEBUFFER                    = 0x8D40;\r\n    public static inline var RENDERBUFFER                   = 0x8D41;\r\n\r\n    public static inline var RGBA4                          = 0x8056;\r\n    public static inline var RGB5_A1                        = 0x8057;\r\n    public static inline var RGB565                         = 0x8D62;\r\n    public static inline var DEPTH_COMPONENT16              = 0x81A5;\r\n    public static inline var STENCIL_INDEX                  = 0x1901;\r\n    public static inline var STENCIL_INDEX8                 = 0x8D48;\r\n    public static inline var DEPTH_STENCIL                  = 0x84F9;\r\n\r\n    public static inline var RENDERBUFFER_WIDTH             = 0x8D42;\r\n    public static inline var RENDERBUFFER_HEIGHT            = 0x8D43;\r\n    public static inline var RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;\r\n    public static inline var RENDERBUFFER_RED_SIZE          = 0x8D50;\r\n    public static inline var RENDERBUFFER_GREEN_SIZE        = 0x8D51;\r\n    public static inline var RENDERBUFFER_BLUE_SIZE         = 0x8D52;\r\n    public static inline var RENDERBUFFER_ALPHA_SIZE        = 0x8D53;\r\n    public static inline var RENDERBUFFER_DEPTH_SIZE        = 0x8D54;\r\n    public static inline var RENDERBUFFER_STENCIL_SIZE      = 0x8D55;\r\n\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\r\n\r\n    public static inline var COLOR_ATTACHMENT0              = 0x8CE0;\r\n    public static inline var DEPTH_ATTACHMENT               = 0x8D00;\r\n    public static inline var STENCIL_ATTACHMENT             = 0x8D20;\r\n    public static inline var DEPTH_STENCIL_ATTACHMENT       = 0x821A;\r\n\r\n    public static inline var NONE                           = 0;\r\n\r\n    public static inline var FRAMEBUFFER_COMPLETE                      = 0x8CD5;\r\n    public static inline var FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;\r\n    public static inline var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\r\n    public static inline var FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;\r\n    public static inline var FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;\r\n\r\n    public static inline var FRAMEBUFFER_BINDING            = 0x8CA6;\r\n    public static inline var RENDERBUFFER_BINDING           = 0x8CA7;\r\n    public static inline var MAX_RENDERBUFFER_SIZE          = 0x84E8;\r\n\r\n    public static inline var INVALID_FRAMEBUFFER_OPERATION  = 0x0506;\r\n\r\n    /* WebGL-specific enums */\r\n    public static inline var UNPACK_FLIP_Y_WEBGL            = 0x9240;\r\n    public static inline var UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\r\n    public static inline var CONTEXT_LOST_WEBGL             = 0x9242;\r\n    public static inline var UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\r\n    public static inline var BROWSER_DEFAULT_WEBGL          = 0x9244;\r\n\r\n\r\n\r\n}\r\n\r\n#end //snow_web\r\n","package snow.system.assets;\n\nimport snow.system.assets.Asset;\nimport snow.system.assets.Assets;\nimport snow.types.Types;\nimport snow.api.buffers.Uint8Array;\nimport snow.api.Promise;\nimport snow.api.Debug.*;\n\n\n/**  An asset base class. Get assets from the `app.assets` */\nclass Asset {\n\n        /** The asset system */\n    public var system : Assets;\n        /** The id of this asset, i.e `assets/image.png` */\n    public var id : String;\n        /** True if this asset has completely loaded. */\n    public var loaded : Bool = false;\n        /** A convenience type id when dealing with the base class.\n            This is an Int because it can be any number for custom types,\n            by default uses AssetType for the base types. */\n    public var type : Int;\n\n\n        /** Called from subclasses, by `app.assets` */\n    public function new( _system:Assets, _id:String, _type:Int=0 ) {\n\n        assertnull( _id );\n        assertnull( _system );\n\n        system = _system;\n        type = _type;\n        id = _id;\n\n    } //new\n\n        /** Implemented by subclasses to clean up their data and references. */\n    public function destroy() {\n\n    }\n\n} //Asset\n\n\n//Image\n\n\n\n    class AssetImage extends snow.system.assets.Asset {\n\n        public var image (default,set): ImageInfo;\n\n        public function new(_system:Assets, _id:String, _image:ImageInfo) {\n\n            super(_system, _id, AssetType.image);\n            image = _image;\n\n        } //new\n\n        //Public API\n\n                /** Reloads the bytes from the stored id, using the default processor, returning a promise for the asset. */\n            public function reload() : Promise {\n\n                loaded = false;\n\n                return new Promise(function(resolve, reject) {\n\n                    var _load = system.app.io.data_flow(system.path(id), provider);\n\n                    _load.then(\n                        function(_image:ImageInfo){\n                            image = _image;\n                            resolve(this);\n                        }\n                    ).error(reject);\n\n                }); //promise\n\n            } //reload\n\n            override public function destroy() {\n                image = null;\n            }\n\n                /** Reload the asset with from bytes */\n            public function reload_from_bytes(_bytes:Uint8Array) {\n\n                loaded = false;\n\n                return new Promise(function(resolve, reject){\n\n                    var _load = system.module.image_info_from_bytes(id, _bytes);\n\n                    _load.then(function(_image:ImageInfo){\n                        image = _image;\n                        resolve(this);\n                    }).error(reject);\n\n                });\n\n            } //reload_from_bytes\n\n                /** Reload the asset from already decoded pixels */\n            public function reload_from_pixels(_width:Int, _height:Int, _pixels:Uint8Array) {\n\n                loaded = false;\n\n                image = system.module.image_info_from_pixels(id, _width, _height, _pixels);\n\n            } //reload_from_bytes\n\n        //Public Static API\n\n            public static function load(_system:Assets, _id:String) : Promise {\n\n                assertnull( _id );\n                assertnull( _system );\n\n                return new AssetImage(_system, _id, null).reload();\n\n            } //load\n\n            public static function load_from_bytes(_system:Assets, _id:String, _bytes:Uint8Array) : Promise {\n\n                assertnull( _id );\n                assertnull( _bytes );\n                assertnull( _system );\n\n                return new AssetImage(_system, _id, null).reload_from_bytes(_bytes);\n\n            } //load_from_bytes\n\n            public static function load_from_pixels(_system:Assets, _id:String, _width:Int, _height:Int, _pixels:Uint8Array) : AssetImage {\n\n                assertnull( _id );\n                assertnull( _pixels );\n                assertnull( _system );\n\n                var info = _system.module.image_info_from_pixels(_id, _width, _height, _pixels);\n\n                return new AssetImage(_system, _id, info);\n\n            } //load_from_pixels\n\n                /** A default io provider, using image_load_info from the asset module.\n                    Promises ImageInfo. Takes an asset path, not an asset id (uses assets.path(id))*/\n            public static function provider(_app:snow.Snow, _path:String) : Promise {\n\n                return _app.assets.module.image_load_info(_path);\n\n            } //provider\n\n                /** A convenience io processor, using image_info_from_bytes, from the asset module. Promises ImageInfo */\n            public static function processor(_app:snow.Snow, _id:String, _data:Uint8Array) : Promise {\n\n                if(_data == null) return Promise.reject(Error.error(\"AssetImage processor: data was null\"));\n\n                return _app.assets.module.image_info_from_bytes(_id, _data);\n\n            } //load\n\n        //Internal\n\n                /** Set the image contained to a new value */\n            function set_image(_image:ImageInfo) {\n\n                loaded = _image != null;\n                return image = _image;\n\n            } //set_image\n\n    } //AssetImage\n\n\n//Bytes\n\n\n    class AssetBytes extends Asset {\n\n        public var bytes (default,set): Uint8Array;\n\n        public function new(_system:Assets, _id:String, _bytes:Uint8Array) {\n\n            super(_system, _id, AssetType.bytes);\n            bytes = _bytes;\n\n        } //new\n\n        //Public API\n\n                /** Reloads the bytes from it's stored id, using the default processor, returning a promise for the asset. */\n            public function reload() : Promise {\n\n                return new Promise(function(resolve, reject) {\n\n                    system.app.io.data_flow(system.path(id)).then(function(_bytes:Uint8Array){\n\n                        bytes = _bytes;\n                        resolve(this);\n\n                    }).error(reject);\n\n                }); //promise\n\n            } //reload\n\n            override public function destroy() {\n                bytes = null;\n            }\n\n        //Static API\n\n                /** Create a new AssetBytes from an id, which returns a promise for the asset. */\n            public static function load( _system:Assets, _id:String ) : Promise {\n\n                return new AssetBytes(_system, _id, null).reload();\n\n            } //load\n\n\n        //Internal\n\n                /** Set the bytes contained to a new value */\n            function set_bytes(_bytes:Uint8Array) {\n\n                loaded = _bytes != null;\n                return bytes = _bytes;\n\n            } //set_bytes\n\n    } //AssetBytes\n\n\n//Text\n\n\n    class AssetText extends Asset {\n\n        public var text (default,set): String;\n\n        public function new(_system:Assets, _id:String, _text:String) {\n\n            super(_system, _id, AssetType.text);\n            text = _text;\n\n        } //new\n\n        //Public API\n\n                /** Reloads the text from it's stored id, returning a promise for the asset. */\n            public function reload() : Promise {\n\n                return new Promise(function(resolve, reject) {\n\n                    system.app.io.data_flow(system.path(id), processor).then(function(_text:String){\n\n                        text = _text;\n                        resolve(this);\n\n                    }).error(reject);\n\n                }); //promise\n\n            } //reload\n\n            override public function destroy() {\n                text = null;\n            }\n\n        //Static API\n\n                /** Create a new AssetText from an id, which returns a promise for the asset. */\n            public static function load( _system:Assets, _id:String ) : Promise {\n\n                return new AssetText(_system, _id, null).reload();\n\n            } //load\n\n                /** A default text processor for the data processor API */\n            public static function processor(_app:snow.Snow, _id:String, _data:Uint8Array) : Promise {\n\n                if(_data == null) return Promise.reject(Error.error(\"AssetText processor: data was null\"));\n\n                return Promise.resolve(_data.toBytes().toString());\n\n            } //processor\n\n        //Internal\n\n                /** Set the text contained to a new value */\n            function set_text(_text:String) {\n\n                loaded = _text != null;\n                return text = _text;\n\n            } //set_text\n\n    } //AssetText\n\n//JSON\n\n    class AssetJSON extends Asset {\n\n        /** The json data stored in the asset */\n        public var json (default,set): Dynamic;\n\n        public function new( _system:snow.system.assets.Assets, _id:String, _json:Dynamic ) {\n\n            super(_system, _id, AssetType.json);\n            json = _json;\n\n        } //new\n\n        //Public API\n\n                /** Reloads the json from it's stored id, returning a promise for the asset. */\n            public function reload() : Promise {\n\n                return new Promise(function(resolve, reject) {\n\n                    system.app.io.data_flow(system.path(id), processor).then(function(_json:Dynamic){\n\n                        json = _json;\n                        resolve(this);\n\n                    }).error(reject);\n\n                }); //promise\n\n            } //reload\n\n            override public function destroy() {\n                json = null;\n            }\n\n        //Static API\n\n                /** Create a new AssetJSON from an id, which returns a promise for the asset. */\n            public static function load( _system:snow.system.assets.Assets, _id:String ) : Promise {\n\n                return new AssetJSON(_system, _id, null).reload();\n\n            } //load\n\n                /** A default json processor for the data processor API */\n            public static function processor(_app:snow.Snow, _id:String, _data:Uint8Array) : Promise {\n\n                if(_data == null) return Promise.reject(Error.error(\"AssetJSON: data was null\"));\n\n                return new Promise(function(resolve, reject) {\n\n                    var _data_json : Dynamic = null;\n\n                    try { _data_json = haxe.Json.parse(_data.toBytes().toString()); }\n\n                    catch(e:Dynamic) return reject(Error.parse(e));\n\n                    return resolve(_data_json);\n\n                }); //promise\n\n            } //processor\n\n        //Internal\n\n                /** Set the json contained to a new value */\n            function set_json(_json:Dynamic) {\n\n                loaded = _json != null;\n                return json = _json;\n\n            } //set_json\n\n    } //AssetJSON\n","package snow.system.assets;\n\nimport snow.types.Types;\nimport snow.api.Promise;\nimport snow.api.buffers.Uint8Array;\nimport snow.api.Debug.*;\n\nimport snow.system.assets.Asset;\n\n#if (!macro && !display && !scribe)\n    private typedef AssetsModule = haxe.macro.MacroType<[snow.system.module.Module.assign('Assets')]>;\n#end\n\n/** The asset system class gives you access to fetching and manipulating assets,\n    handling loading files and data in a consistent cross platform way */\nclass Assets {\n\n\n        /** If the assets are not relative to the runtime root path, this value can adjust all asset paths. This is automatically handled and exists to allow control. */\n    public var root : String = '';\n\n        /** access to module implementation */\n    public var module : snow.system.module.Assets;\n        /** access to snow from subsystems */\n    public var app : Snow;\n\n\n        /** constructed internally, use `app.assets` */\n    @:allow(snow.Snow)\n    function new( _app:Snow ) {\n\n        #if ios\n                //This is because of how the files are put into the xcode project\n                //for the iOS builds, it stores them inside of /assets to avoid\n                //including the root in the project in the Resources/ folder\n            root = 'assets/';\n        #end\n\n        app = _app;\n        module = new snow.system.module.Assets(this);\n\n    } //new\n\n//Public API\n\n        /** Get the asset path for an asset, adjusted by platform, root etc. */\n    public inline function path( _id:String ) : String return haxe.io.Path.join([root,_id]);\n\n        /** Get an asset as an `AssetBytes`, data stored as `Uint8Array`, using the default processor and provider */\n    public inline function bytes( _id:String ) : Promise return AssetBytes.load(this, _id);\n\n        /** Get an asset as an `AssetText`, data stored as `String`, using the default processor and provider */\n    public inline function text( _id:String ) : Promise  return AssetText.load(this, _id);\n\n        /** Get an asset as an `AssetJSON`, data stored as `Dynamic`, using the default processor and provider */\n    public inline function json( _id:String ) : Promise  return AssetJSON.load(this, _id);\n\n        /** Get an asset as an `AssetImage`, data stored as `ImageInfo`, using the default processor and provider */\n    public inline function image( _id:String ) : Promise  return AssetImage.load(this, _id);\n\n        /** Get an asset as an `AssetImage`, data stored as `ImageInfo`, created from image file bytes (not pixels). */\n    public inline function image_from_bytes( _id:String, _bytes:Uint8Array ) : Promise\n        return AssetImage.load_from_bytes(this, _id, _bytes);\n\n        /** Get an asset as an `AssetImage`, data stored as `ImageInfo`, created from image file pixels */\n    public inline function image_from_pixels( _id:String, _width:Int, _height:Int, _pixels:Uint8Array ) : AssetImage\n        return AssetImage.load_from_pixels(this, _id, _width, _height, _pixels);\n\n} //Assets\n","package snow.system.audio;\n\nimport snow.types.Types;\nimport snow.system.audio.Sound;\nimport snow.system.assets.Asset;\nimport snow.api.Promise;\nimport snow.api.Debug.*;\n\n#if (!macro && !display && !scribe)\n    typedef AudioModule = haxe.macro.MacroType<[snow.system.module.Module.assign('Audio')]>;\n#end\n\nclass Audio {\n\n        /** access to module specific implementation */\n    public var module : snow.system.module.Audio;\n        /** Set to false to stop any and all processing in the audio system */\n    public var active : Bool = false;\n\n        /** for external access to the library by the systems */\n    @:noCompletion public var app : Snow;\n        /** for mapping named sounds to Sound instances. Use the `app.audio` to manipulate preferably. */\n    @:noCompletion public var sound_list : Map<String, Sound>;\n        /** for mapping named streams to SoundStream instances. Use the `app.audio` to manipulate preferably. */\n    @:noCompletion public var stream_list : Map<String, Sound>;\n\n        /** constructed internally, use `app.audio` */\n    @:allow(snow.Snow)\n    function new( _app:Snow ) {\n\n        app = _app;\n\n        module = new snow.system.module.Audio(this);\n\n        module.init();\n\n        sound_list = new Map();\n        stream_list = new Map();\n\n        active = true;\n\n    } //new\n\n\n//Public API\n\n\n        /** Create a sound for playing. If no name is given, a unique id is assigned. Use the sound instance or the public api by name. */\n    public function create( _id:String, ?_name:String = '', ?_streaming:Bool = false ) : Promise {\n\n        if(_name == '') _name = app.uniqueid;\n\n        log('creating sound named $_name (stream: $_streaming)');\n\n        return new Promise(function(resolve, reject) {\n\n            var _create = module.create_sound(_id, _name, _streaming);\n\n            _create.then(function(_sound:Sound) {\n\n                sound_list.set(_name, _sound);\n\n                if(_streaming) stream_list.set(_name, _sound);\n\n                resolve(_sound);\n\n                _sound.emit('load');\n\n            }).error(reject);\n\n        }); //promise\n\n    } //create\n\n        /** Create a sound for playing from bytes. If no name is given, a unique id is assigned.\n            Use the sound instance or the public api by name.\n            Currently only non-stream sounds. */\n    @:noCompletion\n    public function create_from_bytes( ?_name:String = '', _bytes:snow.api.buffers.Uint8Array, _format:AudioFormatType ) : Sound {\n\n        if(_name == '') _name = app.uniqueid;\n\n        var sound = module.create_sound_from_bytes(_name, _bytes, _format);\n\n        assertnull(sound);\n\n        sound_list.set(_name, sound);\n\n        return sound;\n\n    } //create_from_bytes\n\n        /** Destroy a sound instance by name. Use sound_instance.destroy() if you have an instance already. */\n    public function uncreate( _name:String ) {\n\n        var _sound = sound_list.get(_name);\n\n        if(_sound == null) {\n            log('can\\'t find sound, unable to uncreate, use create first: ${_name}');\n        } //_sound\n\n            //kill the sound\n        _sound.destroy();\n\n    } //uncreate\n\n        /** Add a manually created sound instance to the audio system.\n            Once added the regular named api should apply.\n            Do not add sounds returned from `create` calls. */\n    @:noCompletion public function add( sound:Sound ) {\n        sound_list.set(sound.name, sound);\n        if(sound.is_stream) stream_list.set(sound.name, sound);\n    }\n\n\n        //:todo: temp fixes for audio issues created by modules\n    var handlers : Map<String, Array<Sound->Void> >;\n    static var splitter = ' • ';\n\n        /** Listen for a event on a named sound. `load` and `end` are valid events. */\n    public function on( _name:String, _event:String, _handler:Sound->Void ) {\n\n            //first check if the event has already happened\n        if(_event == 'load') {\n            var sound = get(_name);\n            if(sound != null) {\n                if(sound.loaded) {\n                    _debug('already loaded $_name, calling $_event handler immediately');\n                    _handler(sound);\n                    return;\n                }\n            }\n        }\n\n        var _event_id = '${_event}${splitter}${_name}';\n\n        _debug('adding listener for $_event_id');\n\n            //make sure the lists exist\n        if(handlers == null) handlers = new Map();\n            //make sure the array exists for this event\n        if(!handlers.exists(_event_id)) handlers.set(_event_id, []);\n\n            //get the list\n        var _list = handlers.get(_event_id);\n\n        if(_list.indexOf(_handler) != -1) throw \"Audio on event adding the same handler twice\";\n\n        _list.push(_handler);\n\n        handlers.set(_event_id, _list);\n\n    } //on\n\n        /** Remove a listener for a event on a named sound. see `on` */\n    public function off( _name:String, _event:String, _handler:Sound->Void ) {\n\n        if(handlers == null) return;\n\n        var _event_id = '${_event}${splitter}${_name}';\n\n        var _list = handlers.get(_event_id);\n        if(_list != null) {\n            _list.remove(_handler);\n            handlers.set(_event_id, _list);\n        }\n\n    } //off\n\n        /** Get a sound instance by name */\n    public function get( _name:String ) : Sound {\n\n        var _sound = sound_list.get(_name);\n\n        return _sound;\n\n    } //get\n\n        /** Get/Set the volume of a sound instance by name.\n            Leave the second argument blank to return the current value. */\n    public function volume( _name:String, ?_volume:Float ) : Float {\n        var sound = get(_name);\n        if(sound != null) {\n            if(_volume != null) {\n                return sound.volume = _volume;\n            } else {\n                return sound.volume;\n            }\n        }\n        return 0;\n    } //volume\n\n        /** Get/Set the pan of a sound instance by name\n            Leave the second argument blank to return the current value.  */\n    public function pan( _name:String, ?_pan:Float ) {\n        var sound = get(_name);\n        if(sound != null) {\n            if(_pan != null) {\n                return sound.pan = _pan;\n            } else {\n                return sound.pan;\n            }\n        }\n        return 0;\n    } //pan\n\n        /** Get/Set the pitch of a sound instance by name\n            Leave the second argument blank to return the current value.  */\n    public function pitch( _name:String, ?_pitch:Float ) {\n        var sound = get(_name);\n        if(sound != null) {\n            if(_pitch != null) {\n                return sound.pitch = _pitch;\n            } else {\n                return sound.pitch;\n            }\n        }\n        return 0;\n    } //pitch\n\n        /** Get/Set the position **in seconds** of a sound instance by name.\n            Leave the second argument blank to return the current value.  */\n    public function position( _name:String, ?_position:Float ) {\n        var sound = get(_name);\n        if(sound != null) {\n            if(_position != null) {\n                return sound.position = _position;\n            } else {\n                return sound.position;\n            }\n        }\n        return 0;\n    } //position\n\n        /** Get the duration of a sound instance by name.\n            Duration is set from the sound instance, so it is read only. */\n    public function duration( _name:String ) {\n        var sound = get(_name);\n        if(sound != null) {\n            return sound.duration;\n        }\n        return 0;\n    } //duration\n\n        /** Play a sound instance by name */\n    public function play(_name:String) {\n\n        if(!active) {\n            return;\n        }\n\n        var sound = get(_name);\n        if(sound != null) {\n            sound.play();\n        }\n    } //play\n\n        /** Loop a sound instance by name, indefinitely. Use stop to end it */\n    public function loop(_name:String) {\n\n        if(!active) {\n            return;\n        }\n\n        var sound = get(_name);\n        if(sound != null) {\n            sound.loop();\n        }\n\n    } //loop\n\n        /** Pause a sound instance by name */\n    public function pause(_name:String) {\n\n        if(!active) {\n            return;\n        }\n\n        var sound = get(_name);\n        if(sound != null) {\n            sound.pause();\n        }\n    } //pause\n\n        /** Stop a sound instance by name */\n    public function stop(_name:String) {\n\n        if(!active) {\n            return;\n        }\n\n        var sound = get(_name);\n        if(sound != null) {\n            sound.stop();\n        }\n    } //stop\n\n        /** Toggle a sound instance by name, pausing the sound */\n    public function toggle(_name:String) {\n\n        if(!active) {\n            return;\n        }\n\n        var sound = get(_name);\n        if(sound != null) {\n            sound.toggle();\n        }\n    } //toggle\n\n\n//Internal API\n\n#if snow_native //:todo:\n\n        /** A helper for converting bytes to seconds for a sound source, using the format from the sound.info */\n    public function bytes_to_seconds( info:AudioInfo, _bytes:Int ) : Float {\n\n        var word = info.data.bits_per_sample == 16 ? 2 : 1;\n        var sample_frames = (info.data.rate * info.data.channels * word);\n\n        return _bytes / sample_frames;\n\n    } //bytes_to_seconds\n\n        /** A helper for converting seconds to bytes for this sound source, using the format settings specific to this sound */\n    public function seconds_to_bytes( info:AudioInfo, _seconds:Float ) : Int {\n\n        var word = info.data.bits_per_sample == 16 ? 2 : 1;\n        var sample_frames = (info.data.rate * info.data.channels * word);\n\n        return Std.int(_seconds * sample_frames);\n\n    } //seconds_to_bytes\n\n#end //snow_native\n\n        /** Stop managing a sound instance */\n    @:noCompletion public function kill( _sound:Sound ) {\n\n        if(_sound == null) return;\n\n        sound_list.remove(_sound.name);\n        stream_list.remove(_sound.name);\n\n    } //kill\n\n    @:noCompletion public function suspend() {\n\n        if(!active) {\n            return;\n        }\n\n        log(\"suspending sound context\");\n\n        active = false;\n\n        for(sound in stream_list) {\n            sound.internal_pause();\n        }\n\n        module.suspend();\n\n    } //suspend\n\n    @:noCompletion public function resume() {\n\n        if(active) {\n            return;\n        }\n\n        log(\"resuming sound context\");\n\n        active = true;\n\n        module.resume();\n\n        for(sound in stream_list) {\n            sound.internal_play();\n        }\n\n    } //resume\n\n        /** Called by Snow when a system event is dispatched */\n    @:allow(snow.Snow)\n    function on_event( _event:SystemEvent ) {\n\n        module.on_event(_event);\n\n        if(_event.type == SystemEventType.app_willenterbackground) {\n            suspend();\n        } else if(_event.type == SystemEventType.app_willenterforeground) {\n            resume();\n        }\n\n        #if mobile\n\n            if(_event.type == SystemEventType.window) {\n                switch(_event.window.type) {\n                    case WindowEventType.focus_lost:\n                        suspend();\n                    case WindowEventType.focus_gained:\n                        resume();\n                    default:\n                }\n            } //_event.type == window\n\n        #end //mobile\n\n    } //on_event\n\n        /** Called by Snow, cleans up sounds/system */\n    @:allow(snow.Snow)\n    function destroy() {\n\n        active = false;\n\n        for(sound in sound_list) {\n            sound.destroy();\n        }\n\n        module.destroy();\n\n    } //destroy\n\n        /** Called by Snow, update any sounds / streams */\n    @:allow(snow.Snow)\n    function update() {\n\n        if(!active) {\n            return;\n        }\n\n        for(_sound in sound_list) {\n            if(_sound.playing) {\n                _sound.internal_update();\n            }\n        }\n\n        module.update();\n\n    } //update\n\n//Internal\n\n    function sound_event(_sound:Sound, _event:String) {\n\n        var _event_id = '${_event}${splitter}${_sound.name}';\n\n        _debug('sound event: $_event_id');\n\n        if(handlers == null) return;\n\n        var _list = handlers.get(_event_id);\n        if(_list != null) {\n            for(fn in _list) {\n                fn(_sound);\n            }\n        }\n\n    } //sound_event\n\n} //Audio\n","package snow.system.input;\n\nimport snow.types.Types;\nimport snow.system.window.Window;\n\n#if (!macro && !display && !scribe)\n    private typedef InputModule = haxe.macro.MacroType<[snow.system.module.Module.assign('Input')]>;\n#end\n\n\ntypedef MapIntBool = Map<Int, Bool>;\ntypedef MapIntFloat = Map<Int, Float>;\n\n/** The snow input system. Accessed via `app.input` */\n@:allow(snow.Snow)\nclass Input {\n\n        /** access to snow from subsystems */\n    @:noCompletion public var app : Snow;\n        /** access to platform implementation */\n    @:noCompletion public var module : snow.system.module.Input;\n\n        /** constructed internally, use `app.input` */\n    function new( _app:Snow ) {\n\n        app = _app;\n\n        module = new snow.system.module.Input(this);\n\n        module.init();\n\n        //keys\n\n            key_code_pressed = new Map();\n            key_code_down = new Map();\n            key_code_released = new Map();\n\n            scan_code_pressed = new Map();\n            scan_code_down = new Map();\n            scan_code_released = new Map();\n\n        //mouse\n\n            mouse_button_pressed = new Map();\n            mouse_button_down = new Map();\n            mouse_button_released = new Map();\n\n        //gamepad\n\n            gamepad_button_pressed = new Map();\n            gamepad_button_down = new Map();\n            gamepad_button_released = new Map();\n            gamepad_axis_values = new Map();\n\n        //touch\n\n            touches_down = new Map();\n\n    } //new\n\n\n//Public facing API\n\n\n    //Key immediate style access\n\n            /** returns true if the `Key` value was pressed in the latest frame */\n        public function keypressed( _code:Int ) : Bool {\n            return key_code_pressed.exists(_code);\n        } //keypressed\n\n            /** returns true if the `Key` value was released in the latest frame */\n        public function keyreleased( _code:Int ) : Bool {\n            return key_code_released.exists(_code);\n        } //keyreleased\n\n            /** returns true if the `Key` value is down at the time of calling this */\n        public function keydown( _code:Int ) : Bool {\n           return key_code_down.exists(_code);\n        } //keydown\n\n            /** returns true if the `Scan` value was pressed in the latest frame */\n        public function scanpressed( _code:Int ) : Bool {\n            return scan_code_pressed.exists(_code);\n        } //scanpressed\n\n            /** returns true if the `Scan` value was released in the latest frame */\n        public function scanreleased( _code:Int ) : Bool {\n            return scan_code_released.exists(_code);\n        } //scanreleased\n\n            /** returns true if the `Scan` value is down at the time of calling this */\n        public function scandown( _code:Int ) : Bool {\n           return scan_code_down.exists(_code);\n        } //keydown\n\n    //Mouse immediate style access\n\n            /** returns true if the mouse button was pressed in the latest frame */\n        public function mousepressed( _button:Int ) : Bool {\n            return mouse_button_pressed.exists(_button);\n        } //keypressed\n\n            /** returns true if the mouse button was released in the latest frame */\n        public function mousereleased( _button:Int ) : Bool {\n            return mouse_button_released.exists(_button);\n        } //mousereleased\n\n            /** returns true if the mouse button value is down at the time of calling this */\n        public function mousedown( _button:Int ) : Bool {\n           return mouse_button_down.exists(_button);\n        } //mousedown\n\n    //Gamepad immediate style access\n\n            /** returns true if the mouse button was pressed in the latest frame */\n        public function gamepadpressed( _gamepad:Int, _button:Int ) : Bool {\n\n            var _gamepad_state = gamepad_button_pressed.get(_gamepad);\n            return _gamepad_state != null ? _gamepad_state.exists(_button) : false;\n\n        } //keypressed\n\n            /** returns true if the gamepad button was released in the latest frame */\n        public function gamepadreleased( _gamepad:Int, _button:Int ) : Bool {\n\n            var _gamepad_state = gamepad_button_released.get(_gamepad);\n            return _gamepad_state != null ? _gamepad_state.exists(_button) : false;\n\n        } //gamepadreleased\n\n            /** returns true if the gamepad button value is down at the time of calling this */\n        public function gamepaddown( _gamepad:Int, _button:Int ) : Bool {\n\n           var _gamepad_state = gamepad_button_down.get(_gamepad);\n            return _gamepad_state != null ? _gamepad_state.exists(_button) : false;\n\n        } //gamepaddown\n\n            /** returns true if the gamepad button value is down at the time of calling this */\n        public function gamepadaxis( _gamepad:Int, _axis:Int ) : Float {\n\n            var _gamepad_state = gamepad_axis_values.get(_gamepad);\n            if(_gamepad_state != null) {\n                if(_gamepad_state.exists(_axis)) {\n                    return _gamepad_state.get(_axis);\n                }\n            }\n\n            return 0;\n\n        } //gamepaddown\n\n        /** manually dispatch a key down event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_key_down_event( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {\n\n            //only do the realtime flags if not key repeat\n        if(!repeat) {\n                //flag the key as pressed, but unprocessed (false)\n            key_code_pressed.set(keycode, false);\n                //flag it as down, because keyup removes it\n            key_code_down.set(keycode, true);\n                //flag the scan as pressed, but unprocessed (false)\n            scan_code_pressed.set(scancode, false);\n                //flag it as down, because keyup removes it\n            scan_code_down.set(scancode, true);\n        }\n\n            //forward the event\n        app.host.onkeydown(keycode, scancode, repeat, mod, timestamp, window_id);\n\n    } //dispatch_key_down_event\n\n        /** manually dispatch a key up event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_key_up_event( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {\n\n            //flag it as released but unprocessed\n        key_code_released.set(keycode, false);\n            //remove the down flag\n        key_code_down.remove(keycode);\n\n            //flag it as released but unprocessed\n        scan_code_released.set(scancode, false);\n            //remove the down flag\n        scan_code_down.remove(scancode);\n\n\n            //dispatch the event\n        app.host.onkeyup(keycode, scancode, repeat, mod, timestamp, window_id);\n\n    } //dispatch_key_up_event\n\n        /** manually dispatch a text event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_text_event( text:String, start:Int, length:Int, type:TextEventType, timestamp:Float, window_id:Int ) {\n\n        app.host.ontextinput( text, start, length, type, timestamp, window_id );\n\n    } //dispatch_text_event\n\n\n        /** manually dispatch a mouse move event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_mouse_move_event( x:Int, y:Int, xrel:Int, yrel:Int, timestamp:Float, window_id:Int ) {\n\n        app.host.onmousemove( x, y, xrel, yrel, timestamp, window_id );\n\n    } //dispatch_mouse_move_event\n\n        /** manually dispatch a mouse button down event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_mouse_down_event( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {\n\n            //flag the button as pressed, but unprocessed (false)\n        mouse_button_pressed.set(button, false);\n            //flag it as down, because mouseup removes it\n        mouse_button_down.set(button, true);\n\n\n        app.host.onmousedown( x, y, button, timestamp, window_id );\n\n    } //dispatch_mouse_down_event\n\n        /** manually dispatch a mouse button up event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_mouse_up_event( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {\n\n            //flag it as released but unprocessed\n        mouse_button_released.set(button, false);\n            //remove the down flag\n        mouse_button_down.remove(button);\n\n\n        app.host.onmouseup( x, y, button, timestamp, window_id );\n\n    } //dispatch_mouse_up_event\n\n        /** manually dispatch a mouse wheel event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_mouse_wheel_event( x:Int, y:Int, timestamp:Float, window_id:Int ) {\n\n        app.host.onmousewheel( x, y, timestamp, window_id );\n\n    } //dispatch_mouse_wheel_event\n\n        /** manually dispatch a touch down through the system, delivered to the app handlers, internal and external */\n    public function dispatch_touch_down_event( x:Float, y:Float, touch_id:Int, timestamp:Float ) {\n\n        if(!touches_down.exists(touch_id)) {\n            touch_count++;\n            touches_down.set(touch_id, true);\n        }\n\n        app.host.ontouchdown( x, y, touch_id, timestamp );\n\n    } //dispatch_touch_down_event\n\n        /** manually dispatch a touch up through the system, delivered to the app handlers, internal and external */\n    public function dispatch_touch_up_event( x:Float, y:Float, touch_id:Int, timestamp:Float ) {\n\n        app.host.ontouchup( x, y, touch_id, timestamp );\n\n        if(touches_down.remove(touch_id)) {\n            touch_count--;\n        }\n\n    } //dispatch_touch_up_event\n\n        /** manually dispatch a touch move through the system, delivered to the app handlers, internal and external */\n    public function dispatch_touch_move_event( x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float ) {\n\n        app.host.ontouchmove( x, y, dx, dy, touch_id, timestamp );\n\n    } //dispatch_touch_move_event\n\n        /** manually dispatch a gamepad axis event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_gamepad_axis_event( gamepad:Int, axis:Int, value:Float, timestamp:Float ) {\n\n            //if not existing, add it's map\n        if(!gamepad_axis_values.exists(gamepad)) {\n            gamepad_axis_values.set(gamepad, new Map());\n        }\n\n            //update the axis value\n        gamepad_axis_values.get(gamepad).set(axis, value);\n\n        app.host.ongamepadaxis( gamepad, axis, value, timestamp );\n\n    } //dispatch_gamepad_axis_event\n\n        /** manually dispatch a gamepad button down event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_gamepad_button_down_event( gamepad:Int, button:Int, value:Float, timestamp:Float ) {\n\n            //if not existing, add it's map\n        if(!gamepad_button_pressed.exists(gamepad)) {\n            gamepad_button_pressed.set(gamepad, new Map());\n        }\n\n        if(!gamepad_button_down.exists(gamepad)) {\n            gamepad_button_down.set(gamepad, new Map());\n        }\n\n            //flag it as released but unprocessed\n        gamepad_button_pressed.get(gamepad).set(button, false);\n            //flag it as down, because gamepadup removes it\n        gamepad_button_down.get(gamepad).set(button, true);\n\n\n        app.host.ongamepaddown( gamepad, button, value, timestamp );\n\n    } //dispatch_gamepad_button_down_event\n\n        /** manually dispatch a gamepad button up event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_gamepad_button_up_event( gamepad:Int, button:Int, value:Float, timestamp:Float ) {\n\n           //if not existing, add it's map, this should never happen,\n           //but rather be safe than crashy. :todo:shipping:\n        if(!gamepad_button_released.exists(gamepad)) {\n            gamepad_button_released.set(gamepad, new Map());\n        }\n\n        if(!gamepad_button_down.exists(gamepad)) {\n            gamepad_button_down.set(gamepad, new Map());\n        }\n\n            //flag it as released but unprocessed\n        gamepad_button_released.get(gamepad).set(button, false);\n            //flag it as down, because gamepadup removes it\n        gamepad_button_down.get(gamepad).remove(button);\n\n        app.host.ongamepadup( gamepad, button, value, timestamp );\n\n    } //dispatch_gamepad_button_up_event\n\n        /** manually dispatch a gamepad device event through the system, delivered to the app handlers, internal and external */\n    public function dispatch_gamepad_device_event( gamepad:Int, id:String, type:GamepadDeviceEventType, timestamp:Float ) {\n\n        app.host.ongamepaddevice( gamepad, id, type, timestamp );\n\n    } //dispatch_gamepad_device_event\n\n//Interal API\n\n        /** Attach to a window to listen for input from it */\n    @:noCompletion public function listen( _window:Window ) {\n\n        module.listen(_window);\n\n    } //listen\n\n        /** Detach a listening window, stopping listening of input from it */\n    @:noCompletion public function unlisten( _window:Window ) {\n\n        module.unlisten(_window);\n\n    } //unlisten\n\n        /** Called when a system event is dispatched through the core */\n    @:noCompletion public function on_event( _event:SystemEvent ) {\n\n        module.on_event( _event );\n\n    } //on_event\n\n\n        /** Handle any input related processing, called by Snow */\n    function update() {\n\n        module.update();\n\n        _update_keystate();\n        _update_gamepadstate();\n        _update_mousestate();\n\n    } //update\n\n        /** Destroy and clean up etc. */\n    function destroy() {\n\n        module.destroy();\n\n    } //destroy\n\n//internal\n\n        /** update mouse pressed/released/down states */\n    function _update_mousestate() {\n\n        for(_code in mouse_button_pressed.keys()){\n\n            if(mouse_button_pressed.get(_code)){\n                mouse_button_pressed.remove(_code);\n            } else {\n                mouse_button_pressed.set(_code, true);\n            }\n\n        } //each mouse_button_pressed\n\n        for(_code in mouse_button_released.keys()){\n\n            if(mouse_button_released.get(_code)){\n                mouse_button_released.remove(_code);\n            } else {\n                mouse_button_released.set(_code, true);\n            }\n\n        } //each mouse_button_released\n\n    } //_update_mousestate\n\n        /** update gamepad pressed/released/down/axis states */\n    function _update_gamepadstate() {\n\n        for(_gamepad_pressed in gamepad_button_pressed){\n            for(_button in _gamepad_pressed.keys()) {\n\n                if(_gamepad_pressed.get(_button)){\n                    _gamepad_pressed.remove(_button);\n                } else {\n                    _gamepad_pressed.set(_button, true);\n                }\n\n            } //each _gamepad_pressed\n        } //each gamepad_button_pressed\n\n        for(_gamepad_released in gamepad_button_released){\n            for(_button in _gamepad_released.keys()) {\n\n                if(_gamepad_released.get(_button)){\n                    _gamepad_released.remove(_button);\n                } else {\n                    _gamepad_released.set(_button, true);\n                }\n\n            } //each _gamepad_released\n        } //each gamepad_button_released\n\n    } //_update_gamepadstate\n\n        /** update key pressed/released/down states */\n    function _update_keystate() {\n\n            //remove any stale key pressed value\n            //unless it wasn't alive for a full frame yet,\n            //then flag it so that it may be\n        for(_code in key_code_pressed.keys()){\n\n            if(key_code_pressed.get(_code)){\n                key_code_pressed.remove(_code);\n            } else {\n                key_code_pressed.set(_code, true);\n            }\n\n        } //each key_code_pressed\n\n            //remove any stale key released value\n            //unless it wasn't alive for a full frame yet,\n            //then flag it so that it may be\n        for(_code in key_code_released.keys()){\n\n            if(key_code_released.get(_code)){\n                key_code_released.remove(_code);\n            } else {\n                key_code_released.set(_code, true);\n            }\n\n        } //each key_code_released\n\n    //scans\n\n            //remove any stale key pressed value\n            //unless it wasn't alive for a full frame yet,\n            //then flag it so that it may be\n        for(_code in scan_code_pressed.keys()){\n\n            if(scan_code_pressed.get(_code)){\n                scan_code_pressed.remove(_code);\n            } else {\n                scan_code_pressed.set(_code, true);\n            }\n\n        } //each scan_code_pressed\n\n            //remove any stale key released value\n            //unless it wasn't alive for a full frame yet,\n            //then flag it so that it may be\n        for(_code in scan_code_released.keys()){\n\n            if(scan_code_released.get(_code)){\n                scan_code_released.remove(_code);\n            } else {\n                scan_code_released.set(_code, true);\n            }\n\n        } //each scan_code_released\n\n    } //_update_keystate\n\n\n\n        //this is the keycode based flags for keypressed/keyreleased/keydown\n    var key_code_down : MapIntBool;\n    var key_code_pressed : MapIntBool;\n    var key_code_released : MapIntBool;\n\n        //this is the scancode based flags for scanpressed/scanreleased/scandown\n    var scan_code_down : MapIntBool;\n    var scan_code_pressed : MapIntBool;\n    var scan_code_released : MapIntBool;\n\n        //this is the mouse button based flags for mousepressed/mousereleased/mousedown\n    var mouse_button_down : MapIntBool;\n    var mouse_button_pressed : MapIntBool;\n    var mouse_button_released : MapIntBool;\n\n        //this is the gamepad button based flags for gamepadpressed/gamepadreleased/gamepaddown\n    var gamepad_button_down : Map<Int, MapIntBool >;\n    var gamepad_button_pressed : Map<Int, MapIntBool >;\n    var gamepad_button_released : Map<Int, MapIntBool >;\n    var gamepad_axis_values : Map<Int, MapIntFloat >;\n\n        //map of the touches currently down,\n        //:todo:wip:\n    @:noCompletion public var touch_count : Int = 0;\n    @:noCompletion public var touches_down : MapIntBool;\n\n\n} //Input\n\n\n","package snow.system.io;\n\nimport snow.Snow;\nimport snow.types.Types;\nimport snow.api.buffers.Uint8Array;\nimport snow.api.Promise;\nimport snow.api.Debug.*;\n\n#if (!macro && !display && !scribe)\n    private typedef IOModule = haxe.macro.MacroType<[snow.system.module.Module.assign('IO')]>;\n#end\n\n@:allow(snow.Snow)\nclass IO {\n\n\n    @:noCompletion public var app : Snow;\n\n    /** Access to the platform specific api, if any */\n    public var module : snow.system.module.IO;\n\n    /** The string_save file name prefix. For example, the default being `slot.0`,\n        by changing this you can rename the save slots to `custom.0`.\n        Only the prefix will change, the slot index is always appended with `.` for predictability. */\n    public var string_save_prefix : String = 'slot';\n\n        /** Constructed internally, use `app.io` */\n    @:allow(snow.Snow)\n    function new( _app:Snow ) {\n\n        app = _app;\n\n        module = new snow.system.module.IO(this);\n\n        module.init();\n\n    } //new\n\n        /** Call this to open a url in the default browser */\n    public inline function url_open( _url:String ) {\n\n        module.url_open(_url);\n\n    } //url_open\n\n        /** Load bytes from the file path/url given.\n            On web a request is sent for the data */\n    public inline function data_load( _path:String, ?_options:IODataOptions ) : Promise {\n\n        return module.data_load( _path, _options );\n\n    } //data_load\n\n\n        /** Save bytes to the file path/url given.\n            On platforms where this doesn't make sense (web) this will do nothing atm */\n    public inline function data_save( _path:String, _data:Uint8Array, ?_options:IODataOptions ) : Bool {\n\n        return module.data_save( _path, _data, _options );\n\n    } //data_save\n\n        /** Returns a promise for data, optionally provided by the given provider, and optionally processed by the given processor. */\n    public function data_flow<T>( _id:String, ?_processor:Snow->String->T->Promise, ?_provider:Snow->String->Promise ) : Promise {\n\n        if(_provider == null) _provider = default_provider;\n\n        return new Promise(function(resolve, reject) {\n\n            _provider(app, _id).then(\n\n                function(data) {\n                    if(_processor != null) {\n                        _processor(app, _id, data).then(resolve, reject);\n                    } else {\n                        resolve(data);\n                    }\n                }\n\n            ).error(reject);\n\n        }); //promise\n\n    } //data_flow\n\n        /** The string slot <-> key:value pairs,\n            for the string sync API. */\n    var string_slots: Map<Int, Map<String, String> >;\n\n        /** Returns the path where string_save operates.\n            One targets where this is not a path, the path will be prefaced with `< >/`,\n            i.e on web targets the path will be `<localstorage>/` followed by the ID. */\n    public function string_save_path( _slot:Int = 0 ) : String {\n\n        return module.string_save_path(_slot);\n\n    } //string_save_path\n\n        //:todo: clear() and remove()\n\n        /** Save a string value by key, with an optional slot.\n            To remove a saved key, pass value in as null.\n            Works on all targets as a simple save/load mechanism.\n            Data saved is plain text but obscured with basic encoding.\n            Any further obfuscation can be done on the value prior to saving.\n            Returns false if the save failed, errors being logged. */\n    public function string_save( _key:String, _value:String, _slot:Int = 0 ) : Bool {\n\n        var _string_map = string_slots_sync(_slot);\n\n        var _encoded_key = module.string_slot_encode(_key);\n\n            //if the value is null, we remove the key\n        if(_value == null) {\n\n            _debug('removing key $_key ($_encoded_key)');\n\n            _string_map.remove(_encoded_key);\n\n        } else {\n\n            var _encoded_value = module.string_slot_encode(_value);\n\n            _debug('storing key $_key:$_value as $_encoded_key:$_encoded_value');\n\n            _string_map.set(_encoded_key, _encoded_value);\n\n        }\n\n        var _contents = haxe.Serializer.run(_string_map);\n            _contents = module.string_slot_encode(_contents);\n\n        return module.string_slot_save(_slot, _contents);\n\n    } //string_save\n\n        /** Load a string value by key, with an optional slot.\n            Works on all targets as a simple save/load mechanism.\n            Returns the string or null if the key was invalid, or the slot was not found. */\n    public function string_load( _key:String, _slot:Int = 0 ) : String {\n\n        var _string_map = string_slots_sync(_slot);\n\n        var _encoded_key = module.string_slot_encode(_key);\n        var _encoded_value = _string_map.get(_encoded_key);\n\n        _debug('reading `$_key` as $_encoded_key:$_encoded_value');\n\n        if(_encoded_value == null) {\n            return null;\n        }\n\n        return module.string_slot_decode(_encoded_value);\n\n    } //string_load\n\n        /** Destroy a specific string slot, removing all values stored.\n            Does not ask for confirmation. Returns true if successful, false otherwise. */\n    public function string_destroy(_slot:Int = 0) : Bool {\n\n        if(string_slots == null) {\n            string_slots = new Map();\n        } else {\n            string_slots.remove(_slot);\n        }\n\n        return module.string_slot_destroy(_slot);\n\n    } //string_destroy\n\n//Internal string load/save\n\n        //check if the string map exists yet,\n        //if not, try to load it,\n        //if it doesn't exist yet, make it.\n        //returns a valid map for the slot\n    inline function string_slots_sync( _slot:Int = 0 ) {\n\n        //not loaded yet?\n        if(string_slots == null) {\n            string_slots = new Map();\n        }\n\n        var _string_map = string_slots.get(_slot);\n\n        if(_string_map == null) {\n\n            var _string = module.string_slot_load(_slot);\n            if(_string == null) {\n                _string_map = new Map();\n            } else {\n                _string = module.string_slot_decode(_string);\n                _string_map = haxe.Unserializer.run(_string);\n            }\n\n            string_slots.set(_slot, _string_map);\n\n        }\n\n        return _string_map;\n\n    } //string_slots_sync\n\n//Internal\n\n        /** The default data flow provider */\n    inline function default_provider(_app:Snow, _id:String) return data_load(_id);\n\n        /** Called by Snow when a system event happens. */\n    inline function on_event( _event:SystemEvent ) {\n\n        module.on_event( _event );\n\n    } //on_event\n\n        /** Called by Snow, update any IO related processing */\n    inline function update() {\n\n        module.update();\n\n    } //update\n\n        /** Called by Snow, cleans up IO */\n    inline function destroy() {\n\n        module.destroy();\n\n    } //destroy\n\n\n} //IO\n","package snow.system.window;\n\nimport snow.types.Types;\nimport snow.system.window.Windowing;\n\nimport snow.modules.opengl.GL;\n\nimport snow.api.Debug.*;\n\n    //A window has it's own event loop\n    //and allows opening and closing windows\n@:allow(snow.system.window.Windowing)\nclass Window {\n\n        /** the window id, for tracking events to each window */\n    public var id : Int;\n        /** the system this window belongs to */\n    public var system : Windowing;\n        /** the requested window config */\n    public var asked_config : WindowConfig;\n        /** the actual returned window config */\n    public var config : WindowConfig;\n        /** the native window handle */\n    public var handle : WindowHandle;\n\n        /** the window event handler callback */\n    public var onevent : WindowEvent->Void;\n        /** the window render handler callback */\n    public var onrender : Window->Void;\n\n        /** The window title `(read/write)` */\n    @:isVar public var title (get,set) : String = 'snow window';\n        /** The window bordered state `(read/write)` */\n    @:isVar public var bordered (get,set) : Bool = true;\n        /** The window grab state `(read/write)` */\n    @:isVar public var grab (get,set) : Bool = false;\n        /** The window fullscreen state `(read/write)` */\n    @:isVar public var fullscreen (get,set) : Bool = false;\n\n        /** The window position `(read/write)` */\n    @:isVar public var x (default,set) : Int = 0;\n    @:isVar public var y (default,set) : Int = 0;\n    @:isVar public var width (default,set) : Int = 0;\n    @:isVar public var height (default,set) : Int = 0;\n\n        /** The window maximum size `(read/write)` */\n    @:isVar public var max_size (get,set) : { x:Int, y:Int };\n        /** The window minimum size `(read/write)` */\n    @:isVar public var min_size (get,set) : { x:Int, y:Int };\n\n        /** set this if you want to control when a window calls swap() */\n    public var auto_swap : Bool = true;\n        /** set this if you want to control when a window calls render() */\n    public var auto_render : Bool = true;\n        /** A flag for whether this window is open or closed */\n    public var closed : Bool = true;\n\n        //internal minimized flag to avoid rendering when minimized.\n        //use on_event for this yourself\n    var minimized : Bool = false;\n    var internal_position : Bool = false;\n    var internal_resize : Bool = false;\n\n    public function new( _system:Windowing, _config:WindowConfig ) {\n\n        max_size    = { x:0, y:0 };\n        min_size    = { x:0, y:0 };\n\n        system = _system;\n        asked_config = _config;\n        config = _config;\n\n            //default to OS defined window position\n        if(config.x == null) {\n            config.x = 0x1FFF0000;\n        }\n\n        if(config.y == null) {\n            config.y = 0x1FFF0000;\n        }\n\n        system.module.create( system.app.config.render, _config, on_window_created );\n\n    } //new\n\n    function on_window_created( _handle:WindowHandle, _id:Int, _configs:{ config:WindowConfig, render_config:RenderConfig } ) : Void {\n\n        id = _id;\n        handle = _handle;\n\n        if(handle == null) {\n            log(\"failed to create window\");\n            return;\n        }\n\n        closed = false;\n            //store the real config\n        config = _configs.config;\n            //update the render config in the core\n        system.app.config.render = _configs.render_config;\n\n            //update the position and size\n            //because it updates in the config\n            internal_position = true;\n        x = config.x;\n        y = config.y;\n            internal_position = false;\n\n            internal_resize = true;\n        width = config.width;\n        height = config.height;\n            internal_resize = false;\n\n        #if mobile\n        set_fullscreen(fullscreen);\n        #end\n\n        on_event({\n            type:WindowEventType.created,\n            window_id : _id,\n            timestamp : system.app.time,\n            event : {}\n        });\n\n        _debug(\"created window with id: \" + id);\n        _debug('updating real window config for $id is ' + _configs);\n\n    } //on_window_created\n\n    function on_event( _event:WindowEvent ) {\n\n        _verbose(\"window event \" + id + \" / \" + _event.type + \" / \" + _event.event );\n\n        switch(_event.type) {\n\n            case WindowEventType.moved : {\n\n                    internal_position = true;\n                set_position(_event.event.x, _event.event.y);\n                    internal_position = false;\n\n            } //moved\n\n            case WindowEventType.resized : {\n\n                    internal_resize = true;\n                set_size(_event.event.x, _event.event.y);\n                    internal_resize = false;\n\n            } //resized\n\n            case WindowEventType.size_changed : {\n\n                    internal_resize = true;\n                set_size(_event.event.x, _event.event.y);\n                    internal_resize = false;\n\n            } //size_changed\n\n            case WindowEventType.minimized : {\n\n                minimized = true;\n\n            } //minimized\n\n            case WindowEventType.restored : {\n\n                minimized = false;\n\n            } //restored\n\n            default: {}\n\n        } //switch\n\n        if(onevent != null) {\n            onevent( _event );\n        }\n\n    } //on_event\n\n    function update() {\n\n        if(handle != null && !closed) {\n            system.module.update_window( this );\n        }\n\n    } //update\n\n\n        /** Called for you automatically, unless auto_render is disabled. */\n    public function render() {\n\n        if(minimized || closed) {\n            return;\n        }\n\n        if(handle == null) {\n            return;\n        }\n\n        system.module.render( this );\n\n        if(onrender != null) {\n\n            onrender( this );\n\n            if(auto_swap) {\n                swap();\n            }\n\n            return;\n\n        } //has render handler\n\n        GL.clearColor( 0, 0, 0, 1.0 );\n        GL.clear(GL.COLOR_BUFFER_BIT);\n\n        if(auto_swap) {\n            swap();\n        }\n\n    } //render\n\n        /** Swap the back buffer of the window, call after rendering to update the window view */\n    public function swap() {\n\n        if(handle == null || closed || minimized) {\n            return;\n        }\n\n        system.module.swap( this );\n\n    } //swap\n\n        /** Destroy the window. To recreate it create must be used, show will not work. */\n    public function destroy() {\n\n        closed = true;\n\n        if(handle == null) {\n            return;\n        }\n            //remove from the internal list\n        system.remove(this);\n            //destroy system window\n        system.module.destroy_window( this );\n            //clear handle as it's invalid\n        handle = null;\n\n    } //destroy\n\n        /** Close the window, hiding it (not destroying it). Calling show() will unhide it. */\n    public function close() {\n\n        closed = true;\n\n        if(handle == null) {\n            return;\n        }\n\n        system.module.close( this );\n\n    } //close\n\n        /** Show the window, unhiding it. If destroyed, nothing happens. */\n    public function show() {\n\n        if(handle == null) {\n            return;\n        }\n\n        closed = false;\n\n        system.module.show( this );\n\n    } //show\n\n        /** Display a cross platform message on this window */\n    public function simple_message( message:String, title:String=\"\" ) {\n\n        if(handle == null) {\n            return;\n        }\n\n        system.module.simple_message( this, message, title );\n\n    } //simple_message\n\n    function get_fullscreen() : Bool {\n\n        return fullscreen;\n\n    } //get_fullscreen\n\n\n    function set_fullscreen( _enable:Bool ) {\n\n        if(handle != null) {\n            system.module.fullscreen( this, _enable );\n        }\n\n        return fullscreen = _enable;\n\n    } //set_fullscreen\n\n    function get_bordered() : Bool {\n\n        return bordered;\n\n    } //get_bordered\n\n    function get_grab() : Bool {\n\n        return grab;\n\n    } //get_grab\n\n    function get_max_size() : { x:Int, y:Int } {\n\n        return max_size;\n\n    } //get_max_size\n\n    function get_min_size() : { x:Int, y:Int } {\n\n        return min_size;\n\n    } //get_min_size\n\n    function get_title() : String {\n\n        return title;\n\n    } //get_title\n\n    function set_title( _title:String ) {\n\n        if(handle != null) {\n            system.module.set_title( this, _title );\n        }\n\n        return title = _title;\n\n    } //set_title\n\n    function set_x( _x:Int ) : Int {\n\n        x = _x;\n\n        if(handle != null && !internal_position) {\n            system.module.set_position( this, x, y );\n        }\n\n        return x;\n\n    } //set_x\n\n    function set_y( _y:Int ) : Int {\n\n        y = _y;\n\n        if(handle != null && !internal_position) {\n            system.module.set_position( this, x, y );\n        }\n\n        return y;\n\n    } //set_y\n\n    function set_width( _width:Int ) : Int {\n\n        width = _width;\n\n        if(handle != null && !internal_resize) {\n            system.module.set_size( this, width, height );\n        }\n\n        return width;\n\n    } //set_width\n\n    function set_height( _height:Int ) : Int {\n\n        height = _height;\n\n        if(handle != null && !internal_resize) {\n            system.module.set_size( this, width, height );\n        }\n\n        return height;\n\n    } //set_height\n\n    public function set_cursor_position( _x:Int, _y:Int ) {\n\n        if(handle != null && !closed) {\n            system.module.set_cursor_position( this, _x, _y );\n        }\n\n    } //set_cursor_position\n\n    public function set_position( _x:Int, _y:Int ) {\n\n            //keep the flag\n        var last_internal_position_flag = internal_position;\n\n            //force true\n        internal_position = true;\n            x = _x;\n            y = _y;\n        internal_position = last_internal_position_flag;\n\n            //this is never called\n        if(handle != null && !internal_position) {\n            system.module.set_position( this, x, y );\n        }\n\n    } //set_position\n\n    public function set_size( _width:Int, _height:Int ) {\n\n            //keep the flag\n        var last_internal_resize_flag = internal_resize;\n\n            //force true\n        internal_resize = true;\n            width = _width;\n            height = _height;\n        internal_resize = last_internal_resize_flag;\n\n        if(handle != null && !internal_resize) {\n            system.module.set_size( this, _width, _height );\n        }\n\n    } //set_size\n\n    function set_max_size( _size:{ x:Int, y:Int } ) : { x:Int, y:Int } {\n\n        if(max_size != null && handle != null) {\n            system.module.set_max_size( this, _size.x, _size.y );\n        }\n\n        return max_size = _size;\n\n    } //set_max_size\n\n    function set_min_size( _size: { x:Int, y:Int } ) : { x:Int, y:Int } {\n\n        if(min_size != null && handle != null) {\n            system.module.set_min_size( this, _size.x, _size.y );\n        }\n\n        return min_size = _size;\n\n    } //set_min_size\n\n    function set_bordered( _bordered:Bool ) : Bool {\n\n        if(handle != null) {\n            system.module.bordered( this, _bordered );\n        }\n\n        return bordered = _bordered;\n\n    } //set_bordered\n\n    function set_grab( _grab:Bool ) : Bool {\n\n        if(handle != null) {\n            system.module.grab( this, _grab );\n        }\n\n        return grab = _grab;\n\n    } //set_grab\n\n} //Window\n","package snow.system.window;\n\nimport snow.types.Types;\nimport snow.system.window.Window;\n\n#if (!macro && !display && !scribe)\n    private typedef WindowingModule = haxe.macro.MacroType<[snow.system.module.Module.assign('Windowing')]>;\n#end\n\n/** The window manager, accessed via `app.window` */\n@:allow(snow.Snow)\n@:allow(snow.system.window.Window)\nclass Windowing {\n\n        /** The list of windows in this manager */\n    public var window_list : Map<Int, Window>;\n        /** The list of window handles, pointing to id's in the `window_list` */\n    public var window_handles : WindowHandleMap;\n        /** The number of windows in this manager */\n    public var window_count : Int = 0;\n\n        /** access to snow for subsystems/windows */\n    @:noCompletion public var app : Snow;\n        /** The concrete implementation of the window system */\n    @:noCompletion public var module : snow.system.module.Windowing;\n\n\n        /** constructed internally, use `app.windowing` */\n    function new( _app:Snow ) {\n\n        app = _app;\n        window_list = new Map();\n        window_handles = new WindowHandleMap();\n\n        module = new snow.system.module.Windowing(this);\n\n        module.init();\n\n    } //new\n\n//Public facing API\n\n        /** Create a window with the given config. */\n    public function create( _config:WindowConfig ) : Window {\n\n        var _window = new Window( this, _config );\n\n            window_list.set( _window.id, _window );\n            window_handles.set( _window.handle, _window.id );\n            window_count++;\n\n            //handle any window system specifics that have to happen\n            //to this window when creating it, like enter/leave events\n        module.listen( _window );\n\n            //unless requested not to, give this window to the input\n            //system to listen for events and dispatch them as needed\n        if(_config.no_input == null || _config.no_input == false) {\n            app.input.listen( _window );\n        }\n\n        return _window;\n\n    } //create\n\n        /** Remove a window from the system, stopping events, etc.\n            Called from window.destroy()! Don't use manually unless manually controlling the list. */\n    function remove( _window:Window ) {\n\n        window_list.remove( _window.id );\n        window_handles.remove( _window.handle );\n        window_count--;\n\n        module.unlisten( _window );\n\n        if(_window.config.no_input == null || _window.config.no_input == false) {\n            app.input.unlisten( _window );\n        }\n\n    } //remove\n\n        /** Get a window instance from an window handle. */\n    @:noCompletion public function window_from_handle( _handle:WindowHandle ) : Window {\n\n        if(window_handles.exists(_handle)) {\n            var _id = window_handles.get(_handle);\n            return window_list.get(_id);\n        }\n\n        return null;\n\n    } //window_from_handle\n\n        /** Get a window instance from an ID. */\n    @:noCompletion public function window_from_id( _id:Int ) : Window {\n\n        return window_list.get(_id);\n\n    } //window_from_id\n\n//System helpers\n\n        /** Toggle vertical refresh. This is not window specific but context wide */\n    public function enable_vsync( _enable:Bool ) : Int {\n\n        return module.system_enable_vsync(_enable);\n\n    } //enable_vsync\n\n        /** Toggle the OS cursor. This is not window specific but application wide, when inside a window, the OS cursor is hidden. */\n    public function enable_cursor( _enable:Bool ) : Void {\n\n        module.system_enable_cursor(_enable);\n\n    } //enable_cursor\n\n        /** Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates. */\n    public function enable_cursor_lock( _enable:Bool ) : Void {\n\n        module.system_lock_cursor(_enable);\n\n    } //enable_cursor\n\n//Desktop API\n    //note that these only make sense on some platforms but will\n    //try and return valid values either way. Use the window itself for info\n\n        /** Get the number of displays present */\n    public function display_count() : Int {\n        return module.display_count();\n    } //display_count\n\n        /** Get the number of display modes present */\n    public function display_mode_count( display:Int ) : Int {\n        return module.display_mode_count(display);\n    } //display_mode_count\n\n        /** Get the native mode information of the display by index */\n    public function display_native_mode( display:Int ) : DisplayMode {\n        return module.display_native_mode(display);\n    } //display_native_mode\n\n        /** Get the current mode information of the display by index */\n    public function display_current_mode( display:Int ) : DisplayMode {\n        return module.display_current_mode(display);\n    } //display_current_mode\n\n        /** Get the information from a specific mode index, the index is obtained by iterating with a `display_mode_count` as the loop value */\n    public function display_mode( display:Int, mode_index:Int ) : DisplayMode {\n        return module.display_mode(display, mode_index);\n    } //display_mode\n\n        /** Get the bounds of the display by index */\n    public function display_bounds( display:Int ) : { x:Int, y:Int, width:Int, height:Int } {\n        return module.display_bounds(display);\n    } //display_bounds\n\n        /** Get the name of the display by index, where available */\n    public function display_name( display:Int ) : String {\n        return module.display_name(display);\n    } //display_name\n\n\n//Internal core API\n\n        /** Called by Snow when a system event is dispatched */\n    function on_event( _event:SystemEvent ) {\n\n        if(_event.type == SystemEventType.window) {\n\n            var _window_event = _event.window;\n\n            var _window = window_list.get( _window_event.window_id );\n\n            if(_window != null) {\n                _window.on_event( _window_event );\n            }\n\n        } //only window events\n\n    } //on_event\n\n        /** Called by Snow, process any window handling */\n    function update() {\n\n        module.update();\n\n        for(window in window_list) {\n            window.update();\n        }\n\n        for(window in window_list) {\n            if(window.auto_render) {\n                window.render();\n            }\n        }\n\n    } //update\n\n        /** Called by Snow, destroy everything. */\n    function destroy() {\n\n        module.destroy();\n\n    } //destroy\n\n\n} //Windowing\n\n\n#if snow_web\n\n    private typedef WindowHandleMap = Map<WindowHandle, Int>;\n\n#else\n\n    private class WindowHandleMap extends haxe.ds.BalancedTree<WindowHandle,Int> {\n\n        override function compare(k1:WindowHandle, k2:WindowHandle) {\n            if(k1 == null) return 1;\n            if(k2 == null) return 1;\n            if(k1 == k2) return 0;\n            if(k1 < k2) return -1;\n            return 1;\n        }\n\n    } //WindowHandleMap\n\n#end\n","package snow.types;\n\n#if !macro\n\nimport snow.Snow;\nimport snow.api.buffers.Uint8Array;\n\n//asset types\n\ntypedef Asset      = snow.system.assets.Asset.Asset;\ntypedef AssetBytes = snow.system.assets.Asset.AssetBytes;\ntypedef AssetText  = snow.system.assets.Asset.AssetText;\ntypedef AssetJSON  = snow.system.assets.Asset.AssetJSON;\ntypedef AssetImage = snow.system.assets.Asset.AssetImage;\n\ntypedef Key = snow.system.input.Keycodes.Keycodes;\ntypedef Scan = snow.system.input.Keycodes.Scancodes;\n\nenum Error {\n    error(value:Dynamic);\n    init(value:Dynamic);\n    windowing(value:Dynamic);\n    parse(value:Dynamic);\n}\n\n/** A platform identifier string */\n@:enum abstract Platform(String) from String to String {\n    var platform_windows = 'windows';\n    var platform_mac     = 'mac';\n    var platform_linux   = 'linux';\n    var platform_android = 'android';\n    var platform_ios     = 'ios';\n    var platform_web     = 'web';\n}\n\n/** A platform identifier string */\n@:enum abstract OS(String) from String to String {\n    var os_windows = 'windows';\n    var os_mac     = 'mac';\n    var os_linux   = 'linux';\n    var os_android = 'android';\n    var os_ios     = 'ios';\n}\n\n/** A type to identify assets when stored as an Asset */\n@:enum abstract AssetType(Int) from Int to Int {\n\n    var unknown = 0;\n    var bytes   = 1;\n    var text    = 2;\n    var json    = 3;\n    var image   = 4;\n    var audio   = 5;\n\n    inline function toString() {\n        return switch(this) {\n            case unknown: 'unknown';\n            case bytes:   'bytes';\n            case text:    'text';\n            case json:    'json';\n            case image:   'image';\n            case audio:   'audio';\n            case _:       '$this';\n        }\n    } //toString\n\n} //AssetType\n\ntypedef IODataOptions = {\n\n    @:optional var binary:Bool;\n\n}\n\n\n/** Snow specific configurations, set from build config */\ntypedef SnowConfig = {\n\n        /** whether or not the core should run a loop at all, default: true */\n    @:optional var has_loop : Bool;\n        /** The default place to find the runtime config file. \n            Set this value to a blank string to disable the automatic\n            loading of the config json file. default: `config.json` */\n    @:optional var config_path : String;\n\n        /** The application specific package. i.e org.snowkit.snowapp\n            This should match the common format above,\n            the last part (snowapp) will be used as the app name,\n            the first parts (org.snowkit) will be used as the path.\n            This means for example, when storing a preference in an OS location,\n            it would be stored under <OS user path>/org.snowkit/snowapp/\n            This also means that it must obey the rules set out by app stores for bundle ID's,\n            general urls, file folder names, and https://wiki.libsdl.org/SDL_GetPrefPath#Remarks\n        */\n    @:optional var app_package : String;\n\n} //SnowConfig\n\n/** The runtime application config info */\ntypedef AppConfig = {\n\n        /** whether or not to create and run a default window, default: true */\n    @:optional var has_window   : Bool;\n        /** the window config for the default window, if `has_window` is true. default: see `WindowConfig` docs*/\n    @:optional var window       : WindowConfig;\n\n        /** The render config that specifies rendering and context backend specifics.  */\n    @:optional var render       : RenderConfig;\n\n        /** the user specific config, by default, read from a json file at runtime */\n    @:optional var runtime      : Dynamic;\n        /** config specific to the web target */\n    @:optional var web          : AppConfigWeb;\n        /** config specific to the native target */\n    @:optional var native       : AppConfigNative;\n\n} //AppConfig\n\ntypedef AppConfigWeb = {\n\n        /** If true, right clicking will consume the event on the canvas. `event.preventDefault` is used. default: true*/\n    @:optional var no_context_menu : Bool;\n\n        /** Any Key.* values stored in this array sent to the page will be consumed by snow. `event.preventDefault` is used.\n            Keys can be removed or added to the array at runtime. default:left,up,down,right,backspace,tab,delete */\n    @:optional var prevent_default_keys : Array<Int>;\n        /** If true, mouse wheel events sent to the page will be consumed by snow. `event.preventDefault` is used. default: true*/\n    @:optional var prevent_default_mouse_wheel : Bool;\n\n        /** If true, native fullscreen will be requested from the user.\n            If not, the canvas will fill the window size instead.\n            Take note : true fullscreen requests only work when driven by a user event (click/keys).\n            You cannot force fullscreen on web. default: false */\n    @:optional var true_fullscreen : Bool;\n\n} //AppConfigWeb\n\ntypedef AppConfigNative = {\n\n        /** The default length of a single stream buffer in bytes. default:176400, This is ~1 sec in 16 bit mono. */\n    @:optional var audio_buffer_length : Int;\n\n        /** The default number of audio buffers to use for a single stream. Set no less than 2, as it's a queue. See `Audio` docs. default:4 */\n    @:optional var audio_buffer_count : Int;\n\n} //AppConfigNative\n\ntypedef FileFilter = {\n\n        /** An extension for the filter. i.e `md`, `txt`, `png` or a special `*` for any file type.  */\n    var extension:String;\n        /** An optional description for this filter i.e `markdown files`, `text files`, `all files` */\n    @:optional var desc:String;\n\n} //FileFilter\n\n\n/** Information about an image file/data */\ntypedef ImageInfo = {\n\n        /** source asset id */\n    var id : String;\n        /** image width from source image */\n    var width : Int;\n        /** image height from source image */\n    var height : Int;\n        /** The actual width, used when image is automatically padded to POT */\n    var width_actual : Int;\n        /** The actual height, used when image is automatically padded to POT */\n    var height_actual : Int;\n        /** used bits per pixel */\n    var bpp : Int;\n        /** source bits per pixel */\n    var bpp_source : Int;\n        /** image pixel data */\n    var pixels : Uint8Array;\n\n} //ImageInfo\n\n/** The type of audio format */\n@:enum abstract AudioFormatType(Null<Int>) from Null<Int> to Null<Int> {\n\n    var unknown  = 0;\n    var ogg      = 1;\n    var wav      = 2;\n    var pcm      = 3;\n\n} //AudioFormatType\n\n\n    /** The platform specific implementation detail about the audio data */\ntypedef AudioDataInfo = {\n\n        /** the file length in bytes */\n    var length : Int;\n        /** the pcm uncompressed raw length in bytes */\n    var length_pcm : Int;\n        /** number of channels */\n    var channels : Int;\n        /** hz rate */\n    var rate : Int;\n        /** sound bitrate */\n    var bitrate : Int;\n        /** bits per sample, 8 / 16 */\n    var bits_per_sample : Int;\n        /** sound raw data */\n    var samples : Uint8Array;\n\n} //AudioDataInfo\n\n/** Information about an audio file/data */\ntypedef AudioInfo = {\n\n        /** file source id */\n    var id : String;\n        /** format. Use AudioFormatType */\n    var format : Int;\n        /** the platform audio data info */\n    var data : AudioDataInfo;\n        /** the platform audio handle for later manipulation */\n    var handle : AudioHandle;\n\n} //AudioInfo\n\n/** Information about an audio portion requested via assets */\ntypedef AudioDataBlob = {\n\n        /** True if the file has reached the end of the data in this blob */\n    var bytes : Uint8Array;\n        /** The data stored in this blob */\n    var complete : Bool;\n\n} //AudioDataBlob\n\n\n/** Config specific to the rendering context that would be used when creating windows */\ntypedef RenderConfig = {\n\n        /** Whether a stencil buffer should be created. default:false */\n    @:optional var depth : Bool;\n        /** Whether a stencil buffer should be created. default:false */\n    @:optional var stencil : Bool;\n        /** a value of `0`, `2`, `4`, `8` or other valid antialiasing flags. default: 0 */\n    @:optional var antialiasing : Int;\n\n        /** set the number of depth bits for the rendering to use. Unless you need to change this, don't. default: system */\n    @:optional var depth_bits   : Int;\n        /** set the number of red bits for the rendering to use. Unless you need to change this, don't. default: system */\n    @:optional var stencil_bits   : Int;\n\n        /** set the number of red bits for the rendering to use. Unless you need to change this, don't. default: 8 */\n    @:optional var red_bits   : Int;\n        /** set the number of green bits for the rendering to use. Unless you need to change this, don't. default: 8 */\n    @:optional var green_bits   : Int;\n        /** set the number of blue bits for the rendering to use. Unless you need to change this, don't. default: 8 */\n    @:optional var blue_bits   : Int;\n        /** set the number of alpha bits for the rendering to use. Unless you need to change this, don't. default: 8 */\n    @:optional var alpha_bits   : Int;\n\n        /** OpenGL render context specific settings */\n    @:optional var opengl : RenderConfigOpenGL;\n\n} //RenderConfig\n\n\n/** A type of OpenGL context profile to request. see RenderConfigOpenGL for info */\n@:enum abstract OpenGLProfile(Int) from Int to Int {\n\n    var compatibility = 0;\n    var core = 1;\n\n    inline function toString() {\n        return switch(this) {\n            case compatibility: 'compatibility';\n            case core:          'core';\n            case _:             '$this';\n        }\n    } //toString\n\n} //OpenGLProfile\n\n\n@:noCompletion typedef WindowingConfig = {\n    config:WindowConfig,\n    render_config:RenderConfig\n}\n\n/** Config specific to an OpenGL rendering context.\n    Note that these are hints to the system,\n    you must always check the values after initializing\n    for what you actually received. The OS/driver decides. */\ntypedef RenderConfigOpenGL = {\n\n        /** The major OpenGL version to request */\n    @:optional var major : Int;\n        /** The minor OpenGL version to request */\n    @:optional var minor : Int;\n        /** The OpenGL context profile to request */\n    @:optional var profile : OpenGLProfile;\n\n} //RenderConfigOpenGL\n\n/** Window configuration information for creating windows */\ntypedef WindowConfig = {\n\n        /** create in fullscreen, default: false, `mobile` true */\n    @:optional var fullscreen   : Bool;\n        /** If true, the users native desktop resolution will be used for fullscreen instead of the specified window size. default: true */\n    @:optional var fullscreen_desktop : Bool;\n        /** allow the window to be resized, default: true */\n    @:optional var resizable    : Bool;\n        /** create as a borderless window, default: false */\n    @:optional var borderless   : Bool;\n        /** window x at creation. Leave this alone to use the OS default. */\n    @:optional var x            : Int;\n        /** window y at creation. Leave this alone to use the OS default. */\n    @:optional var y            : Int;\n        /** window width at creation, default: 960 */\n    @:optional var width        : Int;\n        /** window height at creation, default: 640 */\n    @:optional var height       : Int;\n        /** window title, default: 'snow app' */\n    @:optional var title        : String;\n        /** disables input arriving at/from this window. default: false */\n    @:optional var no_input     : Bool;\n\n} //WindowConfig\n\n/** A system event */\ntypedef SystemEvent = {\n\n        /** The type of system event this event is. SystemEventType */\n    @:optional var type : SystemEventType;\n        /** If type is `window` this will be populated, otherwise null */\n    @:optional var window : WindowEvent;\n        /** If type is `input` this will be populated, otherwise null */\n    @:optional var input : InputEvent;\n        /** If type is `file` this will be populated, otherwise null */\n    @:optional var file : FileEvent;\n\n} //SystemEvent\n\n/** A system window event */\ntypedef WindowEvent = {\n\n        /** The type of window event this was. Use WindowEventType */\n    @:optional var type : WindowEventType;\n        /** The time in seconds that this event occured, useful for deltas */\n    @:optional var timestamp : Float;\n        /** The window id from which this event originated */\n    @:optional var window_id : Int;\n        /** The raw platform event data, only useful if you are implementing\n            a new platform or lack access to data from the system that snow does not expose */\n    @:optional var event : Dynamic;\n\n} //WindowEvent\n\n/** A system file watch event */\ntypedef FileEvent = {\n\n        /** The type of file watch event, modify/create/delete. Use FileEventType */\n    @:optional var type : FileEventType;\n        /** The time in seconds when this event was fired */\n    @:optional var timestamp : Float;\n        /** The absolute path that was notifying */\n    @:optional var path : String;\n\n} //FileEvent\n\n/** A system input event */\ntypedef InputEvent = {\n\n        /** The type of input event this was. Use InputEventType */\n    @:optional var type : InputEventType;\n        /** The time in seconds that this event occured, useful for deltas */\n    @:optional var timestamp : Float;\n        /** The window id from which this event originated */\n    @:optional var window_id : Int;\n        /** The raw platform event data, only useful if you are implementing\n            a new platform or lack access to data from the system that snow does not expose */\n    @:optional var event : Dynamic;\n\n} //InputEvent\n\n/** Information about a display mode */\ntypedef DisplayMode = {\n    format : Int,\n    refresh_rate : Int,\n    width : Int,\n    height : Int\n}\n\n    /** A platform window handle */\n#if snow_web\n    typedef WindowHandle = js.html.CanvasElement;\n#else\n    typedef WindowHandle = Null<Float>;\n#end //snow_web\n\n    /** A platform window handle */\n#if snow_web\n    typedef AudioHandle = Dynamic;\n#else\n    typedef AudioHandle = Null<Float>;\n#end //snow_web\n\n\n\n/** A text specific event event type */\n@:enum abstract TextEventType(Int) from Int to Int {\n\n/** An unknown text event */\n    var unknown    = 0;\n/** An edit text typing event */\n    var edit    = 1;\n/** An input text typing event */\n    var input   = 2;\n\n    inline function toString() {\n        return switch(this) {\n            case unknown: 'unknown';\n            case edit:    'edit';\n            case input:   'input';\n            case _:       '$this';\n        }\n    } //toString\n\n} //TextEventType\n\n/** A gamepad device event type */\n@:enum abstract GamepadDeviceEventType(Int) from Int to Int {\n\n/** A unknown device event */\n    var unknown             = 0;\n/** A device added event */\n    var device_added        = 1;\n/** A device removed event */\n    var device_removed      = 2;\n/** A device was remapped */\n    var device_remapped     = 3;\n\n    inline function toString() {\n        return switch(this) {\n            case unknown:         'unknown';\n            case device_added:    'device_added';\n            case device_removed:  'device_removed';\n            case device_remapped: 'device_remapped';\n            case _:               '$this';\n        }\n    } //toString\n\n} //GamepadDeviceEventType\n\n\n/** Input modifier state */\ntypedef ModState = {\n\n        /** no modifiers are down */\n    var none : Bool;\n        /** left shift key is down */\n    var lshift : Bool;\n        /** right shift key is down */\n    var rshift : Bool;\n        /** left ctrl key is down */\n    var lctrl : Bool;\n        /** right ctrl key is down */\n    var rctrl : Bool;\n        /** left alt/option key is down */\n    var lalt : Bool;\n        /** right alt/option key is down */\n    var ralt : Bool;\n        /** left windows/command key is down */\n    var lmeta : Bool;\n        /** right windows/command key is down */\n    var rmeta : Bool;\n        /** numlock is enabled */\n    var num : Bool;\n        /** capslock is enabled */\n    var caps : Bool;\n        /** mode key is down */\n    var mode : Bool;\n        /** left or right ctrl key is down */\n    var ctrl : Bool;\n        /** left or right shift key is down */\n    var shift : Bool;\n        /** left or right alt/option key is down */\n    var alt : Bool;\n        /** left or right windows/command key is down */\n    var meta : Bool;\n\n} //ModState\n\n\n//Conversion helpers for native <-> snow events\n\n@:enum abstract SystemEventType(Int) from Int to Int {\n\n        //snow core events\n        //from platform i.e :\n        //se_unknown, se_init, se_ready etc\n\n        /** An unknown system event */\n    var unknown                    = 0;\n        /** An internal system init event */\n    var init                       = 1;\n        /** An internal system ready event */\n    var ready                      = 2;\n        /** An internal system update event */\n    var update                     = 3;\n        /** An system shutdown event */\n    var shutdown                   = 4;\n        /** An system window event */\n    var window                     = 5;\n        /** An system input event */\n    var input                      = 6;\n\n        //snow application events\n\n        /** An system quit event. Initiated by user, can be cancelled/ignored */\n    var quit                       = 7;\n        /** An system terminating event, called by the OS (mobile specific) */\n    var app_terminating            = 8;\n        /** An system low memory event, clear memory if you can. Called by the OS (mobile specific) */\n    var app_lowmemory              = 9;\n        /** An event for just before the app enters the background, called by the OS (mobile specific) */\n    var app_willenterbackground    = 10;\n        /** An event for when the app enters the background, called by the OS (mobile specific) */\n    var app_didenterbackground     = 11;\n        /** An event for just before the app enters the foreground, called by the OS (mobile specific) */\n    var app_willenterforeground    = 12;\n        /** An event for when the app enters the foreground, called by the OS (mobile specific) */\n    var app_didenterforeground     = 13;\n        /** An event for when the a file watch notification occurs */\n    var file                       = 14;\n\n\n    inline function toString() {\n        return switch(this) {\n            case unknown:   'unknown';\n            case init:      'init';\n            case ready:     'ready';\n            case update:    'update';\n            case shutdown:  'shutdown';\n            case window:    'window';\n            case input:     'input';\n            case quit:      'quit';\n            case app_terminating:           'app_terminating';\n            case app_lowmemory:             'app_lowmemory';\n            case app_willenterbackground:   'app_willenterbackground';\n            case app_didenterbackground:    'app_didenterbackground';\n            case app_willenterforeground:   'app_willenterforeground';\n            case app_didenterforeground:    'app_didenterforeground';\n            case file:      'file';\n            case _:         '$this';\n        }\n    } //toString\n\n} //SystemEventType\n\n@:enum abstract WindowEventType(Int) from Int to Int {\n\n        //window events,\n        // from native :\n        // we_unknown, we_created, we_shown, we_hidden, we_exposed, we_moved, we_resized, we_size_changed, we_minimized, we_maximized, we_restored, we_enter, we_leave, we_focus_gained, we_focus_lost, we_close, we_destroy\n\n        /** An unknown window event */\n    var unknown          = 0;\n        /** A window is created */\n    var created          = 1;\n        /** A window is shown */\n    var shown            = 2;\n        /** A window is hidden */\n    var hidden           = 3;\n        /** A window is exposed */\n    var exposed          = 4;\n        /** A window is moved */\n    var moved            = 5;\n        /** A window is resized, by the user or code. */\n    var resized          = 6;\n        /** A window is resized, by the OS or internals. */\n    var size_changed     = 7;\n        /** A window is minimized */\n    var minimized        = 8;\n        /** A window is maximized */\n    var maximized        = 9;\n        /** A window is restored */\n    var restored         = 10;\n        /** A window is entered by a mouse */\n    var enter            = 11;\n        /** A window is left by a mouse */\n    var leave            = 12;\n        /** A window has gained focus */\n    var focus_gained     = 13;\n        /** A window has lost focus */\n    var focus_lost       = 14;\n        /** A window is being closed/hidden */\n    var close            = 15;\n        /** A window is being destroyed */\n    var destroy          = 16;\n\n    inline function toString() {\n        return switch(this) {\n            case unknown:       'unknown';\n            case created:       'created';\n            case shown:         'shown';\n            case hidden:        'hidden';\n            case exposed:       'exposed';\n            case moved:         'moved';\n            case resized:       'resized';\n            case size_changed:  'size_changed';\n            case minimized:     'minimized';\n            case maximized:     'maximized';\n            case restored:      'restored';\n            case enter:         'enter';\n            case leave:         'leave';\n            case focus_gained:  'focus_gained';\n            case focus_lost:    'focus_lost';\n            case close:         'close';\n            case destroy:       'destroy';\n            case _:             '$this';\n        }\n    } //toString\n\n} //WindowEvent\n\n@:enum abstract InputEventType(Int) from Int to Int {\n\n        //Input events\n        //from native :\n        //ie_unknown, ie_key, ie_mouse, ie_touch, ie_joystick, ie_controller\n\n        /** An unknown input event */\n    var unknown        = 0;\n        /** An keyboard input event */\n    var key            = 1;\n        /** An mouse input event */\n    var mouse          = 2;\n        /** An touch input event */\n    var touch          = 3;\n        /** An joystick input event. On mobile, accellerometer is a joystick (for now) */\n    var joystick       = 4;\n        /** An controller input event. Use these instead of joystick on desktop. */\n    var controller     = 5;\n\n\n    inline function toString() {\n        return switch(this) {\n            case unknown:       'unknown';\n            case key:           'key';\n            case mouse:         'mouse';\n            case touch:         'touch';\n            case joystick:      'joystick';\n            case controller:    'controller';\n            case _:             '$this';\n        }\n    } //toString\n\n} //InputEvent\n\n@:enum abstract FileEventType(Int) from Int to Int {\n\n        //File watch events\n        //from native :\n        //fe_unknown, fe_modify, fe_remove, fe_create, fe_drop\n\n        /** An unknown watch event */\n    var unknown    = 0;\n        /** An event for when the a file is modified */\n    var modify     = 1;\n        /** An event for when the a file is removed */\n    var remove     = 2;\n        /** An event for when the a file is created */\n    var create     = 3;\n        /** An event for when the a file is dropped on a window */\n    var drop       = 4;\n\n    inline function toString() {\n        return switch(this) {\n            case unknown:   'unknown';\n            case modify:    'modify';\n            case remove:    'remove';\n            case create:    'create';\n            case drop:      'drop';\n            case _:         '$this';\n        }\n    } //toString\n\n} //FileEvent\n\n\n#end\n","\npackage utils;\n\nimport luxe.Vector;\n\nclass VectorUtil\n{\n\n    public static function x_int( v:Vector ):Int\n    {\n        return Math.floor(v.x);\n    }\n\n    public static function y_int( v:Vector ):Int\n    {\n        return Math.floor(v.y);\n    }\n\n\n    public static function get_length2D( v:Vector ):Float\n    {\n\n        return Math.sqrt( v.x * v.x + v.y * v.y );\n\n    } //length2D\n\n\n    public static function set_length2D( v:Vector, value:Float ):Vector\n    {\n        v = normalize2D(v);\n        v = multiplyScalar2D(v , value);\n        return v;\n\n    } //length2D\n\n    \n    public static function set_angle_xy( v:Vector, value:Float ):Vector {\n\n        var len:Float = get_length2D(v);\n\n        v.set_xy(Math.cos(value) * len, Math.sin(value) * len);\n\n        return v;\n\n    } // set_angle_xy\n\n    public static function get_angle_xy( v:Vector ):Float {\n\n        return Math.atan2(v.y, v.x);\n\n    } // get_angle_xy\n\n    public static function normalize2D( v:Vector ):Vector\n    {\n\n        if ( get_length2D(v) != 0 ) {\n\n            // v.set_xy( v.x / get_length2D(v), v.y / get_length2D(v) );\n            v.x = v.x / get_length2D(v);\n            v.y = v.y / get_length2D(v);\n\n        } else {\n\n            // v.set_xy(0, 0);\n            v.x = 0;\n            v.y = 0;\n\n        }\n\n        return v;\n    } //normalize2D\n\n    public static function multiplyScalar2D( v:Vector, value:Float ):Vector {\n\n        v.set_xy( v.x * value, v.y * value );\n\n        return v;\n\n    } //multiplyScalar2D\n\n\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage;\n\n// Can't enable @:coreApi because some fields are now inline getters\n// @:coreApi\n@:keepInit\nextern class Math\n{\n\tstatic var PI(default,null) : Float;\n\n\tstatic var NEGATIVE_INFINITY(get, null) : Float;\n\tprivate static inline function get_NEGATIVE_INFINITY () : Float {\n\t\treturn -(untyped __js__(\"Infinity\"));\n\t}\n\n\tstatic var POSITIVE_INFINITY(get,null) : Float;\n\tprivate static inline function get_POSITIVE_INFINITY () : Float {\n\t\treturn (untyped __js__(\"Infinity\"));\n\t}\n\n\tstatic var NaN(get, null) : Float;\n\tprivate static inline function get_NaN () : Float {\n\t\treturn (untyped __js__(\"NaN\"));\n\t}\n\n\tstatic function abs(v:Float):Float;\n\tstatic function acos(v:Float):Float;\n\tstatic function asin(v:Float):Float;\n\tstatic function atan(v:Float):Float;\n\tstatic function atan2(y:Float, x:Float):Float;\n\tstatic function ceil(v:Float):Int;\n\tstatic function cos(v:Float):Float;\n\tstatic function exp(v:Float):Float;\n\tstatic function floor(v:Float):Int;\n\tstatic function log(v:Float):Float;\n\tstatic function max(a:Float, b:Float):Float;\n\tstatic function min(a:Float, b:Float):Float;\n\tstatic function pow(v:Float, exp:Float):Float;\n\tstatic function random() : Float;\n\tstatic function round(v:Float):Int;\n\tstatic function sin(v:Float):Float;\n\tstatic function sqrt(v:Float):Float;\n\tstatic function tan(v:Float):Float;\n\n\tstatic inline function ffloor( v : Float ) : Float {\n\t\treturn floor(v);\n\t}\n\n\tstatic inline function fceil( v : Float ) : Float {\n\t\treturn ceil(v);\n\t}\n\n\tstatic inline function fround( v : Float ) : Float {\n\t\treturn round(v);\n\t}\n\n\tstatic inline function isFinite( f : Float ) : Bool {\n\t\treturn (untyped __js__(\"isFinite\"))(f);\n\t}\n\n\tstatic inline function isNaN( f : Float ) : Bool {\n\t\treturn (untyped __js__(\"isNaN\"))(f);\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __feature__(\"Type.resolveClass\", $hxClasses[\"Math\"] = Math);\n\t}\n}\n"],
"names":[],
"mappings":"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AC3C,DAAG;EAAU,DAAG;EAAU,DAAG;EAAW,DAAG;EAC3C,DAAG;EAAU,DAAG;EAAU,DAAG;EAAW,DAAG;EAC3C,DAAG;EAAU,DAAG;EAAU,DAAG;EAAW,DAAG;EAEjD,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI;EACvF,DAAG,EAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AAAI,AAAM,AAAI,AA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6CACA;wCACA;4CAEA;6CACA;2CACA;yCAEA;wCACA;wCACA;yCACA;wCACA;4CACA;8CACA;+CACA;4CACA;wCACA;uCACA;mCCyMW;sCAEA;oCAKA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCAEA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCAEA;qCACA;wCACA;kCACA;oCACA;oCAEA;qCACA;0CACA;2CACA;wCAgBA;wCAcL;wCACA;yCACA;oCAmBA;oCACA;qCACA;oCACA;uCAEA;iCAEA;iCACA;iCACA;iCACA;iCACA;iCACA;iCACA;iCACA;iCACA;kCACA;kCACA;kCACA;0CAEA;yCACA;oCACA;qCAGA;mCACA;qCACA;wCACA;kCACA;uCACA;oCACA;mCACA;mCACA;iCACA;2CAGA;wCACA;0CACA;uCACA;sCACA;uCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;wCACA;6CAaA;0CAGA;oCAKA;wCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;sCACA;mCACA;mCACA;qCACA;mCACA;oCAGA;mCACA;kCACA;mCACA;oCACA;mCACA;mCACA;uCACA;yCACA;uCAOA;6CACA;6CAGA;6CACA;6CAGA;6CACA;6CACA;6CACA;6CACA;6CACA;6CACA;oCAEA;oCAEA;oCAEA;oCAEA;oCAEA;oCAEA;oCAEA;oCAEA;oCAEA;uCAEA;qCACA;qCACA;oCACA;oCACA;sCACA;wCACA;kCACA;mCACA;yCACA;oCACA;oCACA;oCAEA;qCACA;iDACA;+CACA;2CACA;8CACA;2CACA;4CACA;2CACA;4CACA;qCACA;2CACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;qCACA;uCACA;yCACA;sCACA;yCACA;2CACA;8CACA;6CACA;gDACA;uCACA;sCACA;uCACA;oCACA;wCACA;0CACA;2CACA;0CACA;wCACA;6CACA;6CACA;2CACA;2CACA;uCACA;4CACA;wCACA;uCACA;yCACA;6CACA;oCAEA;qCACA;mCAEA;oCAEA;oCACA;qCACA;mCAEA;oCAEA;mCAKA;wCAOA;wCACA;wCACA;wCACA;wCACA;0CACA;kCACA;mCACA;yCACA;uCACA;wCACA;sCACA;sCACA;yCACA;sCACA;yCACA;2CACA;6CAKA;2CACA;4CAGA;6CAEA;2CACA;yCACA;oCACA;oCACA;mCAEA;mCACA;6CAEH,5CACtC,AAAM,AAAM,AAAM,AACllE,AAAM,AAAM,AAAM,AAAM,AAAM,AAC9B,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAC5D,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAAM,AACN,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAClE,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAAM,AAClE,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA;qCAt2BkD;mCAEA;oCACA;uCACA;iCACA;mCACA;qCACA;sCACA;kCACA;qCACA;oCACA;uCACA;mCACA;uCACA;wCACA;sCACA;kCACA;mCACA;mCACA;oCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;uCACA;kCACA;oCACA;qCACA;sCACA;gCACA;yCAIA;uCACA;0CACA;mCACA;wCACA;uCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;sCAEP,rCAAU;gCAEV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;gCACV,/BAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;yCAEV,xCAAU;wCACV,vCAAU;mCACV,lCAAU;oCACV,nCAAU;kCACV,jCAAU;oCACV,nCAAU;uCACV;iCACA,hCAAU;sCACV,rCAAU;mCACV,lCAAU;kCACV,jCAAU;kCACV,jCAAU;gCACV,/BAAU;0CAEV,zCAAU;uCACV,tCAAU;yCACV,xCAAU;sCACV,rCAAU;qCACV,pCAAU;sCACV,rCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;uCACV,tCAAU;yCAEV,xCAAU;mCACV,lCAAU;uCACV,tCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;iCACV,hCAAU;qCACV,pCAAU;kCACV,jCAAU;kCACV,jCAAU;oCACV,nCAAU;kCACV,jCAAU;mCACV,lCAAU;kCACV,jCAAU;iCACV,hCAAU;kCACV,jCAAU;mCACV,lCAAU;kCACV,jCAAU;kCACV,jCAAU;sCACV,rCAAU;wCACV,vCAAU;sCACV,rCAAU;4CACV,3CAAU;sCAEV,rCAAU;oCACV,nCAAU;oCACV,nCAAU;mCACV,lCAAU;mCACV,lCAAU;qCACV,pCAAU;uCACV,tCAAU;iCACV,hCAAU;kCACV,jCAAU;wCACV,vCAAU;mCACV,lCAAU;mCACV,lCAAU;mCAEV,lCAAU;oCACV,nCAAU;gDACV,/CAAU;8CACV,7CAAU;0CACV,zCAAU;6CACV,5CAAU;0CACV,zCAAU;2CACV,1CAAU;0CACV,zCAAU;2CACV,1CAAU;oCACV,nCAAU;0CACV,zCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;kCACV,jCAAU;oCACV,nCAAU;sCACV,rCAAU;wCACV,vCAAU;qCACV,pCAAU;wCACV,vCAAU;0CACV,zCAAU;6CACV,5CAAU;4CACV,3CAAU;+CACV,9CAAU;sCACV,rCAAU;qCACV,pCAAU;sCACV,rCAAU;mCACV,lCAAU;uCACV,tCAAU;yCACV,xCAAU;0CACV,zCAAU;yCACV,xCAAU;uCACV,tCAAU;4CACV,3CAAU;4CACV,3CAAU;0CACV,zCAAU;0CACV,zCAAU;sCACV,rCAAU;2CACV,1CAAU;uCACV,tCAAU;sCACV,rCAAU;wCACV,vCAAU;4CACV,3CAAU;mCAEV,lCAAU;oCACV,nCAAU;kCACV,jCAAU;mCACV,lCAAU;mCACV,lCAAU;oCACV,nCAAU;kCACV,jCAAU;mCACV,lCAAU;kCAEV,jCAAU;uCAEV,tCAAU;uCACV,tCAAU;uCACV,tCAAU;uCACV,tCAAU;uCACV,tCAAU;yCACV,xCAAU;iCACV,hCAAU;kCACV,jCAAU;wCACV,vCAAU;sCACV,rCAAU;uCACV,tCAAU;qCACV,pCAAU;qCACV,pCAAU;wCACV,vCAAU;qCACV,pCAAU;wCACV,vCAAU;0CACV,zCAAU;4CAEV,3CAAU;0CACV,zCAAU;2CACV,1CAAU;4CACV,3CAAU;0CACV,zCAAU;wCACV,vCAAU;mCACV,lCAAU;mCACV,lCAAU;gDCiDxB,/CAAC,AAAe;8CMqBS;gDACA;8CACA;oCAGA;mCACA;uCACA;wCACA;uCACA;4CACA;0CACA;kCAaA;iCACA;uCACA;iDACA;uCACA;iDACA;uCACA;iDACA;uCAKA;iDACA;gDACA;sCAOA;4CACA;gDACA;kDACA;2CAGA;mDACA;2CAGA;2CACA;6CACA;6CACA;4CACA;sDACA;4CACA;sDACA;yCACA;0CAGA;kDACA;kDACA;0DACA;yCAEA;yCACA;0CACA;yCAEA;0CACA;mDAEA;mCAGA;kCACA;4CACA;uCAcA;mCACA;oCACA;0CACA;wCACA;0CACA;iDACA;sDACA;6CACA;sCAGA;0CACA;2CACA;+CACA;2CACA;gCAGA;iCACA;wCAGA;sDACA;sDACA;4CACA;wCACA;yCACA;6CACA;+CACA;wCACA;iDACA;0CACA;0CACA;qDACA;qDACA;yCACA;gDACA;+CACA;+CACA;+CACA;0DACA;0DACA;8CACA;qDACA;oDACA;sCACA;yCACA;+CAEA;6CACA;8CACA;4CACA;8CACA;+CACA;2CACA;sCACA;wCACA;uCACA;wCACA;wCACA;0CACA;kDACA;mDAEA;gDACA;4CACA;qCACA;mDACA;oDACA;wDAQA;uCAGA;qCACA;oCACA;kDAGC;kCAGD;2CACA;mCACA;4CACA;iCACA;0CACA;mCACA;6CAGA;mCACA;iCACA;kCACA;uCACA;6CACA;oDAIA;oDACA;kDACA;6CAGE;2CACA;gDACA;wDACA;iDACA;8DACA;4DACA;qDACA;0DACA;yCACA;2CACA;yCACA;6CACA;8CACA;6CACA;+CACA;sDACA;6CACA;mCAGF;kCACA;mCACA;oCACA;qCACA;sCACA;oCACA;oCACA;kCAIA;qCACA;kCACA;kCACA;oCACA;uCACA;uCACA;oCAGA;sCACA;qCACA;qCAGA;oCACA;oDAKA;mDACA;mDACA;kDACA;gDAGA;gDACA;4CACA;4CACA;wCAGA;qCACA;8CAEA;sDACA;yDACA;yDACA;yDACA;yDACA;yDACA;yDACA;uDACA;sCAGA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;4CACA;oCAGA;2CACA;6CACA;wCAGA;wCACA;wCACA;sCACA;sCACA;sCACA;kCACA;uCACA;uCACA;uCACA;wCACA;wCACA;wCACA;wCACA;0CACA;yDAGI;sDACA;wDACA;sDACA;4DACA;yDACA;gEACA;uDAGH;0CACA;4CAGD;uCAGA;0CACA;wCACA;qCACA;wCACA;sCACA;yCAGA;0CACA;mCAEA;qCACA;oCACA;+CACA;2CACA;4CACA;2CACA;gDAEA;iDACA;0DACA;mDACA;qDACA;oDACA;qDACA;qDACA;uDACA;gEAEc;gEACA;kEACA;0EACA;+CAEd;8CACA;gDACA;sDACA;kCAEA;kDAEW;+DACA;uEACA;+DACA;qDACA;iDAEX;kDACA;mDACA;2DAEA;iDAGA;4DACA;gDACA;gEACI;mDACJ;mCGxvBnC;+CKtEvB,AAAc;6CACd,AAAc;4CACd,AAAc;4CACd,AAAc;6CACd,AAAc;6CACd,AAAc;yDAwNd,AAAoB;gDACpB,AAAW;mDA+IX,AAAiB;gDAEjB,AAAc;iDAEd,AAAc;4DAiBd,AAA0B;iEAE1B,AAA0B;mEAE1B,AAA0B;oEAE1B,AAA0B;qDA+D1B,AAAiC;kDAEjC,AAAiC;mDAEjC,AAAiC;oDAEjC,AAAiC;sDAEjC,AAAiC;oDAEjC,AAAiC;mDAEjC,AAAiC;kDAKjC,AAAiC;6DAEjC,AAAiC;2DAEjC,AAAiC;qEAEjC,AAAiC;oEAEjC,AAAiC;qEAEjC,AAAiC;oEAEjC,AAAiC;kDAEjC,AAAiC;qDAiCjC,AAAuB;qDAEvB,AAAuB;mDAEvB,AAAuB;oDAEvB,AAAuB;qDAEvB,AAAuB;mDAEvB,AAAuB;qDAEvB,AAAuB;0DAEvB,AAAuB;uDAEvB,AAAuB;uDAEvB,AAAuB;sDAEvB,AAAuB;mDAEvB,AAAuB;mDAEvB,AAAuB;0DAEvB,AAAuB;wDAEvB,AAAuB;mDAEvB,AAAuB;qDAEvB,AAAuB;oDAkCvB,AAAqB;gDAErB,AAAqB;kDAErB,AAAqB;kDAErB,AAAqB;qDAErB,AAAqB;uDAErB,AAAqB;mDAwBrB,AAAiB;kDAEjB,AAAiB;kDAEjB,AAAiB;kDAEjB,AAAiB;gDAEjB,AAAiB;;;;"
}